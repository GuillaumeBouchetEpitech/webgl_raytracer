var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};

// src/local-framework/system/index.ts
var exports_system = {};
__export(exports_system, {
  utilities: () => {
    {
      return exports_utilities;
    }
  },
  rng: () => {
    {
      return exports_rng;
    }
  },
  metrics: () => {
    {
      return exports_metrics;
    }
  },
  math: () => {
    {
      return exports_math;
    }
  },
  controllers: () => {
    {
      return exports_controllers;
    }
  },
  browser: () => {
    {
      return exports_browser;
    }
  }
});

// src/local-framework/system/browser/index.ts
var exports_browser = {};
__export(exports_browser, {
  isWebWorkerSupported: () => {
    {
      return isWebWorkerSupported;
    }
  },
  isWebGL2Supported: () => {
    {
      return isWebGL2Supported;
    }
  },
  isNumber: () => {
    {
      return isNumber;
    }
  },
  isLetter: () => {
    {
      return isLetter;
    }
  },
  isAlphanumeric: () => {
    {
      return isAlphanumeric;
    }
  },
  GlobalVisibilityManager: () => {
    {
      return GlobalVisibilityManager;
    }
  },
  GlobalTouchManager: () => {
    {
      return GlobalTouchManager;
    }
  },
  GlobalPointerLockManager: () => {
    {
      return GlobalPointerLockManager;
    }
  },
  GlobalMouseManager: () => {
    {
      return GlobalMouseManager;
    }
  },
  GlobalKeyboardManager: () => {
    {
      return GlobalKeyboardManager;
    }
  },
  GlobalFullScreenManager: () => {
    {
      return GlobalFullScreenManager;
    }
  },
  AllKeyCodes: () => {
    {
      return AllKeyCodes;
    }
  }
});

// src/local-framework/system/browser/FullScreenManager.ts
var allRequestEvents = [
  "requestFullscreen",
  "webkitRequestFullscreen",
  "mozRequestFullScreen",
  "msRequestFullscreen"
];
var allChangeEvents = [
  "fullscreenchange",
  "webkitfullscreenchange",
  "mozfullscreenchange",
  "msfullscreenchange"
];

class FullScreenManager {
  _onFullScreenChangeCallbacks = [];
  _isInitialized = false;
  _initialize() {
    if (this._isInitialized) {
      return;
    }
    this._isInitialized = true;
    const onLockChange = () => {
      this._onFullScreenChangeCallbacks.forEach((callback) => callback());
    };
    for (const currEvent of allChangeEvents)
      document.addEventListener(currEvent, onLockChange, false);
  }
  isCompatible(inTargetElement) {
    for (const currEvent of allRequestEvents) {
      if (currEvent in inTargetElement) {
        return true;
      }
    }
    return false;
  }
  isFullScreen(inTargetElement) {
    return document.fullscreenElement === inTargetElement;
  }
  async requestFullScreen(inTargetElement) {
    if (this.isFullScreen(inTargetElement)) {
      return { success: false, message: "element already in full screen" };
    }
    this._initialize();
    for (const currEvent of allRequestEvents) {
      if (currEvent in inTargetElement) {
        inTargetElement[currEvent]();
        return { success: true, message: "request for full screen done" };
      }
    }
    return { success: false, message: "unsupported request for full screen" };
  }
  addOnFullScreenChange(inCallback) {
    this._onFullScreenChangeCallbacks.push(inCallback);
  }
  removeOnFullScreenChange(inCallback) {
    const index = this._onFullScreenChangeCallbacks.indexOf(inCallback);
    if (index < 0) {
      return;
    }
    this._onFullScreenChangeCallbacks.splice(index, 1);
  }
  removeAllCallbacks() {
    this._onFullScreenChangeCallbacks.length = 0;
  }
}
var GlobalFullScreenManager = new FullScreenManager;
// src/local-framework/system/browser/KeyCodes.ts
var AllKeyCodes = {
  Num0: 48,
  Num1: 49,
  Num2: 50,
  Num3: 51,
  Num4: 52,
  Num5: 53,
  Num6: 54,
  Num7: 55,
  Num8: 56,
  Num9: 57,
  A: 65,
  B: 66,
  C: 67,
  D: 68,
  E: 69,
  F: 70,
  G: 71,
  H: 72,
  I: 73,
  J: 74,
  K: 75,
  L: 76,
  M: 77,
  N: 78,
  O: 79,
  P: 80,
  Q: 81,
  R: 82,
  S: 83,
  T: 84,
  U: 85,
  V: 86,
  W: 87,
  X: 88,
  Y: 89,
  Z: 90,
  Semicolon: 186,
  Equal: 187,
  Comma: 188,
  Minus: 189,
  Period: 190,
  BackQuote: 192,
  BracketLeft: 219,
  Backslash: 220,
  BracketRight: 221,
  Quote: 222,
  Shift: 16,
  Ctrl: 17,
  Alt: 18,
  CapsLock: 20,
  Tab: 9,
  Enter: 13,
  Pause: 19,
  Escape: 27,
  Space: 32,
  PageUp: 33,
  PageDown: 34,
  End: 35,
  Home: 36,
  ArrowLeft: 37,
  ArrowUp: 38,
  ArrowRight: 39,
  ArrowDown: 40,
  PrintScreen: 44,
  Insert: 45,
  Delete: 46,
  ContextMenu: 93,
  ScrollLock: 145,
  F1: 112,
  F2: 113,
  F3: 114,
  F4: 115,
  F5: 116,
  F6: 117,
  F7: 118,
  F8: 119,
  F9: 120,
  F10: 121,
  F11: 122,
  F12: 123,
  F13: 124,
  F14: 125,
  F15: 126,
  F16: 127,
  F17: 128,
  F18: 129,
  F19: 130,
  F20: 131,
  F21: 132,
  F22: 133,
  F23: 134,
  F24: 135,
  NumPad0: 96,
  NumPad1: 97,
  NumPad2: 98,
  NumPad3: 99,
  NumPad4: 100,
  NumPad5: 101,
  NumPad6: 102,
  NumPad7: 103,
  NumPad8: 104,
  NumPad9: 105,
  NumPadMultiply: 106,
  NumPadAdd: 107,
  NumPadSubtract: 109,
  NumPadDecimal: 110,
  NumPadDivide: 111,
  NumLock: 144,
  NumPadComma: 194,
  NumPadEqual: 12
};
var isLetter = (key) => {
  return key >= AllKeyCodes.A && key <= AllKeyCodes.Z;
};
var isNumber = (key) => {
  return key >= AllKeyCodes.Num0 && key <= AllKeyCodes.Num9 || key >= AllKeyCodes.NumPad0 && key <= AllKeyCodes.NumPad9;
};
var isAlphanumeric = (key) => {
  return isNumber(key) || isLetter(key);
};

// src/local-framework/system/browser/KeyboardManager.ts
class KeyboardManager {
  _pressedKeysSet = new Set;
  _preventDefaultKeysSet = new Set;
  _activated = false;
  _handleKeyDown;
  _handleKeyUp;
  _onEvent;
  constructor() {
    const handleKeyDown = (event) => {
      const { keyCode } = event;
      if (this._onEvent) {
        this._onEvent();
      }
      if (this._preventDefaultKeysSet.has(keyCode)) {
        event.preventDefault();
      }
      this._pressedKeysSet.add(keyCode);
    };
    const handleKeyUp = (event) => {
      const { keyCode } = event;
      if (this._onEvent) {
        this._onEvent();
      }
      if (this._preventDefaultKeysSet.has(keyCode)) {
        event.preventDefault();
      }
      this._pressedKeysSet.delete(keyCode);
    };
    this._activated = false;
    this._handleKeyDown = handleKeyDown.bind(this);
    this._handleKeyUp = handleKeyUp.bind(this);
  }
  isPressed(...inKeys) {
    for (const key of inKeys) {
      if (this._pressedKeysSet.has(AllKeyCodes[key])) {
        return true;
      }
    }
    return false;
  }
  preventDefault(inKey) {
    this._preventDefaultKeysSet.add(AllKeyCodes[inKey]);
  }
  enableDefault(inKey) {
    this._preventDefaultKeysSet.delete(AllKeyCodes[inKey]);
  }
  activate() {
    if (this._activated) {
      return;
    }
    this._pressedKeysSet.clear();
    document.addEventListener("keydown", this._handleKeyDown);
    document.addEventListener("keyup", this._handleKeyUp);
    this._activated = true;
  }
  deactivate() {
    if (!this._activated) {
      return;
    }
    this._pressedKeysSet.clear();
    document.removeEventListener("keydown", this._handleKeyDown);
    document.removeEventListener("keyup", this._handleKeyUp);
    this._activated = false;
  }
  onEvent(callback) {
    this._onEvent = callback;
  }
}
var GlobalKeyboardManager = new KeyboardManager;
// src/local-framework/system/browser/MouseManager.ts
var AllMouseButtons = {
  Left: 0,
  Middle: 1,
  Right: 2
};

class MouseManager {
  _pressedButtonsSet = new Set;
  _activated = false;
  _handleMouseDown;
  _handleMouseUp;
  _handleMouseMove;
  _handleMouseWheel;
  _positionX = 0;
  _positionY = 0;
  _deltaX = 0;
  _deltaY = 0;
  _wheelDeltaY = 0;
  _onEvent;
  constructor() {
    const handleMouseDown = (event) => {
      if (this._onEvent) {
        this._onEvent();
      }
      this._positionX = event.pageX;
      this._positionY = event.pageY;
      this._pressedButtonsSet.add(event.button);
    };
    const handleMouseUp = (event) => {
      if (this._onEvent) {
        this._onEvent();
      }
      this._positionX = event.pageX;
      this._positionY = event.pageY;
      this._pressedButtonsSet.delete(event.button);
    };
    const handleMouseMove = (event) => {
      if (this._onEvent) {
        this._onEvent();
      }
      this._positionX = event.pageX;
      this._positionY = event.pageY;
      this._deltaX += event.movementX || event.mozMovementX || event.webkitMovementX || 0;
      this._deltaY += event.movementY || event.mozMovementY || event.webkitMovementY || 0;
    };
    const handleWheelEvent = (event) => {
      if (this._onEvent) {
        this._onEvent();
      }
      this._wheelDeltaY += event.deltaY || 0;
    };
    this._activated = false;
    this._handleMouseDown = handleMouseDown.bind(this);
    this._handleMouseUp = handleMouseUp.bind(this);
    this._handleMouseMove = handleMouseMove.bind(this);
    this._handleMouseWheel = handleWheelEvent.bind(this);
  }
  activate(domElement) {
    if (this._activated) {
      return;
    }
    this._pressedButtonsSet.clear();
    domElement.addEventListener("mousedown", this._handleMouseDown);
    domElement.addEventListener("mouseup", this._handleMouseUp);
    domElement.addEventListener("mousemove", this._handleMouseMove);
    domElement.addEventListener("wheel", this._handleMouseWheel);
    this._activated = true;
  }
  deactivate(domElement) {
    if (!this._activated) {
      return;
    }
    this._pressedButtonsSet.clear();
    domElement.removeEventListener("mousedown", this._handleMouseDown);
    domElement.removeEventListener("mouseup", this._handleMouseUp);
    domElement.removeEventListener("mousemove", this._handleMouseMove);
    domElement.removeEventListener("wheel", this._handleMouseWheel);
    this._activated = false;
  }
  isButtonPressed(inKey) {
    return this._pressedButtonsSet.has(AllMouseButtons[inKey]);
  }
  get positionX() {
    return this._positionX;
  }
  get positionY() {
    return this._positionY;
  }
  deltaX() {
    return this._deltaX;
  }
  deltaY() {
    return this._deltaY;
  }
  wheelDeltaY() {
    return this._wheelDeltaY;
  }
  resetDeltas() {
    this._deltaX = 0;
    this._deltaY = 0;
    this._wheelDeltaY = 0;
  }
  onEvent(callback) {
    this._onEvent = callback;
  }
}
var GlobalMouseManager = new MouseManager;
// src/local-framework/system/browser/PointerLockManager.ts
var allRequestEvents2 = [
  "requestPointerLock",
  "mozRequestPointerLock",
  "webkitRequestPointerLock"
];
var allExitEvents = [
  "exitPointerLock",
  "mozExitPointerLock",
  "webkitExitPointerLock"
];
var allStateEvents = [
  "pointerLockElement",
  "mozPointerLockElement",
  "webkitPointerLockElement"
];
var allChangeEvents2 = [
  { methodName: "onpointerlockchange", propertyName: "pointerlockchange" },
  {
    methodName: "onmozpointerlockchange",
    propertyName: "mozpointerlockchange"
  },
  {
    methodName: "onwebkitpointerlockchange",
    propertyName: "webkitpointerlockchange"
  }
];
var allErrorEvents = [
  { methodName: "onpointerlockerror", propertyName: "pointerlockerror" },
  { methodName: "onmozpointerlockerror", propertyName: "mozpointerlockerror" },
  {
    methodName: "onwebkitpointerlockerror",
    propertyName: "webkitpointerlockerror"
  }
];

class PointerLockManager {
  _onLockChangeCallbacks = [];
  _onLockErrorCallbacks = [];
  _timeSinceLastLockChange = 0;
  _latestRequestHtmlElement;
  _isInitialized = false;
  _initialize() {
    if (this._isInitialized) {
      return;
    }
    this._isInitialized = true;
    const onLockChange = () => {
      this._timeSinceLastLockChange = Date.now();
      this._onLockChangeCallbacks.forEach((callback) => callback());
    };
    const onLockError = (event) => {
      this._timeSinceLastLockChange = Date.now();
      this._onLockErrorCallbacks.forEach((callback) => callback(event));
    };
    for (const currEvent of allChangeEvents2) {
      if (currEvent.methodName in document) {
        document.addEventListener(currEvent.propertyName, onLockChange, false);
        break;
      }
    }
    for (const currEvent of allErrorEvents) {
      if (currEvent.methodName in document) {
        document.addEventListener(currEvent.propertyName, onLockError, false);
        break;
      }
    }
  }
  canBePointerLocked(inTargetElement) {
    for (const currEvent of allRequestEvents2) {
      if (currEvent in inTargetElement) {
        return true;
      }
    }
    return false;
  }
  isPointerLocked(inTargetElement) {
    for (const currEvent of allStateEvents) {
      if (currEvent in document) {
        return document[currEvent] === inTargetElement;
      }
    }
    return false;
  }
  async requestPointerLock(inTargetElement) {
    if (this.isPointerLocked(inTargetElement)) {
      return { success: false, message: "element already locked" };
    }
    this._initialize();
    if (this._timeSinceLastLockChange > 0) {
      const elapsedSecTime = (Date.now() - this._timeSinceLastLockChange) / 1000;
      if (elapsedSecTime < 1.1) {
        return {
          success: false,
          message: `request for lock was too early, time to wait: ${elapsedSecTime.toFixed(2)}sec`
        };
      }
    }
    this._timeSinceLastLockChange = Date.now();
    for (const currEvent of allRequestEvents2) {
      if (currEvent in inTargetElement) {
        const options = {
          unadjustedMovement: false
        };
        try {
          await inTargetElement[currEvent](options);
        } catch (err) {
          const elapsedSecTime = (Date.now() - this._timeSinceLastLockChange) / 1000;
          return {
            success: false,
            message: `request for lock was too early, time to wait: ${elapsedSecTime.toFixed(2)}sec`
          };
        }
        this._timeSinceLastLockChange = Date.now();
        return { success: true, message: "request for lock done" };
      }
    }
    return { success: false, message: "unsupported request for lock" };
  }
  allowPointerLockedOnClickEvent(inTargetElement) {
    if (inTargetElement === this._latestRequestHtmlElement) {
      return;
    }
    this._latestRequestHtmlElement = inTargetElement;
    const onClick = async () => {
      inTargetElement.removeEventListener("click", onClick);
      const result = await this.requestPointerLock(inTargetElement);
      this._latestRequestHtmlElement = undefined;
      if (!result.success) {
        this.allowPointerLockedOnClickEvent(inTargetElement);
      }
    };
    inTargetElement.addEventListener("click", onClick);
  }
  exitPointerLock() {
    for (const currEvent of allExitEvents) {
      if (currEvent in document) {
        document[currEvent]();
        break;
      }
    }
  }
  addOnLockChange(inCallback) {
    this._onLockChangeCallbacks.push(inCallback);
  }
  removeOnLockChange(inCallback) {
    const index = this._onLockChangeCallbacks.indexOf(inCallback);
    if (index < 0) {
      return;
    }
    this._onLockChangeCallbacks.splice(index, 1);
  }
  addOnLockError(inCallback) {
    this._onLockErrorCallbacks.push(inCallback);
  }
  removeOnLockError(inCallback) {
    const index = this._onLockErrorCallbacks.indexOf(inCallback);
    if (index < 0) {
      return;
    }
    this._onLockErrorCallbacks.splice(index, 1);
  }
  removeAllCallbacks() {
    this._onLockChangeCallbacks.length = 0;
    this._onLockErrorCallbacks.length = 0;
  }
}
var GlobalPointerLockManager = new PointerLockManager;
// src/local-framework/system/browser/TouchManager.ts
class TouchData {
  id;
  createdAt = Date.now();
  positionX;
  positionY;
  deltaX = 0;
  deltaY = 0;
  constructor(id, positionX, positionY) {
    this.id = id;
    this.positionX = positionX;
    this.positionY = positionY;
  }
  resetDelta() {
    this.deltaX = 0;
    this.deltaY = 0;
  }
}

class TouchManager {
  _activated = false;
  _allTouchDataMap = new Map;
  _allCachedTouchDataArray = [];
  _handleTouchStart;
  _handleTouchEnd;
  _handleTouchMove;
  _onEvent;
  constructor() {
    const handleTouchStart = (event) => {
      event.preventDefault();
      if (this._onEvent) {
        this._onEvent();
      }
      for (let ii = 0;ii < event.changedTouches.length; ++ii) {
        const { identifier, pageX, pageY } = event.changedTouches[ii];
        const newData = new TouchData(identifier, pageX, pageY);
        this._allTouchDataMap.set(`${identifier}`, newData);
        this._allCachedTouchDataArray.length = 0;
      }
    };
    const handleTouchEnd = (event) => {
      event.preventDefault();
      if (this._onEvent) {
        this._onEvent();
      }
      for (let ii = 0;ii < event.changedTouches.length; ++ii) {
        const { identifier } = event.changedTouches[ii];
        this._allTouchDataMap.delete(`${identifier}`);
        this._allCachedTouchDataArray.length = 0;
      }
    };
    const handleTouchMove = (event) => {
      event.preventDefault();
      if (this._onEvent) {
        this._onEvent();
      }
      for (let ii = 0;ii < event.changedTouches.length; ++ii) {
        const { identifier, pageX, pageY } = event.changedTouches[ii];
        const currData = this._allTouchDataMap.get(`${identifier}`);
        if (!currData) {
          continue;
        }
        const deltaX = pageX - currData.positionX;
        const deltaY = pageY - currData.positionY;
        currData.deltaX += deltaX;
        currData.deltaY += deltaY;
        currData.positionX = pageX;
        currData.positionY = pageY;
      }
    };
    this._activated = false;
    this._handleTouchStart = handleTouchStart.bind(this);
    this._handleTouchEnd = handleTouchEnd.bind(this);
    this._handleTouchMove = handleTouchMove.bind(this);
  }
  isSupported(inTargetElement) {
    return "ontouchstart" in inTargetElement;
  }
  activate(inTargetElement) {
    if (!this.isSupported(inTargetElement)) {
      return;
    }
    if (this._activated) {
      return;
    }
    this._allTouchDataMap.clear();
    this._allCachedTouchDataArray.length = 0;
    inTargetElement.addEventListener("touchstart", this._handleTouchStart);
    inTargetElement.addEventListener("touchend", this._handleTouchEnd);
    inTargetElement.addEventListener("touchcancel", this._handleTouchEnd);
    inTargetElement.addEventListener("touchmove", this._handleTouchMove, {
      passive: false
    });
    this._activated = true;
  }
  deactivate(inTargetElement) {
    if (!this._activated) {
      return;
    }
    this._allTouchDataMap.clear();
    this._allCachedTouchDataArray.length = 0;
    inTargetElement.removeEventListener("touchstart", this._handleTouchStart);
    inTargetElement.removeEventListener("touchend", this._handleTouchEnd);
    inTargetElement.removeEventListener("touchcancel", this._handleTouchEnd);
    inTargetElement.removeEventListener("touchmove", this._handleTouchMove);
    this._activated = false;
  }
  _refreshCache() {
    if (this._allCachedTouchDataArray.length === 0) {
      this._allCachedTouchDataArray = [...this._allTouchDataMap.values()];
    }
  }
  getTouchData() {
    this._refreshCache();
    return this._allCachedTouchDataArray;
  }
  resetDeltas() {
    this._refreshCache();
    this._allCachedTouchDataArray.forEach((item) => item.resetDelta());
  }
  onEvent(callback) {
    this._onEvent = callback;
  }
}
var GlobalTouchManager = new TouchManager;
// src/local-framework/system/browser/VisibilityManager.ts
class VisibilityManager {
  _activated = false;
  _onVisibilityChangeCallbacks = [];
  _handleVisibilityChange;
  constructor() {
    const handleVisibilityChange = () => {
      const isVisible = this.isVisible();
      this._onVisibilityChangeCallbacks.forEach((callback) => callback(isVisible));
    };
    this._handleVisibilityChange = handleVisibilityChange.bind(this);
  }
  activate() {
    if (!this.isSupported()) {
      return;
    }
    if (this._activated) {
      return;
    }
    document.addEventListener("visibilitychange", this._handleVisibilityChange, false);
    this._activated = true;
  }
  deactivate() {
    if (!this._activated) {
      return;
    }
    document.removeEventListener("visibilitychange", this._handleVisibilityChange, false);
    this._activated = false;
  }
  isSupported() {
    return "onvisibilitychange" in document;
  }
  isVisible() {
    return document.visibilityState === "visible";
  }
  addVisibilityChange(inCallback) {
    this._onVisibilityChangeCallbacks.push(inCallback);
  }
  removeVisibilityChange(inCallback) {
    const index = this._onVisibilityChangeCallbacks.indexOf(inCallback);
    if (index < 0) {
      return;
    }
    this._onVisibilityChangeCallbacks.splice(index, 1);
  }
  removeAllCallbacks() {
    this._onVisibilityChangeCallbacks.length = 0;
  }
}
var GlobalVisibilityManager = new VisibilityManager;
// src/local-framework/system/browser/isWebWorkerSupported.ts
var isWebWorkerSupported = () => {
  return !!window.Worker;
};
// src/local-framework/system/browser/isWebGL2Supported.ts
var isWebGL2Supported = () => {
  return !!window.WebGL2RenderingContext;
};
// src/local-framework/system/controllers/index.ts
var exports_controllers = {};
__export(exports_controllers, {
  FreeFlyController: () => {
    {
      return FreeFlyController;
    }
  }
});

// node_modules/gl-matrix/esm/common.js
var EPSILON = 0.000001;
var ARRAY_TYPE = typeof Float32Array !== "undefined" ? Float32Array : Array;
var RANDOM = Math.random;
var degree = Math.PI / 180;
if (!Math.hypot)
  Math.hypot = function() {
    var y = 0, i = arguments.length;
    while (i--) {
      y += arguments[i] * arguments[i];
    }
    return Math.sqrt(y);
  };

// node_modules/gl-matrix/esm/mat3.js
function create() {
  var out = new ARRAY_TYPE(9);
  if (ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
  }
  out[0] = 1;
  out[4] = 1;
  out[8] = 1;
  return out;
}

// node_modules/gl-matrix/esm/mat4.js
var exports_mat4 = {};
__export(exports_mat4, {
  transpose: () => {
    {
      return transpose;
    }
  },
  translate: () => {
    {
      return translate;
    }
  },
  targetTo: () => {
    {
      return targetTo;
    }
  },
  subtract: () => {
    {
      return subtract;
    }
  },
  sub: () => {
    {
      return sub;
    }
  },
  str: () => {
    {
      return str;
    }
  },
  set: () => {
    {
      return set;
    }
  },
  scale: () => {
    {
      return scale;
    }
  },
  rotateZ: () => {
    {
      return rotateZ;
    }
  },
  rotateY: () => {
    {
      return rotateY;
    }
  },
  rotateX: () => {
    {
      return rotateX;
    }
  },
  rotate: () => {
    {
      return rotate;
    }
  },
  perspectiveZO: () => {
    {
      return perspectiveZO;
    }
  },
  perspectiveNO: () => {
    {
      return perspectiveNO;
    }
  },
  perspectiveFromFieldOfView: () => {
    {
      return perspectiveFromFieldOfView;
    }
  },
  perspective: () => {
    {
      return perspective;
    }
  },
  orthoZO: () => {
    {
      return orthoZO;
    }
  },
  orthoNO: () => {
    {
      return orthoNO;
    }
  },
  ortho: () => {
    {
      return ortho;
    }
  },
  multiplyScalarAndAdd: () => {
    {
      return multiplyScalarAndAdd;
    }
  },
  multiplyScalar: () => {
    {
      return multiplyScalar;
    }
  },
  multiply: () => {
    {
      return multiply;
    }
  },
  mul: () => {
    {
      return mul;
    }
  },
  lookAt: () => {
    {
      return lookAt;
    }
  },
  invert: () => {
    {
      return invert;
    }
  },
  identity: () => {
    {
      return identity;
    }
  },
  getTranslation: () => {
    {
      return getTranslation;
    }
  },
  getScaling: () => {
    {
      return getScaling;
    }
  },
  getRotation: () => {
    {
      return getRotation;
    }
  },
  frustum: () => {
    {
      return frustum;
    }
  },
  fromZRotation: () => {
    {
      return fromZRotation;
    }
  },
  fromYRotation: () => {
    {
      return fromYRotation;
    }
  },
  fromXRotation: () => {
    {
      return fromXRotation;
    }
  },
  fromValues: () => {
    {
      return fromValues;
    }
  },
  fromTranslation: () => {
    {
      return fromTranslation;
    }
  },
  fromScaling: () => {
    {
      return fromScaling;
    }
  },
  fromRotationTranslationScaleOrigin: () => {
    {
      return fromRotationTranslationScaleOrigin;
    }
  },
  fromRotationTranslationScale: () => {
    {
      return fromRotationTranslationScale;
    }
  },
  fromRotationTranslation: () => {
    {
      return fromRotationTranslation;
    }
  },
  fromRotation: () => {
    {
      return fromRotation;
    }
  },
  fromQuat2: () => {
    {
      return fromQuat2;
    }
  },
  fromQuat: () => {
    {
      return fromQuat;
    }
  },
  frob: () => {
    {
      return frob;
    }
  },
  exactEquals: () => {
    {
      return exactEquals;
    }
  },
  equals: () => {
    {
      return equals;
    }
  },
  determinant: () => {
    {
      return determinant;
    }
  },
  create: () => {
    {
      return create2;
    }
  },
  copy: () => {
    {
      return copy;
    }
  },
  clone: () => {
    {
      return clone;
    }
  },
  adjoint: () => {
    {
      return adjoint;
    }
  },
  add: () => {
    {
      return add;
    }
  }
});
function create2() {
  var out = new ARRAY_TYPE(16);
  if (ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
  }
  out[0] = 1;
  out[5] = 1;
  out[10] = 1;
  out[15] = 1;
  return out;
}
function clone(a) {
  var out = new ARRAY_TYPE(16);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  var out = new ARRAY_TYPE(16);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function transpose(out, a) {
  if (out === a) {
    var a01 = a[1], a02 = a[2], a03 = a[3];
    var a12 = a[6], a13 = a[7];
    var a23 = a[11];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a01;
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a02;
    out[9] = a12;
    out[11] = a[14];
    out[12] = a03;
    out[13] = a13;
    out[14] = a23;
  } else {
    out[0] = a[0];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a[1];
    out[5] = a[5];
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a[2];
    out[9] = a[6];
    out[10] = a[10];
    out[11] = a[14];
    out[12] = a[3];
    out[13] = a[7];
    out[14] = a[11];
    out[15] = a[15];
  }
  return out;
}
function invert(out, a) {
  var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32;
  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
  if (!det) {
    return null;
  }
  det = 1 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
  return out;
}
function adjoint(out, a) {
  var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
  return out;
}
function determinant(a) {
  var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32;
  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
}
function multiply(out, a, b) {
  var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
  var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[4];
  b1 = b[5];
  b2 = b[6];
  b3 = b[7];
  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[8];
  b1 = b[9];
  b2 = b[10];
  b3 = b[11];
  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[12];
  b1 = b[13];
  b2 = b[14];
  b3 = b[15];
  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  return out;
}
function translate(out, a, v) {
  var x = v[0], y = v[1], z = v[2];
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;
  if (a === out) {
    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
  } else {
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a03;
    out[4] = a10;
    out[5] = a11;
    out[6] = a12;
    out[7] = a13;
    out[8] = a20;
    out[9] = a21;
    out[10] = a22;
    out[11] = a23;
    out[12] = a00 * x + a10 * y + a20 * z + a[12];
    out[13] = a01 * x + a11 * y + a21 * z + a[13];
    out[14] = a02 * x + a12 * y + a22 * z + a[14];
    out[15] = a03 * x + a13 * y + a23 * z + a[15];
  }
  return out;
}
function scale(out, a, v) {
  var x = v[0], y = v[1], z = v[2];
  out[0] = a[0] * x;
  out[1] = a[1] * x;
  out[2] = a[2] * x;
  out[3] = a[3] * x;
  out[4] = a[4] * y;
  out[5] = a[5] * y;
  out[6] = a[6] * y;
  out[7] = a[7] * y;
  out[8] = a[8] * z;
  out[9] = a[9] * z;
  out[10] = a[10] * z;
  out[11] = a[11] * z;
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
function rotate(out, a, rad, axis) {
  var x = axis[0], y = axis[1], z = axis[2];
  var len = Math.hypot(x, y, z);
  var s, c, t;
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;
  var b00, b01, b02;
  var b10, b11, b12;
  var b20, b21, b22;
  if (len < EPSILON) {
    return null;
  }
  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c;
  a00 = a[0];
  a01 = a[1];
  a02 = a[2];
  a03 = a[3];
  a10 = a[4];
  a11 = a[5];
  a12 = a[6];
  a13 = a[7];
  a20 = a[8];
  a21 = a[9];
  a22 = a[10];
  a23 = a[11];
  b00 = x * x * t + c;
  b01 = y * x * t + z * s;
  b02 = z * x * t - y * s;
  b10 = x * y * t - z * s;
  b11 = y * y * t + c;
  b12 = z * y * t + x * s;
  b20 = x * z * t + y * s;
  b21 = y * z * t - x * s;
  b22 = z * z * t + c;
  out[0] = a00 * b00 + a10 * b01 + a20 * b02;
  out[1] = a01 * b00 + a11 * b01 + a21 * b02;
  out[2] = a02 * b00 + a12 * b01 + a22 * b02;
  out[3] = a03 * b00 + a13 * b01 + a23 * b02;
  out[4] = a00 * b10 + a10 * b11 + a20 * b12;
  out[5] = a01 * b10 + a11 * b11 + a21 * b12;
  out[6] = a02 * b10 + a12 * b11 + a22 * b12;
  out[7] = a03 * b10 + a13 * b11 + a23 * b12;
  out[8] = a00 * b20 + a10 * b21 + a20 * b22;
  out[9] = a01 * b20 + a11 * b21 + a21 * b22;
  out[10] = a02 * b20 + a12 * b21 + a22 * b22;
  out[11] = a03 * b20 + a13 * b21 + a23 * b22;
  if (a !== out) {
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }
  return out;
}
function rotateX(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];
  if (a !== out) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }
  out[4] = a10 * c + a20 * s;
  out[5] = a11 * c + a21 * s;
  out[6] = a12 * c + a22 * s;
  out[7] = a13 * c + a23 * s;
  out[8] = a20 * c - a10 * s;
  out[9] = a21 * c - a11 * s;
  out[10] = a22 * c - a12 * s;
  out[11] = a23 * c - a13 * s;
  return out;
}
function rotateY(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];
  if (a !== out) {
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }
  out[0] = a00 * c - a20 * s;
  out[1] = a01 * c - a21 * s;
  out[2] = a02 * c - a22 * s;
  out[3] = a03 * c - a23 * s;
  out[8] = a00 * s + a20 * c;
  out[9] = a01 * s + a21 * c;
  out[10] = a02 * s + a22 * c;
  out[11] = a03 * s + a23 * c;
  return out;
}
function rotateZ(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];
  if (a !== out) {
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }
  out[0] = a00 * c + a10 * s;
  out[1] = a01 * c + a11 * s;
  out[2] = a02 * c + a12 * s;
  out[3] = a03 * c + a13 * s;
  out[4] = a10 * c - a00 * s;
  out[5] = a11 * c - a01 * s;
  out[6] = a12 * c - a02 * s;
  out[7] = a13 * c - a03 * s;
  return out;
}
function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = v[1];
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = v[2];
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function fromRotation(out, rad, axis) {
  var x = axis[0], y = axis[1], z = axis[2];
  var len = Math.hypot(x, y, z);
  var s, c, t;
  if (len < EPSILON) {
    return null;
  }
  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c;
  out[0] = x * x * t + c;
  out[1] = y * x * t + z * s;
  out[2] = z * x * t - y * s;
  out[3] = 0;
  out[4] = x * y * t - z * s;
  out[5] = y * y * t + c;
  out[6] = z * y * t + x * s;
  out[7] = 0;
  out[8] = x * z * t + y * s;
  out[9] = y * z * t - x * s;
  out[10] = z * z * t + c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function fromXRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = c;
  out[6] = s;
  out[7] = 0;
  out[8] = 0;
  out[9] = -s;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function fromYRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = c;
  out[1] = 0;
  out[2] = -s;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = s;
  out[9] = 0;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function fromZRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = 0;
  out[4] = -s;
  out[5] = c;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function fromRotationTranslation(out, q, v) {
  var x = q[0], y = q[1], z = q[2], w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - (yy + zz);
  out[1] = xy + wz;
  out[2] = xz - wy;
  out[3] = 0;
  out[4] = xy - wz;
  out[5] = 1 - (xx + zz);
  out[6] = yz + wx;
  out[7] = 0;
  out[8] = xz + wy;
  out[9] = yz - wx;
  out[10] = 1 - (xx + yy);
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
function fromQuat2(out, a) {
  var translation = new ARRAY_TYPE(3);
  var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7];
  var magnitude = bx * bx + by * by + bz * bz + bw * bw;
  if (magnitude > 0) {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
  } else {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
  }
  fromRotationTranslation(out, a, translation);
  return out;
}
function getTranslation(out, mat) {
  out[0] = mat[12];
  out[1] = mat[13];
  out[2] = mat[14];
  return out;
}
function getScaling(out, mat) {
  var m11 = mat[0];
  var m12 = mat[1];
  var m13 = mat[2];
  var m21 = mat[4];
  var m22 = mat[5];
  var m23 = mat[6];
  var m31 = mat[8];
  var m32 = mat[9];
  var m33 = mat[10];
  out[0] = Math.hypot(m11, m12, m13);
  out[1] = Math.hypot(m21, m22, m23);
  out[2] = Math.hypot(m31, m32, m33);
  return out;
}
function getRotation(out, mat) {
  var scaling = new ARRAY_TYPE(3);
  getScaling(scaling, mat);
  var is1 = 1 / scaling[0];
  var is2 = 1 / scaling[1];
  var is3 = 1 / scaling[2];
  var sm11 = mat[0] * is1;
  var sm12 = mat[1] * is2;
  var sm13 = mat[2] * is3;
  var sm21 = mat[4] * is1;
  var sm22 = mat[5] * is2;
  var sm23 = mat[6] * is3;
  var sm31 = mat[8] * is1;
  var sm32 = mat[9] * is2;
  var sm33 = mat[10] * is3;
  var trace = sm11 + sm22 + sm33;
  var S = 0;
  if (trace > 0) {
    S = Math.sqrt(trace + 1) * 2;
    out[3] = 0.25 * S;
    out[0] = (sm23 - sm32) / S;
    out[1] = (sm31 - sm13) / S;
    out[2] = (sm12 - sm21) / S;
  } else if (sm11 > sm22 && sm11 > sm33) {
    S = Math.sqrt(1 + sm11 - sm22 - sm33) * 2;
    out[3] = (sm23 - sm32) / S;
    out[0] = 0.25 * S;
    out[1] = (sm12 + sm21) / S;
    out[2] = (sm31 + sm13) / S;
  } else if (sm22 > sm33) {
    S = Math.sqrt(1 + sm22 - sm11 - sm33) * 2;
    out[3] = (sm31 - sm13) / S;
    out[0] = (sm12 + sm21) / S;
    out[1] = 0.25 * S;
    out[2] = (sm23 + sm32) / S;
  } else {
    S = Math.sqrt(1 + sm33 - sm11 - sm22) * 2;
    out[3] = (sm12 - sm21) / S;
    out[0] = (sm31 + sm13) / S;
    out[1] = (sm23 + sm32) / S;
    out[2] = 0.25 * S;
  }
  return out;
}
function fromRotationTranslationScale(out, q, v, s) {
  var x = q[0], y = q[1], z = q[2], w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
  var x = q[0], y = q[1], z = q[2], w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  var ox = o[0];
  var oy = o[1];
  var oz = o[2];
  var out0 = (1 - (yy + zz)) * sx;
  var out1 = (xy + wz) * sx;
  var out2 = (xz - wy) * sx;
  var out4 = (xy - wz) * sy;
  var out5 = (1 - (xx + zz)) * sy;
  var out6 = (yz + wx) * sy;
  var out8 = (xz + wy) * sz;
  var out9 = (yz - wx) * sz;
  var out10 = (1 - (xx + yy)) * sz;
  out[0] = out0;
  out[1] = out1;
  out[2] = out2;
  out[3] = 0;
  out[4] = out4;
  out[5] = out5;
  out[6] = out6;
  out[7] = 0;
  out[8] = out8;
  out[9] = out9;
  out[10] = out10;
  out[11] = 0;
  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
  out[15] = 1;
  return out;
}
function fromQuat(out, q) {
  var x = q[0], y = q[1], z = q[2], w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var yx = y * x2;
  var yy = y * y2;
  var zx = z * x2;
  var zy = z * y2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - yy - zz;
  out[1] = yx + wz;
  out[2] = zx - wy;
  out[3] = 0;
  out[4] = yx - wz;
  out[5] = 1 - xx - zz;
  out[6] = zy + wx;
  out[7] = 0;
  out[8] = zx + wy;
  out[9] = zy - wx;
  out[10] = 1 - xx - yy;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function frustum(out, left, right, bottom, top, near, far) {
  var rl = 1 / (right - left);
  var tb = 1 / (top - bottom);
  var nf = 1 / (near - far);
  out[0] = near * 2 * rl;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = near * 2 * tb;
  out[6] = 0;
  out[7] = 0;
  out[8] = (right + left) * rl;
  out[9] = (top + bottom) * tb;
  out[10] = (far + near) * nf;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = far * near * 2 * nf;
  out[15] = 0;
  return out;
}
function perspectiveNO(out, fovy, aspect, near, far) {
  var f = 1 / Math.tan(fovy / 2), nf;
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[15] = 0;
  if (far != null && far !== Infinity) {
    nf = 1 / (near - far);
    out[10] = (far + near) * nf;
    out[14] = 2 * far * near * nf;
  } else {
    out[10] = -1;
    out[14] = -2 * near;
  }
  return out;
}
function perspectiveZO(out, fovy, aspect, near, far) {
  var f = 1 / Math.tan(fovy / 2), nf;
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[15] = 0;
  if (far != null && far !== Infinity) {
    nf = 1 / (near - far);
    out[10] = far * nf;
    out[14] = far * near * nf;
  } else {
    out[10] = -1;
    out[14] = -near;
  }
  return out;
}
function perspectiveFromFieldOfView(out, fov, near, far) {
  var upTan = Math.tan(fov.upDegrees * Math.PI / 180);
  var downTan = Math.tan(fov.downDegrees * Math.PI / 180);
  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180);
  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180);
  var xScale = 2 / (leftTan + rightTan);
  var yScale = 2 / (upTan + downTan);
  out[0] = xScale;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = yScale;
  out[6] = 0;
  out[7] = 0;
  out[8] = -((leftTan - rightTan) * xScale * 0.5);
  out[9] = (upTan - downTan) * yScale * 0.5;
  out[10] = far / (near - far);
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = far * near / (near - far);
  out[15] = 0;
  return out;
}
function orthoNO(out, left, right, bottom, top, near, far) {
  var lr = 1 / (left - right);
  var bt = 1 / (bottom - top);
  var nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 2 * nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = (far + near) * nf;
  out[15] = 1;
  return out;
}
function orthoZO(out, left, right, bottom, top, near, far) {
  var lr = 1 / (left - right);
  var bt = 1 / (bottom - top);
  var nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = near * nf;
  out[15] = 1;
  return out;
}
function lookAt(out, eye, center, up) {
  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
  var eyex = eye[0];
  var eyey = eye[1];
  var eyez = eye[2];
  var upx = up[0];
  var upy = up[1];
  var upz = up[2];
  var centerx = center[0];
  var centery = center[1];
  var centerz = center[2];
  if (Math.abs(eyex - centerx) < EPSILON && Math.abs(eyey - centery) < EPSILON && Math.abs(eyez - centerz) < EPSILON) {
    return identity(out);
  }
  z0 = eyex - centerx;
  z1 = eyey - centery;
  z2 = eyez - centerz;
  len = 1 / Math.hypot(z0, z1, z2);
  z0 *= len;
  z1 *= len;
  z2 *= len;
  x0 = upy * z2 - upz * z1;
  x1 = upz * z0 - upx * z2;
  x2 = upx * z1 - upy * z0;
  len = Math.hypot(x0, x1, x2);
  if (!len) {
    x0 = 0;
    x1 = 0;
    x2 = 0;
  } else {
    len = 1 / len;
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }
  y0 = z1 * x2 - z2 * x1;
  y1 = z2 * x0 - z0 * x2;
  y2 = z0 * x1 - z1 * x0;
  len = Math.hypot(y0, y1, y2);
  if (!len) {
    y0 = 0;
    y1 = 0;
    y2 = 0;
  } else {
    len = 1 / len;
    y0 *= len;
    y1 *= len;
    y2 *= len;
  }
  out[0] = x0;
  out[1] = y0;
  out[2] = z0;
  out[3] = 0;
  out[4] = x1;
  out[5] = y1;
  out[6] = z1;
  out[7] = 0;
  out[8] = x2;
  out[9] = y2;
  out[10] = z2;
  out[11] = 0;
  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
  out[15] = 1;
  return out;
}
function targetTo(out, eye, target, up) {
  var eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2];
  var z0 = eyex - target[0], z1 = eyey - target[1], z2 = eyez - target[2];
  var len = z0 * z0 + z1 * z1 + z2 * z2;
  if (len > 0) {
    len = 1 / Math.sqrt(len);
    z0 *= len;
    z1 *= len;
    z2 *= len;
  }
  var x0 = upy * z2 - upz * z1, x1 = upz * z0 - upx * z2, x2 = upx * z1 - upy * z0;
  len = x0 * x0 + x1 * x1 + x2 * x2;
  if (len > 0) {
    len = 1 / Math.sqrt(len);
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }
  out[0] = x0;
  out[1] = x1;
  out[2] = x2;
  out[3] = 0;
  out[4] = z1 * x2 - z2 * x1;
  out[5] = z2 * x0 - z0 * x2;
  out[6] = z0 * x1 - z1 * x0;
  out[7] = 0;
  out[8] = z0;
  out[9] = z1;
  out[10] = z2;
  out[11] = 0;
  out[12] = eyex;
  out[13] = eyey;
  out[14] = eyez;
  out[15] = 1;
  return out;
}
function str(a) {
  return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")";
}
function frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
}
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  out[9] = a[9] + b[9];
  out[10] = a[10] + b[10];
  out[11] = a[11] + b[11];
  out[12] = a[12] + b[12];
  out[13] = a[13] + b[13];
  out[14] = a[14] + b[14];
  out[15] = a[15] + b[15];
  return out;
}
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  out[9] = a[9] - b[9];
  out[10] = a[10] - b[10];
  out[11] = a[11] - b[11];
  out[12] = a[12] - b[12];
  out[13] = a[13] - b[13];
  out[14] = a[14] - b[14];
  out[15] = a[15] - b[15];
  return out;
}
function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  out[9] = a[9] * b;
  out[10] = a[10] * b;
  out[11] = a[11] * b;
  out[12] = a[12] * b;
  out[13] = a[13] * b;
  out[14] = a[14] * b;
  out[15] = a[15] * b;
  return out;
}
function multiplyScalarAndAdd(out, a, b, scale2) {
  out[0] = a[0] + b[0] * scale2;
  out[1] = a[1] + b[1] * scale2;
  out[2] = a[2] + b[2] * scale2;
  out[3] = a[3] + b[3] * scale2;
  out[4] = a[4] + b[4] * scale2;
  out[5] = a[5] + b[5] * scale2;
  out[6] = a[6] + b[6] * scale2;
  out[7] = a[7] + b[7] * scale2;
  out[8] = a[8] + b[8] * scale2;
  out[9] = a[9] + b[9] * scale2;
  out[10] = a[10] + b[10] * scale2;
  out[11] = a[11] + b[11] * scale2;
  out[12] = a[12] + b[12] * scale2;
  out[13] = a[13] + b[13] * scale2;
  out[14] = a[14] + b[14] * scale2;
  out[15] = a[15] + b[15] * scale2;
  return out;
}
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
}
function equals(a, b) {
  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
  var a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7];
  var a8 = a[8], a9 = a[9], a10 = a[10], a11 = a[11];
  var a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];
  var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
  var b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7];
  var b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11];
  var b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= EPSILON * Math.max(1, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= EPSILON * Math.max(1, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= EPSILON * Math.max(1, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= EPSILON * Math.max(1, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= EPSILON * Math.max(1, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= EPSILON * Math.max(1, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= EPSILON * Math.max(1, Math.abs(a15), Math.abs(b15));
}
var perspective = perspectiveNO;
var ortho = orthoNO;
var mul = multiply;
var sub = subtract;

// node_modules/gl-matrix/esm/quat.js
var exports_quat = {};
__export(exports_quat, {
  str: () => {
    {
      return str4;
    }
  },
  squaredLength: () => {
    {
      return squaredLength3;
    }
  },
  sqrLen: () => {
    {
      return sqrLen3;
    }
  },
  sqlerp: () => {
    {
      return sqlerp;
    }
  },
  slerp: () => {
    {
      return slerp;
    }
  },
  setAxisAngle: () => {
    {
      return setAxisAngle;
    }
  },
  setAxes: () => {
    {
      return setAxes;
    }
  },
  set: () => {
    {
      return set4;
    }
  },
  scale: () => {
    {
      return scale4;
    }
  },
  rotationTo: () => {
    {
      return rotationTo;
    }
  },
  rotateZ: () => {
    {
      return rotateZ3;
    }
  },
  rotateY: () => {
    {
      return rotateY3;
    }
  },
  rotateX: () => {
    {
      return rotateX3;
    }
  },
  random: () => {
    {
      return random3;
    }
  },
  pow: () => {
    {
      return pow;
    }
  },
  normalize: () => {
    {
      return normalize3;
    }
  },
  multiply: () => {
    {
      return multiply4;
    }
  },
  mul: () => {
    {
      return mul4;
    }
  },
  ln: () => {
    {
      return ln;
    }
  },
  lerp: () => {
    {
      return lerp3;
    }
  },
  length: () => {
    {
      return length3;
    }
  },
  len: () => {
    {
      return len3;
    }
  },
  invert: () => {
    {
      return invert2;
    }
  },
  identity: () => {
    {
      return identity2;
    }
  },
  getAxisAngle: () => {
    {
      return getAxisAngle;
    }
  },
  getAngle: () => {
    {
      return getAngle;
    }
  },
  fromValues: () => {
    {
      return fromValues4;
    }
  },
  fromMat3: () => {
    {
      return fromMat3;
    }
  },
  fromEuler: () => {
    {
      return fromEuler;
    }
  },
  exp: () => {
    {
      return exp;
    }
  },
  exactEquals: () => {
    {
      return exactEquals4;
    }
  },
  equals: () => {
    {
      return equals4;
    }
  },
  dot: () => {
    {
      return dot3;
    }
  },
  create: () => {
    {
      return create5;
    }
  },
  copy: () => {
    {
      return copy4;
    }
  },
  conjugate: () => {
    {
      return conjugate;
    }
  },
  clone: () => {
    {
      return clone4;
    }
  },
  calculateW: () => {
    {
      return calculateW;
    }
  },
  add: () => {
    {
      return add4;
    }
  }
});

// node_modules/gl-matrix/esm/vec3.js
var exports_vec3 = {};
__export(exports_vec3, {
  zero: () => {
    {
      return zero;
    }
  },
  transformQuat: () => {
    {
      return transformQuat;
    }
  },
  transformMat4: () => {
    {
      return transformMat4;
    }
  },
  transformMat3: () => {
    {
      return transformMat3;
    }
  },
  subtract: () => {
    {
      return subtract2;
    }
  },
  sub: () => {
    {
      return sub2;
    }
  },
  str: () => {
    {
      return str2;
    }
  },
  squaredLength: () => {
    {
      return squaredLength;
    }
  },
  squaredDistance: () => {
    {
      return squaredDistance;
    }
  },
  sqrLen: () => {
    {
      return sqrLen;
    }
  },
  sqrDist: () => {
    {
      return sqrDist;
    }
  },
  set: () => {
    {
      return set2;
    }
  },
  scaleAndAdd: () => {
    {
      return scaleAndAdd;
    }
  },
  scale: () => {
    {
      return scale2;
    }
  },
  round: () => {
    {
      return round;
    }
  },
  rotateZ: () => {
    {
      return rotateZ2;
    }
  },
  rotateY: () => {
    {
      return rotateY2;
    }
  },
  rotateX: () => {
    {
      return rotateX2;
    }
  },
  random: () => {
    {
      return random;
    }
  },
  normalize: () => {
    {
      return normalize;
    }
  },
  negate: () => {
    {
      return negate;
    }
  },
  multiply: () => {
    {
      return multiply2;
    }
  },
  mul: () => {
    {
      return mul2;
    }
  },
  min: () => {
    {
      return min;
    }
  },
  max: () => {
    {
      return max;
    }
  },
  lerp: () => {
    {
      return lerp;
    }
  },
  length: () => {
    {
      return length;
    }
  },
  len: () => {
    {
      return len;
    }
  },
  inverse: () => {
    {
      return inverse;
    }
  },
  hermite: () => {
    {
      return hermite;
    }
  },
  fromValues: () => {
    {
      return fromValues2;
    }
  },
  forEach: () => {
    {
      return forEach;
    }
  },
  floor: () => {
    {
      return floor;
    }
  },
  exactEquals: () => {
    {
      return exactEquals2;
    }
  },
  equals: () => {
    {
      return equals2;
    }
  },
  dot: () => {
    {
      return dot;
    }
  },
  divide: () => {
    {
      return divide;
    }
  },
  div: () => {
    {
      return div;
    }
  },
  distance: () => {
    {
      return distance;
    }
  },
  dist: () => {
    {
      return dist;
    }
  },
  cross: () => {
    {
      return cross;
    }
  },
  create: () => {
    {
      return create3;
    }
  },
  copy: () => {
    {
      return copy2;
    }
  },
  clone: () => {
    {
      return clone2;
    }
  },
  ceil: () => {
    {
      return ceil;
    }
  },
  bezier: () => {
    {
      return bezier;
    }
  },
  angle: () => {
    {
      return angle;
    }
  },
  add: () => {
    {
      return add2;
    }
  }
});
function create3() {
  var out = new ARRAY_TYPE(3);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }
  return out;
}
function clone2(a) {
  var out = new ARRAY_TYPE(3);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
function length(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return Math.hypot(x, y, z);
}
function fromValues2(x, y, z) {
  var out = new ARRAY_TYPE(3);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
function copy2(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
function set2(out, x, y, z) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
function add2(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  return out;
}
function subtract2(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  return out;
}
function multiply2(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  return out;
}
function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  return out;
}
function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  return out;
}
function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  return out;
}
function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  return out;
}
function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  return out;
}
function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  return out;
}
function scale2(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  return out;
}
function scaleAndAdd(out, a, b, scale3) {
  out[0] = a[0] + b[0] * scale3;
  out[1] = a[1] + b[1] * scale3;
  out[2] = a[2] + b[2] * scale3;
  return out;
}
function distance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return Math.hypot(x, y, z);
}
function squaredDistance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return x * x + y * y + z * z;
}
function squaredLength(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return x * x + y * y + z * z;
}
function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  return out;
}
function inverse(out, a) {
  out[0] = 1 / a[0];
  out[1] = 1 / a[1];
  out[2] = 1 / a[2];
  return out;
}
function normalize(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var len = x * x + y * y + z * z;
  if (len > 0) {
    len = 1 / Math.sqrt(len);
  }
  out[0] = a[0] * len;
  out[1] = a[1] * len;
  out[2] = a[2] * len;
  return out;
}
function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
function cross(out, a, b) {
  var ax = a[0], ay = a[1], az = a[2];
  var bx = b[0], by = b[1], bz = b[2];
  out[0] = ay * bz - az * by;
  out[1] = az * bx - ax * bz;
  out[2] = ax * by - ay * bx;
  return out;
}
function lerp(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  return out;
}
function hermite(out, a, b, c, d, t) {
  var factorTimes2 = t * t;
  var factor1 = factorTimes2 * (2 * t - 3) + 1;
  var factor2 = factorTimes2 * (t - 2) + t;
  var factor3 = factorTimes2 * (t - 1);
  var factor4 = factorTimes2 * (3 - 2 * t);
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
function bezier(out, a, b, c, d, t) {
  var inverseFactor = 1 - t;
  var inverseFactorTimesTwo = inverseFactor * inverseFactor;
  var factorTimes2 = t * t;
  var factor1 = inverseFactorTimesTwo * inverseFactor;
  var factor2 = 3 * t * inverseFactorTimesTwo;
  var factor3 = 3 * factorTimes2 * inverseFactor;
  var factor4 = factorTimes2 * t;
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
function random(out, scale3) {
  scale3 = scale3 || 1;
  var r = RANDOM() * 2 * Math.PI;
  var z = RANDOM() * 2 - 1;
  var zScale = Math.sqrt(1 - z * z) * scale3;
  out[0] = Math.cos(r) * zScale;
  out[1] = Math.sin(r) * zScale;
  out[2] = z * scale3;
  return out;
}
function transformMat4(out, a, m) {
  var x = a[0], y = a[1], z = a[2];
  var w = m[3] * x + m[7] * y + m[11] * z + m[15];
  w = w || 1;
  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
  return out;
}
function transformMat3(out, a, m) {
  var x = a[0], y = a[1], z = a[2];
  out[0] = x * m[0] + y * m[3] + z * m[6];
  out[1] = x * m[1] + y * m[4] + z * m[7];
  out[2] = x * m[2] + y * m[5] + z * m[8];
  return out;
}
function transformQuat(out, a, q) {
  var qx = q[0], qy = q[1], qz = q[2], qw = q[3];
  var x = a[0], y = a[1], z = a[2];
  var uvx = qy * z - qz * y, uvy = qz * x - qx * z, uvz = qx * y - qy * x;
  var uuvx = qy * uvz - qz * uvy, uuvy = qz * uvx - qx * uvz, uuvz = qx * uvy - qy * uvx;
  var w2 = qw * 2;
  uvx *= w2;
  uvy *= w2;
  uvz *= w2;
  uuvx *= 2;
  uuvy *= 2;
  uuvz *= 2;
  out[0] = x + uvx + uuvx;
  out[1] = y + uvy + uuvy;
  out[2] = z + uvz + uuvz;
  return out;
}
function rotateX2(out, a, b, rad) {
  var p = [], r = [];
  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2];
  r[0] = p[0];
  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);
  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);
  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
function rotateY2(out, a, b, rad) {
  var p = [], r = [];
  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2];
  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);
  r[1] = p[1];
  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);
  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
function rotateZ2(out, a, b, rad) {
  var p = [], r = [];
  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2];
  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);
  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);
  r[2] = p[2];
  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
function angle(a, b) {
  var ax = a[0], ay = a[1], az = a[2], bx = b[0], by = b[1], bz = b[2], mag1 = Math.sqrt(ax * ax + ay * ay + az * az), mag2 = Math.sqrt(bx * bx + by * by + bz * bz), mag = mag1 * mag2, cosine = mag && dot(a, b) / mag;
  return Math.acos(Math.min(Math.max(cosine, -1), 1));
}
function zero(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  return out;
}
function str2(a) {
  return "vec3(" + a[0] + ", " + a[1] + ", " + a[2] + ")";
}
function exactEquals2(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
}
function equals2(a, b) {
  var a0 = a[0], a1 = a[1], a2 = a[2];
  var b0 = b[0], b1 = b[1], b2 = b[2];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2));
}
var sub2 = subtract2;
var mul2 = multiply2;
var div = divide;
var dist = distance;
var sqrDist = squaredDistance;
var len = length;
var sqrLen = squaredLength;
var forEach = function() {
  var vec = create3();
  return function(a, stride, offset, count, fn, arg) {
    var i, l;
    if (!stride) {
      stride = 3;
    }
    if (!offset) {
      offset = 0;
    }
    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }
    for (i = offset;i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
    }
    return a;
  };
}();

// node_modules/gl-matrix/esm/vec4.js
var exports_vec4 = {};
__export(exports_vec4, {
  zero: () => {
    {
      return zero2;
    }
  },
  transformQuat: () => {
    {
      return transformQuat2;
    }
  },
  transformMat4: () => {
    {
      return transformMat42;
    }
  },
  subtract: () => {
    {
      return subtract3;
    }
  },
  sub: () => {
    {
      return sub3;
    }
  },
  str: () => {
    {
      return str3;
    }
  },
  squaredLength: () => {
    {
      return squaredLength2;
    }
  },
  squaredDistance: () => {
    {
      return squaredDistance2;
    }
  },
  sqrLen: () => {
    {
      return sqrLen2;
    }
  },
  sqrDist: () => {
    {
      return sqrDist2;
    }
  },
  set: () => {
    {
      return set3;
    }
  },
  scaleAndAdd: () => {
    {
      return scaleAndAdd2;
    }
  },
  scale: () => {
    {
      return scale3;
    }
  },
  round: () => {
    {
      return round2;
    }
  },
  random: () => {
    {
      return random2;
    }
  },
  normalize: () => {
    {
      return normalize2;
    }
  },
  negate: () => {
    {
      return negate2;
    }
  },
  multiply: () => {
    {
      return multiply3;
    }
  },
  mul: () => {
    {
      return mul3;
    }
  },
  min: () => {
    {
      return min2;
    }
  },
  max: () => {
    {
      return max2;
    }
  },
  lerp: () => {
    {
      return lerp2;
    }
  },
  length: () => {
    {
      return length2;
    }
  },
  len: () => {
    {
      return len2;
    }
  },
  inverse: () => {
    {
      return inverse2;
    }
  },
  fromValues: () => {
    {
      return fromValues3;
    }
  },
  forEach: () => {
    {
      return forEach2;
    }
  },
  floor: () => {
    {
      return floor2;
    }
  },
  exactEquals: () => {
    {
      return exactEquals3;
    }
  },
  equals: () => {
    {
      return equals3;
    }
  },
  dot: () => {
    {
      return dot2;
    }
  },
  divide: () => {
    {
      return divide2;
    }
  },
  div: () => {
    {
      return div2;
    }
  },
  distance: () => {
    {
      return distance2;
    }
  },
  dist: () => {
    {
      return dist2;
    }
  },
  cross: () => {
    {
      return cross2;
    }
  },
  create: () => {
    {
      return create4;
    }
  },
  copy: () => {
    {
      return copy3;
    }
  },
  clone: () => {
    {
      return clone3;
    }
  },
  ceil: () => {
    {
      return ceil2;
    }
  },
  add: () => {
    {
      return add3;
    }
  }
});
function create4() {
  var out = new ARRAY_TYPE(4);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
  }
  return out;
}
function clone3(a) {
  var out = new ARRAY_TYPE(4);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
function fromValues3(x, y, z, w) {
  var out = new ARRAY_TYPE(4);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}
function copy3(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
function set3(out, x, y, z, w) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}
function add3(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  return out;
}
function subtract3(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  return out;
}
function multiply3(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  out[3] = a[3] * b[3];
  return out;
}
function divide2(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  out[3] = a[3] / b[3];
  return out;
}
function ceil2(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  out[3] = Math.ceil(a[3]);
  return out;
}
function floor2(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  out[3] = Math.floor(a[3]);
  return out;
}
function min2(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  out[3] = Math.min(a[3], b[3]);
  return out;
}
function max2(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  out[3] = Math.max(a[3], b[3]);
  return out;
}
function round2(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  out[3] = Math.round(a[3]);
  return out;
}
function scale3(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}
function scaleAndAdd2(out, a, b, scale4) {
  out[0] = a[0] + b[0] * scale4;
  out[1] = a[1] + b[1] * scale4;
  out[2] = a[2] + b[2] * scale4;
  out[3] = a[3] + b[3] * scale4;
  return out;
}
function distance2(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  var w = b[3] - a[3];
  return Math.hypot(x, y, z, w);
}
function squaredDistance2(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  var w = b[3] - a[3];
  return x * x + y * y + z * z + w * w;
}
function length2(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  return Math.hypot(x, y, z, w);
}
function squaredLength2(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  return x * x + y * y + z * z + w * w;
}
function negate2(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = -a[3];
  return out;
}
function inverse2(out, a) {
  out[0] = 1 / a[0];
  out[1] = 1 / a[1];
  out[2] = 1 / a[2];
  out[3] = 1 / a[3];
  return out;
}
function normalize2(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  var len2 = x * x + y * y + z * z + w * w;
  if (len2 > 0) {
    len2 = 1 / Math.sqrt(len2);
  }
  out[0] = x * len2;
  out[1] = y * len2;
  out[2] = z * len2;
  out[3] = w * len2;
  return out;
}
function dot2(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
}
function cross2(out, u, v, w) {
  var A = v[0] * w[1] - v[1] * w[0], B = v[0] * w[2] - v[2] * w[0], C = v[0] * w[3] - v[3] * w[0], D = v[1] * w[2] - v[2] * w[1], E = v[1] * w[3] - v[3] * w[1], F = v[2] * w[3] - v[3] * w[2];
  var G = u[0];
  var H = u[1];
  var I = u[2];
  var J = u[3];
  out[0] = H * F - I * E + J * D;
  out[1] = -(G * F) + I * C - J * B;
  out[2] = G * E - H * C + J * A;
  out[3] = -(G * D) + H * B - I * A;
  return out;
}
function lerp2(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  var aw = a[3];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  out[3] = aw + t * (b[3] - aw);
  return out;
}
function random2(out, scale4) {
  scale4 = scale4 || 1;
  var v1, v2, v3, v4;
  var s1, s2;
  do {
    v1 = RANDOM() * 2 - 1;
    v2 = RANDOM() * 2 - 1;
    s1 = v1 * v1 + v2 * v2;
  } while (s1 >= 1);
  do {
    v3 = RANDOM() * 2 - 1;
    v4 = RANDOM() * 2 - 1;
    s2 = v3 * v3 + v4 * v4;
  } while (s2 >= 1);
  var d = Math.sqrt((1 - s1) / s2);
  out[0] = scale4 * v1;
  out[1] = scale4 * v2;
  out[2] = scale4 * v3 * d;
  out[3] = scale4 * v4 * d;
  return out;
}
function transformMat42(out, a, m) {
  var x = a[0], y = a[1], z = a[2], w = a[3];
  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
  return out;
}
function transformQuat2(out, a, q) {
  var x = a[0], y = a[1], z = a[2];
  var qx = q[0], qy = q[1], qz = q[2], qw = q[3];
  var ix = qw * x + qy * z - qz * y;
  var iy = qw * y + qz * x - qx * z;
  var iz = qw * z + qx * y - qy * x;
  var iw = -qx * x - qy * y - qz * z;
  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  out[3] = a[3];
  return out;
}
function zero2(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  return out;
}
function str3(a) {
  return "vec4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
}
function exactEquals3(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}
function equals3(a, b) {
  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
  var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3));
}
var sub3 = subtract3;
var mul3 = multiply3;
var div2 = divide2;
var dist2 = distance2;
var sqrDist2 = squaredDistance2;
var len2 = length2;
var sqrLen2 = squaredLength2;
var forEach2 = function() {
  var vec = create4();
  return function(a, stride, offset, count, fn, arg) {
    var i, l;
    if (!stride) {
      stride = 4;
    }
    if (!offset) {
      offset = 0;
    }
    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }
    for (i = offset;i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      vec[3] = a[i + 3];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
      a[i + 3] = vec[3];
    }
    return a;
  };
}();

// node_modules/gl-matrix/esm/quat.js
function create5() {
  var out = new ARRAY_TYPE(4);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }
  out[3] = 1;
  return out;
}
function identity2(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}
function setAxisAngle(out, axis, rad) {
  rad = rad * 0.5;
  var s = Math.sin(rad);
  out[0] = s * axis[0];
  out[1] = s * axis[1];
  out[2] = s * axis[2];
  out[3] = Math.cos(rad);
  return out;
}
function getAxisAngle(out_axis, q) {
  var rad = Math.acos(q[3]) * 2;
  var s = Math.sin(rad / 2);
  if (s > EPSILON) {
    out_axis[0] = q[0] / s;
    out_axis[1] = q[1] / s;
    out_axis[2] = q[2] / s;
  } else {
    out_axis[0] = 1;
    out_axis[1] = 0;
    out_axis[2] = 0;
  }
  return rad;
}
function getAngle(a, b) {
  var dotproduct = dot3(a, b);
  return Math.acos(2 * dotproduct * dotproduct - 1);
}
function multiply4(out, a, b) {
  var ax = a[0], ay = a[1], az = a[2], aw = a[3];
  var bx = b[0], by = b[1], bz = b[2], bw = b[3];
  out[0] = ax * bw + aw * bx + ay * bz - az * by;
  out[1] = ay * bw + aw * by + az * bx - ax * bz;
  out[2] = az * bw + aw * bz + ax * by - ay * bx;
  out[3] = aw * bw - ax * bx - ay * by - az * bz;
  return out;
}
function rotateX3(out, a, rad) {
  rad *= 0.5;
  var ax = a[0], ay = a[1], az = a[2], aw = a[3];
  var bx = Math.sin(rad), bw = Math.cos(rad);
  out[0] = ax * bw + aw * bx;
  out[1] = ay * bw + az * bx;
  out[2] = az * bw - ay * bx;
  out[3] = aw * bw - ax * bx;
  return out;
}
function rotateY3(out, a, rad) {
  rad *= 0.5;
  var ax = a[0], ay = a[1], az = a[2], aw = a[3];
  var by = Math.sin(rad), bw = Math.cos(rad);
  out[0] = ax * bw - az * by;
  out[1] = ay * bw + aw * by;
  out[2] = az * bw + ax * by;
  out[3] = aw * bw - ay * by;
  return out;
}
function rotateZ3(out, a, rad) {
  rad *= 0.5;
  var ax = a[0], ay = a[1], az = a[2], aw = a[3];
  var bz = Math.sin(rad), bw = Math.cos(rad);
  out[0] = ax * bw + ay * bz;
  out[1] = ay * bw - ax * bz;
  out[2] = az * bw + aw * bz;
  out[3] = aw * bw - az * bz;
  return out;
}
function calculateW(out, a) {
  var x = a[0], y = a[1], z = a[2];
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = Math.sqrt(Math.abs(1 - x * x - y * y - z * z));
  return out;
}
function exp(out, a) {
  var x = a[0], y = a[1], z = a[2], w = a[3];
  var r = Math.sqrt(x * x + y * y + z * z);
  var et = Math.exp(w);
  var s = r > 0 ? et * Math.sin(r) / r : 0;
  out[0] = x * s;
  out[1] = y * s;
  out[2] = z * s;
  out[3] = et * Math.cos(r);
  return out;
}
function ln(out, a) {
  var x = a[0], y = a[1], z = a[2], w = a[3];
  var r = Math.sqrt(x * x + y * y + z * z);
  var t = r > 0 ? Math.atan2(r, w) / r : 0;
  out[0] = x * t;
  out[1] = y * t;
  out[2] = z * t;
  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);
  return out;
}
function pow(out, a, b) {
  ln(out, a);
  scale4(out, out, b);
  exp(out, out);
  return out;
}
function slerp(out, a, b, t) {
  var ax = a[0], ay = a[1], az = a[2], aw = a[3];
  var bx = b[0], by = b[1], bz = b[2], bw = b[3];
  var omega, cosom, sinom, scale0, scale1;
  cosom = ax * bx + ay * by + az * bz + aw * bw;
  if (cosom < 0) {
    cosom = -cosom;
    bx = -bx;
    by = -by;
    bz = -bz;
    bw = -bw;
  }
  if (1 - cosom > EPSILON) {
    omega = Math.acos(cosom);
    sinom = Math.sin(omega);
    scale0 = Math.sin((1 - t) * omega) / sinom;
    scale1 = Math.sin(t * omega) / sinom;
  } else {
    scale0 = 1 - t;
    scale1 = t;
  }
  out[0] = scale0 * ax + scale1 * bx;
  out[1] = scale0 * ay + scale1 * by;
  out[2] = scale0 * az + scale1 * bz;
  out[3] = scale0 * aw + scale1 * bw;
  return out;
}
function random3(out) {
  var u1 = RANDOM();
  var u2 = RANDOM();
  var u3 = RANDOM();
  var sqrt1MinusU1 = Math.sqrt(1 - u1);
  var sqrtU1 = Math.sqrt(u1);
  out[0] = sqrt1MinusU1 * Math.sin(2 * Math.PI * u2);
  out[1] = sqrt1MinusU1 * Math.cos(2 * Math.PI * u2);
  out[2] = sqrtU1 * Math.sin(2 * Math.PI * u3);
  out[3] = sqrtU1 * Math.cos(2 * Math.PI * u3);
  return out;
}
function invert2(out, a) {
  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
  var dot3 = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;
  var invDot = dot3 ? 1 / dot3 : 0;
  out[0] = -a0 * invDot;
  out[1] = -a1 * invDot;
  out[2] = -a2 * invDot;
  out[3] = a3 * invDot;
  return out;
}
function conjugate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a[3];
  return out;
}
function fromMat3(out, m) {
  var fTrace = m[0] + m[4] + m[8];
  var fRoot;
  if (fTrace > 0) {
    fRoot = Math.sqrt(fTrace + 1);
    out[3] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot;
    out[0] = (m[5] - m[7]) * fRoot;
    out[1] = (m[6] - m[2]) * fRoot;
    out[2] = (m[1] - m[3]) * fRoot;
  } else {
    var i = 0;
    if (m[4] > m[0])
      i = 1;
    if (m[8] > m[i * 3 + i])
      i = 2;
    var j = (i + 1) % 3;
    var k = (i + 2) % 3;
    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1);
    out[i] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot;
    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
  }
  return out;
}
function fromEuler(out, x, y, z) {
  var halfToRad = 0.5 * Math.PI / 180;
  x *= halfToRad;
  y *= halfToRad;
  z *= halfToRad;
  var sx = Math.sin(x);
  var cx = Math.cos(x);
  var sy = Math.sin(y);
  var cy = Math.cos(y);
  var sz = Math.sin(z);
  var cz = Math.cos(z);
  out[0] = sx * cy * cz - cx * sy * sz;
  out[1] = cx * sy * cz + sx * cy * sz;
  out[2] = cx * cy * sz - sx * sy * cz;
  out[3] = cx * cy * cz + sx * sy * sz;
  return out;
}
function str4(a) {
  return "quat(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
}
var clone4 = clone3;
var fromValues4 = fromValues3;
var copy4 = copy3;
var set4 = set3;
var add4 = add3;
var mul4 = multiply4;
var scale4 = scale3;
var dot3 = dot2;
var lerp3 = lerp2;
var length3 = length2;
var len3 = length3;
var squaredLength3 = squaredLength2;
var sqrLen3 = squaredLength3;
var normalize3 = normalize2;
var exactEquals4 = exactEquals3;
var equals4 = equals3;
var rotationTo = function() {
  var tmpvec3 = create3();
  var xUnitVec3 = fromValues2(1, 0, 0);
  var yUnitVec3 = fromValues2(0, 1, 0);
  return function(out, a, b) {
    var dot4 = dot(a, b);
    if (dot4 < -0.999999) {
      cross(tmpvec3, xUnitVec3, a);
      if (len(tmpvec3) < 0.000001)
        cross(tmpvec3, yUnitVec3, a);
      normalize(tmpvec3, tmpvec3);
      setAxisAngle(out, tmpvec3, Math.PI);
      return out;
    } else if (dot4 > 0.999999) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
    } else {
      cross(tmpvec3, a, b);
      out[0] = tmpvec3[0];
      out[1] = tmpvec3[1];
      out[2] = tmpvec3[2];
      out[3] = 1 + dot4;
      return normalize3(out, out);
    }
  };
}();
var sqlerp = function() {
  var temp1 = create5();
  var temp2 = create5();
  return function(out, a, b, c, d, t) {
    slerp(temp1, a, d, t);
    slerp(temp2, b, c, t);
    slerp(out, temp1, temp2, 2 * t * (1 - t));
    return out;
  };
}();
var setAxes = function() {
  var matr = create();
  return function(out, view, right, up) {
    matr[0] = right[0];
    matr[3] = right[1];
    matr[6] = right[2];
    matr[1] = up[0];
    matr[4] = up[1];
    matr[7] = up[2];
    matr[2] = -view[0];
    matr[5] = -view[1];
    matr[8] = -view[2];
    return normalize3(out, fromMat3(out, matr));
  };
}();

// node_modules/gl-matrix/esm/vec2.js
var exports_vec2 = {};
__export(exports_vec2, {
  zero: () => {
    {
      return zero3;
    }
  },
  transformMat4: () => {
    {
      return transformMat43;
    }
  },
  transformMat3: () => {
    {
      return transformMat32;
    }
  },
  transformMat2d: () => {
    {
      return transformMat2d;
    }
  },
  transformMat2: () => {
    {
      return transformMat2;
    }
  },
  subtract: () => {
    {
      return subtract4;
    }
  },
  sub: () => {
    {
      return sub4;
    }
  },
  str: () => {
    {
      return str5;
    }
  },
  squaredLength: () => {
    {
      return squaredLength4;
    }
  },
  squaredDistance: () => {
    {
      return squaredDistance3;
    }
  },
  sqrLen: () => {
    {
      return sqrLen4;
    }
  },
  sqrDist: () => {
    {
      return sqrDist3;
    }
  },
  set: () => {
    {
      return set5;
    }
  },
  scaleAndAdd: () => {
    {
      return scaleAndAdd3;
    }
  },
  scale: () => {
    {
      return scale5;
    }
  },
  round: () => {
    {
      return round3;
    }
  },
  rotate: () => {
    {
      return rotate2;
    }
  },
  random: () => {
    {
      return random4;
    }
  },
  normalize: () => {
    {
      return normalize4;
    }
  },
  negate: () => {
    {
      return negate3;
    }
  },
  multiply: () => {
    {
      return multiply5;
    }
  },
  mul: () => {
    {
      return mul5;
    }
  },
  min: () => {
    {
      return min3;
    }
  },
  max: () => {
    {
      return max3;
    }
  },
  lerp: () => {
    {
      return lerp4;
    }
  },
  length: () => {
    {
      return length4;
    }
  },
  len: () => {
    {
      return len4;
    }
  },
  inverse: () => {
    {
      return inverse3;
    }
  },
  fromValues: () => {
    {
      return fromValues5;
    }
  },
  forEach: () => {
    {
      return forEach3;
    }
  },
  floor: () => {
    {
      return floor3;
    }
  },
  exactEquals: () => {
    {
      return exactEquals5;
    }
  },
  equals: () => {
    {
      return equals5;
    }
  },
  dot: () => {
    {
      return dot4;
    }
  },
  divide: () => {
    {
      return divide3;
    }
  },
  div: () => {
    {
      return div3;
    }
  },
  distance: () => {
    {
      return distance3;
    }
  },
  dist: () => {
    {
      return dist3;
    }
  },
  cross: () => {
    {
      return cross3;
    }
  },
  create: () => {
    {
      return create6;
    }
  },
  copy: () => {
    {
      return copy5;
    }
  },
  clone: () => {
    {
      return clone5;
    }
  },
  ceil: () => {
    {
      return ceil3;
    }
  },
  angle: () => {
    {
      return angle2;
    }
  },
  add: () => {
    {
      return add5;
    }
  }
});
function create6() {
  var out = new ARRAY_TYPE(2);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
  }
  return out;
}
function clone5(a) {
  var out = new ARRAY_TYPE(2);
  out[0] = a[0];
  out[1] = a[1];
  return out;
}
function fromValues5(x, y) {
  var out = new ARRAY_TYPE(2);
  out[0] = x;
  out[1] = y;
  return out;
}
function copy5(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  return out;
}
function set5(out, x, y) {
  out[0] = x;
  out[1] = y;
  return out;
}
function add5(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  return out;
}
function subtract4(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  return out;
}
function multiply5(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  return out;
}
function divide3(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  return out;
}
function ceil3(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  return out;
}
function floor3(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  return out;
}
function min3(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  return out;
}
function max3(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  return out;
}
function round3(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  return out;
}
function scale5(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  return out;
}
function scaleAndAdd3(out, a, b, scale6) {
  out[0] = a[0] + b[0] * scale6;
  out[1] = a[1] + b[1] * scale6;
  return out;
}
function distance3(a, b) {
  var x = b[0] - a[0], y = b[1] - a[1];
  return Math.hypot(x, y);
}
function squaredDistance3(a, b) {
  var x = b[0] - a[0], y = b[1] - a[1];
  return x * x + y * y;
}
function length4(a) {
  var x = a[0], y = a[1];
  return Math.hypot(x, y);
}
function squaredLength4(a) {
  var x = a[0], y = a[1];
  return x * x + y * y;
}
function negate3(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  return out;
}
function inverse3(out, a) {
  out[0] = 1 / a[0];
  out[1] = 1 / a[1];
  return out;
}
function normalize4(out, a) {
  var x = a[0], y = a[1];
  var len4 = x * x + y * y;
  if (len4 > 0) {
    len4 = 1 / Math.sqrt(len4);
  }
  out[0] = a[0] * len4;
  out[1] = a[1] * len4;
  return out;
}
function dot4(a, b) {
  return a[0] * b[0] + a[1] * b[1];
}
function cross3(out, a, b) {
  var z = a[0] * b[1] - a[1] * b[0];
  out[0] = out[1] = 0;
  out[2] = z;
  return out;
}
function lerp4(out, a, b, t) {
  var ax = a[0], ay = a[1];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  return out;
}
function random4(out, scale6) {
  scale6 = scale6 || 1;
  var r = RANDOM() * 2 * Math.PI;
  out[0] = Math.cos(r) * scale6;
  out[1] = Math.sin(r) * scale6;
  return out;
}
function transformMat2(out, a, m) {
  var x = a[0], y = a[1];
  out[0] = m[0] * x + m[2] * y;
  out[1] = m[1] * x + m[3] * y;
  return out;
}
function transformMat2d(out, a, m) {
  var x = a[0], y = a[1];
  out[0] = m[0] * x + m[2] * y + m[4];
  out[1] = m[1] * x + m[3] * y + m[5];
  return out;
}
function transformMat32(out, a, m) {
  var x = a[0], y = a[1];
  out[0] = m[0] * x + m[3] * y + m[6];
  out[1] = m[1] * x + m[4] * y + m[7];
  return out;
}
function transformMat43(out, a, m) {
  var x = a[0];
  var y = a[1];
  out[0] = m[0] * x + m[4] * y + m[12];
  out[1] = m[1] * x + m[5] * y + m[13];
  return out;
}
function rotate2(out, a, b, rad) {
  var p0 = a[0] - b[0], p1 = a[1] - b[1], sinC = Math.sin(rad), cosC = Math.cos(rad);
  out[0] = p0 * cosC - p1 * sinC + b[0];
  out[1] = p0 * sinC + p1 * cosC + b[1];
  return out;
}
function angle2(a, b) {
  var x1 = a[0], y1 = a[1], x2 = b[0], y2 = b[1], mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2), cosine = mag && (x1 * x2 + y1 * y2) / mag;
  return Math.acos(Math.min(Math.max(cosine, -1), 1));
}
function zero3(out) {
  out[0] = 0;
  out[1] = 0;
  return out;
}
function str5(a) {
  return "vec2(" + a[0] + ", " + a[1] + ")";
}
function exactEquals5(a, b) {
  return a[0] === b[0] && a[1] === b[1];
}
function equals5(a, b) {
  var a0 = a[0], a1 = a[1];
  var b0 = b[0], b1 = b[1];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1));
}
var len4 = length4;
var sub4 = subtract4;
var mul5 = multiply5;
var div3 = divide3;
var dist3 = distance3;
var sqrDist3 = squaredDistance3;
var sqrLen4 = squaredLength4;
var forEach3 = function() {
  var vec = create6();
  return function(a, stride, offset, count, fn, arg) {
    var i, l;
    if (!stride) {
      stride = 2;
    }
    if (!offset) {
      offset = 0;
    }
    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }
    for (i = offset;i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
    }
    return a;
  };
}();

// src/local-framework/system/math/angles.ts
var rad2Deg = (rad) => rad / Math.PI * 180;
var deg2Rad = (deg) => deg * Math.PI / 180;
var getEuler = (vector3) => {
  const theta = Math.atan2(vector3[1], vector3[0]);
  const magnitude = exports_vec2.length([vector3[0], vector3[1]]);
  const phi = Math.atan2(vector3[2], magnitude);
  return [theta, phi];
};

// src/local-framework/system/controllers/FreeFlyController.ts
var AllAxises = {
  X: 0,
  Y: 1,
  Z: 2
};

class FreeFlyController {
  _isActivated = false;
  _theta = 0;
  _phi = 0;
  _mouseSensibility;
  _keyboardSensibility;
  _touchSensibility;
  _movingSpeed;
  _touchWasActive = false;
  _touchStartTime = 0;
  _touchMoveForward = false;
  _axisIndices;
  _position = exports_vec3.fromValues(0, 0, 0);
  _target = exports_vec3.fromValues(0, 0, 0);
  _forwardAxis = exports_vec3.fromValues(1, 0, 0);
  _leftAxis = exports_vec3.fromValues(0, 0, 1);
  _upAxis = exports_vec3.fromValues(0, 1, 0);
  _move_forwardAxis = exports_vec3.fromValues(1, 0, 0);
  _move_leftAxis = exports_vec3.fromValues(0, 0, 1);
  _move_upAxis = exports_vec3.fromValues(0, 1, 0);
  constructor(def) {
    this._mouseSensibility = def.mouseSensibility;
    this._keyboardSensibility = def.keyboardSensibility;
    this._touchSensibility = def.touchSensibility;
    this._movingSpeed = def.movingSpeed;
    exports_vec3.copy(this._position, def.position);
    this._axisIndices = [
      def.coordinates ? AllAxises[def.coordinates[0]] : AllAxises.X,
      def.coordinates ? AllAxises[def.coordinates[1]] : AllAxises.Y,
      def.coordinates ? AllAxises[def.coordinates[2]] : AllAxises.Z
    ];
    this._theta = def.theta;
    this._phi = def.phi;
  }
  isActivated() {
    return this._isActivated;
  }
  activate() {
    this._isActivated = true;
    GlobalKeyboardManager.preventDefault("Z");
    GlobalKeyboardManager.preventDefault("W");
    GlobalKeyboardManager.preventDefault("S");
    GlobalKeyboardManager.preventDefault("A");
    GlobalKeyboardManager.preventDefault("Q");
    GlobalKeyboardManager.preventDefault("D");
    GlobalKeyboardManager.preventDefault("Shift");
    GlobalKeyboardManager.preventDefault("C");
    GlobalKeyboardManager.preventDefault("Space");
    GlobalKeyboardManager.preventDefault("ArrowUp");
    GlobalKeyboardManager.preventDefault("ArrowDown");
    GlobalKeyboardManager.preventDefault("ArrowLeft");
    GlobalKeyboardManager.preventDefault("ArrowRight");
  }
  deactivate() {
    this._isActivated = false;
    GlobalKeyboardManager.enableDefault("Z");
    GlobalKeyboardManager.enableDefault("W");
    GlobalKeyboardManager.enableDefault("S");
    GlobalKeyboardManager.enableDefault("A");
    GlobalKeyboardManager.enableDefault("Q");
    GlobalKeyboardManager.enableDefault("D");
    GlobalKeyboardManager.enableDefault("Shift");
    GlobalKeyboardManager.enableDefault("C");
    GlobalKeyboardManager.enableDefault("Space");
    GlobalKeyboardManager.enableDefault("ArrowUp");
    GlobalKeyboardManager.enableDefault("ArrowDown");
    GlobalKeyboardManager.enableDefault("ArrowLeft");
    GlobalKeyboardManager.enableDefault("ArrowRight");
  }
  isInteractedWith() {
    return GlobalKeyboardManager.isPressed("Z", "W", "S", "A", "Q", "D") || GlobalKeyboardManager.isPressed("Shift", "C", "Space") || GlobalKeyboardManager.isPressed("ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight");
  }
  update(deltaMsTime, fpsControls = false) {
    let moveForward = false;
    let moveBackward = false;
    let strafeLeft = false;
    let strafeRight = false;
    let isRunning = false;
    let isDiving = false;
    let isRising = false;
    let lookDeltaX = 0;
    let lookDeltaY = 0;
    {
      const deltaX = GlobalMouseManager.deltaX() * this._mouseSensibility;
      const deltaY = GlobalMouseManager.deltaY() * this._mouseSensibility;
      lookDeltaX -= deg2Rad(deltaX) * deltaMsTime;
      lookDeltaY -= deg2Rad(deltaY) * deltaMsTime;
    }
    const isTouched = GlobalTouchManager.getTouchData().length > 0;
    if (isTouched) {
      if (!this._touchWasActive) {
        const currTime = Date.now();
        const elapsed = (currTime - this._touchStartTime) / 1000;
        if (elapsed < 0.25) {
          this._touchMoveForward = true;
        } else {
          this._touchStartTime = currTime;
        }
      }
      const firstTouch = GlobalTouchManager.getTouchData()[0];
      const deltaX = firstTouch.deltaX * this._touchSensibility;
      const deltaY = firstTouch.deltaY * this._touchSensibility;
      lookDeltaX -= deg2Rad(deltaX) * deltaMsTime;
      lookDeltaY -= deg2Rad(deltaY) * deltaMsTime;
    } else {
      this._touchMoveForward = false;
    }
    this._touchWasActive = isTouched;
    if (this._touchMoveForward) {
      moveForward = true;
    }
    if (GlobalKeyboardManager.isPressed("Z", "W")) {
      moveForward = true;
    }
    if (GlobalKeyboardManager.isPressed("S")) {
      moveBackward = true;
    }
    if (GlobalKeyboardManager.isPressed("A", "Q")) {
      strafeLeft = true;
    }
    if (GlobalKeyboardManager.isPressed("D")) {
      strafeRight = true;
    }
    if (GlobalKeyboardManager.isPressed("Shift")) {
      isRunning = true;
    }
    if (!fpsControls) {
      if (GlobalKeyboardManager.isPressed("C")) {
        isDiving = true;
      }
      if (GlobalKeyboardManager.isPressed("Space")) {
        isRising = true;
      }
    }
    const currentLinearSpeed = this._movingSpeed * (isRunning ? 4 : 1) * deltaMsTime;
    const currentAngularSpeed = this._keyboardSensibility * deltaMsTime;
    if (GlobalKeyboardManager.isPressed("ArrowUp")) {
      lookDeltaY += currentAngularSpeed;
    } else if (GlobalKeyboardManager.isPressed("ArrowDown")) {
      lookDeltaY -= currentAngularSpeed;
    }
    if (GlobalKeyboardManager.isPressed("ArrowLeft")) {
      lookDeltaX += currentAngularSpeed;
    } else if (GlobalKeyboardManager.isPressed("ArrowRight")) {
      lookDeltaX -= currentAngularSpeed;
    }
    this._theta += lookDeltaX;
    this._phi += lookDeltaY;
    const hPi = Math.PI * 0.5;
    const verticalLimit = hPi * 0.95;
    this._phi = Math.min(Math.max(this._phi, -verticalLimit), +verticalLimit);
    const cosTheta = Math.cos(this._theta);
    const sinTheta = Math.sin(this._theta);
    const [axisX, axisY, axisZ] = this._axisIndices;
    const upRadius = Math.cos(this._phi + hPi);
    this._upAxis[axisX] = upRadius * cosTheta;
    this._upAxis[axisY] = upRadius * sinTheta;
    this._upAxis[axisZ] = Math.sin(this._phi + hPi);
    const forwardRadius = Math.cos(this._phi);
    this._forwardAxis[axisX] = forwardRadius * cosTheta;
    this._forwardAxis[axisY] = forwardRadius * sinTheta;
    this._forwardAxis[axisZ] = Math.sin(this._phi);
    exports_vec3.cross(this._leftAxis, this._upAxis, this._forwardAxis);
    if (fpsControls) {
      this._move_forwardAxis[axisX] = cosTheta;
      this._move_forwardAxis[axisY] = sinTheta;
      this._move_forwardAxis[axisZ] = 0;
      this._move_leftAxis[axisX] = -sinTheta;
      this._move_leftAxis[axisY] = cosTheta;
      this._move_leftAxis[axisZ] = 0;
      this._move_upAxis[axisX] = 0;
      this._move_upAxis[axisY] = 0;
      this._move_upAxis[axisZ] = 1;
    } else {
      exports_vec3.copy(this._move_forwardAxis, this._forwardAxis);
      exports_vec3.copy(this._move_leftAxis, this._leftAxis);
      exports_vec3.copy(this._move_upAxis, this._upAxis);
    }
    const scaledForward = exports_vec3.fromValues(0, 0, 0);
    exports_vec3.scale(scaledForward, this._move_forwardAxis, currentLinearSpeed);
    const scaledLeft = exports_vec3.fromValues(0, 0, 0);
    exports_vec3.scale(scaledLeft, this._move_leftAxis, currentLinearSpeed);
    const scaledUp = exports_vec3.fromValues(0, 0, 0);
    exports_vec3.scale(scaledUp, this._move_upAxis, currentLinearSpeed);
    if (moveForward) {
      exports_vec3.add(this._position, this._position, scaledForward);
    } else if (moveBackward) {
      exports_vec3.sub(this._position, this._position, scaledForward);
    }
    if (strafeLeft) {
      exports_vec3.add(this._position, this._position, scaledLeft);
    } else if (strafeRight) {
      exports_vec3.sub(this._position, this._position, scaledLeft);
    }
    if (isRising) {
      exports_vec3.add(this._position, this._position, scaledUp);
    } else if (isDiving) {
      exports_vec3.sub(this._position, this._position, scaledUp);
    }
    exports_vec3.add(this._target, this._position, this._forwardAxis);
  }
  getPosition() {
    return this._position;
  }
  setPosition(inPos) {
    exports_vec3.copy(this._position, inPos);
    exports_vec3.add(this._target, this._position, this._forwardAxis);
  }
  getTarget() {
    return this._target;
  }
  getUpAxis() {
    return this._upAxis;
  }
  getTheta() {
    return this._theta;
  }
  getPhi() {
    return this._phi;
  }
  getTouchMoveForward() {
    return this._touchMoveForward;
  }
}
// src/local-framework/system/math/index.ts
var exports_math = {};
__export(exports_math, {
  rayCaster: () => {
    {
      return exports_rayCaster;
    }
  },
  rad2Deg: () => {
    {
      return rad2Deg;
    }
  },
  polarCoords: () => {
    {
      return exports_polarCoords;
    }
  },
  lerp: () => {
    {
      return lerp5;
    }
  },
  getEuler: () => {
    {
      return getEuler;
    }
  },
  easing: () => {
    {
      return exports_easing;
    }
  },
  deg2Rad: () => {
    {
      return deg2Rad;
    }
  },
  collisions: () => {
    {
      return exports_collisions;
    }
  },
  clamp: () => {
    {
      return clamp;
    }
  }
});

// src/local-framework/system/math/clamp.ts
var clamp = (currVal, minVal, maxVal) => Math.min(Math.max(currVal, minVal), maxVal);
// src/local-framework/system/math/collisions.ts
var exports_collisions = {};
__export(exports_collisions, {
  intersectSegment: () => {
    {
      return intersectSegment;
    }
  },
  collisionLinesStrip: () => {
    {
      return collisionLinesStrip;
    }
  }
});
var intersectSegment = (A, B, I, P) => {
  const D = exports_vec2.fromValues(0, 0);
  const E = exports_vec2.fromValues(0, 0);
  D[0] = B[0] - A[0];
  D[1] = B[1] - A[1];
  E[0] = P[0] - I[0];
  E[1] = P[1] - I[1];
  const denom = D[0] * E[1] - D[1] * E[0];
  if (denom == 0) {
    return -1;
  }
  const t = -(A[0] * E[1] - I[0] * E[1] - E[0] * A[1] + E[0] * I[1]) / denom;
  if (t < 0 || t >= 1) {
    return 0;
  }
  const u = -(-D[0] * A[1] + D[0] * I[1] + D[1] * A[0] - D[1] * I[0]) / denom;
  if (u < 0 || u >= 1) {
    return 0;
  }
  return 1;
};
var collisionLinesStrip = (tab, P) => {
  const I = exports_vec2.fromValues(0, 0);
  I[0] = 1e4 + Math.random() * 100;
  I[1] = 1e4 + Math.random() * 100;
  let nbIntersections = 0;
  for (let ii = 0;ii < tab.length; ++ii) {
    let jj = (ii + 1) % tab.length;
    const result = intersectSegment(tab[ii], tab[jj], I, P);
    if (result == -1) {
      return collisionLinesStrip(tab, P);
    }
    nbIntersections += result;
  }
  if (nbIntersections % 2 == 1) {
    return true;
  }
  return false;
};
// src/local-framework/system/math/easing.ts
var exports_easing = {};
__export(exports_easing, {
  easePinPong: () => {
    {
      return easePinPong;
    }
  },
  easeOutSine: () => {
    {
      return easeOutSine;
    }
  },
  easeOutQuint: () => {
    {
      return easeOutQuint;
    }
  },
  easeOutQuart: () => {
    {
      return easeOutQuart;
    }
  },
  easeOutQuad: () => {
    {
      return easeOutQuad;
    }
  },
  easeOutExpo: () => {
    {
      return easeOutExpo;
    }
  },
  easeOutElastic: () => {
    {
      return easeOutElastic;
    }
  },
  easeOutCubic: () => {
    {
      return easeOutCubic;
    }
  },
  easeOutCirc: () => {
    {
      return easeOutCirc;
    }
  },
  easeOutBounce: () => {
    {
      return easeOutBounce;
    }
  },
  easeOutBack: () => {
    {
      return easeOutBack;
    }
  },
  easeInSine: () => {
    {
      return easeInSine;
    }
  },
  easeInQuint: () => {
    {
      return easeInQuint;
    }
  },
  easeInQuart: () => {
    {
      return easeInQuart;
    }
  },
  easeInQuad: () => {
    {
      return easeInQuad;
    }
  },
  easeInOutSine: () => {
    {
      return easeInOutSine;
    }
  },
  easeInOutQuint: () => {
    {
      return easeInOutQuint;
    }
  },
  easeInOutQuart: () => {
    {
      return easeInOutQuart;
    }
  },
  easeInOutQuad: () => {
    {
      return easeInOutQuad;
    }
  },
  easeInOutExpo: () => {
    {
      return easeInOutExpo;
    }
  },
  easeInOutElastic: () => {
    {
      return easeInOutElastic;
    }
  },
  easeInOutCubic: () => {
    {
      return easeInOutCubic;
    }
  },
  easeInOutCirc: () => {
    {
      return easeInOutCirc;
    }
  },
  easeInOutBounce: () => {
    {
      return easeInOutBounce;
    }
  },
  easeInOutBack: () => {
    {
      return easeInOutBack;
    }
  },
  easeInExpo: () => {
    {
      return easeInExpo;
    }
  },
  easeInElastic: () => {
    {
      return easeInElastic;
    }
  },
  easeInCubic: () => {
    {
      return easeInCubic;
    }
  },
  easeInCirc: () => {
    {
      return easeInCirc;
    }
  },
  easeInBounce: () => {
    {
      return easeInBounce;
    }
  },
  easeInBack: () => {
    {
      return easeInBack;
    }
  },
  easeClamp: () => {
    {
      return easeClamp;
    }
  }
});
var easeClamp = (t) => {
  if (t > 1) {
    return t - Math.floor(t);
  }
  return t;
};
var easePinPong = (t) => {
  t *= 2;
  if (t < 1)
    return t;
  t -= 1;
  return 1 - t;
};
var easeInSine = (t) => {
  return Math.sin(1.5707963 * t);
};
var easeOutSine = (t) => {
  return 1 + Math.sin(1.5707963 * (t - 1));
};
var easeInOutSine = (t) => {
  return 0.5 * (1 + Math.sin(3.1415926 * (t - 0.5)));
};
var easeInQuad = (t) => {
  return t * t;
};
var easeOutQuad = (t) => {
  return t * (2 - t);
};
var easeInOutQuad = (t) => {
  return t < 0.5 ? 2 * t * t : t * (4 - 2 * t) - 1;
};
var easeInCubic = (t) => {
  return t * t * t;
};
var easeOutCubic = (t) => {
  const t2 = t - 1;
  return 1 + t2 * t2 * t2;
};
var easeInOutCubic = (t) => {
  const t2 = t - 1;
  const t3 = t2 - 1;
  return t < 0.5 ? 4 * t * t * t : 1 + t2 * (2 * t3) * (2 * t3);
};
var easeInQuart = (t) => {
  t *= t;
  return t * t;
};
var easeOutQuart = (t) => {
  const t2 = t - 1;
  t = t2 * t2;
  return 1 - t * t;
};
var easeInOutQuart = (t) => {
  if (t < 0.5) {
    t *= t;
    return 8 * t * t;
  }
  const t2 = t - 1;
  t = t2 * t2;
  return 1 - 8 * t * t;
};
var easeInQuint = (t) => {
  const t2 = t * t;
  return t * t2 * t2;
};
var easeOutQuint = (t) => {
  const tx = t - 1;
  const t2 = tx * tx;
  return 1 + tx * t2 * t2;
};
var easeInOutQuint = (t) => {
  let t2;
  if (t < 0.5) {
    t2 = t * t;
    return 16 * t * t2 * t2;
  }
  const tx = t - 1;
  t2 = tx * tx;
  return 1 + 16 * tx * t2 * t2;
};
var easeInExpo = (t) => {
  return (Math.pow(2, 8 * t) - 1) / 255;
};
var easeOutExpo = (t) => {
  return 1 - Math.pow(2, -8 * t);
};
var easeInOutExpo = (t) => {
  if (t < 0.5)
    return (Math.pow(2, 16 * t) - 1) / 510;
  return 1 - 0.5 * Math.pow(2, -16 * (t - 0.5));
};
var easeInCirc = (t) => {
  return 1 - Math.sqrt(1 - t);
};
var easeOutCirc = (t) => {
  return Math.sqrt(t);
};
var easeInOutCirc = (t) => {
  if (t < 0.5)
    return (1 - Math.sqrt(1 - 2 * t)) * 0.5;
  return (1 + Math.sqrt(2 * t - 1)) * 0.5;
};
var easeInBack = (t) => {
  return t * t * (2.70158 * t - 1.70158);
};
var easeOutBack = (t) => {
  const tx = t - 1;
  return 1 + tx * tx * (2.70158 * tx + 1.70158);
};
var easeInOutBack = (t) => {
  if (t < 0.5)
    return t * t * (7 * t - 2.5) * 2;
  const tx = t - 1;
  return 1 + tx * tx * 2 * (7 * tx + 2.5);
};
var easeInElastic = (t) => {
  const t2 = t * t;
  return t2 * t2 * Math.sin(t * Math.PI * 4.5);
};
var easeOutElastic = (t) => {
  const t2 = (t - 1) * (t - 1);
  return 1 - t2 * t2 * Math.cos(t * Math.PI * 4.5);
};
var easeInOutElastic = (t) => {
  let t2;
  if (t < 0.45) {
    t2 = t * t;
    return 8 * t2 * t2 * Math.sin(t * Math.PI * 9);
  }
  if (t < 0.55)
    return 0.5 + 0.75 * Math.sin(t * Math.PI * 4);
  t2 = (t - 1) * (t - 1);
  return 1 - 8 * t2 * t2 * Math.sin(t * Math.PI * 9);
};
var easeInBounce = (t) => {
  return Math.pow(2, 6 * (t - 1)) * Math.abs(Math.sin(t * Math.PI * 3.5));
};
var easeOutBounce = (t) => {
  return 1 - Math.pow(2, -6 * t) * Math.abs(Math.cos(t * Math.PI * 3.5));
};
var easeInOutBounce = (t) => {
  if (t < 0.5)
    return 8 * Math.pow(2, 8 * (t - 1)) * Math.abs(Math.sin(t * Math.PI * 7));
  return 1 - 8 * Math.pow(2, -8 * t) * Math.abs(Math.sin(t * Math.PI * 7));
};
// src/local-framework/system/math/lerp.ts
var lerp5 = (ratio, minVal, maxVal) => minVal + (maxVal - minVal) * ratio;
// src/local-framework/system/math/polarCoords.ts
var exports_polarCoords = {};
__export(exports_polarCoords, {
  polar2Cartesian: () => {
    {
      return polar2Cartesian;
    }
  },
  cartesian2Polar: () => {
    {
      return cartesian2Polar;
    }
  }
});
var polar2Cartesian = (lat, lng, relAltitude = 0, globRadius = 100) => {
  const phi = (90 - lat) * Math.PI / 180;
  const theta = (90 - lng) * Math.PI / 180;
  const r = globRadius * (1 + relAltitude);
  return [
    r * Math.sin(phi) * Math.cos(theta),
    r * Math.cos(phi),
    r * Math.sin(phi) * Math.sin(theta)
  ];
};
var cartesian2Polar = (x, y, z, globRadius = 100) => {
  const r = Math.sqrt(x * x + y * y + z * z);
  const phi = Math.acos(y / r);
  const theta = Math.atan2(z, x);
  return {
    lat: 90 - phi * 180 / Math.PI,
    lng: 90 - theta * 180 / Math.PI - (theta < -Math.PI / 2 ? 360 : 0),
    altitude: r / globRadius - 1
  };
};
// src/local-framework/system/math/rayCaster.ts
var exports_rayCaster = {};
__export(exports_rayCaster, {
  intersectRaySphere: () => {
    {
      return intersectRaySphere;
    }
  }
});
var intersectRaySphere = (pos, dir, center, radius) => {
  const m = exports_vec3.sub(exports_vec3.create(), pos, center);
  const b = exports_vec3.dot(m, dir);
  const c = exports_vec3.dot(m, m) - radius * radius;
  if (c > 0 && b > 0) {
    return null;
  }
  const discr = b * b - c;
  if (discr < 0) {
    return null;
  }
  let t = -b - Math.sqrt(discr);
  if (t < 0) {
    t = 0;
  }
  return exports_vec3.fromValues(pos[0] + t * dir[0], pos[1] + t * dir[1], pos[2] + t * dir[2]);
};
// src/local-framework/system/metrics/index.ts
var exports_metrics = {};
__export(exports_metrics, {
  FrameProfiler: () => {
    {
      return FrameProfiler;
    }
  }
});

// src/local-framework/system/metrics/FrameProfiler.ts
class FrameProfiler {
  _framesDelta = [];
  _averageDelta = 0;
  _minDelta = 0;
  _maxDelta = 0;
  pushDelta(inDelta) {
    if (this._framesDelta.length >= 100) {
      this._framesDelta.shift();
    }
    this._framesDelta.push(inDelta);
    this._minDelta = 999999999;
    this._maxDelta = -999999999;
    this._averageDelta = 0;
    for (const currDelta of this._framesDelta) {
      this._minDelta = Math.min(this._minDelta, currDelta);
      this._maxDelta = Math.max(this._maxDelta, currDelta);
      this._averageDelta += currDelta;
    }
    this._averageDelta /= this._framesDelta.length;
  }
  get framesDelta() {
    return this._framesDelta;
  }
  get averageDelta() {
    return this._averageDelta;
  }
  get minDelta() {
    return this._minDelta;
  }
  get maxDelta() {
    return this._maxDelta;
  }
}
// src/local-framework/system/utilities/index.ts
var exports_utilities = {};
__export(exports_utilities, {
  FetchHelpers: () => {
    {
      return exports_FetchHelpers;
    }
  },
  AsyncHelpers: () => {
    {
      return exports_AsyncHelpers;
    }
  }
});

// src/local-framework/system/utilities/FetchHelpers.ts
var exports_FetchHelpers = {};
__export(exports_FetchHelpers, {
  progressFetch: () => {
    {
      return progressFetch;
    }
  }
});
var progressFetch = async (url, onProgress) => {
  const response = await fetch(url);
  const reader = response.body.getReader();
  let totalProgress = 0;
  const stream = new ReadableStream({
    start(controller) {
      return pump();
      function pump() {
        return reader.read().then(({ done, value }) => {
          if (done) {
            controller.close();
            return;
          }
          if (onProgress) {
            totalProgress += value.length;
            onProgress(totalProgress);
          }
          controller.enqueue(value);
          return pump();
        });
      }
    }
  });
  await stream;
  return new Response(stream);
};
// src/local-framework/system/utilities/AsyncHelpers.ts
var exports_AsyncHelpers = {};
__export(exports_AsyncHelpers, {
  sleep: () => {
    {
      return sleep;
    }
  },
  cancellableSleep: () => {
    {
      return cancellableSleep;
    }
  }
});
var sleep = async (delay) => {
  await new Promise((resolve) => setTimeout(resolve, delay));
};
var cancellableSleep = (delay) => {
  let timeoutHandle = -1;
  let resolveCallback = undefined;
  const promise = new Promise((resolve) => {
    resolveCallback = resolve;
    timeoutHandle = window.setTimeout(resolve, delay);
  });
  return {
    promise,
    cancel: () => {
      if (timeoutHandle >= 0) {
        window.clearTimeout(timeoutHandle);
      }
      if (resolveCallback) {
        resolveCallback();
      }
    }
  };
};
// src/local-framework/system/rng/index.ts
var exports_rng = {};
__export(exports_rng, {
  DeterministicRng: () => {
    {
      return DeterministicRng;
    }
  }
});

// src/local-framework/system/rng/DeterministicRng.ts
var RAND_MAX = 2147483648 | 0;

class DeterministicRng {
  _seed = 1 | 0;
  random() {
    if (this._seed == 0) {
      this._seed = 123459876 | 0;
    }
    const hi = this._seed / 127773 | 0;
    const lo = this._seed % 127773 | 0;
    let x = 16807 * lo - 2836 * hi | 0;
    if (x < 0) {
      x += 2147483647 | 0;
    }
    this._seed = x;
    return x % (RAND_MAX + 1) / -RAND_MAX;
  }
  setSeed(inSeed) {
    this._seed = inSeed | 0;
  }
}
// src/local-framework/graphics/index.ts
var exports_graphics = {};
__export(exports_graphics, {
  webgl2: () => {
    {
      return exports_webgl2;
    }
  },
  renderers: () => {
    {
      return exports_renderers;
    }
  },
  images: () => {
    {
      return exports_images;
    }
  },
  geometries: () => {
    {
      return exports_geometries;
    }
  },
  camera: () => {
    {
      return exports_camera;
    }
  }
});

// src/local-framework/graphics/camera/index.ts
var exports_camera = {};
__export(exports_camera, {
  screenToSceneCoordinatesFromInvComposed: () => {
    {
      return screenToSceneCoordinatesFromInvComposed;
    }
  },
  screenToSceneCoordinatesFromComposed: () => {
    {
      return screenToSceneCoordinatesFromComposed;
    }
  },
  screenToSceneCoordinates: () => {
    {
      return screenToSceneCoordinates;
    }
  },
  sceneToScreenCoordsFromComposed: () => {
    {
      return sceneToScreenCoordsFromComposed;
    }
  },
  sceneToScreenCoordinates: () => {
    {
      return sceneToScreenCoordinates;
    }
  },
  FrustumCulling: () => {
    {
      return FrustumCulling;
    }
  },
  Camera: () => {
    {
      return Camera;
    }
  }
});

// src/local-framework/graphics/camera/Camera.ts
var ProjectionType;
(function(ProjectionType2) {
  ProjectionType2[ProjectionType2["perspective"] = 0] = "perspective";
  ProjectionType2[ProjectionType2["orthogonal"] = 1] = "orthogonal";
})(ProjectionType || (ProjectionType = {}));

class Camera {
  _projectionType = ProjectionType.perspective;
  _perspectiveData;
  _orthogonalData;
  _viewportPos = exports_vec2.fromValues(0, 0);
  _viewportSize = exports_vec2.fromValues(0, 0);
  _projectionMatrix = exports_mat4.create();
  _viewMatrix = exports_mat4.create();
  _composedMatrix = exports_mat4.create();
  _eye = exports_vec3.fromValues(0, 0, 0);
  _target = exports_vec3.fromValues(0, 0, 0);
  _upAxis = exports_vec3.fromValues(0, 0, 0);
  setAsPerspective(inData) {
    this._projectionType = ProjectionType.perspective;
    let aspectRatio = inData.aspectRatio;
    if (aspectRatio === undefined) {
      aspectRatio = this._viewportSize[0] / this._viewportSize[1];
    }
    this._perspectiveData = {
      fovy: inData.fovy,
      aspectRatio,
      near: inData.near,
      far: inData.far
    };
  }
  setAsOrthogonal(inData) {
    this._projectionType = ProjectionType.orthogonal;
    this._orthogonalData = { ...inData };
  }
  setViewportPos(width, height) {
    this._viewportPos[0] = width;
    this._viewportPos[1] = height;
  }
  getViewportPos() {
    return this._viewportPos;
  }
  setViewportSize(width, height) {
    this._viewportSize[0] = width;
    this._viewportSize[1] = height;
    if (this._projectionType !== ProjectionType.perspective && this._perspectiveData) {
      this._perspectiveData.aspectRatio = this._viewportSize[0] / this._viewportSize[1];
    }
  }
  getViewportSize() {
    return this._viewportSize;
  }
  lookAt(inEye, inTarget, inUpAxis) {
    this.setEye(inEye);
    this.setTarget(inTarget);
    this.setUpAxis(inUpAxis);
  }
  setEye(inEye) {
    exports_vec3.copy(this._eye, inEye);
  }
  setTarget(inTarget) {
    exports_vec3.copy(this._target, inTarget);
  }
  setUpAxis(inUpAxis) {
    exports_vec3.copy(this._upAxis, inUpAxis);
  }
  getEye() {
    return this._eye;
  }
  getTarget() {
    return this._target;
  }
  getUpAxis() {
    return this._upAxis;
  }
  computeMatrices() {
    if (this._projectionType === ProjectionType.perspective) {
      const { fovy, aspectRatio, near, far } = this._perspectiveData;
      exports_mat4.perspective(this._projectionMatrix, deg2Rad(fovy), aspectRatio, near, far);
    } else if (this._projectionType === ProjectionType.orthogonal) {
      const { left, right, top, bottom, near, far } = this._orthogonalData;
      exports_mat4.ortho(this._projectionMatrix, left, right, top, bottom, near, far);
    }
    exports_mat4.lookAt(this._viewMatrix, this._eye, this._target, this._upAxis);
    this.computeComposedMatrix();
  }
  computeComposedMatrix() {
    exports_mat4.multiply(this._composedMatrix, this._projectionMatrix, this._viewMatrix);
  }
  setProjectionMatrix(inMat4) {
    exports_mat4.copy(this._projectionMatrix, inMat4);
  }
  setViewMatrix(inMat4) {
    exports_mat4.copy(this._viewMatrix, inMat4);
  }
  setComposedMatrix(inMat4) {
    exports_mat4.copy(this._composedMatrix, inMat4);
  }
  getProjectionMatrix() {
    return this._projectionMatrix;
  }
  getViewMatrix() {
    return this._viewMatrix;
  }
  getComposedMatrix() {
    return this._composedMatrix;
  }
  getPerspectiveData() {
    if (this._projectionType !== ProjectionType.perspective) {
      throw new Error("not a perspective projection");
    }
    return this._perspectiveData;
  }
  getOrthogonalData() {
    if (this._projectionType !== ProjectionType.orthogonal) {
      throw new Error("not an orthogonal projection");
    }
    return this._orthogonalData;
  }
}
// src/local-framework/graphics/camera/FrustumCulling.ts
var FrustumSide;
(function(FrustumSide2) {
  FrustumSide2[FrustumSide2["Right"] = 0] = "Right";
  FrustumSide2[FrustumSide2["Left"] = 1] = "Left";
  FrustumSide2[FrustumSide2["Bottom"] = 2] = "Bottom";
  FrustumSide2[FrustumSide2["Top"] = 3] = "Top";
  FrustumSide2[FrustumSide2["Back"] = 4] = "Back";
  FrustumSide2[FrustumSide2["Front"] = 5] = "Front";
})(FrustumSide || (FrustumSide = {}));

class FrustumCulling {
  _frustum = new Float32Array(24);
  _setPlane(side, left, right, coef) {
    const index = side * 4;
    this._frustum[index + 0] = left[0] + right[0] * coef;
    this._frustum[index + 1] = left[1] + right[1] * coef;
    this._frustum[index + 2] = left[2] + right[2] * coef;
    this._frustum[index + 3] = left[3] + right[3] * coef;
    const magnitude = Math.sqrt(this._frustum[index + 0] * this._frustum[index + 0] + this._frustum[index + 1] * this._frustum[index + 1] + this._frustum[index + 2] * this._frustum[index + 2]);
    if (magnitude === 0)
      return;
    this._frustum[index + 0] /= magnitude;
    this._frustum[index + 1] /= magnitude;
    this._frustum[index + 2] /= magnitude;
    this._frustum[index + 3] /= magnitude;
  }
  calculateFrustum(proj, view) {
    const clip = exports_mat4.multiply(exports_mat4.create(), proj, view);
    const row0 = exports_vec4.fromValues(clip[0], clip[4], clip[8], clip[12]);
    const row1 = exports_vec4.fromValues(clip[1], clip[5], clip[9], clip[13]);
    const row2 = exports_vec4.fromValues(clip[2], clip[6], clip[10], clip[14]);
    const row3 = exports_vec4.fromValues(clip[3], clip[7], clip[11], clip[15]);
    this._setPlane(FrustumSide.Right, row3, row0, -1);
    this._setPlane(FrustumSide.Left, row3, row0, 1);
    this._setPlane(FrustumSide.Bottom, row3, row1, 1);
    this._setPlane(FrustumSide.Top, row3, row1, -1);
    this._setPlane(FrustumSide.Back, row3, row2, -1);
    this._setPlane(FrustumSide.Front, row3, row2, 1);
  }
  sphereInFrustum(x, y, z, radius) {
    for (let ii = 0;ii < 6; ++ii) {
      const index = ii * 4;
      if (this._frustum[index + 0] * x + this._frustum[index + 1] * y + this._frustum[index + 2] * z + this._frustum[index + 3] <= -radius) {
        return false;
      }
    }
    return true;
  }
  pointInFrustum(x, y, z) {
    return this.sphereInFrustum(x, y, z, 0);
  }
  cubeInFrustumVec3(center, inSize) {
    return this.cubeInFrustum(center[0], center[1], center[2], inSize);
  }
  cubeInFrustum(inX, inY, inZ, inSize) {
    const hSize = inSize * 0.5;
    const minX = inX - hSize;
    const minY = inY - hSize;
    const minZ = inZ - hSize;
    const maxX = inX + hSize;
    const maxY = inY + hSize;
    const maxZ = inZ + hSize;
    for (let ii = 0;ii < 6; ++ii) {
      const index = ii * 4;
      const planA = this._frustum[index + 0];
      const planB = this._frustum[index + 1];
      const planC = this._frustum[index + 2];
      const planD = this._frustum[index + 3];
      if (planA * minX + planB * minY + planC * minZ + planD > 0 || planA * maxX + planB * minY + planC * minZ + planD > 0 || planA * minX + planB * maxY + planC * minZ + planD > 0 || planA * maxX + planB * maxY + planC * minZ + planD > 0 || planA * minX + planB * minY + planC * maxZ + planD > 0 || planA * maxX + planB * minY + planC * maxZ + planD > 0 || planA * minX + planB * maxY + planC * maxZ + planD > 0 || planA * maxX + planB * maxY + planC * maxZ + planD > 0) {
        continue;
      }
      return false;
    }
    return true;
  }
}
// src/local-framework/graphics/camera/sceneToScreenCoordinates.ts
var sceneToScreenCoordinates = (scenePos, modelView, projection, viewport) => {
  const composedMatrix = exports_mat4.create();
  exports_mat4.multiply(composedMatrix, projection, modelView);
  return sceneToScreenCoordsFromComposed(scenePos, composedMatrix, viewport);
};
var sceneToScreenCoordsFromComposed = (allScenePos, composedMatrix, viewport) => {
  const inputVec4 = exports_vec4.create();
  const multipliedVec4 = exports_vec4.create();
  const results = [];
  allScenePos.forEach((scenePos) => {
    inputVec4[0] = scenePos[0];
    inputVec4[1] = scenePos[1];
    inputVec4[2] = scenePos[2];
    inputVec4[3] = 1;
    exports_vec4.transformMat4(multipliedVec4, inputVec4, composedMatrix);
    if (multipliedVec4[3] === 0) {
      return null;
    }
    multipliedVec4[3] = 1 / multipliedVec4[3];
    multipliedVec4[0] *= multipliedVec4[3];
    multipliedVec4[1] *= multipliedVec4[3];
    multipliedVec4[2] *= multipliedVec4[3];
    multipliedVec4[0] = (multipliedVec4[0] * 0.5 + 0.5) * viewport[2] + viewport[0], multipliedVec4[1] = (multipliedVec4[1] * 0.5 + 0.5) * viewport[3] + viewport[1];
    results.push(exports_vec3.copy(exports_vec3.create(), multipliedVec4));
  });
  return results;
};
// src/local-framework/graphics/camera/screenToSceneCoordinates.ts
var screenToSceneCoordinates = (allScreenPos, modelView, projection, viewport) => {
  const composedMatrix = exports_mat4.multiply(exports_mat4.create(), projection, modelView);
  return screenToSceneCoordinatesFromComposed(allScreenPos, composedMatrix, viewport);
};
var screenToSceneCoordinatesFromComposed = (allScreenPos, composedMatrix, viewport) => {
  const invertedComposedMatrix = exports_mat4.invert(exports_mat4.create(), composedMatrix);
  return screenToSceneCoordinatesFromInvComposed(allScreenPos, invertedComposedMatrix, viewport);
};
var screenToSceneCoordinatesFromInvComposed = (allScreenPos, invertedComposedMatrix, viewport) => {
  const results = [];
  const multipliedVec4 = exports_vec4.create();
  allScreenPos.forEach((screenPos) => {
    multipliedVec4[0] = (screenPos[0] - viewport[0]) / viewport[2] * 2 - 1;
    multipliedVec4[1] = (screenPos[1] - viewport[1]) / viewport[3] * 2 - 1;
    multipliedVec4[2] = 2 * screenPos[2] - 1;
    multipliedVec4[3] = 1;
    exports_vec4.transformMat4(multipliedVec4, multipliedVec4, invertedComposedMatrix);
    if (multipliedVec4[3] === 0) {
      return;
    }
    multipliedVec4[3] = 1 / multipliedVec4[3];
    multipliedVec4[0] *= multipliedVec4[3];
    multipliedVec4[1] *= multipliedVec4[3];
    multipliedVec4[2] *= multipliedVec4[3];
    results.push(exports_vec3.copy(exports_vec3.create(), multipliedVec4));
  });
  return results;
};
// src/local-framework/graphics/renderers/index.ts
var exports_renderers = {};
__export(exports_renderers, {
  widgets: () => {
    {
      return exports_widgets;
    }
  },
  TextRenderer: () => {
    {
      return TextRenderer;
    }
  },
  StackRenderers: () => {
    {
      return StackRenderers;
    }
  },
  MultiBuffersRendering: () => {
    {
      return MultiBuffersRendering;
    }
  },
  GeometryRendererFlat: () => {
    {
      return GeometryRendererFlat;
    }
  },
  GeometryRenderer: () => {
    {
      return GeometryRenderer;
    }
  }
});

// src/local-framework/graphics/webgl2/index.ts
var exports_webgl2 = {};
__export(exports_webgl2, {
  getCubeMapType: () => {
    {
      return getCubeMapType;
    }
  },
  checkError: () => {
    {
      return checkError;
    }
  },
  WebGLContext: () => {
    {
      return WebGLContext;
    }
  },
  TextureRepeat: () => {
    {
      return TextureRepeat;
    }
  },
  TextureFilter: () => {
    {
      return TextureFilter;
    }
  },
  TextureArray: () => {
    {
      return TextureArray;
    }
  },
  Texture: () => {
    {
      return Texture;
    }
  },
  ShaderProgram: () => {
    {
      return ShaderProgram;
    }
  },
  RenderBuffer: () => {
    {
      return RenderBuffer;
    }
  },
  GeometryWrapper: () => {
    {
      return exports_GeometryWrapper;
    }
  },
  FrameBuffer: () => {
    {
      return FrameBuffer;
    }
  },
  FenceSync: () => {
    {
      return FenceSync;
    }
  },
  DataTextureVec4u8: () => {
    {
      return DataTextureVec4u8;
    }
  },
  DataTextureVec4f32: () => {
    {
      return DataTextureVec4f32;
    }
  },
  DataTexture: () => {
    {
      return DataTexture;
    }
  },
  CubeMapType: () => {
    {
      return CubeMapType;
    }
  },
  CubeMap: () => {
    {
      return CubeMap;
    }
  }
});

// src/local-framework/graphics/webgl2/WebGLContext.ts
class WebGLContext {
  static _gl = null;
  static _extensionLoseContext = null;
  static initialize(canvas) {
    const renderingContextAttribs = {
      alpha: false,
      antialias: false,
      depth: true,
      failIfMajorPerformanceCaveat: false,
      powerPreference: "high-performance",
      premultipliedAlpha: true,
      preserveDrawingBuffer: true,
      stencil: false
    };
    WebGLContext._gl = canvas.getContext("webgl2", renderingContextAttribs);
    if (!WebGLContext._gl)
      throw new Error("could not create webgl context");
    WebGLContext._extensionLoseContext = WebGLContext._gl.getExtension("WEBGL_lose_context");
    WebGLContext._gl.getExtension("EXT_color_buffer_float");
    WebGLContext._gl.getExtension("EXT_float_blend");
  }
  static getContext() {
    if (!WebGLContext._gl) {
      throw new Error("webgl context not initialized");
    }
    return WebGLContext._gl;
  }
  static getExtensionLoseContext() {
    return WebGLContext._extensionLoseContext;
  }
  static getExtensionLoseContextStrict() {
    if (!WebGLContext._extensionLoseContext) {
      throw new Error("lose context extension not available");
    }
    return WebGLContext._extensionLoseContext;
  }
}

// src/local-framework/graphics/webgl2/CubeMap.ts
var CubeMapType;
(function(CubeMapType2) {
  CubeMapType2[CubeMapType2["positiveX"] = 0] = "positiveX";
  CubeMapType2[CubeMapType2["negativeX"] = 1] = "negativeX";
  CubeMapType2[CubeMapType2["positiveY"] = 2] = "positiveY";
  CubeMapType2[CubeMapType2["negativeY"] = 3] = "negativeY";
  CubeMapType2[CubeMapType2["positiveZ"] = 4] = "positiveZ";
  CubeMapType2[CubeMapType2["negativeZ"] = 5] = "negativeZ";
})(CubeMapType || (CubeMapType = {}));
var getCubeMapType = (inType) => {
  const gl = WebGLContext.getContext();
  switch (inType) {
    case CubeMapType.positiveX:
      return gl.TEXTURE_CUBE_MAP_POSITIVE_X;
    case CubeMapType.negativeX:
      return gl.TEXTURE_CUBE_MAP_NEGATIVE_X;
    case CubeMapType.positiveY:
      return gl.TEXTURE_CUBE_MAP_POSITIVE_Y;
    case CubeMapType.negativeY:
      return gl.TEXTURE_CUBE_MAP_NEGATIVE_Y;
    case CubeMapType.positiveZ:
      return gl.TEXTURE_CUBE_MAP_POSITIVE_Z;
    case CubeMapType.negativeZ:
      return gl.TEXTURE_CUBE_MAP_NEGATIVE_Z;
  }
};

class CubeMap {
  _width = 0;
  _height = 0;
  _minBufferSize = 0;
  _texture = null;
  initialize(width, height) {
    if (width < 1)
      throw new Error(`cube map: width is < 1, input: ${width}`);
    if (height < 1)
      throw new Error(`cube map: height is < 1, input: ${height}`);
    const gl = WebGLContext.getContext();
    this._texture = gl.createTexture();
    this._width = width;
    this._height = height;
    this._minBufferSize = this._width * this._height * 4;
  }
  dispose() {
    const gl = WebGLContext.getContext();
    gl.deleteTexture(this._texture);
  }
  rawBind() {
    if (!this._texture)
      throw new Error("cube map: not initialized");
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_CUBE_MAP, this._texture);
  }
  bind(inCallback) {
    this.rawBind();
    inCallback(this);
    CubeMap.unbind();
  }
  static unbind() {
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);
  }
  loadFromMemory(inType, inPixels) {
    if (!this._texture)
      throw new Error("cube map: not initialized");
    if (inPixels.length < this._minBufferSize)
      throw new Error(`cube map: miss-matching pixels buffer size, input: ${inPixels.length}`);
    const gl = WebGLContext.getContext();
    const level = 0;
    const internalFormat = gl.RGBA;
    const border = 0;
    const srcFormat = gl.RGBA;
    const srcType = gl.UNSIGNED_BYTE;
    gl.texImage2D(getCubeMapType(inType), level, internalFormat, this._width, this._height, border, srcFormat, srcType, inPixels);
  }
  allocate() {
    const gl = WebGLContext.getContext();
    const level = 0;
    const internalFormat = gl.RGBA;
    const border = 0;
    const srcFormat = gl.RGBA;
    const srcType = gl.UNSIGNED_BYTE;
    const pixels = new Uint8Array(this._width * this._height * 4);
    [
      CubeMapType.negativeX,
      CubeMapType.negativeY,
      CubeMapType.negativeZ,
      CubeMapType.positiveX,
      CubeMapType.positiveY,
      CubeMapType.positiveZ
    ].forEach((type) => {
      gl.texImage2D(getCubeMapType(type), level, internalFormat, this._width, this._height, border, srcFormat, srcType, pixels);
    });
  }
  complete() {
    const gl = WebGLContext.getContext();
    gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
  }
  getWidth() {
    if (!this._texture)
      throw new Error("cube map: not initialized");
    return this._width;
  }
  getHeight() {
    if (!this._texture)
      throw new Error("cube map: not initialized");
    return this._height;
  }
  getRawObject() {
    if (!this._texture)
      throw new Error("texture not initialized");
    return this._texture;
  }
}
// src/local-framework/graphics/webgl2/DataTexture.ts
class DataTexture {
  _texture = null;
  _buffer;
  initialize(data) {
    if (this._texture) {
      throw new Error("data texture already initialized");
    }
    const gl = WebGLContext.getContext();
    this._texture = gl.createTexture();
    if (!this._texture) {
      throw new Error("data texture failed to be created");
    }
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    this.allocate(data);
  }
  dispose() {
    const gl = WebGLContext.getContext();
    gl.deleteTexture(this._texture);
  }
  allocate(data) {
    if (!this._texture) {
      throw new Error("data texture not initialized");
    }
    const dataSize = Array.isArray(data) ? data.length : data;
    if (dataSize <= 0) {
      throw new Error("texture: width must be positive");
    }
    if (dataSize > 2048) {
      throw new Error(`data texture max size is 2048 (input was ${dataSize})`);
    }
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
    if (Array.isArray(data)) {
      this._buffer = new Float32Array(data);
    } else {
      this._buffer = new Float32Array(data);
    }
    const level = 0;
    const internalFormat = gl.R32F;
    const width = dataSize;
    const height = 1;
    const border = 0;
    const format = gl.RED;
    const type = gl.FLOAT;
    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, format, type, this._buffer);
  }
  update(start, data) {
    if (!this._texture) {
      throw new Error("data texture not initialized");
    }
    if (!this._buffer) {
      throw new Error("data texture update but not previously allocated");
    }
    if (start + data.length > this._buffer.length) {
      throw new Error(`data texture update but size is larger (start: ${start}, length: ${data.length}, max: ${this._buffer.length})`);
    }
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
    for (let ii = 0;ii < data.length; ++ii) {
      this._buffer[ii] = data[ii];
    }
    const level = 0;
    const width = data.length;
    const height = 1;
    const format = gl.RED;
    const type = gl.FLOAT;
    const xoffset = start;
    const yoffset = 0;
    const srcOffset = 0;
    gl.texSubImage2D(gl.TEXTURE_2D, level, xoffset, yoffset, width, height, format, type, this._buffer, srcOffset);
  }
  rawBind() {
    if (!this._texture) {
      throw new Error("data texture not initialized");
    }
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
  }
  preBind(inCallback) {
    this.rawBind();
    inCallback(this);
  }
  bind(inCallback) {
    this.preBind(inCallback);
    DataTexture.unbind();
  }
  static unbind() {
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, null);
  }
}
// src/local-framework/graphics/webgl2/DataTextureVec4f32.ts
class DataTextureVec4f32 {
  _texture = null;
  _buffer;
  initialize(data = 0) {
    if (this._texture) {
      throw new Error("data texture already initialized");
    }
    const gl = WebGLContext.getContext();
    this._texture = gl.createTexture();
    if (!this._texture) {
      throw new Error("data texture failed to be created");
    }
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    this.allocate(data);
  }
  dispose() {
    const gl = WebGLContext.getContext();
    gl.deleteTexture(this._texture);
  }
  allocate(data) {
    if (!this._texture) {
      throw new Error("data texture not initialized");
    }
    const dataSize = Array.isArray(data) ? data.length : Math.ceil(data / 4);
    if (dataSize <= 0) {
      throw new Error("texture: width must be positive");
    }
    if (dataSize > 2048) {
      throw new Error(`data texture max size is 2048 (input was ${dataSize})`);
    }
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
    if (Array.isArray(data)) {
      this._buffer = new Float32Array(data.flat());
    } else {
      this._buffer = new Float32Array(data);
    }
    const level = 0;
    const internalFormat = gl.RGBA32F;
    const width = dataSize;
    const height = 1;
    const border = 0;
    const format = gl.RGBA;
    const type = gl.FLOAT;
    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, format, type, this._buffer);
  }
  update(start, data) {
    if (!this._texture) {
      throw new Error("data texture not initialized");
    }
    if (!this._buffer) {
      throw new Error("data texture update but not previously allocated");
    }
    if (start + data.length > this._buffer.length) {
      throw new Error(`data texture update but size is larger (start: ${start}, length: ${data.length}, max: ${this._buffer.length})`);
    }
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
    for (let ii = 0;ii < data.length; ++ii) {
      this._buffer[ii * 4 + 0] = data[ii][0];
      this._buffer[ii * 4 + 1] = data[ii][1];
      this._buffer[ii * 4 + 2] = data[ii][2];
      this._buffer[ii * 4 + 3] = data[ii][3];
    }
    const level = 0;
    const width = data.length;
    const height = 1;
    const format = gl.RGBA;
    const type = gl.FLOAT;
    const xoffset = start;
    const yoffset = 0;
    const srcOffset = 0;
    gl.texSubImage2D(gl.TEXTURE_2D, level, xoffset, yoffset, width, height, format, type, this._buffer, srcOffset);
  }
  rawBind() {
    if (!this._texture) {
      throw new Error("data texture not initialized");
    }
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
  }
  preBind(inCallback) {
    this.rawBind();
    inCallback(this);
  }
  bind(inCallback) {
    this.preBind(inCallback);
    DataTextureVec4f32.unbind();
  }
  static unbind() {
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, null);
  }
}
// src/local-framework/graphics/webgl2/DataTextureVec4u8.ts
class DataTextureVec4u8 {
  _texture = null;
  _buffer;
  initialize(data = []) {
    if (this._texture) {
      throw new Error("data texture already initialized");
    }
    const gl = WebGLContext.getContext();
    this._texture = gl.createTexture();
    if (!this._texture) {
      throw new Error("data texture failed to be created");
    }
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    this.allocate(data);
  }
  dispose() {
    const gl = WebGLContext.getContext();
    gl.deleteTexture(this._texture);
  }
  allocate(data) {
    if (!this._texture) {
      throw new Error("data texture not initialized");
    }
    if (data.length <= 0) {
      throw new Error("texture: width must be positive");
    }
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
    this._buffer = new Uint8Array(data.flat());
    const level = 0;
    const internalFormat = gl.RGBA;
    const width = data.length;
    const height = 1;
    const border = 0;
    const format = gl.RGBA;
    const type = gl.UNSIGNED_BYTE;
    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, format, type, this._buffer);
  }
  update(start, data) {
    if (!this._texture) {
      throw new Error("data texture not initialized");
    }
    if (!this._buffer) {
      throw new Error("data texture update but not previously allocated");
    }
    if (start + data.length > this._buffer.length) {
      throw new Error(`data texture update but size is larger (start: ${start}, length: ${data.length}, max: ${this._buffer.length})`);
    }
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
    for (let ii = 0;ii < data.length; ++ii) {
      this._buffer[ii * 4 + 0] = data[ii][0];
      this._buffer[ii * 4 + 1] = data[ii][1];
      this._buffer[ii * 4 + 2] = data[ii][2];
      this._buffer[ii * 4 + 3] = data[ii][3];
    }
    const level = 0;
    const width = data.length;
    const height = 1;
    const format = gl.RGBA;
    const type = gl.UNSIGNED_BYTE;
    const xoffset = start;
    const yoffset = 0;
    const srcOffset = 0;
    gl.texSubImage2D(gl.TEXTURE_2D, level, xoffset, yoffset, width, height, format, type, this._buffer, srcOffset);
  }
  rawBind() {
    if (!this._texture) {
      throw new Error("data texture not initialized");
    }
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
  }
  preBind(inCallback) {
    this.rawBind();
    inCallback(this);
  }
  bind(inCallback) {
    this.preBind(inCallback);
    DataTextureVec4u8.unbind();
  }
  static unbind() {
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, null);
  }
}
// src/local-framework/graphics/webgl2/Error.ts
var checkError = () => {
  const gl = WebGLContext.getContext();
  const errorId = gl.getError();
  switch (errorId) {
    case gl.INVALID_ENUM:
      throw new Error("gl.INVALID_ENUM\nAn unacceptable value is specified for an enumerated argument. The offending command is ignored and has no other side effect than to set the error flag.");
    case gl.INVALID_VALUE:
      throw new Error("gl.INVALID_VALUE\nA numeric argument is out of range. The offending command is ignored and has no other side effect than to set the error flag.");
    case gl.INVALID_OPERATION:
      throw new Error("gl.INVALID_OPERATION\nThe specified operation is not allowed in the current state. The offending command is ignored and has no other side effect than to set the error flag.");
    case gl.INVALID_FRAMEBUFFER_OPERATION:
      throw new Error("gl.INVALID_FRAMEBUFFER_OPERATION\nThe framebuffer object is not complete. The offending command is ignored and has no other side effect than to set the error flag.");
    case gl.OUT_OF_MEMORY:
      throw new Error("gl.OUT_OF_MEMORY\nThere is not enough memory left to execute the command. The state of the GL is undefined, except for the state of the error flags, after this error is recorded.");
    case gl.CONTEXT_LOST_WEBGL:
      throw new Error("gl.CONTEXT_LOST_WEBGL\n If the WebGL context is lost, this error is returned on the first call to getError. Afterwards and until the context has been restored, it returns gl.NO_ERROR.");
  }
};
// src/local-framework/graphics/webgl2/Fence.ts
class FenceSync {
  _sync;
  constructor() {
  }
  dispose() {
    if (!this._sync) {
      return;
    }
    const gl = WebGLContext.getContext();
    gl.deleteSync(this._sync);
    this._sync = undefined;
  }
  isStarted() {
    return this._sync !== undefined;
  }
  start() {
    if (this._sync) {
      this.dispose();
    }
    const gl = WebGLContext.getContext();
    const tmpSync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);
    if (tmpSync === null) {
      throw new Error("could not create a webgl fence");
    }
    this._sync = tmpSync;
    gl.flush();
    gl.finish();
  }
  isSignaled() {
    if (!this._sync) {
      throw new Error("fence not started");
    }
    const gl = WebGLContext.getContext();
    const signaled = gl.getSyncParameter(this._sync, gl.SYNC_STATUS);
    return signaled === gl.SIGNALED;
  }
  wait(timeoutNanoSec) {
    if (!this._sync) {
      throw new Error("fence not started");
    }
    const gl = WebGLContext.getContext();
    const bitflags = 0;
    const status = gl.clientWaitSync(this._sync, bitflags, timeoutNanoSec);
    switch (status) {
      case gl.TIMEOUT_EXPIRED:
        return "timed-out";
      case gl.WAIT_FAILED:
        console.warn("fence.wait -> should never get here");
        this.dispose();
        return "done";
      case gl.ALREADY_SIGNALED:
      case gl.CONDITION_SATISFIED:
      default:
        this.dispose();
        return "done";
    }
  }
}
// src/local-framework/graphics/webgl2/FrameBuffer.ts
class FrameBuffer {
  _frameBuffer;
  constructor() {
    const gl = WebGLContext.getContext();
    const tmpFbo = gl.createFramebuffer();
    if (tmpFbo === null)
      throw new Error("null frame buffer object");
    this._frameBuffer = tmpFbo;
  }
  dispose() {
    const gl = WebGLContext.getContext();
    gl.deleteFramebuffer(this._frameBuffer);
  }
  rawBind() {
    const gl = WebGLContext.getContext();
    gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);
  }
  bind(inCallback) {
    this.rawBind();
    inCallback(this);
    FrameBuffer.unbind();
  }
  static unbind() {
    const gl = WebGLContext.getContext();
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  }
  attachTexture(texture) {
    const gl = WebGLContext.getContext();
    const mipmapLevel = 0;
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture.getRawObject(), mipmapLevel);
  }
  attachDepthTexture(texture) {
    const gl = WebGLContext.getContext();
    const mipmapLevel = 0;
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, texture.getRawObject(), mipmapLevel);
  }
  attachRenderBuffer(texture) {
    const gl = WebGLContext.getContext();
    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, texture.getRawObject());
  }
  attachCubeMap(texture, type) {
    const gl = WebGLContext.getContext();
    const mipmapLevel = 0;
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, getCubeMapType(type), texture.getRawObject(), mipmapLevel);
  }
  getPixels(x, y, width, height, outDst) {
    const gl = WebGLContext.getContext();
    gl.readPixels(x, y, width, height, gl.RGBA, gl.UNSIGNED_BYTE, outDst);
  }
}
// src/local-framework/graphics/webgl2/GeometryWrapper.ts
var exports_GeometryWrapper = {};
__export(exports_GeometryWrapper, {
  PrimitiveType: () => {
    {
      return PrimitiveType;
    }
  },
  GeometryBuilder: () => {
    {
      return GeometryBuilder;
    }
  },
  Geometry: () => {
    {
      return Geometry;
    }
  },
  BytesPerPixel: () => {
    {
      return BytesPerPixel;
    }
  },
  AttributeType: () => {
    {
      return AttributeType;
    }
  }
});
var BytesPerPixel = 4;
var AttributeType;
(function(AttributeType2) {
  AttributeType2[AttributeType2["float"] = 0] = "float";
  AttributeType2[AttributeType2["vec2f"] = 1] = "vec2f";
  AttributeType2[AttributeType2["vec3f"] = 2] = "vec3f";
  AttributeType2[AttributeType2["vec4f"] = 3] = "vec4f";
  AttributeType2[AttributeType2["mat3f"] = 4] = "mat3f";
  AttributeType2[AttributeType2["mat4f"] = 5] = "mat4f";
})(AttributeType || (AttributeType = {}));
var getAttrTypeSize = (inType) => {
  switch (inType) {
    case AttributeType.float:
      return 1;
    case AttributeType.vec2f:
      return 2;
    case AttributeType.vec3f:
      return 3;
    case AttributeType.vec4f:
      return 4;
    case AttributeType.mat3f:
      return 9;
    case AttributeType.mat4f:
      return 16;
  }
};
var PrimitiveType;
(function(PrimitiveType2) {
  PrimitiveType2[PrimitiveType2["lines"] = 0] = "lines";
  PrimitiveType2[PrimitiveType2["lineStrip"] = 1] = "lineStrip";
  PrimitiveType2[PrimitiveType2["lineLoop"] = 2] = "lineLoop";
  PrimitiveType2[PrimitiveType2["triangles"] = 3] = "triangles";
  PrimitiveType2[PrimitiveType2["triangleStrip"] = 4] = "triangleStrip";
  PrimitiveType2[PrimitiveType2["triangleFan"] = 5] = "triangleFan";
})(PrimitiveType || (PrimitiveType = {}));
var _ensureFloatBuffer = (vertices) => {
  if (vertices instanceof Float32Array) {
    return vertices;
  }
  return new Float32Array(vertices);
};
var _getBufferUsage = (inMode) => {
  const gl = WebGLContext.getContext();
  if (inMode === "dynamic") {
    return gl.DYNAMIC_DRAW;
  }
  if (inMode === "streaming") {
    return gl.STREAM_DRAW;
  }
  return gl.STATIC_DRAW;
};

class Geometry {
  _def;
  _vao;
  _vbos;
  _primitiveType;
  _primitiveStart = 0;
  _primitiveCount = 0;
  _instanceCount = 0;
  _isInstanced = false;
  constructor(shader, def) {
    const gl = WebGLContext.getContext();
    if (def.vbos.length === 0) {
      throw new Error("empty vbo definition");
    }
    for (const vbo of def.vbos) {
      if (vbo.attrs.length === 0) {
        throw new Error("empty vbo attribute definition");
      }
      for (const attr of vbo.attrs) {
        if (!shader.hasAttribute(attr.name)) {
          throw new Error(`attribute not found, name="${attr.name}"`);
        }
      }
    }
    this._def = def;
    switch (def.primitiveType) {
      case PrimitiveType.lines:
        this._primitiveType = gl.LINES;
        break;
      case PrimitiveType.lineStrip:
        this._primitiveType = gl.LINE_STRIP;
        break;
      case PrimitiveType.lineLoop:
        this._primitiveType = gl.LINE_LOOP;
        break;
      case PrimitiveType.triangles:
        this._primitiveType = gl.TRIANGLES;
        break;
      case PrimitiveType.triangleStrip:
        this._primitiveType = gl.TRIANGLE_STRIP;
        break;
      case PrimitiveType.triangleFan:
        this._primitiveType = gl.TRIANGLE_FAN;
        break;
      default:
        throw new Error("primitive type not found");
    }
    const newVao = gl.createVertexArray();
    if (!newVao) {
      throw new Error("fail o create a vao unit");
    }
    this._vao = newVao;
    gl.bindVertexArray(this._vao);
    this._vbos = [];
    for (const vboDef of this._def.vbos) {
      const newVbo = gl.createBuffer();
      if (!newVbo) {
        throw new Error("fail o create a vbo unit");
      }
      this._vbos.push({
        object: newVbo,
        maxSize: 0,
        mode: vboDef.mode || "static"
      });
      gl.bindBuffer(gl.ARRAY_BUFFER, newVbo);
      let stride = vboDef.stride || 0;
      if (!stride) {
        for (const attr of vboDef.attrs) {
          switch (attr.type) {
            case AttributeType.float:
              stride += 1;
              break;
            case AttributeType.vec2f:
              stride += 2;
              break;
            case AttributeType.vec3f:
              stride += 3;
              break;
            case AttributeType.vec4f:
              stride += 4;
              break;
            case AttributeType.mat3f:
              stride += 9;
              break;
            case AttributeType.mat4f:
              stride += 16;
              break;
          }
        }
        stride *= BytesPerPixel;
      }
      for (const attr of vboDef.attrs) {
        let rowSize = 1;
        let totalRows = 1;
        switch (attr.type) {
          case AttributeType.float:
            rowSize = 1;
            totalRows = 1;
            break;
          case AttributeType.vec2f:
            rowSize = 2;
            totalRows = 1;
            break;
          case AttributeType.vec3f:
            rowSize = 3;
            totalRows = 1;
            break;
          case AttributeType.vec4f:
            rowSize = 4;
            totalRows = 1;
            break;
          case AttributeType.mat3f:
            rowSize = 3;
            totalRows = 3;
            break;
          case AttributeType.mat4f:
            rowSize = 4;
            totalRows = 4;
            break;
        }
        const attrLocation = shader.getAttribute(attr.name);
        for (let ii = 0;ii < totalRows; ++ii) {
          const attrId = attrLocation + ii;
          const rowIndex = (attr.index + ii * rowSize) * BytesPerPixel;
          gl.enableVertexAttribArray(attrId);
          gl.vertexAttribPointer(attrId, rowSize, gl.FLOAT, false, stride, rowIndex);
          if (vboDef.instanced === true) {
            gl.vertexAttribDivisor(attrId, 1);
            this._isInstanced = true;
          }
        }
      }
    }
    gl.bindVertexArray(null);
  }
  dispose() {
    const gl = WebGLContext.getContext();
    for (const vbo of this._vbos) {
      gl.deleteBuffer(vbo.object);
    }
    this._vbos.length = 0;
    gl.deleteVertexArray(this._vao);
  }
  setBufferSize(inIndex, inSize) {
    if (inIndex < 0 || inIndex >= this._vbos.length) {
      throw new Error(`no vbo available to that index (input: ${inIndex})`);
    }
    if (inSize <= 0) {
      throw new Error(`vbo must be > 0 (input: ${inSize})`);
    }
    const currVbo = this._vbos[inIndex];
    if (inSize < currVbo.maxSize) {
      return;
    }
    currVbo.maxSize = inSize;
    const gl = WebGLContext.getContext();
    gl.bindBuffer(gl.ARRAY_BUFFER, currVbo.object);
    gl.bufferData(gl.ARRAY_BUFFER, inSize, _getBufferUsage(currVbo.mode));
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
  }
  setFloatBufferSize(index, inSize) {
    this.setBufferSize(index, inSize * 4);
  }
  allocateBuffer(inIndex, inVertices, inSize) {
    if (inIndex < 0 || inIndex >= this._vbos.length) {
      throw new Error(`no vbo available to that index (input: ${inIndex}, total vbos: ${this._vbos.length})`);
    }
    if (inSize <= 0) {
      throw new Error(`size must be > 0 (input: ${inSize})`);
    }
    const currVbo = this._vbos[inIndex];
    if (inSize <= 0) {
      throw new Error(`vbo must be > 0 (input: ${inSize})`);
    }
    currVbo.maxSize = inSize;
    const buffer = _ensureFloatBuffer(inVertices);
    const gl = WebGLContext.getContext();
    gl.bindBuffer(gl.ARRAY_BUFFER, currVbo.object);
    gl.bufferData(gl.ARRAY_BUFFER, buffer, _getBufferUsage(currVbo.mode), 0, inSize);
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
  }
  updateBuffer(inIndex, inVertices, inSize, inStartOffset) {
    if (inIndex < 0 || inIndex >= this._vbos.length) {
      throw new Error(`no vbo available to that index (input: ${inIndex}, total vbos: ${this._vbos.length})`);
    }
    if (inSize <= 0) {
      throw new Error(`size must be > 0 (input: ${inSize})`);
    }
    const currVbo = this._vbos[inIndex];
    if (inStartOffset !== undefined) {
      if (inStartOffset < 0) {
        throw new Error(`offset must be >= 0 (input: ${inStartOffset})`);
      }
      const endIndex = inStartOffset + inSize;
      if (endIndex > currVbo.maxSize) {
        throw new Error(`offset + size > to vbo max size (input: ${endIndex}, max size: ${currVbo.maxSize})`);
      }
    } else if (inSize > currVbo.maxSize) {
      throw new Error(`size must be < to vbo max size (input: ${inSize}, max size: ${currVbo.maxSize})`);
    }
    const buffer = _ensureFloatBuffer(inVertices);
    const gl = WebGLContext.getContext();
    gl.bindBuffer(gl.ARRAY_BUFFER, currVbo.object);
    gl.bufferSubData(gl.ARRAY_BUFFER, inStartOffset ?? 0, buffer.slice(0, inSize), 0, inSize);
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
  }
  render() {
    if (this._primitiveCount == 0) {
      return;
    }
    if (this._isInstanced && this._instanceCount == 0) {
      return;
    }
    const gl = WebGLContext.getContext();
    gl.bindVertexArray(this._vao);
    if (this._isInstanced === true) {
      gl.drawArraysInstanced(this._primitiveType, this._primitiveStart, this._primitiveCount, this._instanceCount);
    } else {
      gl.drawArrays(this._primitiveType, this._primitiveStart, this._primitiveCount);
    }
    gl.bindVertexArray(null);
  }
  setPrimitiveStart(start) {
    this._primitiveStart = start;
  }
  setPrimitiveCount(count) {
    this._primitiveCount = count;
  }
  setInstancedCount(count) {
    this._instanceCount = count;
  }
}

class GeometryBuilder {
  _def = {
    vbos: [],
    primitiveType: PrimitiveType.lines
  };
  reset() {
    this._def = {
      vbos: [],
      primitiveType: PrimitiveType.lines
    };
    return this;
  }
  getDef() {
    return this._def;
  }
  setPrimitiveType(inPrimitive) {
    this._def.primitiveType = PrimitiveType[inPrimitive];
    return this;
  }
  addVbo() {
    this._def.vbos.push({
      attrs: [],
      instanced: false
    });
    return this;
  }
  setVboAsInstanced() {
    this._getLastVbo().instanced = true;
    return this;
  }
  setVboAsDynamic() {
    this._getLastVbo().mode = "dynamic";
    return this;
  }
  setVboAsStreaming() {
    this._getLastVbo().mode = "streaming";
    return this;
  }
  setStride(inStride) {
    this._getLastVbo().stride = inStride;
    return this;
  }
  addVboAttribute(inName, inType) {
    const currVbo = this._getLastVbo();
    const lastAttr = currVbo.attrs.length > 0 ? currVbo.attrs[currVbo.attrs.length - 1] : null;
    currVbo.attrs.push({
      name: inName,
      type: AttributeType[inType],
      index: lastAttr ? lastAttr.index + getAttrTypeSize(lastAttr.type) : 0
    });
    return this;
  }
  _getLastVbo() {
    if (this._def.vbos.length === 0) {
      throw new Error("no VBO setup");
    }
    return this._def.vbos[this._def.vbos.length - 1];
  }
}
// src/local-framework/graphics/webgl2/RenderBuffer.ts
class RenderBuffer {
  _buffer;
  constructor() {
    const gl = WebGLContext.getContext();
    const tmpBuf = gl.createRenderbuffer();
    if (tmpBuf === null) {
      throw new Error("null render buffer object");
    }
    this._buffer = tmpBuf;
  }
  dispose() {
    const gl = WebGLContext.getContext();
    gl.deleteRenderbuffer(this._buffer);
  }
  rawBind() {
    const gl = WebGLContext.getContext();
    gl.bindRenderbuffer(gl.RENDERBUFFER, this._buffer);
  }
  preBind(inCallback) {
    this.rawBind();
    inCallback(this);
  }
  bind(inCallback) {
    this.preBind(inCallback);
    RenderBuffer.unbind();
  }
  static unbind() {
    const gl = WebGLContext.getContext();
    gl.bindRenderbuffer(gl.RENDERBUFFER, null);
  }
  setSize(type, width, height) {
    const gl = WebGLContext.getContext();
    let internalFormat = gl.DEPTH_COMPONENT32F;
    switch (type) {
      case "depth16": {
        internalFormat = gl.DEPTH_COMPONENT16;
        break;
      }
      case "depth24": {
        internalFormat = gl.DEPTH_COMPONENT16;
        break;
      }
    }
    gl.renderbufferStorage(gl.RENDERBUFFER, internalFormat, width, height);
  }
  getRawObject() {
    return this._buffer;
  }
}
// src/local-framework/graphics/webgl2/ShaderProgram.ts
class ShaderProgram {
  static _isBound = null;
  _name;
  _program;
  _attributes = new Map;
  _uniforms = new Map;
  constructor(inName, opt) {
    this._name = inName;
    const gl = WebGLContext.getContext();
    const vertexShader = this._getShader(opt.vertexSrc, gl.VERTEX_SHADER);
    const fragmentShader = this._getShader(opt.fragmentSrc, gl.FRAGMENT_SHADER);
    const program = gl.createProgram();
    if (!program) {
      throw new Error("could not create a shader program");
    }
    gl.attachShader(program, vertexShader);
    gl.attachShader(program, fragmentShader);
    gl.linkProgram(program);
    gl.deleteShader(vertexShader);
    gl.deleteShader(fragmentShader);
    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
      const lastError = gl.getProgramInfoLog(program);
      throw new Error("Failed to initialized shaders, Error linking:" + lastError);
    }
    this._program = program;
    this.bind(() => {
      this._getAttributes(opt.attributes);
      this._getUniforms(opt.uniforms);
    });
  }
  dispose() {
    const gl = WebGLContext.getContext();
    gl.deleteProgram(this._program);
  }
  bind(inCallback) {
    if (ShaderProgram._isBound !== null) {
      throw new Error(`Double shader binding (bound: ${ShaderProgram._isBound._name}, binding: ${this._name})`);
    }
    ShaderProgram._isBound = this;
    const gl = WebGLContext.getContext();
    gl.useProgram(this._program);
    inCallback(this);
    ShaderProgram.unbind();
  }
  static unbind() {
    const gl = WebGLContext.getContext();
    gl.useProgram(null);
    ShaderProgram._isBound = null;
  }
  isBound() {
    return ShaderProgram._isBound === this;
  }
  hasAttribute(name) {
    return this._attributes.has(name);
  }
  getAttribute(name) {
    const attribute = this._attributes.get(name);
    if (attribute === undefined) {
      throw new Error(`attribute not found: ${name}`);
    }
    return attribute;
  }
  getUniform(name) {
    const uniform = this._uniforms.get(name);
    if (uniform === undefined) {
      throw new Error(`uniform not found: ${name}`);
    }
    return uniform;
  }
  setTextureUniform(inName, inTexture, inIndex) {
    const gl = WebGLContext.getContext();
    gl.activeTexture(gl.TEXTURE0 + inIndex);
    gl.uniform1i(this.getUniform(inName), inIndex);
    inTexture.rawBind();
  }
  setInteger1Uniform(inName, inValue) {
    const gl = WebGLContext.getContext();
    gl.uniform1i(this.getUniform(inName), inValue);
  }
  setInteger2Uniform(inName, inValueX, inValueY) {
    const gl = WebGLContext.getContext();
    gl.uniform2i(this.getUniform(inName), inValueX, inValueY);
  }
  setInteger3Uniform(inName, inValueX, inValueY, inValueZ) {
    const gl = WebGLContext.getContext();
    gl.uniform3i(this.getUniform(inName), inValueX, inValueY, inValueZ);
  }
  setFloat1Uniform(inName, inValue) {
    const gl = WebGLContext.getContext();
    gl.uniform1f(this.getUniform(inName), inValue);
  }
  setFloat2Uniform(inName, inValueX, inValueY) {
    const gl = WebGLContext.getContext();
    gl.uniform2f(this.getUniform(inName), inValueX, inValueY);
  }
  setFloat3Uniform(inName, inValueX, inValueY, inValueZ) {
    const gl = WebGLContext.getContext();
    gl.uniform3f(this.getUniform(inName), inValueX, inValueY, inValueZ);
  }
  setMatrix3Uniform(inName, inMatrix) {
    const gl = WebGLContext.getContext();
    gl.uniformMatrix3fv(this.getUniform(inName), false, inMatrix);
  }
  setMatrix4Uniform(inName, inMatrix) {
    const gl = WebGLContext.getContext();
    gl.uniformMatrix4fv(this.getUniform(inName), false, inMatrix);
  }
  _getAttributes(attributes) {
    const gl = WebGLContext.getContext();
    for (let ii = 0;ii < attributes.length; ++ii) {
      const value = gl.getAttribLocation(this._program, attributes[ii]);
      if (value < 0) {
        throw new Error(`attribute not found => ${attributes[ii]}`);
      }
      this._attributes.set(attributes[ii], value);
    }
  }
  _getUniforms(uniforms) {
    const gl = WebGLContext.getContext();
    for (let ii = 0;ii < uniforms.length; ++ii) {
      const value = gl.getUniformLocation(this._program, uniforms[ii]);
      if (value === null) {
        throw new Error(`uniform not found => ${uniforms[ii]}`);
      }
      this._uniforms.set(uniforms[ii], value);
    }
  }
  _getShader(src, type) {
    const gl = WebGLContext.getContext();
    const shader = gl.createShader(type);
    if (!shader) {
      throw new Error("could not create a shader");
    }
    gl.shaderSource(shader, src);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
      let error_str = gl.getShaderInfoLog(shader);
      if (!error_str)
        error_str = "failed to compile a shader";
      throw new Error(error_str);
    }
    return shader;
  }
}
// src/local-framework/graphics/webgl2/Texture.ts
var TextureFilter;
(function(TextureFilter2) {
  TextureFilter2[TextureFilter2["pixelated"] = 0] = "pixelated";
  TextureFilter2[TextureFilter2["linear"] = 1] = "linear";
  TextureFilter2[TextureFilter2["mipmap"] = 2] = "mipmap";
})(TextureFilter || (TextureFilter = {}));
var TextureRepeat;
(function(TextureRepeat2) {
  TextureRepeat2[TextureRepeat2["noRepeat"] = 0] = "noRepeat";
  TextureRepeat2[TextureRepeat2["repeat"] = 1] = "repeat";
})(TextureRepeat || (TextureRepeat = {}));

class Texture {
  _width = 0;
  _height = 0;
  _texture = null;
  initialize() {
    if (this._texture)
      throw new Error("texture: already initialized");
    const gl = WebGLContext.getContext();
    this._texture = gl.createTexture();
  }
  rawBind() {
    if (!this._texture)
      throw new Error("texture: not initialized");
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
  }
  preBind(inCallback) {
    this.rawBind();
    inCallback(this);
  }
  bind(inCallback) {
    this.preBind(inCallback);
    Texture.unbind();
  }
  static unbind() {
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, null);
  }
  loadFromImage(inImage, mode = TextureFilter.pixelated, repeat = TextureRepeat.noRepeat) {
    this._allocate(inImage.width, inImage.height, inImage, mode, repeat);
  }
  loadFromMemory(inWidth, inHeight, inPixels, mode = TextureFilter.pixelated, repeat = TextureRepeat.noRepeat) {
    this._allocate(inWidth, inHeight, inPixels, mode, repeat);
  }
  allocate(inWidth, inHeight, mode = TextureFilter.pixelated, repeat = TextureRepeat.noRepeat) {
    this._allocate(inWidth, inHeight, null, mode, repeat);
  }
  allocateDepth(inWidth, inHeight, mode = TextureFilter.pixelated, repeat = TextureRepeat.noRepeat) {
    this._allocate(inWidth, inHeight, null, mode, repeat, true);
  }
  resize(inWidth, inHeight, mode = TextureFilter.pixelated, repeat = TextureRepeat.noRepeat) {
    this._allocate(inWidth, inHeight, null, mode, repeat);
  }
  _allocate(inWidth, inHeight, inPixels = null, mode = TextureFilter.pixelated, repeat = TextureRepeat.noRepeat, isDepthTexture = false) {
    if (!this._texture) {
      throw new Error("texture: not initialized");
    }
    if (inWidth <= 0) {
      throw new Error("texture: width must be positive");
    }
    if (inHeight <= 0) {
      throw new Error("texture: height must be positive");
    }
    const gl = WebGLContext.getContext();
    this._width = inWidth;
    this._height = inHeight;
    const level = 0;
    const internalFormat = isDepthTexture ? gl.DEPTH_COMPONENT32F : gl.RGBA;
    const border = 0;
    const srcFormat = isDepthTexture ? gl.DEPTH_COMPONENT : gl.RGBA;
    const srcType = isDepthTexture ? gl.FLOAT : gl.UNSIGNED_BYTE;
    if (inPixels instanceof HTMLImageElement) {
      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, srcFormat, srcType, inPixels);
    } else {
      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, inWidth, inHeight, border, srcFormat, srcType, inPixels);
    }
    if (repeat === TextureRepeat.noRepeat) {
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    } else if (repeat === TextureRepeat.repeat) {
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
    }
    if (mode === TextureFilter.pixelated) {
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    } else if (mode === TextureFilter.linear) {
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
    } else if (mode === TextureFilter.mipmap) {
      gl.generateMipmap(gl.TEXTURE_2D);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
    }
  }
  getWidth() {
    if (!this._texture)
      throw new Error("texture not initialized");
    return this._width;
  }
  getHeight() {
    if (!this._texture)
      throw new Error("texture not initialized");
    return this._height;
  }
  getRawObject() {
    if (!this._texture)
      throw new Error("texture not initialized");
    return this._texture;
  }
}
// src/local-framework/graphics/webgl2/TextureArray.ts
class TextureArray {
  _width = 0;
  _height = 0;
  _texture = null;
  initialize() {
    if (this._texture)
      throw new Error("texture: already initialized");
    const gl = WebGLContext.getContext();
    this._texture = gl.createTexture();
  }
  dispose() {
    const gl = WebGLContext.getContext();
    gl.deleteTexture(this._texture);
  }
  rawBind() {
    if (!this._texture)
      throw new Error("texture: not initialized");
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D_ARRAY, this._texture);
  }
  preBind(inCallback) {
    this.rawBind();
    inCallback(this);
  }
  bind(inCallback) {
    this.preBind(inCallback);
    TextureArray.unbind();
  }
  static unbind() {
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D_ARRAY, null);
  }
  loadFromImage(inWidth, inHeight, inTotalLayers, inImage, mode = TextureFilter.pixelated, repeat = TextureRepeat.noRepeat) {
    this._allocate(inWidth, inHeight, inTotalLayers, inImage, mode, repeat);
  }
  loadFromMemory(inWidth, inHeight, inTotalLayers, inPixels, mode = TextureFilter.pixelated, repeat = TextureRepeat.noRepeat) {
    this._allocate(inWidth, inHeight, inTotalLayers, inPixels, mode, repeat);
  }
  _allocate(inWidth, inHeight, inTotalLayers, inPixels = null, mode = TextureFilter.pixelated, repeat = TextureRepeat.noRepeat) {
    if (!this._texture) {
      throw new Error("texture: not initialized");
    }
    if (inWidth <= 0) {
      throw new Error("texture: width must be positive");
    }
    if (inHeight <= 0) {
      throw new Error("texture: height must be positive");
    }
    const gl = WebGLContext.getContext();
    this._width = inWidth;
    this._height = inHeight;
    const level = 0;
    const internalFormat = gl.RGBA;
    const border = 0;
    const srcFormat = gl.RGBA;
    const srcType = gl.UNSIGNED_BYTE;
    if (inPixels instanceof HTMLImageElement) {
      gl.texImage3D(gl.TEXTURE_2D_ARRAY, level, internalFormat, inWidth, inHeight, inTotalLayers, border, srcFormat, srcType, inPixels);
    } else {
      gl.texImage3D(gl.TEXTURE_2D_ARRAY, level, internalFormat, inWidth, inHeight, inTotalLayers, border, srcFormat, srcType, inPixels);
    }
    if (repeat === TextureRepeat.noRepeat) {
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    } else if (repeat === TextureRepeat.repeat) {
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_S, gl.REPEAT);
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_T, gl.REPEAT);
    }
    if (mode === TextureFilter.pixelated) {
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    } else if (mode === TextureFilter.linear) {
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
    } else if (mode === TextureFilter.mipmap) {
      gl.generateMipmap(gl.TEXTURE_2D_ARRAY);
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
    }
  }
  getWidth() {
    if (!this._texture)
      throw new Error("texture not initialized");
    return this._width;
  }
  getHeight() {
    if (!this._texture)
      throw new Error("texture not initialized");
    return this._height;
  }
  getRawObject() {
    if (!this._texture)
      throw new Error("texture not initialized");
    return this._texture;
  }
}
// src/local-framework/graphics/renderers/geometry-renderer/shaders/geometry-renderer.glsl.vert
var geometry_renderer_glsl_default = `
#version 300 es

precision highp float;

uniform mat4 u_composedMatrix;

in vec3 a_vertex_position;
in vec3 a_vertex_normal;

in vec3 a_offset_center;
in vec4 a_offset_orientation;
in vec3 a_offset_color;
in vec3 a_offset_scale;

flat out vec4 v_color;
out vec3 v_worldSpacePosition;
out vec3 v_worldSpaceNormal;


vec3 apply_quat_to_vec3(vec3 position, vec4 q)
{
  vec3 v = position.xyz;
  return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

void main(void)
{
	vec3 worldSpacePosition = a_offset_center + apply_quat_to_vec3(a_vertex_position * a_offset_scale, a_offset_orientation);
	vec3 worldSpaceNormal = apply_quat_to_vec3(a_vertex_normal, a_offset_orientation);

  gl_Position = u_composedMatrix * vec4(worldSpacePosition, 1.0);

  v_color = vec4(a_offset_color, 1.0);
  v_worldSpacePosition = worldSpacePosition;
  v_worldSpaceNormal = worldSpaceNormal;
}
`.trim();

// src/local-framework/graphics/renderers/geometry-renderer/shaders/geometry-renderer.glsl.frag
var geometry_renderer_glsl_default2 = `
#version 300 es

precision lowp float;

uniform vec3 u_lightPos;

flat in vec4 v_color;
in vec3 v_worldSpacePosition;
in vec3 v_worldSpaceNormal;

out vec4 o_color;

//
//
//

const float k_ambiantCoef = 0.1;

const vec3 k_specColor = vec3(1.0, 1.0, 1.0);

vec3 _getLightColor(vec4 currentColor)
{
  vec3 normal = normalize(v_worldSpaceNormal);
  vec3 lightDir = normalize(u_lightPos - v_worldSpacePosition);

  float diffuseCoef = max(dot(lightDir, v_worldSpaceNormal.xyz), 0.0);
  float specularCoef = 0.0;

  // if (diffuseCoef > 0.0 && v_skipSpecular < 0.5)
  // {
  //   // specular

  //   vec3 reflectDir = reflect(-lightDir, normal);
  //   vec3 viewDir = normalize(u_lightPos - v_worldSpacePosition);

  //   float specAngle = max(dot(reflectDir, viewDir), 0.0);
  //   specularCoef = pow(specAngle, 32.0);
  // }

  vec3 diffuseColor = currentColor.rgb * (k_ambiantCoef + diffuseCoef);
  vec3 specularColor = k_specColor * specularCoef * currentColor.a;

  return diffuseColor + specularColor;
}

//
//
//

void main(void)
{
  o_color = vec4(_getLightColor(v_color), 1.0);
}
`.trim();

// src/local-framework/graphics/renderers/geometry-renderer/GeometryRenderer.ts
var k_bufferSize = 14336;

class GeometryRenderer {
  _shader;
  _geometry;
  _buffer = new Float32Array(k_bufferSize);
  _currentSize = 0;
  constructor() {
    this._shader = new ShaderProgram("GeometryRenderer", {
      vertexSrc: geometry_renderer_glsl_default,
      fragmentSrc: geometry_renderer_glsl_default2,
      attributes: [
        "a_vertex_position",
        "a_vertex_normal",
        "a_offset_center",
        "a_offset_orientation",
        "a_offset_color",
        "a_offset_scale"
      ],
      uniforms: ["u_composedMatrix", "u_lightPos"]
    });
    const geoBuilder = new exports_GeometryWrapper.GeometryBuilder;
    geoBuilder.reset().setPrimitiveType("triangles").addVbo().addVboAttribute("a_vertex_position", "vec3f").addVboAttribute("a_vertex_normal", "vec3f").addVbo().setVboAsStreaming().setVboAsInstanced().addVboAttribute("a_offset_center", "vec3f").addVboAttribute("a_offset_orientation", "vec4f").addVboAttribute("a_offset_color", "vec3f").addVboAttribute("a_offset_scale", "vec3f");
    this._geometry = new exports_GeometryWrapper.Geometry(this._shader, geoBuilder.getDef());
    this._geometry.setFloatBufferSize(1, k_bufferSize);
  }
  setGeometryVertices(vertices) {
    const buf = new Float32Array([
      ...vertices.map((val) => [...val.pos, ...val.normal]).flat()
    ]);
    this._geometry.allocateBuffer(0, buf, buf.length);
    this._geometry.setPrimitiveCount(buf.length / 6);
  }
  push(inPointA, inQuat, inColor, inScale) {
    if (this._currentSize + 13 >= this._buffer.length) {
      if (this._shader.isBound()) {
        this._flush();
      } else {
        return;
      }
    }
    this._buffer[this._currentSize++] = inPointA[0];
    this._buffer[this._currentSize++] = inPointA[1];
    this._buffer[this._currentSize++] = inPointA[2];
    this._buffer[this._currentSize++] = inQuat[0];
    this._buffer[this._currentSize++] = inQuat[1];
    this._buffer[this._currentSize++] = inQuat[2];
    this._buffer[this._currentSize++] = inQuat[3];
    this._buffer[this._currentSize++] = inColor[0];
    this._buffer[this._currentSize++] = inColor[1];
    this._buffer[this._currentSize++] = inColor[2];
    this._buffer[this._currentSize++] = inScale[0];
    this._buffer[this._currentSize++] = inScale[1];
    this._buffer[this._currentSize++] = inScale[2];
  }
  flush(inCamera) {
    if (!this.canRender()) {
      return;
    }
    this._shader.bind((bound) => {
      bound.setMatrix4Uniform("u_composedMatrix", inCamera.getComposedMatrix());
      const eyePos = inCamera.getEye();
      bound.setFloat3Uniform("u_lightPos", eyePos[0], eyePos[1], eyePos[2]);
      this._flush();
    });
  }
  safeRender(inCamera, inCallback) {
    this._shader.bind((bound) => {
      bound.setMatrix4Uniform("u_composedMatrix", inCamera.getComposedMatrix());
      const eyePos = inCamera.getEye();
      bound.setFloat3Uniform("u_lightPos", eyePos[0], eyePos[1], eyePos[2]);
      inCallback();
      this._flush();
    });
  }
  _flush() {
    this._geometry.updateBuffer(1, this._buffer, this._currentSize, 0);
    this._geometry.setInstancedCount(this._currentSize / 13);
    this._geometry.render();
    this.clear();
  }
  canRender() {
    return this._currentSize > 0;
  }
  clear() {
    this._currentSize = 0;
  }
}
// src/local-framework/graphics/renderers/geometry-renderer-flat/shaders/geometry-renderer-flat.glsl.vert
var geometry_renderer_flat_glsl_default = `
#version 300 es

precision highp float;

uniform mat4 u_composedMatrix;

in vec3 a_vertex_position;

in vec3 a_offset_center;
in vec4 a_offset_orientation;
in vec3 a_offset_color;
in vec3 a_offset_scale;

flat out vec4 v_color;

vec3 apply_quat_to_vec3(vec3 position, vec4 q)
{
  vec3 v = position.xyz;
  return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

void main(void)
{
	vec3 worldSpacePosition = a_offset_center + apply_quat_to_vec3(a_vertex_position * a_offset_scale, a_offset_orientation);

  gl_Position = u_composedMatrix * vec4(worldSpacePosition, 1.0);

  v_color = vec4(a_offset_color, 1.0);
}
`.trim();

// src/local-framework/graphics/renderers/geometry-renderer-flat/shaders/geometry-renderer-flat.glsl.frag
var geometry_renderer_flat_glsl_default2 = `
#version 300 es

precision lowp float;

flat in vec4 v_color;

out vec4 o_color;

void main(void)
{
  o_color = vec4(v_color.rbg, 1.0);
}
`.trim();

// src/local-framework/graphics/renderers/geometry-renderer-flat/GeometryRendererFlat.ts
var k_bufferSize2 = 14336;

class GeometryRendererFlat {
  _shader;
  _geometry;
  _buffer = new Float32Array(k_bufferSize2);
  _currentSize = 0;
  constructor() {
    this._shader = new ShaderProgram("GeometryRendererFlat", {
      vertexSrc: geometry_renderer_flat_glsl_default,
      fragmentSrc: geometry_renderer_flat_glsl_default2,
      attributes: [
        "a_vertex_position",
        "a_offset_center",
        "a_offset_orientation",
        "a_offset_color",
        "a_offset_scale"
      ],
      uniforms: [
        "u_composedMatrix"
      ]
    });
    const geoBuilder = new exports_GeometryWrapper.GeometryBuilder;
    geoBuilder.reset().setPrimitiveType("triangles").addVbo().addVboAttribute("a_vertex_position", "vec3f").addVbo().setVboAsStreaming().setVboAsInstanced().addVboAttribute("a_offset_center", "vec3f").addVboAttribute("a_offset_orientation", "vec4f").addVboAttribute("a_offset_color", "vec3f").addVboAttribute("a_offset_scale", "vec3f");
    this._geometry = new exports_GeometryWrapper.Geometry(this._shader, geoBuilder.getDef());
    this._geometry.setFloatBufferSize(1, k_bufferSize2);
  }
  setGeometryVertices(vertices) {
    const buf = new Float32Array([
      ...vertices.map((val) => [...val.pos]).flat()
    ]);
    this._geometry.allocateBuffer(0, buf, buf.length);
    this._geometry.setPrimitiveCount(buf.length / 3);
  }
  push(inPointA, inQuat, inColor, inScale) {
    if (this._currentSize + 13 >= this._buffer.length) {
      if (this._shader.isBound()) {
        this._flush();
      } else {
        return;
      }
    }
    this._buffer[this._currentSize++] = inPointA[0];
    this._buffer[this._currentSize++] = inPointA[1];
    this._buffer[this._currentSize++] = inPointA[2];
    this._buffer[this._currentSize++] = inQuat[0];
    this._buffer[this._currentSize++] = inQuat[1];
    this._buffer[this._currentSize++] = inQuat[2];
    this._buffer[this._currentSize++] = inQuat[3];
    this._buffer[this._currentSize++] = inColor[0];
    this._buffer[this._currentSize++] = inColor[1];
    this._buffer[this._currentSize++] = inColor[2];
    this._buffer[this._currentSize++] = inScale[0];
    this._buffer[this._currentSize++] = inScale[1];
    this._buffer[this._currentSize++] = inScale[2];
  }
  flush(inCamera) {
    if (!this.canRender()) {
      return;
    }
    this._shader.bind((bound) => {
      bound.setMatrix4Uniform("u_composedMatrix", inCamera.getComposedMatrix());
      this._flush();
    });
  }
  safeRender(inCamera, inCallback) {
    this._shader.bind((bound) => {
      bound.setMatrix4Uniform("u_composedMatrix", inCamera.getComposedMatrix());
      inCallback();
      this._flush();
    });
  }
  _flush() {
    this._geometry.updateBuffer(1, this._buffer, this._currentSize, 0);
    this._geometry.setInstancedCount(this._currentSize / 13);
    this._geometry.render();
    this.clear();
  }
  canRender() {
    return this._currentSize > 0;
  }
  clear() {
    this._currentSize = 0;
  }
}
// src/local-framework/graphics/renderers/multi-buffers-rendering/internals/SceneCapturer.ts
class SceneCapturer {
  _width = 0;
  _height = 0;
  _frameBuffer = new FrameBuffer;
  _renderBuffer = new RenderBuffer;
  _colorTextures = [];
  _currentIndex = 0;
  constructor(width, height) {
    this._colorTextures.push(new Texture);
    this._colorTextures.push(new Texture);
    this._colorTextures.forEach((texture) => texture.initialize());
    this.resize(width, height);
  }
  resize(width, height) {
    this._width = width;
    this._height = height;
    this._renderBuffer.bind((boundBuffer) => {
      boundBuffer.setSize("depth32f", this._width, this._height);
    });
    this._colorTextures.forEach((texture) => {
      texture.bind((boundTexture) => {
        boundTexture.allocate(this._width, this._height);
      });
    });
    this._frameBuffer.bind((boundFrameBuffer) => {
      this._renderBuffer.bind((boundBuffer) => {
        boundFrameBuffer.attachRenderBuffer(boundBuffer);
      });
    });
  }
  captureScene(renderCallback) {
    this._frameBuffer.bind((boundFrameBuffer) => {
      this._colorTextures[this._currentIndex].bind((boundTexture) => {
        boundFrameBuffer.attachTexture(boundTexture);
      });
      const gl = WebGLContext.getContext();
      gl.viewport(0, 0, this._width, this._height);
      gl.clearColor(0, 0, 0, 0);
      renderCallback();
    });
    this._currentIndex = (this._currentIndex + 1) % this._colorTextures.length;
  }
  get colorTexture() {
    return this._colorTextures[this._currentIndex];
  }
}

// src/local-framework/graphics/renderers/multi-buffers-rendering/internals/shaders/hud-texture-renderer.glsl.vert
var hud_texture_renderer_glsl_default = `
#version 300 es

precision highp float;

uniform mat4 u_composedMatrix;

in vec3  a_vertex_position;
in vec2  a_vertex_texCoord;

out vec2 v_texCoord;

void main(void)
{
  v_texCoord = a_vertex_texCoord;
  gl_Position = u_composedMatrix * vec4(a_vertex_position, 1.0);
}

`.trim();

// src/local-framework/graphics/renderers/multi-buffers-rendering/internals/shaders/hud-texture-renderer.glsl.frag
var hud_texture_renderer_glsl_default2 = `
#version 300 es

precision highp float;

uniform sampler2D u_texture;

in vec2 v_texCoord;

out vec4 o_color;

void main(void)
{
  o_color = texture(u_texture, v_texCoord);
}
`.trim();

// src/local-framework/graphics/renderers/multi-buffers-rendering/internals/RenderHudTexture.ts
class RenderHudTexture {
  _width = 0;
  _height = 0;
  _shader;
  _geometry;
  constructor(width, height) {
    this._shader = new ShaderProgram("RenderHudTexture", {
      vertexSrc: hud_texture_renderer_glsl_default,
      fragmentSrc: hud_texture_renderer_glsl_default2,
      attributes: ["a_vertex_position", "a_vertex_texCoord"],
      uniforms: ["u_composedMatrix", "u_texture"]
    });
    const geoBuilder = new exports_GeometryWrapper.GeometryBuilder;
    geoBuilder.reset().setPrimitiveType("triangleStrip").addVbo().addVboAttribute("a_vertex_position", "vec3f").addVboAttribute("a_vertex_texCoord", "vec2f");
    this._geometry = new exports_GeometryWrapper.Geometry(this._shader, geoBuilder.getDef());
    this.resize(width, height);
  }
  resize(width, height) {
    this._width = width;
    this._height = height;
    const tmpVertices = [
      { pos: [this._width * 0, this._height * 0, -1], tex: [0, 0] },
      { pos: [this._width * 1, this._height * 0, -1], tex: [1, 0] },
      { pos: [this._width * 0, this._height * 1, -1], tex: [0, 1] },
      { pos: [this._width * 1, this._height * 1, -1], tex: [1, 1] }
    ];
    const vertArr = tmpVertices.map((vertex) => {
      return [
        vertex.pos[0],
        vertex.pos[1],
        vertex.pos[2],
        vertex.tex[0],
        vertex.tex[1]
      ];
    }).flat();
    this._geometry.allocateBuffer(0, vertArr, vertArr.length);
    this._geometry.setPrimitiveCount(vertArr.length / 5);
  }
  flush(composedMatrix, cubeMap) {
    this._shader.bind((boundShader) => {
      boundShader.setMatrix4Uniform("u_composedMatrix", composedMatrix);
      boundShader.setTextureUniform("u_texture", cubeMap, 0);
      this._geometry.render();
    });
  }
}

// src/local-framework/graphics/renderers/multi-buffers-rendering/MultiBuffersRendering.ts
class MultiBuffersRendering {
  _sceneCapturer;
  _renderHudTexture;
  constructor(width, height) {
    this._sceneCapturer = new SceneCapturer(width, height);
    this._renderHudTexture = new RenderHudTexture(width, height);
  }
  resize(width, height) {
    this._sceneCapturer.resize(width, height);
    this._renderHudTexture.resize(width, height);
  }
  captureScene(renderCallback) {
    this._sceneCapturer.captureScene(renderCallback);
  }
  renderHud(composedMat4) {
    this._renderHudTexture.flush(composedMat4, this._sceneCapturer.colorTexture);
  }
}
// src/local-framework/graphics/renderers/stack-renderers/shaders/stack-renderer.glsl.vert
var stack_renderer_glsl_default = `
#version 300 es

precision highp float;

uniform mat4 u_composedMatrix;

in vec3 a_vertex_position;
in vec4 a_vertex_color;

flat out vec4 v_color;

void main(void)
{
  gl_Position = u_composedMatrix * vec4(a_vertex_position, 1.0);

  v_color = a_vertex_color;
}
`.trim();

// src/local-framework/graphics/renderers/stack-renderers/shaders/stack-renderer.glsl.frag
var stack_renderer_glsl_default2 = `
#version 300 es

precision lowp float;

flat in vec4 v_color;

out vec4 o_color;

void main(void)
{
  o_color = v_color;
}
`.trim();

// src/local-framework/graphics/renderers/stack-renderers/internals/WireFramesStackRenderer.ts
var k_bufferSize3 = 14336;

class WireFramesStackRenderer {
  _shader;
  _geometry;
  _buffer = new Float32Array(k_bufferSize3);
  _currentSize = 0;
  constructor(inShader, inGeometryDef) {
    this._shader = inShader;
    const geometryDef = {
      ...inGeometryDef,
      primitiveType: exports_GeometryWrapper.PrimitiveType.lines
    };
    this._geometry = new exports_GeometryWrapper.Geometry(inShader, geometryDef);
  }
  pushLine(inPointA, inPointB, inColor) {
    if (this._currentSize + 14 >= this._buffer.length) {
      if (this._shader.isBound()) {
        this.flush();
      } else {
        return;
      }
    }
    const alphaValue = inColor[3] ?? 1;
    this._buffer[this._currentSize + 0] = inPointA[0];
    this._buffer[this._currentSize + 1] = inPointA[1];
    this._buffer[this._currentSize + 2] = inPointA[2];
    this._buffer[this._currentSize + 3] = inColor[0];
    this._buffer[this._currentSize + 4] = inColor[1];
    this._buffer[this._currentSize + 5] = inColor[2];
    this._buffer[this._currentSize + 6] = alphaValue;
    this._currentSize += 7;
    this._buffer[this._currentSize + 0] = inPointB[0];
    this._buffer[this._currentSize + 1] = inPointB[1];
    this._buffer[this._currentSize + 2] = inPointB[2];
    this._buffer[this._currentSize + 3] = inColor[0];
    this._buffer[this._currentSize + 4] = inColor[1];
    this._buffer[this._currentSize + 5] = inColor[2];
    this._buffer[this._currentSize + 6] = alphaValue;
    this._currentSize += 7;
  }
  canRender() {
    return this._currentSize > 0;
  }
  flush() {
    if (!this.canRender())
      return;
    this._geometry.allocateBuffer(0, this._buffer, this._currentSize);
    this._geometry.setPrimitiveCount(this._currentSize / 7);
    this._geometry.render();
    this.clear();
  }
  clear() {
    this._currentSize = 0;
  }
}

// src/local-framework/graphics/renderers/stack-renderers/internals/TrianglesStackRenderer.ts
var k_bufferSize4 = 7168;

class TrianglesStackRenderer {
  _shader;
  _geometry;
  _buffer = new Float32Array(k_bufferSize4);
  _currentSize = 0;
  constructor(inShader, inGeometryDef) {
    this._shader = inShader;
    const geometryDef = {
      ...inGeometryDef,
      primitiveType: exports_GeometryWrapper.PrimitiveType.triangles
    };
    this._geometry = new exports_GeometryWrapper.Geometry(inShader, geometryDef);
  }
  pushTriangle(inPointA, inPointB, inPointC, inColor) {
    if (this._currentSize + 42 >= this._buffer.length) {
      if (this._shader.isBound()) {
        this.flush();
      } else {
        return;
      }
    }
    const alphaValue = inColor[3] ?? 1;
    this._buffer[this._currentSize + 0] = inPointA[0];
    this._buffer[this._currentSize + 1] = inPointA[1];
    this._buffer[this._currentSize + 2] = inPointA[2];
    this._buffer[this._currentSize + 3] = inColor[0];
    this._buffer[this._currentSize + 4] = inColor[1];
    this._buffer[this._currentSize + 5] = inColor[2];
    this._buffer[this._currentSize + 6] = alphaValue;
    this._currentSize += 7;
    this._buffer[this._currentSize + 0] = inPointB[0];
    this._buffer[this._currentSize + 1] = inPointB[1];
    this._buffer[this._currentSize + 2] = inPointB[2];
    this._buffer[this._currentSize + 3] = inColor[0];
    this._buffer[this._currentSize + 4] = inColor[1];
    this._buffer[this._currentSize + 5] = inColor[2];
    this._buffer[this._currentSize + 6] = alphaValue;
    this._currentSize += 7;
    this._buffer[this._currentSize + 0] = inPointC[0];
    this._buffer[this._currentSize + 1] = inPointC[1];
    this._buffer[this._currentSize + 2] = inPointC[2];
    this._buffer[this._currentSize + 3] = inColor[0];
    this._buffer[this._currentSize + 4] = inColor[1];
    this._buffer[this._currentSize + 5] = inColor[2];
    this._buffer[this._currentSize + 6] = alphaValue;
    this._currentSize += 7;
  }
  pushLine(inPointA, inPointB, thickness, inColor) {
    if (this._currentSize + 42 >= this._buffer.length) {
      return;
    }
    const diffX = inPointB[0] - inPointA[0];
    const diffY = inPointB[1] - inPointA[1];
    const angle3 = Math.atan2(diffY, diffX) + Math.PI * 0.5;
    const stepX = Math.cos(angle3) * thickness * 0.5;
    const stepY = Math.sin(angle3) * thickness * 0.5;
    this.pushTriangle([inPointA[0] - stepX, inPointA[1] - stepY, inPointA[2]], [inPointB[0] - stepX, inPointB[1] - stepY, inPointB[2]], [inPointB[0] + stepX, inPointB[1] + stepY, inPointB[2]], inColor);
    this.pushTriangle([inPointA[0] - stepX, inPointA[1] - stepY, inPointA[2]], [inPointB[0] + stepX, inPointB[1] + stepY, inPointB[2]], [inPointA[0] + stepX, inPointA[1] + stepY, inPointA[2]], inColor);
  }
  pushRotatedLine(center, angle3, length5, thickness, color) {
    this.pushLine([
      center[0] - length5 * Math.cos(angle3),
      center[1] - length5 * Math.sin(angle3),
      center[2]
    ], [
      center[0] + length5 * Math.cos(angle3),
      center[1] + length5 * Math.sin(angle3),
      center[2]
    ], thickness, color);
  }
  pushOriginBoundRectangle(inOrigin, inSize, inColor) {
    if (this._currentSize + 42 >= this._buffer.length) {
      return;
    }
    const maxCoord = [
      inOrigin[0] + inSize[0],
      inOrigin[1] + inSize[1]
    ];
    this.pushTriangle([inOrigin[0], inOrigin[1], inOrigin[2]], [maxCoord[0], maxCoord[1], inOrigin[2]], [inOrigin[0], maxCoord[1], inOrigin[2]], inColor);
    this.pushTriangle([inOrigin[0], inOrigin[1], inOrigin[2]], [maxCoord[0], inOrigin[1], inOrigin[2]], [maxCoord[0], maxCoord[1], inOrigin[2]], inColor);
  }
  pushCenteredRectangle(inCenter, inSize, inColor) {
    const origin = [
      inCenter[0] - inSize[0] * 0.5,
      inCenter[1] - inSize[1] * 0.5,
      inCenter[2]
    ];
    this.pushOriginBoundRectangle(origin, inSize, inColor);
  }
  canRender() {
    return this._currentSize > 0;
  }
  flush() {
    if (!this.canRender()) {
      return;
    }
    this._geometry.allocateBuffer(0, this._buffer, this._currentSize);
    this._geometry.setPrimitiveCount(this._currentSize / 7);
    this._geometry.render();
    this.clear();
  }
  clear() {
    this._currentSize = 0;
  }
}

// src/local-framework/graphics/renderers/stack-renderers/StackRenderers.ts
class StackRenderers {
  _shader;
  _wireFramesStackRenderer;
  _trianglesStackRenderer;
  constructor() {
    this._shader = new ShaderProgram("StackRenderers", {
      vertexSrc: stack_renderer_glsl_default,
      fragmentSrc: stack_renderer_glsl_default2,
      attributes: ["a_vertex_position", "a_vertex_color"],
      uniforms: ["u_composedMatrix"]
    });
    const geoBuilder = new exports_GeometryWrapper.GeometryBuilder;
    geoBuilder.reset().setPrimitiveType("lines").addVbo().setVboAsDynamic().addVboAttribute("a_vertex_position", "vec3f").addVboAttribute("a_vertex_color", "vec4f");
    this._wireFramesStackRenderer = new WireFramesStackRenderer(this._shader, geoBuilder.getDef());
    this._trianglesStackRenderer = new TrianglesStackRenderer(this._shader, geoBuilder.getDef());
  }
  pushLine(inPointA, inPointB, inColor) {
    this._wireFramesStackRenderer.pushLine(inPointA, inPointB, inColor);
  }
  pushCross(inCenter, inSize, inColor) {
    const crossVertices = [
      [inCenter[0] - inSize, inCenter[1], inCenter[2]],
      [inCenter[0] + inSize, inCenter[1], inCenter[2]],
      [inCenter[0], inCenter[1] - inSize, inCenter[2]],
      [inCenter[0], inCenter[1] + inSize, inCenter[2]],
      [inCenter[0], inCenter[1], inCenter[2] - inSize],
      [inCenter[0], inCenter[1], inCenter[2] + inSize]
    ];
    const crossIndices = [0, 1, 2, 3, 4, 5];
    for (let ii = 0;ii < crossIndices.length; ii += 2) {
      const vertexA = crossVertices[ii + 0];
      const vertexB = crossVertices[ii + 1];
      this._wireFramesStackRenderer.pushLine(vertexA, vertexB, inColor);
    }
  }
  pushThickLine(inPointA, inPointB, thickness, inColor) {
    this._trianglesStackRenderer.pushLine(inPointA, inPointB, thickness, inColor);
  }
  pushRotatedLine(center, angle3, length5, thickness, color) {
    this._trianglesStackRenderer.pushRotatedLine(center, angle3, length5, thickness, color);
  }
  pushOriginBoundRectangle(inOrigin, inSize, inColor) {
    this._trianglesStackRenderer.pushOriginBoundRectangle(inOrigin, inSize, inColor);
  }
  pushCenteredRectangle(inCenter, inSize, inColor) {
    this._trianglesStackRenderer.pushCenteredRectangle(inCenter, inSize, inColor);
  }
  pushTriangle(inPosA, inPosB, inPosC, inColor) {
    this._trianglesStackRenderer.pushTriangle(inPosA, inPosB, inPosC, inColor);
  }
  pushQuad(inPos, inSize, inColor) {
    this.pushTriangle([inPos[0] + inSize[0] * 0, inPos[1] + inSize[1] * 0, inPos[2]], [inPos[0] + inSize[0] * 1, inPos[1] + inSize[1] * 1, inPos[2]], [inPos[0] + inSize[0] * 1, inPos[1] + inSize[1] * 0, inPos[2]], inColor);
    this.pushTriangle([inPos[0] + inSize[0] * 0, inPos[1] + inSize[1] * 0, inPos[2]], [inPos[0] + inSize[0] * 1, inPos[1] + inSize[1] * 1, inPos[2]], [inPos[0] + inSize[0] * 0, inPos[1] + inSize[1] * 1, inPos[2]], inColor);
  }
  flush(inComposedMatrix) {
    if (!this._wireFramesStackRenderer.canRender() && !this._trianglesStackRenderer.canRender()) {
      return;
    }
    this._shader.bind((bound) => {
      bound.setMatrix4Uniform("u_composedMatrix", inComposedMatrix);
      this._wireFramesStackRenderer.flush();
      this._trianglesStackRenderer.flush();
    });
  }
  safeRender(inComposedMatrix, inCallback) {
    this._shader.bind((bound) => {
      bound.setMatrix4Uniform("u_composedMatrix", inComposedMatrix);
      inCallback();
      this._wireFramesStackRenderer.flush();
      this._trianglesStackRenderer.flush();
    });
  }
  clear() {
    this._wireFramesStackRenderer.clear();
    this._trianglesStackRenderer.clear();
  }
}
// src/local-framework/graphics/renderers/text-renderer/shaders/text-renderer.glsl.vert
var text_renderer_glsl_default = `
#version 300 es

precision highp float;

uniform mat4 u_composedMatrix;

in vec2 a_vertex_position;
in vec2 a_vertex_texCoord;
in vec3 a_offset_position;
in vec2 a_offset_texCoord;
in vec3 a_offset_color;
in float a_offset_scale;

out vec2 v_texCoord;
flat out vec3 v_color;

void main(void)
{
  vec3 position = vec3(a_vertex_position, 0.0) * a_offset_scale + a_offset_position;

  gl_Position = u_composedMatrix * vec4(position, 1.0);

  v_texCoord = a_vertex_texCoord + a_offset_texCoord;
  v_color = a_offset_color;
}
`.trim();

// src/local-framework/graphics/renderers/text-renderer/shaders/text-renderer.glsl.frag
var text_renderer_glsl_default2 = `
#version 300 es

precision mediump float;

uniform sampler2D u_texture;

in vec2 v_texCoord;
flat in vec3 v_color;

out vec4 o_color;

void main(void)
{
  vec4 textureColor = texture(u_texture, v_texCoord);
  if (textureColor.a < 0.5)
  {
    discard;
  }
  else
  {
    o_color = vec4(v_color, textureColor.a);
  }
}
`.trim();

// src/local-framework/graphics/renderers/text-renderer/internals/asciiTextureHex.ts
var asciiTextureHex = "7e7e28fd03fd07fe04fe0aff02ff7e4dfd0cfd03fd07fe04fe0aff02ff1afc0dfd10fc08fc0ffe55ff15fb0bfd03fd07fe04fe08f707fd04ff07fe02fe0cfd0ffd0cfd0aff03fe03ff0afe44fe15fb0bfd03fd04f204f607fd03fe07fe02fe0cfd0efd0efd0aff02fe02ff0bfe43fd15fb0cfe03fe05f204fe01ff02ff0afd02fd07fe02fe0bfd0efd10fd0afa0cfe42fd16fb1bfe04fe07fe01ff02ff0efd09fc1cfd12fd09fa0cfe41fd17fb1bfe04fe07f70bfd0afc04ff17fd12fd06f405f616f61cfd19fd1cfe04fe08f709fd0bfb02fe17fd12fd06f405f616f61bfd1afd1cfe04fe0aff02ff01fe08fd0bfe02fa17fd12fd09fa0cfe3efd37f207ff02ff01fe07fd02fd07fe03fc19fd10fd0afa0cfe3dfd38f204f607fe03fd07fe03fd1bfd0efd0aff02fe02ff0bfe0cfd1dfd0dfd1dfd1cfe04fe07f708ff04fd07fe02fb1bfd0cfd0aff03fe03ff0afe0cfd1dfd0cfd1efd1cfe04fe0aff02ff1afb02fe1bfc08fc0ffe1cfd1dfd0bfd1ffd1cfe04fe0aff02ff7afd7e7e7e7e7e7e0efd17fd10fc0af80bfe0bf909f90dfd08f609fb08f506f808f82cfd19fd0df807fd04fd0afe0afd03fd07fd03fd0bfc08fd0ffd0bfd05fd05fd04fd06fd04fd2afd1bfd0bfc02fc06fd03fc09fd0afd04fd06fd04fd09fb08fd0efd0cfd05fd05fd04fd06fd04fd09fd0cfd0efd1dfd0afe05fd06fd02fb06fa11fd0dfd08fe01fd08fd0dfd0dfd05fd05fd04fd06fd04fd09fd0cfd0dfd0af409fd10fd06fd02fb06fa10fd0dfd08fe02fd08fd0dfd15fd05fb02fd06fd04fd09fd0cfd0cfd0bf40afd0efd07fd01fe01fd09fd0ffd0bfb08fe03fd08f808f70efd08fa08f626fd23fd0cfd08fd01fe01fd09fd0efd0cfb08f606f707f60cfd09fa09f726fd23fd0bfd09fb02fd09fd0dfd10fd07f60cfc06fd04fd0bfd08fd02fb0dfd09fd0cfd0cfd0bf40afd0cfd09fb02fd09fd0cfd12fd0bfd0ffd06fd04fd0afd09fd04fd0dfd09fd0cfd0dfd0af409fd19fc03fd09fd0bfd03fd06fd04fd0bfd08fd04fd06fd04fd09fd0afd04fd0cfd0afd0cfd0efd1dfd1afd04fd09fd0afd04fd06fd03fd0cfd08fd03fd07fd04fd09fd0afd04fd0bfd19fd10fd1bfd0ffd0af807f707f607f90bf907f909f80afd0bf809fb2efd19fd10fd7e51fd17fd11fd7e7e7e7e13f87e78fd05fd08fc09f709f907f808f606f608f907fd03fd07f90df905fc03fd06fb0bfd05fd05fd05fd08fb08fd05fd07fa09fd03fd07fd03fd07fd02fd08fd04fe07fd04fe07fd03fd06fd03fd09fd11fd08fd03fd07fd0cfc03fc05fd05fd07fd01fd07fd05fd06fd02fd08fd03fd06fd04fd07fd03fd07fd05ff07fd05ff06fd04fd06fd03fd09fd11fd08fd02fd08fd0cfb01fb05fc04fd06fd03fd06fd05fd05fd04fd07fd03fd06fd0efd03fd07fd0dfd0cfd04fd06fd03fd09fd11fd08fd01fd09fd0cf505fb03fd05fd05fd05fd02fa05fd04fd07fd03fd06fd0efd03fd07fd03fe08fd03fe07fd0dfd03fd09fd11fd08fa0afd0cf505fa02fd05fd05fd05fd02fa05fd04fd07f807fd0efd03fd07f808f807fd0df709fd11fd08fb0bfd0cfd01fd01fd05fd01fd01fd05fd05fd05fd02fa05fd04fd07f807fd0efd03fd07f808f807fd0df709fd11fd08fb0bfd0cfd02ff02fd05fd02fa05fd05fd05fd02fa05f607fd03fd06fd0efd03fd07fd03fe08fd03fe07fd02fb06fd03fd09fd0bfd03fd08fa0afd0cfd05fd05fd03fb05fd05fd05fd0dfd04fd07fd03fd06fd0efd03fd07fd0dfd0cfd04fd06fd03fd09fd0bfd03fd08fd01fd09fd05ff06fd05fd05fd04fc05fd05fd05fd0dfd04fd07fd03fd06fd04fd07fd03fd07fd05ff07fd0cfd04fd06fd03fd09fd0bfd03fd08fd02fd08fd04fe06fd05fd05fd05fd06fd03fd06fd0dfd04fd07fd03fd07fd03fd07fd02fd08fd04fe07fd0dfd03fd06fd03fd09fd0bfd03fd08fd03fd07fd03fd06fd05fd05fd05fd07fd01fd07fd0dfd04fd06f709f907f808f606fb0df806fd03fd07f90af908fc03fd06f606fd05fd05fd05fd08fb0af87e7e7e7e7e7e7e68fe1af70afb08f708f807f505fd03fd07fd03fd07fd05fd05fd03fd07fd03fd07f608f907ff11f90afc1afd03fd07fc01fc07fd03fd06fd04fd06fe02fd02fe05fd03fd07fd03fd07fd05fd05fd03fd07fd03fd07fd04fd08fd0bfe14fd09fa19fd03fd07fd03fd07fd03fd06fd04fd06ff03fd03ff05fd03fd07fd03fd07fd05fd05fd03fd07fd03fd07fe05fd08fd0bfd13fd08fd02fd18fd03fd06fd05fd06fd03fd06fd04fd0afd09fd03fd07fd03fd07fd05fd06fd01fd08fd03fd07ff05fd09fd0cfd12fd07fd04fd17fd03fd06fd05fd06fd03fd06fd11fd09fd03fd07fd03fd07fd05fd07fb09fd03fd0cfd0afd0dfd11fd28f807fd05fd06f808f90cfd09fd03fd07fd03fd07fd02ff02fd08fd0bfd01fd0cfd0bfd0efd10fd28f807fd05fd06f809f90bfd09fd03fd07fd03fd07fd02ff02fd08fd0cfb0cfd0cfd0ffd0ffd28fd0cfd03fb06fd02fd0efd0afd09fd03fd07fd03fd07fd02ff02fd07fb0cfd0cfd0dfd10fd0efd28fd0cfd02fa06fd03fd06fd04fd0afd09fd03fd07fd03fd08f707fd01fd0bfd0bfd05ff08fd11fd0dfd28fd0df707fd03fd06fd04fd0afd09fd03fd08fd01fd09fc01fc06fd03fd0afd0afd05fe08fd12fd0cfd28fd0df707fd03fd06fd04fd0afd09fd03fd09fb0bfd01fd07fd03fd0afd0afd04fd08fd13fd0bfd27fb12fd06fc03fd07f809f908f90bfd0cfd01fd07fd03fd08f908f608f910fd06f93cfa7e54f07e72f07e7e7e7e0bfd1dfc21fb19fb18fc10fd0ffd07fc0dfa39fd1efd22fd19fd01fd18fd10fd0ffd08fd10fd3bfd1cfd22fd19fd01fd18fd10fd0ffd08fd10fd3bfd1cfd22fd19fd1cfd2dfd10fd4af909f808f909f808f90afd0cfb02fe07fd01fc08fa0cfa08fd03fd0afd09f606f809f91efd08fd03fd06fd03fd07fd03fd07fd03fd07f808fd03fd08fc02fd0afd0ffd08fd02fd0bfd09fd02ff02fd05fd03fd07fd03fd1dfd08fd03fd06fd03fd07fd03fd07fd03fd07f808fd03fd08fc02fd0afd0ffd08fd01fd0cfd09fd02ff02fd05fd03fd07fd03fd18f808fd03fd06fd0dfd03fd07f709fd0bfd03fd08fd03fd0afd0ffd08fa0dfd09fd02ff02fd05fd03fd07fd03fd17fd03fd08fd03fd06fd0dfd03fd07fd0ffd0bfd03fd08fd03fd0afd0ffd08fd01fd0cfd09fd02ff02fd05fd03fd07fd03fd17fd03fd08fd03fd06fd03fd07fd03fd07fd03fd09fd0cf808fd03fd0afd0ffd08fd02fd0bfd09fd02ff02fd05fd03fd07fd03fd17fd03fd08fd03fd06fd03fd07fd03fd07fd03fd09fd0df908fd03fd0afd0ffd08fd03fd0afd09fd02ff02fd05fd03fd07fd03fd18fb02fe06fe02fb08f909fb02fe07f908f90ffd07fc03fd07f706fd03fd07fc03fd07f706fd05fd05fd03fd08f978fd03fd27fd03fd7e4af92afa7e7e7e7e7e7e18fa09fc09fa1efe4eff6efd0dfc0dfd1cfc4cfe6efd0dfc0dfd1bfa4afd6efd0dfc0dfd1afd02fd07fe02fb07fb02fe07fc02fd08f908f707fd03fd07fd03fd07fd05fd05fd02fd09fd03fd06f80afd0efc0efd08fb03fd05fd04fd07fd03fd05fd03fd09f706fd04fe09fd0bfd03fd07fd03fd07fd05fd05fd02fd09fd03fd06fe03fd08fd24fd05fd01fd02fd05fe06fe07fd03fd05fd03fd09fc02fd06fd04fe09fd0bfd03fd07fd03fd07fd05fd06fa0afd03fd06ff03fd09fd24fd05fd02fd01fd05fe06fe07fd03fd05fd03fd09fd0dfb0cfd0bfd03fd07fd03fd07fd02ff02fd07fc0bfd03fd09fd0cfd0efc0efd07fd03fb06fe06fe07fd03fd05fd03fd09fd0ffb0afd0bfd03fd07fd03fd07fd02ff02fd07fc0bfd03fd08fd0efd0dfc0dfd19fe06fe07fd03fd05fd03fd09fd0cfe04fd09fd01fd07fd03fd08fd01fd09fc01fc07fa0bf908fd03ff0bfd0dfc0dfd19fe06fe07f807f809fd0cfe04fd09fd01fd07fd03fd09fb0bfd01fd07fd02fd0bfb08fd03fe0bfd0dfc0dfd19f607fd11fd08fb0cf90bfb09fb02fe09fd0cfd01fd07fd02fd0dfd08f80cfa09fc09fa1af607fd11fd7cfd69fb0ffb77fa";

// src/local-framework/graphics/renderers/text-renderer/TextRenderer.ts
var k_gridSize = [16, 6];
var k_texCoord = [1 / k_gridSize[0], 1 / k_gridSize[1]];
var k_bufferSize5 = 36864;

class TextRenderer {
  _shader;
  _geometry;
  _texture = new Texture;
  _texCoordMap;
  _buffer = new Float32Array(k_bufferSize5);
  _currentSize = 0;
  _textScale = 14;
  _textColor = [1, 1, 1];
  _horizontalTextAlign = "left";
  _verticalTextAlign = "top";
  constructor() {
    this._shader = new ShaderProgram("TextRenderer", {
      vertexSrc: text_renderer_glsl_default,
      fragmentSrc: text_renderer_glsl_default2,
      attributes: [
        "a_vertex_position",
        "a_vertex_texCoord",
        "a_offset_position",
        "a_offset_texCoord",
        "a_offset_color",
        "a_offset_scale"
      ],
      uniforms: ["u_composedMatrix", "u_texture"]
    });
    const geoBuilder = new exports_GeometryWrapper.GeometryBuilder;
    geoBuilder.reset().setPrimitiveType("triangles").addVbo().addVboAttribute("a_vertex_position", "vec2f").addVboAttribute("a_vertex_texCoord", "vec2f").setStride(16).addVbo().setVboAsDynamic().setVboAsInstanced().addVboAttribute("a_offset_position", "vec3f").addVboAttribute("a_offset_texCoord", "vec2f").addVboAttribute("a_offset_color", "vec3f").addVboAttribute("a_offset_scale", "float").setStride(36);
    this._geometry = new exports_GeometryWrapper.Geometry(this._shader, geoBuilder.getDef());
    const vertices = [
      {
        position: [0.5, -0.5],
        texCoord: [k_texCoord[0] * 1, k_texCoord[1] * 1]
      },
      {
        position: [-0.5, -0.5],
        texCoord: [k_texCoord[0] * 0, k_texCoord[1] * 1]
      },
      {
        position: [0.5, 0.5],
        texCoord: [k_texCoord[0] * 1, k_texCoord[1] * 0]
      },
      {
        position: [-0.5, 0.5],
        texCoord: [k_texCoord[0] * 0, k_texCoord[1] * 0]
      }
    ];
    const indices = [1, 0, 2, 1, 2, 3];
    const letterVertices = [];
    for (const index of indices) {
      const vertex = vertices[index];
      letterVertices.push(vertex.position[0], vertex.position[1], vertex.texCoord[0], vertex.texCoord[1]);
    }
    this._geometry.allocateBuffer(0, letterVertices, letterVertices.length);
    this._geometry.setPrimitiveCount(letterVertices.length / 4);
    this._texCoordMap = new Map([
      [" ", [0 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["!", [1 * k_texCoord[0], 0 * k_texCoord[1]]],
      ['"', [2 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["#", [3 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["$", [4 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["%", [5 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["&", [6 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["'", [7 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["(", [8 * k_texCoord[0], 0 * k_texCoord[1]]],
      [")", [9 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["*", [10 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["+", [11 * k_texCoord[0], 0 * k_texCoord[1]]],
      [",", [12 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["-", [13 * k_texCoord[0], 0 * k_texCoord[1]]],
      [".", [14 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["/", [15 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["0", [0 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["1", [1 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["2", [2 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["3", [3 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["4", [4 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["5", [5 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["6", [6 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["7", [7 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["8", [8 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["9", [9 * k_texCoord[0], 1 * k_texCoord[1]]],
      [":", [10 * k_texCoord[0], 1 * k_texCoord[1]]],
      [";", [11 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["<", [12 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["=", [13 * k_texCoord[0], 1 * k_texCoord[1]]],
      [">", [14 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["?", [15 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["@", [0 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["A", [1 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["B", [2 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["C", [3 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["D", [4 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["E", [5 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["F", [6 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["G", [7 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["H", [8 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["I", [9 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["J", [10 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["K", [11 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["L", [12 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["M", [13 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["N", [14 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["O", [15 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["P", [0 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["Q", [1 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["R", [2 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["S", [3 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["T", [4 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["U", [5 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["V", [6 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["W", [7 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["X", [8 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["Y", [9 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["Z", [10 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["[", [11 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["\\", [12 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["]", [13 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["^", [14 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["_", [15 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["`", [0 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["a", [1 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["b", [2 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["c", [3 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["d", [4 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["e", [5 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["f", [6 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["g", [7 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["h", [8 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["i", [9 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["j", [10 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["k", [11 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["l", [12 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["m", [13 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["n", [14 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["o", [15 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["p", [0 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["q", [1 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["r", [2 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["s", [3 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["t", [4 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["u", [5 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["v", [6 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["w", [7 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["x", [8 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["y", [9 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["z", [10 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["{", [11 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["|", [12 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["}", [13 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["~", [14 * k_texCoord[0], 5 * k_texCoord[1]]]
    ]);
    const width = 256;
    const height = 96;
    const imagePixels = new Uint8Array(width * height * 4);
    {
      let index = 0;
      for (let ii = 0;ii < asciiTextureHex.length; ii += 2) {
        let currSize = parseInt(`${asciiTextureHex.substring(ii, ii + 2)}000000`, 16) >> 24;
        let currVal = 0;
        if (currSize < 0) {
          currSize = -currSize;
          currVal = 255;
        }
        for (let ii2 = 0;ii2 < currSize; ++ii2) {
          imagePixels[index * 4 + 0] = currVal;
          imagePixels[index * 4 + 1] = currVal;
          imagePixels[index * 4 + 2] = currVal;
          imagePixels[index * 4 + 3] = currVal;
          ++index;
        }
      }
    }
    this._texture.initialize();
    this._texture.bind((boundTexture) => {
      boundTexture.loadFromMemory(width, height, imagePixels);
    });
  }
  setTextAlign(inHorizontalTextAlign, inVerticalTextAlign) {
    this._horizontalTextAlign = inHorizontalTextAlign;
    this._verticalTextAlign = inVerticalTextAlign;
    return this;
  }
  setTextScale(inScale) {
    this._textScale = inScale;
    return this;
  }
  setTextColor(inRed, inGreen, inBlue) {
    this._textColor[0] = inRed;
    this._textColor[1] = inGreen;
    this._textColor[2] = inBlue;
    return this;
  }
  pushText(inMessage, inPosition) {
    if (inMessage.length === 0) {
      return this;
    }
    if (this._textScale <= 0) {
      return this;
    }
    const allLineWidth = [0];
    for (let ii = 0;ii < inMessage.length; ++ii) {
      if (inMessage[ii] == "\n") {
        allLineWidth.push(0);
      } else {
        allLineWidth[allLineWidth.length - 1] += 1;
      }
    }
    if (allLineWidth.length === 0) {
      return this;
    }
    let lineIndex = 0;
    const currPos = [0, 0];
    const hScale = this._textScale * 0.5;
    switch (this._horizontalTextAlign) {
      case "left":
        currPos[0] = inPosition[0];
        break;
      case "centered":
        currPos[0] = inPosition[0] - allLineWidth[lineIndex] * hScale + hScale;
        break;
      case "right":
        currPos[0] = inPosition[0] - allLineWidth[lineIndex] * this._textScale + this._textScale;
        break;
    }
    switch (this._verticalTextAlign) {
      case "top":
        currPos[1] = inPosition[1];
        break;
      case "centered":
        currPos[1] = inPosition[1] + allLineWidth.length * hScale - hScale;
        break;
      case "bottom":
        currPos[1] = inPosition[1] - (allLineWidth.length - 1) * this._textScale;
        break;
    }
    for (let ii = 0;ii < inMessage.length; ++ii) {
      const letter = inMessage[ii];
      if (letter == "\n") {
        lineIndex += 1;
        switch (this._horizontalTextAlign) {
          case "left":
            currPos[0] = inPosition[0];
            break;
          case "centered":
            currPos[0] = inPosition[0] - allLineWidth[lineIndex] * hScale + hScale;
            break;
          case "right":
            currPos[0] = inPosition[0] - allLineWidth[lineIndex] * this._textScale + this._textScale;
            break;
        }
        currPos[1] -= this._textScale;
      } else {
        this._pushLetter(letter, currPos);
        currPos[0] += this._textScale;
      }
    }
    return this;
  }
  _pushLetter(inCharacter, inPosition) {
    if (this._currentSize + 90 >= this._buffer.length) {
      return;
    }
    const texCoord = this._texCoordMap.get(inCharacter);
    if (!texCoord)
      throw new Error(`fail to find a letter, letter=${inCharacter}`);
    for (let yy = -1;yy <= 1; ++yy) {
      for (let xx = -1;xx <= 1; ++xx) {
        this._buffer[this._currentSize++] = inPosition[0] + 2 * xx;
        this._buffer[this._currentSize++] = inPosition[1] + 2 * yy;
        this._buffer[this._currentSize++] = -0.1;
        this._buffer[this._currentSize++] = texCoord[0];
        this._buffer[this._currentSize++] = texCoord[1];
        this._buffer[this._currentSize++] = 0;
        this._buffer[this._currentSize++] = 0;
        this._buffer[this._currentSize++] = 0;
        this._buffer[this._currentSize++] = this._textScale;
      }
    }
    this._buffer[this._currentSize++] = inPosition[0];
    this._buffer[this._currentSize++] = inPosition[1];
    this._buffer[this._currentSize++] = 0;
    this._buffer[this._currentSize++] = texCoord[0];
    this._buffer[this._currentSize++] = texCoord[1];
    this._buffer[this._currentSize++] = this._textColor[0];
    this._buffer[this._currentSize++] = this._textColor[1];
    this._buffer[this._currentSize++] = this._textColor[2];
    this._buffer[this._currentSize++] = this._textScale;
  }
  flush(composedMatrix) {
    if (this._currentSize === 0) {
      return this;
    }
    this._shader.bind((boundShader) => {
      boundShader.setMatrix4Uniform("u_composedMatrix", composedMatrix);
      boundShader.setTextureUniform("u_texture", this._texture, 0);
      this._geometry.allocateBuffer(1, this._buffer, this._currentSize);
      this._geometry.setInstancedCount(this._currentSize / 9);
      this._geometry.render();
    });
    Texture.unbind();
    this.clear();
    return this;
  }
  clear() {
    this._currentSize = 0;
    return this;
  }
}
// src/local-framework/graphics/renderers/widgets/index.ts
var exports_widgets = {};
__export(exports_widgets, {
  renderFpsMeter: () => {
    {
      return renderFpsMeter;
    }
  },
  addKeysTouchesWidgets: () => {
    {
      return addKeysTouchesWidgets;
    }
  },
  addKeyStrokesWidgets: () => {
    {
      return addKeyStrokesWidgets;
    }
  },
  addArrowStrokesWidgets: () => {
    {
      return addArrowStrokesWidgets;
    }
  }
});

// src/local-framework/graphics/renderers/widgets/renderControls.ts
var defaultColor = [0.2, 0.2, 0.2];
var activatedColor = [0.2, 0.6, 0.2];
var _renderIndicator = (currIndicator, stackRenderers, textRenderer) => {
  const { center } = currIndicator;
  stackRenderers.pushCenteredRectangle(exports_vec3.fromValues(center[0], center[1], -0.3), currIndicator.size, [0, 0, 0]);
  stackRenderers.pushCenteredRectangle(exports_vec3.fromValues(center[0], center[1], -0.2), [currIndicator.size[0] - 2, currIndicator.size[1] - 2], currIndicator.color);
  if (currIndicator.text) {
    textRenderer.setTextScale(16).setTextAlign("centered", "centered").pushText(currIndicator.text, center).setTextAlign("left", "top");
  }
  if (currIndicator.lines) {
    currIndicator.lines.forEach((currLine) => {
      stackRenderers.pushThickLine([center[0] + currLine.a[0], center[1] + currLine.a[1], 0], [center[0] + currLine.b[0], center[1] + currLine.b[1], 0], currLine.thickness, currLine.color);
    });
  }
};
var addKeyStrokesWidgets = (inPos, stackRenderers, textRenderer) => {
  _renderIndicator({
    center: [inPos[0], inPos[1]],
    size: [40, 40],
    text: "A\nQ",
    color: GlobalKeyboardManager.isPressed("A", "Q") ? activatedColor : defaultColor
  }, stackRenderers, textRenderer);
  _renderIndicator({
    center: [inPos[0] + 45, inPos[1]],
    size: [40, 40],
    text: "S",
    color: GlobalKeyboardManager.isPressed("S") ? activatedColor : defaultColor
  }, stackRenderers, textRenderer);
  _renderIndicator({
    center: [inPos[0] + 45, inPos[1] + 45],
    size: [40, 40],
    text: "W\nZ",
    color: GlobalKeyboardManager.isPressed("W", "Z") ? activatedColor : defaultColor
  }, stackRenderers, textRenderer);
  _renderIndicator({
    center: [inPos[0] + 90, inPos[1]],
    size: [40, 40],
    text: "D",
    color: GlobalKeyboardManager.isPressed("D") ? activatedColor : defaultColor
  }, stackRenderers, textRenderer);
};
var addArrowStrokesWidgets = (inPos, stackRenderers, textRenderer) => {
  _renderIndicator({
    center: [inPos[0], inPos[1]],
    size: [40, 40],
    lines: [
      { a: [15, 0], b: [-8, 0], thickness: 6, color: [1, 1, 1] },
      { a: [0, 10], b: [-12, -2], thickness: 6, color: [1, 1, 1] },
      { a: [0, -10], b: [-12, 2], thickness: 6, color: [1, 1, 1] }
    ],
    color: GlobalKeyboardManager.isPressed("ArrowLeft") ? activatedColor : defaultColor
  }, stackRenderers, textRenderer);
  _renderIndicator({
    center: [inPos[0] + 45, inPos[1]],
    size: [40, 40],
    lines: [
      { a: [0, 15], b: [0, -8], thickness: 6, color: [1, 1, 1] },
      { a: [10, 0], b: [-2, -12], thickness: 6, color: [1, 1, 1] },
      { a: [-10, 0], b: [2, -12], thickness: 6, color: [1, 1, 1] }
    ],
    color: GlobalKeyboardManager.isPressed("ArrowDown") ? activatedColor : defaultColor
  }, stackRenderers, textRenderer);
  _renderIndicator({
    center: [inPos[0] + 45, inPos[1] + 45],
    size: [40, 40],
    lines: [
      { a: [0, -15], b: [0, 8], thickness: 6, color: [1, 1, 1] },
      { a: [10, 0], b: [-2, 12], thickness: 6, color: [1, 1, 1] },
      { a: [-10, 0], b: [2, 12], thickness: 6, color: [1, 1, 1] }
    ],
    color: GlobalKeyboardManager.isPressed("ArrowUp") ? activatedColor : defaultColor
  }, stackRenderers, textRenderer);
  _renderIndicator({
    center: [inPos[0] + 90, inPos[1]],
    size: [40, 40],
    lines: [
      { a: [-15, 0], b: [8, 0], thickness: 6, color: [1, 1, 1] },
      { a: [0, 10], b: [12, -2], thickness: 6, color: [1, 1, 1] },
      { a: [0, -10], b: [12, 2], thickness: 6, color: [1, 1, 1] }
    ],
    color: GlobalKeyboardManager.isPressed("ArrowRight") ? activatedColor : defaultColor
  }, stackRenderers, textRenderer);
};
var addKeysTouchesWidgets = (inCanvasElement, inPos, stackRenderers, textRenderer) => {
  if (GlobalTouchManager.isSupported(inCanvasElement)) {
    _renderIndicator({
      center: [inPos[0] + 115, inPos[1]],
      size: [230, 60],
      text: "Touch Events\nSupported\n(double tap)",
      color: [0, 0.5, 0]
    }, stackRenderers, textRenderer);
  } else {
    _renderIndicator({
      center: [inPos[0] + 115, inPos[1]],
      size: [230, 60],
      text: "Touch Events\nNot Supported",
      color: [0.5, 0, 0]
    }, stackRenderers, textRenderer);
  }
  if (GlobalPointerLockManager.canBePointerLocked(inCanvasElement)) {
    _renderIndicator({
      center: [inPos[0] + 105, inPos[1] + 70],
      size: [210, 60],
      text: "Mouse\nSupported",
      color: [0, 0.5, 0]
    }, stackRenderers, textRenderer);
  } else {
    _renderIndicator({
      center: [inPos[0] + 105, inPos[1] + 70],
      size: [210, 60],
      text: "Mouse Events\nNot Supported",
      color: [0.5, 0, 0]
    }, stackRenderers, textRenderer);
  }
};
// src/local-framework/graphics/renderers/widgets/renderFpsMeter.ts
var renderFpsMeter = (inPos, inSize, inFrameProfiler, inStackRenderers, inTextRenderer, inShowFps = false) => {
  const k_divider = 5;
  const k_verticalSize = Math.ceil(inFrameProfiler.maxDelta / k_divider) * k_divider;
  {
    inStackRenderers.pushOriginBoundRectangle(inPos, inSize, [0, 0, 0, 0.5]);
    const allVertices = [
      [inPos[0] + inSize[0] * 0, inPos[1] + inSize[1] * 0, 0],
      [inPos[0] + inSize[0] * 1, inPos[1] + inSize[1] * 0, 0],
      [inPos[0] + inSize[0] * 1, inPos[1] + inSize[1] * 1, 0],
      [inPos[0] + inSize[0] * 0, inPos[1] + inSize[1] * 1, 0]
    ];
    inStackRenderers.pushLine(allVertices[0], allVertices[1], [1, 1, 1]);
    inStackRenderers.pushLine(allVertices[1], allVertices[2], [1, 1, 1]);
    inStackRenderers.pushLine(allVertices[2], allVertices[3], [1, 1, 1]);
    inStackRenderers.pushLine(allVertices[3], allVertices[0], [1, 1, 1]);
  }
  {
    for (let currDivider = k_divider;currDivider < k_verticalSize; currDivider += k_divider) {
      const ratio = currDivider / k_verticalSize;
      const pointA = [
        inPos[0] + 0,
        inPos[1] + inSize[1] * ratio,
        0
      ];
      const pointB = [
        inPos[0] + inSize[0],
        inPos[1] + inSize[1] * ratio,
        0
      ];
      inStackRenderers.pushLine(pointA, pointB, [0.5, 0.5, 0.5]);
    }
  }
  {
    if (inFrameProfiler.framesDelta.length >= 2) {
      const widthStep = inSize[0] / inFrameProfiler.framesDelta.length;
      let prevDelta = inFrameProfiler.framesDelta[0];
      let prevCoordX = 0;
      let prevCoordY = inSize[1] * prevDelta / k_verticalSize;
      for (let ii = 1;ii < inFrameProfiler.framesDelta.length; ++ii) {
        const currDelta = inFrameProfiler.framesDelta[ii];
        const currCoordX = ii * widthStep;
        const currCoordY = inSize[1] * currDelta / k_verticalSize;
        const pointA = [
          inPos[0] + prevCoordX,
          inPos[1] + prevCoordY,
          0
        ];
        const pointB = [
          inPos[0] + currCoordX,
          inPos[1] + currCoordY,
          0
        ];
        inStackRenderers.pushLine(pointA, pointB, [1, 1, 1]);
        prevDelta = currDelta;
        prevCoordX = currCoordX;
        prevCoordY = currCoordY;
      }
    }
  }
  {
    const k_textScale = 14;
    const k_textHScale = k_textScale * 0.5;
    const averageValue = inFrameProfiler.averageDelta;
    const maxValue = inFrameProfiler.maxDelta;
    const minValue = inFrameProfiler.minDelta;
    let averageStr = `~${averageValue.toFixed(0)}ms`;
    let maxStr = `<${maxValue}ms`;
    let minStr = `>${minValue}ms`;
    if (inShowFps === true) {
      const _getFpsStr = (inVal) => inVal < 999 ? inVal.toFixed(0) : "???";
      averageStr += `\n~${_getFpsStr(1000 / averageValue)}fps`;
      maxStr += `\n<${_getFpsStr(1000 / maxValue)}fps`;
      minStr += `\n>${_getFpsStr(1000 / minValue)}fps`;
    }
    inTextRenderer.setTextScale(k_textScale).setTextAlign("left", "top").setTextColor(1, 1, 0.75).pushText(averageStr, [inPos[0] + 7, inPos[1] - 8]).setTextAlign("left", "centered").setTextColor(1, 0.75, 0.75).pushText(maxStr, [
      inPos[0] + inSize[0] + k_textHScale,
      inPos[1] + inSize[1] - k_textHScale * 1
    ]).setTextColor(0.75, 1, 0.75).pushText(minStr, [
      inPos[0] + inSize[0] + k_textHScale,
      inPos[1] + k_textHScale * 1
    ]).setTextColor(1, 1, 1);
  }
};
// src/local-framework/graphics/images/index.ts
var exports_images = {};
__export(exports_images, {
  getImageFromUrl: () => {
    {
      return getImageFromUrl;
    }
  },
  getImageFromBuffer: () => {
    {
      return getImageFromBuffer;
    }
  },
  fetchImageBuffer: () => {
    {
      return fetchImageBuffer;
    }
  }
});

// src/local-framework/graphics/images/getImageFromUrl.ts
var getImageFromUrl = (url) => {
  return new Promise((resolve, reject) => {
    const image = new Image;
    image.onerror = reject;
    image.onload = () => {
      resolve(image);
    };
    image.src = url;
  });
};
var fetchImageBuffer = async (url, onProgress) => {
  const response = await fetch(url);
  const reader = response.body.getReader();
  const contentLength = +response.headers.get("Content-Length");
  const contentType = response.headers.get("Content-Type");
  let lastPercent = 0;
  let receivedLength = 0;
  let chunks = [];
  while (true) {
    const { done, value } = await reader.read();
    if (done) {
      break;
    }
    chunks.push(value);
    receivedLength += value.length;
    if (onProgress) {
      onProgress(receivedLength, contentLength);
    }
  }
  const chunksAll = new Uint8Array(receivedLength);
  let position = 0;
  for (let chunk of chunks) {
    chunksAll.set(chunk, position);
    position += chunk.length;
  }
  return {
    buffer: chunksAll,
    type: contentType
  };
};
var getImageFromBuffer = async (buffer, type) => {
  return new Promise((resolve, reject) => {
    const image = new Image;
    image.onerror = reject;
    image.onload = () => {
      resolve(image);
    };
    image.src = URL.createObjectURL(new Blob([buffer], { type }));
  });
};
// src/local-framework/graphics/geometries/index.ts
var exports_geometries = {};
__export(exports_geometries, {
  makeSphere: () => {
    {
      return makeSphere;
    }
  },
  makeBox: () => {
    {
      return makeBox;
    }
  }
});

// src/local-framework/graphics/geometries/makeBox.ts
var makeBox = (inSize) => {
  const hSizeX = inSize[0] * 0.5;
  const hSizeY = inSize[1] * 0.5;
  const hSizeZ = inSize[2] * 0.5;
  const allNormals = [];
  allNormals.push([-1, 0, 0]);
  allNormals.push([1, 0, 0]);
  allNormals.push([0, -1, 0]);
  allNormals.push([0, 1, 0]);
  allNormals.push([0, 0, -1]);
  allNormals.push([0, 0, 1]);
  const allVertices = [];
  allVertices.push([-hSizeX, -hSizeY, -hSizeZ]);
  allVertices.push([+hSizeX, -hSizeY, -hSizeZ]);
  allVertices.push([-hSizeX, +hSizeY, -hSizeZ]);
  allVertices.push([+hSizeX, +hSizeY, -hSizeZ]);
  allVertices.push([-hSizeX, -hSizeY, +hSizeZ]);
  allVertices.push([+hSizeX, -hSizeY, +hSizeZ]);
  allVertices.push([-hSizeX, +hSizeY, +hSizeZ]);
  allVertices.push([+hSizeX, +hSizeY, +hSizeZ]);
  const allIndices = [];
  allIndices.push([0, 2, 1, 4]);
  allIndices.push([2, 3, 1, 4]);
  allIndices.push([4, 5, 6, 5]);
  allIndices.push([6, 5, 7, 5]);
  allIndices.push([1, 3, 5, 1]);
  allIndices.push([5, 3, 7, 1]);
  allIndices.push([0, 4, 2, 0]);
  allIndices.push([4, 6, 2, 0]);
  allIndices.push([2, 6, 3, 3]);
  allIndices.push([6, 7, 3, 3]);
  allIndices.push([0, 1, 4, 2]);
  allIndices.push([4, 1, 5, 2]);
  const vertices = [];
  for (const index of allIndices) {
    vertices.push({
      pos: exports_vec3.copy([0, 0, 0], allVertices[index[0]]),
      normal: exports_vec3.copy([0, 0, 0], allNormals[index[3]])
    });
    vertices.push({
      pos: exports_vec3.copy([0, 0, 0], allVertices[index[1]]),
      normal: exports_vec3.copy([0, 0, 0], allNormals[index[3]])
    });
    vertices.push({
      pos: exports_vec3.copy([0, 0, 0], allVertices[index[2]]),
      normal: exports_vec3.copy([0, 0, 0], allNormals[index[3]])
    });
  }
  return vertices;
};
// src/local-framework/graphics/geometries/makeSphere.ts
var _drawSpherePatch = (vertices, quality, radius, v01, v02, v03) => {
  if (quality <= 0) {
    vertices.push({
      pos: exports_vec3.scale(exports_vec3.create(), v01, radius),
      normal: exports_vec3.copy(exports_vec3.create(), v01)
    });
    vertices.push({
      pos: exports_vec3.scale(exports_vec3.create(), v03, radius),
      normal: exports_vec3.copy(exports_vec3.create(), v03)
    });
    vertices.push({
      pos: exports_vec3.scale(exports_vec3.create(), v02, radius),
      normal: exports_vec3.copy(exports_vec3.create(), v02)
    });
  } else {
    const v12 = exports_vec3.normalize(exports_vec3.create(), exports_vec3.lerp(exports_vec3.create(), v01, v02, 0.5));
    const v23 = exports_vec3.normalize(exports_vec3.create(), exports_vec3.lerp(exports_vec3.create(), v02, v03, 0.5));
    const v31 = exports_vec3.normalize(exports_vec3.create(), exports_vec3.lerp(exports_vec3.create(), v03, v01, 0.5));
    quality -= 1;
    _drawSpherePatch(vertices, quality, radius, v01, v12, v31);
    _drawSpherePatch(vertices, quality, radius, v12, v02, v23);
    _drawSpherePatch(vertices, quality, radius, v31, v23, v03);
    _drawSpherePatch(vertices, quality, radius, v12, v23, v31);
  }
};
var makeSphere = (quality, radius) => {
  const k_icx = 0.5257311121191336;
  const k_icz = 0.8506508083520399;
  const tmpVertices = [
    [-k_icx, 0, +k_icz],
    [+k_icx, 0, +k_icz],
    [-k_icx, 0, -k_icz],
    [+k_icx, 0, -k_icz],
    [0, +k_icz, +k_icx],
    [0, +k_icz, -k_icx],
    [0, -k_icz, +k_icx],
    [0, -k_icz, -k_icx],
    [+k_icz, +k_icx, 0],
    [-k_icz, +k_icx, 0],
    [+k_icz, -k_icx, 0],
    [-k_icz, -k_icx, 0]
  ];
  const tmpIndices = [
    [0, 4, 1],
    [0, 9, 4],
    [9, 5, 4],
    [4, 5, 8],
    [4, 8, 1],
    [8, 10, 1],
    [8, 3, 10],
    [5, 3, 8],
    [5, 2, 3],
    [2, 7, 3],
    [7, 10, 3],
    [7, 6, 10],
    [7, 11, 6],
    [11, 0, 6],
    [0, 1, 6],
    [6, 1, 10],
    [9, 0, 11],
    [9, 11, 2],
    [9, 2, 5],
    [7, 2, 11]
  ];
  const vertices = [];
  for (const index of tmpIndices) {
    _drawSpherePatch(vertices, quality, radius, tmpVertices[index[0]], tmpVertices[index[1]], tmpVertices[index[2]]);
  }
  return vertices;
};
// src/webgl-ray-tracer/src/experiment/utilities/Logger.ts
class Logger {
  _textAreaElement;
  _lines = [];
  _maxLines = 30;
  constructor(textAreaElementId) {
    this._textAreaElement = document.getElementById(textAreaElementId);
    if (!this._textAreaElement)
      throw new Error(`DOM elements not found, id=${textAreaElementId}`);
    this._textAreaElement.value = "";
  }
  log(...args) {
    if (args.length === 0)
      return;
    const text = Array.prototype.slice.call(args).join(" ");
    console.log(text);
    this._pushText(text);
  }
  error(...args) {
    if (args.length === 0)
      return;
    const text = Array.prototype.slice.call(args).join(" ");
    console.error(text);
    this._pushText(`[ERR] - ${text}`);
  }
  _pushText(text) {
    this._lines.push(text);
    if (this._lines.length > this._maxLines)
      this._lines.splice(0, this._lines.length - this._maxLines);
    this._textAreaElement.value = `${this._lines.join("\n")}\n`;
    this._textAreaElement.scrollTop = this._textAreaElement.scrollHeight;
  }
  peekLast() {
    if (this._lines.length > 0)
      return this._lines[this._lines.length - 1];
    return;
  }
  popLast() {
    if (this._lines.length > 0)
      this._lines.splice(this._lines.length - 1, 1);
  }
}

// node_modules/FrankenPhys/dist/bundle.js
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var create$4 = function() {
  var out = new ARRAY_TYPE2(9);
  if (ARRAY_TYPE2 != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
  }
  out[0] = 1;
  out[4] = 1;
  out[8] = 1;
  return out;
};
var create$3 = function() {
  var out = new ARRAY_TYPE2(3);
  if (ARRAY_TYPE2 != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }
  return out;
};
var length5 = function(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return Math.hypot(x, y, z);
};
var fromValues$1 = function(x, y, z) {
  var out = new ARRAY_TYPE2(3);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
};
var normalize$2 = function(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var len5 = x * x + y * y + z * z;
  if (len5 > 0) {
    len5 = 1 / Math.sqrt(len5);
  }
  out[0] = a[0] * len5;
  out[1] = a[1] * len5;
  out[2] = a[2] * len5;
  return out;
};
var dot5 = function(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
};
var cross4 = function(out, a, b) {
  var ax = a[0], ay = a[1], az = a[2];
  var bx = b[0], by = b[1], bz = b[2];
  out[0] = ay * bz - az * by;
  out[1] = az * bx - ax * bz;
  out[2] = ax * by - ay * bx;
  return out;
};
var create$2 = function() {
  var out = new ARRAY_TYPE2(4);
  if (ARRAY_TYPE2 != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
  }
  return out;
};
var fromValues6 = function(x, y, z, w) {
  var out = new ARRAY_TYPE2(4);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
};
var normalize$1 = function(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  var len5 = x * x + y * y + z * z + w * w;
  if (len5 > 0) {
    len5 = 1 / Math.sqrt(len5);
  }
  out[0] = x * len5;
  out[1] = y * len5;
  out[2] = z * len5;
  out[3] = w * len5;
  return out;
};
var create$1 = function() {
  var out = new ARRAY_TYPE2(4);
  if (ARRAY_TYPE2 != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }
  out[3] = 1;
  return out;
};
var setAxisAngle2 = function(out, axis, rad) {
  rad = rad * 0.5;
  var s = Math.sin(rad);
  out[0] = s * axis[0];
  out[1] = s * axis[1];
  out[2] = s * axis[2];
  out[3] = Math.cos(rad);
  return out;
};
var slerp2 = function(out, a, b, t) {
  var ax = a[0], ay = a[1], az = a[2], aw = a[3];
  var bx = b[0], by = b[1], bz = b[2], bw = b[3];
  var omega, cosom, sinom, scale0, scale1;
  cosom = ax * bx + ay * by + az * bz + aw * bw;
  if (cosom < 0) {
    cosom = -cosom;
    bx = -bx;
    by = -by;
    bz = -bz;
    bw = -bw;
  }
  if (1 - cosom > EPSILON2) {
    omega = Math.acos(cosom);
    sinom = Math.sin(omega);
    scale0 = Math.sin((1 - t) * omega) / sinom;
    scale1 = Math.sin(t * omega) / sinom;
  } else {
    scale0 = 1 - t;
    scale1 = t;
  }
  out[0] = scale0 * ax + scale1 * bx;
  out[1] = scale0 * ay + scale1 * by;
  out[2] = scale0 * az + scale1 * bz;
  out[3] = scale0 * aw + scale1 * bw;
  return out;
};
var fromMat32 = function(out, m) {
  var fTrace = m[0] + m[4] + m[8];
  var fRoot;
  if (fTrace > 0) {
    fRoot = Math.sqrt(fTrace + 1);
    out[3] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot;
    out[0] = (m[5] - m[7]) * fRoot;
    out[1] = (m[6] - m[2]) * fRoot;
    out[2] = (m[1] - m[3]) * fRoot;
  } else {
    var i = 0;
    if (m[4] > m[0])
      i = 1;
    if (m[8] > m[i * 3 + i])
      i = 2;
    var j = (i + 1) % 3;
    var k = (i + 2) % 3;
    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1);
    out[i] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot;
    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
  }
  return out;
};
var create7 = function() {
  var out = new ARRAY_TYPE2(2);
  if (ARRAY_TYPE2 != Float32Array) {
    out[0] = 0;
    out[1] = 0;
  }
  return out;
};
var scriptLoadingUtility = (inSrc) => {
  return new Promise((resolve, reject) => {
    const scriptElement = document.createElement("script");
    scriptElement.src = inSrc;
    scriptElement.addEventListener("load", resolve);
    scriptElement.addEventListener("error", reject);
    document.head.appendChild(scriptElement);
  });
};

class BrowserFrankenPhysWasmModule {
  static load(opts) {
    return __awaiter(this, undefined, undefined, function* () {
      yield BrowserFrankenPhysWasmModule.loadJsPart(opts.jsUrl);
      yield BrowserFrankenPhysWasmModule.loadWasmPart(opts.wasmUrl);
    });
  }
  static loadJsPart(url) {
    return __awaiter(this, undefined, undefined, function* () {
      yield scriptLoadingUtility(url);
    });
  }
  static loadWasmPart(urlPrefix) {
    return __awaiter(this, undefined, undefined, function* () {
      BrowserFrankenPhysWasmModule._wasmModule = yield FrankenPhysLoader({
        locateFile: (url) => {
          return `${urlPrefix}/${url}`;
        }
      });
    });
  }
  static get() {
    if (!this._wasmModule) {
      throw new Error("FrankenPhys wasm module not loaded");
    }
    return this._wasmModule;
  }
}

class ContactEventHandler {
  constructor() {
    this._listenersMap = new Map;
  }
  isEventListenedTo(type) {
    const listeners = this._listenersMap.get(type);
    return !!listeners && listeners.length > 0;
  }
  addEventListener(type, listener) {
    let listeners = this._listenersMap.get(type);
    if (!listeners) {
      listeners = [];
      this._listenersMap.set(type, listeners);
    }
    if (listeners.indexOf(listener) !== -1) {
      throw new Error(`duplicated event listener, type=${type}`);
    }
    listeners.push(listener);
  }
  on(type, listener) {
    this.addEventListener(type, listener);
  }
  hasEventListener(type, listener) {
    const listeners = this._listenersMap.get(type);
    return listeners !== undefined && listeners.indexOf(listener) !== -1;
  }
  removeEventListener(type, listener) {
    const listeners = this._listenersMap.get(type);
    if (listeners === undefined)
      return;
    const index = listeners.indexOf(listener);
    if (index === -1) {
      throw new Error(`unknown event listener, type=${type}`);
    }
    listeners.splice(index, 1);
  }
  dispatchEvent(event) {
    const listeners = this._listenersMap.get(event.type);
    if (listeners === undefined) {
      return;
    }
    const listenersCopy = listeners.slice(0);
    for (let ii = 0;ii < listenersCopy.length; ++ii) {
      listenersCopy[ii].call(this, event);
    }
  }
}

class WasmModuleHolder {
  static set(wasmModule) {
    return __awaiter(this, undefined, undefined, function* () {
      WasmModuleHolder._wasmModule = wasmModule;
    });
  }
  static get() {
    if (!this._wasmModule) {
      throw new Error("FrankenPhys wasm module not loaded");
    }
    return this._wasmModule;
  }
}
var EPSILON2 = 0.000001;
var ARRAY_TYPE2 = typeof Float32Array !== "undefined" ? Float32Array : Array;
if (!Math.hypot)
  Math.hypot = function() {
    var y = 0, i = arguments.length;
    while (i--) {
      y += arguments[i] * arguments[i];
    }
    return Math.sqrt(y);
  };
var len5 = length5;
(function() {
  var vec = create$3();
  return function(a, stride, offset, count, fn, arg) {
    var i, l;
    if (!stride) {
      stride = 3;
    }
    if (!offset) {
      offset = 0;
    }
    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }
    for (i = offset;i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
    }
    return a;
  };
})();
(function() {
  var vec = create$2();
  return function(a, stride, offset, count, fn, arg) {
    var i, l;
    if (!stride) {
      stride = 4;
    }
    if (!offset) {
      offset = 0;
    }
    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }
    for (i = offset;i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      vec[3] = a[i + 3];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
      a[i + 3] = vec[3];
    }
    return a;
  };
})();
var normalize5 = normalize$1;
(function() {
  var tmpvec3 = create$3();
  var xUnitVec3 = fromValues$1(1, 0, 0);
  var yUnitVec3 = fromValues$1(0, 1, 0);
  return function(out, a, b) {
    var dot$1 = dot5(a, b);
    if (dot$1 < -0.999999) {
      cross4(tmpvec3, xUnitVec3, a);
      if (len5(tmpvec3) < 0.000001)
        cross4(tmpvec3, yUnitVec3, a);
      normalize$2(tmpvec3, tmpvec3);
      setAxisAngle2(out, tmpvec3, Math.PI);
      return out;
    } else if (dot$1 > 0.999999) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
    } else {
      cross4(tmpvec3, a, b);
      out[0] = tmpvec3[0];
      out[1] = tmpvec3[1];
      out[2] = tmpvec3[2];
      out[3] = 1 + dot$1;
      return normalize5(out, out);
    }
  };
})();
(function() {
  var temp1 = create$1();
  var temp2 = create$1();
  return function(out, a, b, c, d, t) {
    slerp2(temp1, a, d, t);
    slerp2(temp2, b, c, t);
    slerp2(out, temp1, temp2, 2 * t * (1 - t));
    return out;
  };
})();
(function() {
  var matr = create$4();
  return function(out, view, right, up) {
    matr[0] = right[0];
    matr[3] = right[1];
    matr[6] = right[2];
    matr[1] = up[0];
    matr[4] = up[1];
    matr[7] = up[2];
    matr[2] = -view[0];
    matr[5] = -view[1];
    matr[8] = -view[2];
    return normalize5(out, fromMat32(out, matr));
  };
})();
(function() {
  var vec = create7();
  return function(a, stride, offset, count, fn, arg) {
    var i, l;
    if (!stride) {
      stride = 2;
    }
    if (!offset) {
      offset = 0;
    }
    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }
    for (i = offset;i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
    }
    return a;
  };
})();
var convexSweep = (rawDynamicsWorld, def) => {
  const bullet = WasmModuleHolder.get();
  const fromVec3 = new bullet.btVector3(def.from[0], def.from[1], def.from[2]);
  const toVec3 = new bullet.btVector3(def.to[0], def.to[1], def.to[2]);
  const fromTrsf = new bullet.btTransform;
  fromTrsf.setIdentity();
  fromTrsf.setOrigin(fromVec3);
  const toTrsf = new bullet.btTransform;
  toTrsf.setIdentity();
  toTrsf.setOrigin(toVec3);
  const result = new bullet.ClosestConvexResultCallback(fromVec3, toVec3);
  result.set_m_collisionFilterGroup(def.collisionFilterGroup);
  result.set_m_collisionFilterMask(def.collisionFilterMask);
  const shape = new bullet.btSphereShape(def.radius);
  rawDynamicsWorld.convexSweepTest(shape, fromTrsf, toTrsf, result, 0);
  if (!result.hasHit()) {
    bullet.destroy(fromVec3);
    bullet.destroy(toVec3);
    bullet.destroy(result);
    bullet.destroy(shape);
    bullet.destroy(fromTrsf);
    bullet.destroy(toTrsf);
    return;
  }
  const rawPosition = result.get_m_hitPointWorld();
  const rawNormal = result.get_m_hitNormalWorld();
  const fraction = result.get_m_closestHitFraction();
  const impact = fromValues$1(rawPosition.x(), rawPosition.y(), rawPosition.z());
  const normal = fromValues$1(rawNormal.x(), rawNormal.y(), rawNormal.z());
  bullet.destroy(rawNormal);
  bullet.destroy(rawPosition);
  bullet.destroy(fromVec3);
  bullet.destroy(toVec3);
  bullet.destroy(result);
  bullet.destroy(shape);
  bullet.destroy(fromTrsf);
  bullet.destroy(toTrsf);
  return { fraction, impact, normal };
};
var DISABLE_DEACTIVATION = 4;

class ConcretePhysicBody extends ContactEventHandler {
  constructor(def, rawShape) {
    super();
    this._isAlive = true;
    const bullet = WasmModuleHolder.get();
    this._customShape = rawShape;
    const tmpVec3 = new bullet.btVector3;
    this._customShape.shape.calculateLocalInertia(def.mass, tmpVec3);
    const motionState = null;
    const rbInfo = new bullet.btRigidBodyConstructionInfo(def.mass, motionState, this._customShape.shape, tmpVec3);
    this._rawRigidBody = new bullet.btRigidBody(rbInfo);
    this.setPositionAndRotation(def.position, def.orientation);
    bullet.destroy(tmpVec3);
    bullet.destroy(rbInfo);
  }
  dispose() {
    const bullet = WasmModuleHolder.get();
    bullet.destroy(this._rawRigidBody);
    this._customShape.cleanup();
    this._rawRigidBody = null;
    this._isAlive = false;
  }
  isAlive() {
    return this._isAlive;
  }
  setPositionAndRotation(position, rotation) {
    const bullet = WasmModuleHolder.get();
    const newPosition = new bullet.btVector3(position[0], position[1], position[2]);
    const newRotation = new bullet.btQuaternion(rotation[0], rotation[1], rotation[2], rotation[3]);
    const newTransform = new bullet.btTransform(newRotation, newPosition);
    this._rawRigidBody.setWorldTransform(newTransform);
    bullet.destroy(newTransform);
    bullet.destroy(newPosition);
    bullet.destroy(newRotation);
  }
  setPosition(x, y, z) {
    const bullet = WasmModuleHolder.get();
    const rotation = this.getRotation();
    const newPosition = new bullet.btVector3(x, y, z);
    const newRotation = new bullet.btQuaternion(rotation[0], rotation[1], rotation[2], rotation[3]);
    const newTransform = new bullet.btTransform(newRotation, newPosition);
    this._rawRigidBody.setWorldTransform(newTransform);
    bullet.destroy(newTransform);
    bullet.destroy(newPosition);
    bullet.destroy(newRotation);
  }
  setRotation(x, y, z, w) {
    const bullet = WasmModuleHolder.get();
    const origin = this.getPosition();
    const newPosition = new bullet.btVector3(origin[0], origin[1], origin[2]);
    const newRotation = new bullet.btQuaternion(x, y, z, w);
    const newTransform = new bullet.btTransform(newRotation, newPosition);
    this._rawRigidBody.setWorldTransform(newTransform);
    bullet.destroy(newTransform);
    bullet.destroy(newPosition);
    bullet.destroy(newRotation);
  }
  getPositionAndRotation(position, rotation) {
    const bullet = WasmModuleHolder.get();
    const rawTransform = this._rawRigidBody.getWorldTransform();
    const rawOrigin = rawTransform.getOrigin();
    const rawRotation = rawTransform.getRotation();
    position[0] = rawOrigin.x();
    position[1] = rawOrigin.y();
    position[2] = rawOrigin.z();
    rotation[0] = rawRotation.x();
    rotation[1] = rawRotation.y();
    rotation[2] = rawRotation.z();
    rotation[3] = rawRotation.w();
    bullet.destroy(rawRotation);
    bullet.destroy(rawOrigin);
    bullet.destroy(rawTransform);
  }
  getPosition() {
    const bullet = WasmModuleHolder.get();
    const rawTransform = this._rawRigidBody.getWorldTransform();
    const rawOrigin = rawTransform.getOrigin();
    const origin = fromValues$1(rawOrigin.x(), rawOrigin.y(), rawOrigin.z());
    bullet.destroy(rawOrigin);
    bullet.destroy(rawTransform);
    return origin;
  }
  getRotation() {
    const bullet = WasmModuleHolder.get();
    const rawTransform = this._rawRigidBody.getWorldTransform();
    const rawRotation = rawTransform.getRotation();
    const rotation = fromValues6(rawRotation.x(), rawRotation.y(), rawRotation.z(), rawRotation.w());
    bullet.destroy(rawRotation);
    bullet.destroy(rawTransform);
    return rotation;
  }
  getLinearVelocity() {
    const bullet = WasmModuleHolder.get();
    const vel = this._rawRigidBody.getLinearVelocity();
    const value = fromValues$1(vel.x(), vel.y(), vel.z());
    bullet.destroy(vel);
    return value;
  }
  getAngularVelocity() {
    const bullet = WasmModuleHolder.get();
    const vel = this._rawRigidBody.getAngularVelocity();
    const value = fromValues$1(vel.x(), vel.y(), vel.z());
    bullet.destroy(vel);
    return value;
  }
  setLinearVelocity(x, y, z) {
    const bullet = WasmModuleHolder.get();
    const newVel = new bullet.btVector3(x, y, z);
    this._rawRigidBody.setLinearVelocity(newVel);
    bullet.destroy(newVel);
  }
  setAngularVelocity(x, y, z) {
    const bullet = WasmModuleHolder.get();
    const newVel = new bullet.btVector3(x, y, z);
    this._rawRigidBody.setAngularVelocity(newVel);
    bullet.destroy(newVel);
  }
  setLinearFactor(x, y, z) {
    const bullet = WasmModuleHolder.get();
    const newVel = new bullet.btVector3(x, y, z);
    this._rawRigidBody.setLinearFactor(newVel);
    bullet.destroy(newVel);
  }
  setAngularFactor(x, y, z) {
    const bullet = WasmModuleHolder.get();
    const newVel = new bullet.btVector3(x, y, z);
    this._rawRigidBody.setAngularFactor(newVel);
    bullet.destroy(newVel);
  }
  applyCentralForce(x, y, z) {
    const bullet = WasmModuleHolder.get();
    const newVel = new bullet.btVector3(x, y, z);
    this._rawRigidBody.applyCentralForce(newVel);
    bullet.destroy(newVel);
  }
  applyCentralImpulse(x, y, z) {
    const bullet = WasmModuleHolder.get();
    const newVel = new bullet.btVector3(x, y, z);
    this._rawRigidBody.applyCentralImpulse(newVel);
    bullet.destroy(newVel);
  }
  setDamping(linear, angular = 0) {
    this._rawRigidBody.setDamping(linear, angular);
  }
  setCcdMotionThreshold(ccdMotionThreshold) {
    this._rawRigidBody.setCcdMotionThreshold(ccdMotionThreshold);
  }
  setCcdSweptSphereRadius(radius) {
    this._rawRigidBody.setCcdSweptSphereRadius(radius);
  }
  setRestitution(restitution) {
    this._rawRigidBody.setRestitution(restitution);
  }
  setFriction(friction) {
    this._rawRigidBody.setFriction(friction);
  }
  setRollingFriction(friction) {
    this._rawRigidBody.setRollingFriction(friction);
  }
  setGravity(x, y, z) {
    const bullet = WasmModuleHolder.get();
    const newVel = new bullet.btVector3(x, y, z);
    this._rawRigidBody.setGravity(newVel);
    bullet.destroy(newVel);
  }
  isStaticObject() {
    return this._rawRigidBody.isStaticObject();
  }
  isKinematicObject() {
    return this._rawRigidBody.isKinematicObject();
  }
  isStaticOrKinematicObject() {
    return this._rawRigidBody.isStaticOrKinematicObject();
  }
  isActive() {
    return this.isStaticOrKinematicObject() || this._rawRigidBody.isActive();
  }
  enableDeactivation() {
    this._rawRigidBody.activate(true);
  }
  disableDeactivation() {
    this._rawRigidBody.setActivationState(DISABLE_DEACTIVATION);
  }
  cannotDeactivate() {
    return this.isStaticOrKinematicObject() || this._rawRigidBody.getActivationState() == DISABLE_DEACTIVATION;
  }
  canDeactivate() {
    return !this.cannotDeactivate();
  }
}

class ConcretePhysicVehicle {
  constructor(rawDynamicsWorld, chassisBody, def) {
    const bullet = WasmModuleHolder.get();
    this._chassisBody = chassisBody;
    this._vehicleTuning = new bullet.btVehicleTuning;
    this._defaultVehicleRaycaster = new bullet.btDefaultVehicleRaycaster(rawDynamicsWorld);
    this._rawVehicle = new bullet.btRaycastVehicle(this._vehicleTuning, chassisBody._rawRigidBody, this._defaultVehicleRaycaster);
    this._rawVehicle.setCoordinateSystem(def.coordinateSystem[0], def.coordinateSystem[1], def.coordinateSystem[2]);
    const groundDirection = new bullet.btVector3(def.groundDirection[0], def.groundDirection[1], def.groundDirection[2]);
    const rotationAxis = new bullet.btVector3(def.rotationAxis[0], def.rotationAxis[1], def.rotationAxis[2]);
    const connectionPoint = new bullet.btVector3;
    for (let ii = 0;ii < def.wheels.length; ++ii) {
      const current = def.wheels[ii];
      connectionPoint.setValue(current.connectionPoint[0], current.connectionPoint[1], current.connectionPoint[2]);
      const wheelInfo = this._rawVehicle.addWheel(connectionPoint, groundDirection, rotationAxis, def.suspensionRestLength, def.wheelRadius, this._vehicleTuning, current.isFrontWheel);
      wheelInfo.set_m_suspensionStiffness(def.suspensionStiffness);
      wheelInfo.set_m_wheelsDampingRelaxation(def.wheelsDampingRelaxation);
      wheelInfo.set_m_wheelsDampingCompression(def.wheelsDampingCompression);
      wheelInfo.set_m_frictionSlip(def.wheelFriction);
      wheelInfo.set_m_rollInfluence(def.rollInfluence);
    }
    bullet.destroy(connectionPoint);
    bullet.destroy(groundDirection);
    bullet.destroy(rotationAxis);
  }
  dispose() {
    const bullet = WasmModuleHolder.get();
    bullet.destroy(this._rawVehicle);
    bullet.destroy(this._defaultVehicleRaycaster);
    bullet.destroy(this._vehicleTuning);
  }
  getChassisBody() {
    return this._chassisBody;
  }
  setSteeringValue(index, angle3) {
    this._rawVehicle.setSteeringValue(angle3, index);
  }
  applyEngineForce(index, force) {
    this._rawVehicle.applyEngineForce(force, index);
  }
  setBrake(index, force) {
    this._rawVehicle.setBrake(force, index);
  }
  getWheeTransforms() {
    const bullet = WasmModuleHolder.get();
    const allTransforms = [];
    const interpolatedTransform = true;
    const numWheels = this._rawVehicle.getNumWheels();
    for (let ii = 0;ii < numWheels; ++ii) {
      this._rawVehicle.updateWheelTransform(ii, interpolatedTransform);
      const rawTransform = this._rawVehicle.getWheelTransformWS(ii);
      const rawOrigin = rawTransform.getOrigin();
      const rawRotation = rawTransform.getRotation();
      allTransforms.push({
        position: fromValues$1(rawOrigin.x(), rawOrigin.y(), rawOrigin.z()),
        rotation: fromValues6(rawRotation.x(), rawRotation.y(), rawRotation.z(), rawRotation.w())
      });
      bullet.destroy(rawRotation);
      bullet.destroy(rawOrigin);
      bullet.destroy(rawTransform);
    }
    return allTransforms;
  }
}

class ConcreteGeneric6DofConstraint {
  constructor(def) {
    this._bodyA = def.bodyA;
    this._bodyB = def.bodyB;
    const bullet = WasmModuleHolder.get();
    const rawRigidBodyA = def.bodyA._rawRigidBody;
    const rawRigidBodyB = def.bodyB._rawRigidBody;
    const newRotation = new bullet.btQuaternion(0, 0, 1, 0);
    const newPositionA = new bullet.btVector3(def.frameA[0], def.frameA[1], def.frameA[2]);
    const newTransformA = new bullet.btTransform(newRotation, newPositionA);
    const newPositionB = new bullet.btVector3(def.frameB[0], def.frameB[1], def.frameB[2]);
    const newTransformB = new bullet.btTransform(newRotation, newPositionB);
    this._rawConstraint = new bullet.btGeneric6DofSpringConstraint(rawRigidBodyA, rawRigidBodyB, newTransformA, newTransformB, def.useReferenceFrameA);
    this._rawConstraint.enableSpring(0, false);
    this._rawConstraint.enableSpring(1, false);
    this._rawConstraint.enableSpring(2, false);
    this._rawConstraint.setStiffness(0, 1);
    this._rawConstraint.setStiffness(1, 1);
    this._rawConstraint.setStiffness(2, 1);
    this._rawConstraint.setDamping(0, 1);
    this._rawConstraint.setDamping(1, 1);
    this._rawConstraint.setDamping(2, 1);
    bullet.destroy(newTransformA);
    bullet.destroy(newTransformB);
    bullet.destroy(newPositionA);
    bullet.destroy(newPositionB);
    bullet.destroy(newRotation);
  }
  dispose() {
    const bullet = WasmModuleHolder.get();
    bullet.destroy(this._rawConstraint);
  }
  setLinearLowerLimit(val) {
    const bullet = WasmModuleHolder.get();
    const newVal = new bullet.btVector3(val[0], val[1], val[2]);
    this._rawConstraint.setLinearLowerLimit(newVal);
    bullet.destroy(newVal);
  }
  setLinearUpperLimit(val) {
    const bullet = WasmModuleHolder.get();
    const newVal = new bullet.btVector3(val[0], val[1], val[2]);
    this._rawConstraint.setLinearUpperLimit(newVal);
    bullet.destroy(newVal);
  }
  setAngularLowerLimit(val) {
    const bullet = WasmModuleHolder.get();
    const newVal = new bullet.btVector3(val[0], val[1], val[2]);
    this._rawConstraint.setAngularLowerLimit(newVal);
    bullet.destroy(newVal);
  }
  setAngularUpperLimit(val) {
    const bullet = WasmModuleHolder.get();
    const newVal = new bullet.btVector3(val[0], val[1], val[2]);
    this._rawConstraint.setAngularUpperLimit(newVal);
    bullet.destroy(newVal);
  }
}

class ConcreteHingeConstraint {
  constructor(def) {
    this._bodyA = def.bodyA;
    this._bodyB = def.bodyB;
    const bullet = WasmModuleHolder.get();
    const rawRigidBodyA = def.bodyA._rawRigidBody;
    const rawRigidBodyB = def.bodyB._rawRigidBody;
    const pivotInA = new bullet.btVector3(def.pivotInA[0], def.pivotInA[1], def.pivotInA[2]);
    const pivotInB = new bullet.btVector3(def.pivotInB[0], def.pivotInB[1], def.pivotInB[2]);
    const axisInA = new bullet.btVector3(def.axisInA[0], def.axisInA[1], def.axisInA[2]);
    const axisInB = new bullet.btVector3(def.axisInB[0], def.axisInB[1], def.axisInB[2]);
    this._rawConstraint = new bullet.btHingeConstraint(rawRigidBodyA, rawRigidBodyB, pivotInA, pivotInB, axisInA, axisInB, def.useReferenceFrameA);
    bullet.destroy(pivotInA);
    bullet.destroy(pivotInB);
    bullet.destroy(axisInA);
    bullet.destroy(axisInB);
  }
  dispose() {
    const bullet = WasmModuleHolder.get();
    bullet.destroy(this._rawConstraint);
  }
  setLimit(low, high, softness, biasFactor, relaxationFactor) {
    this._rawConstraint.setLimit(low, high, softness, biasFactor, relaxationFactor);
  }
  enableAngularMotor(enableMotor, targetVelocity, maxMotorImpulse) {
    this._rawConstraint.enableAngularMotor(enableMotor, targetVelocity, maxMotorImpulse);
  }
  enableMotor(enableMotor) {
    this._rawConstraint.enableMotor(enableMotor);
  }
  setMaxMotorImpulse(maxMotorImpulse) {
    this._rawConstraint.setMaxMotorImpulse(maxMotorImpulse);
  }
  setMotorTarget(targetAngle, dt) {
    this._rawConstraint.setMotorTarget(targetAngle, dt);
  }
}
var rayCast = (rawDynamicsWorld, bodyMap, def) => {
  const bullet = WasmModuleHolder.get();
  const fromVec3 = new bullet.btVector3(def.from[0], def.from[1], def.from[2]);
  const toVec3 = new bullet.btVector3(def.to[0], def.to[1], def.to[2]);
  const result = new bullet.ClosestRayResultCallback(fromVec3, toVec3);
  result.set_m_collisionFilterGroup(def.collisionFilterGroup);
  result.set_m_collisionFilterMask(def.collisionFilterMask);
  rawDynamicsWorld.rayTest(fromVec3, toVec3, result);
  if (!result.hasHit()) {
    bullet.destroy(fromVec3);
    bullet.destroy(toVec3);
    bullet.destroy(result);
    return;
  }
  const object = bodyMap.get(result.get_m_collisionObject().ptr);
  if (!object) {
    bullet.destroy(fromVec3);
    bullet.destroy(toVec3);
    bullet.destroy(result);
    return;
  }
  const rawNormal = result.get_m_hitNormalWorld();
  const rawPosition = result.get_m_hitPointWorld();
  const impact = fromValues$1(rawPosition.x(), rawPosition.y(), rawPosition.z());
  const normal = fromValues$1(rawNormal.x(), rawNormal.y(), rawNormal.z());
  bullet.destroy(rawNormal);
  bullet.destroy(rawPosition);
  bullet.destroy(fromVec3);
  bullet.destroy(toVec3);
  bullet.destroy(result);
  return {
    object,
    fraction: result.get_m_closestHitFraction(),
    impact,
    normal
  };
};

class PhysicWorld extends ContactEventHandler {
  constructor() {
    super();
    this._bodyMap = new Map;
    this._vehicleMap = new Map;
    this._constraintMap = new Map;
    this._allConstraints = [];
    this._constraintMap2 = new Map;
    this._allConstraints2 = [];
    const bullet = WasmModuleHolder.get();
    this._collisionConf = new bullet.btDefaultCollisionConfiguration;
    this._dispatcher = new bullet.btCollisionDispatcher(this._collisionConf);
    this._broadPhase = new bullet.btDbvtBroadphase;
    this._solver = new bullet.btSequentialImpulseConstraintSolver;
    this._rawDynamicsWorld = new bullet.btjsDynamicsWorld(this._dispatcher, this._broadPhase, this._solver, this._collisionConf);
    this._rawDynamicsWorld.setGravity(new bullet.btVector3(0, 0, -10));
    this._initCollisionEvents();
  }
  dispose() {
    const bullet = WasmModuleHolder.get();
    this._allConstraints.forEach((currConstraint) => currConstraint.dispose());
    this._allConstraints.length = 0;
    this._constraintMap.clear();
    this._allConstraints2.forEach((currConstraint) => currConstraint.dispose());
    this._allConstraints2.length = 0;
    this._constraintMap2.clear();
    [...this._vehicleMap.values()].forEach((currVehicle) => currVehicle.dispose());
    this._vehicleMap.clear();
    [...this._bodyMap.values()].forEach((currBody) => currBody.dispose());
    this._bodyMap.clear();
    bullet.destroy(this._rawDynamicsWorld);
    bullet.destroy(this._solver);
    bullet.destroy(this._broadPhase);
    bullet.destroy(this._dispatcher);
    bullet.destroy(this._collisionConf);
  }
  createRigidBody(def) {
    const newShape = this._getShape(def.shape, def.mass > 0);
    const newBody = new ConcretePhysicBody(def, newShape);
    this._rawDynamicsWorld.addRigidBody(newBody._rawRigidBody, -1, -1);
    this._bodyMap.set(newBody._rawRigidBody.ptr, newBody);
    return newBody;
  }
  _getShape(def, isDynamic) {
    const bullet = WasmModuleHolder.get();
    switch (def.type) {
      case "box": {
        const boxHalfExtent = new bullet.btVector3;
        boxHalfExtent.setValue(def.size[0] * 0.5, def.size[1] * 0.5, def.size[2] * 0.5);
        const rawShape = new bullet.btBoxShape(boxHalfExtent);
        bullet.destroy(boxHalfExtent);
        return {
          shape: rawShape,
          cleanup: () => bullet.destroy(rawShape)
        };
      }
      case "sphere": {
        const rawShape = new bullet.btSphereShape(def.radius);
        return {
          shape: rawShape,
          cleanup: () => bullet.destroy(rawShape)
        };
      }
      case "cylinder": {
        const bVec = new bullet.btVector3(def.radius, def.radius, def.length);
        const rawShape = new bullet.btCylinderShape(bVec);
        return {
          shape: rawShape,
          cleanup: () => {
            bullet.destroy(rawShape);
            bullet.destroy(bVec);
          }
        };
      }
      case "capsule": {
        const rawShape = new bullet.btCapsuleShape(def.radius, def.length);
        return {
          shape: rawShape,
          cleanup: () => bullet.destroy(rawShape)
        };
      }
      case "mesh": {
        const triangleMesh = new bullet.btTriangleMesh;
        const bVec1 = new bullet.btVector3;
        const bVec2 = new bullet.btVector3;
        const bVec3 = new bullet.btVector3;
        def.triangles.forEach(([vec1, vec2, vec3]) => {
          bVec1.setValue(vec1[0], vec1[1], vec1[2]);
          bVec2.setValue(vec2[0], vec2[1], vec2[2]);
          bVec3.setValue(vec3[0], vec3[1], vec3[2]);
          triangleMesh.addTriangle(bVec1, bVec2, bVec3);
        });
        bullet.destroy(bVec1);
        bullet.destroy(bVec2);
        bullet.destroy(bVec3);
        if (isDynamic) {
          const meshShape = new bullet.btGImpactMeshShape(triangleMesh);
          const rawShape2 = this._rawDynamicsWorld.createCompoundFromGimpactShape(meshShape, 0);
          return {
            shape: rawShape2,
            cleanup: () => {
              bullet.destroy(rawShape2);
              bullet.destroy(meshShape);
              bullet.destroy(triangleMesh);
            }
          };
        }
        const rawShape = new bullet.btBvhTriangleMeshShape(triangleMesh, true);
        return {
          shape: rawShape,
          cleanup: () => {
            bullet.destroy(rawShape);
            bullet.destroy(triangleMesh);
          }
        };
      }
      case "compound": {
        const rawCompound = new bullet.btCompoundShape;
        const allRawShapes = [];
        const localVec3 = new bullet.btVector3;
        const localQuat = new bullet.btQuaternion(0, 0, 1, 0);
        const localTransform = new bullet.btTransform;
        for (const { shape, position, orientation } of def.shapes) {
          const rawValues = this._getShape(shape, isDynamic);
          allRawShapes.push(rawValues);
          localVec3.setValue(position[0], position[1], position[2]);
          localQuat.setValue(orientation[0], orientation[1], orientation[2], orientation[3]);
          localTransform.setOrigin(localVec3);
          localTransform.setRotation(localQuat);
          rawCompound.addChildShape(localTransform, rawValues.shape);
        }
        bullet.destroy(localVec3);
        bullet.destroy(localQuat);
        bullet.destroy(localTransform);
        return {
          shape: rawCompound,
          cleanup: () => {
            bullet.destroy(rawCompound);
            for (const currRawShape of allRawShapes) {
              bullet.destroy(currRawShape);
            }
          }
        };
      }
    }
  }
  destroyRigidBody(rigidBody) {
    const rawRigidBody = rigidBody._rawRigidBody;
    const bodyPtr = rawRigidBody.ptr;
    this._rawDynamicsWorld.removeRigidBody(rawRigidBody);
    this._bodyMap.delete(bodyPtr);
    rigidBody.dispose();
    const bodyListOfConstraints = this._constraintMap.get(bodyPtr);
    if (bodyListOfConstraints) {
      for (const currConstraint of bodyListOfConstraints) {
        this.destroyGeneric6DofConstraint(currConstraint);
      }
    }
    const bodyListOfConstraints2 = this._constraintMap2.get(bodyPtr);
    if (bodyListOfConstraints2) {
      for (const currConstraint of bodyListOfConstraints2) {
        this.destroyHingeConstraint(currConstraint);
      }
    }
  }
  createVehicle(def) {
    const newBody = this.createRigidBody(def.chassisDef);
    const rawRigidBody = newBody;
    const vehicle = new ConcretePhysicVehicle(this._rawDynamicsWorld, rawRigidBody, def);
    this._rawDynamicsWorld.addAction(vehicle._rawVehicle);
    this._vehicleMap.set(vehicle.ptr, vehicle);
    return vehicle;
  }
  destroyVehicle(vehicle) {
    this.destroyRigidBody(vehicle._chassisBody);
    this._rawDynamicsWorld.removeAction(vehicle._rawVehicle);
    this._vehicleMap.delete(vehicle.ptr);
    vehicle.dispose();
  }
  createGeneric6DofConstraint(def) {
    const constraint = new ConcreteGeneric6DofConstraint(def);
    const ptrA = def.bodyA._rawRigidBody.ptr;
    let bodyListA = this._constraintMap.get(ptrA);
    if (!bodyListA) {
      bodyListA = [];
      this._constraintMap.set(ptrA, bodyListA);
    }
    bodyListA.push(constraint);
    const ptrB = def.bodyB._rawRigidBody.ptr;
    let bodyListB = this._constraintMap.get(ptrB);
    if (!bodyListB) {
      bodyListB = [];
      this._constraintMap.set(ptrA, bodyListB);
    }
    bodyListB.push(constraint);
    this._allConstraints.push(constraint);
    this._rawDynamicsWorld.addConstraint(constraint._rawConstraint, true);
    return constraint;
  }
  destroyGeneric6DofConstraint(constraint) {
    const concrete = constraint;
    this._rawDynamicsWorld.removeConstraint(concrete._rawConstraint);
    const bodyListA = this._constraintMap.get(concrete._bodyA._rawRigidBody.ptr);
    if (bodyListA) {
      const index2 = bodyListA.indexOf(concrete);
      if (index2 >= 0) {
        bodyListA.splice(index2, 0);
      }
    }
    const bodyListB = this._constraintMap.get(concrete._bodyB._rawRigidBody.ptr);
    if (bodyListB) {
      const index2 = bodyListB.indexOf(concrete);
      if (index2 >= 0) {
        bodyListB.splice(index2, 0);
      }
    }
    const index = this._allConstraints.indexOf(concrete);
    if (index >= 0) {
      this._allConstraints.splice(index, 0);
    }
    concrete.dispose();
  }
  createHingeConstraint(def) {
    const constraint = new ConcreteHingeConstraint(def);
    const ptrA = def.bodyA._rawRigidBody.ptr;
    let bodyListA = this._constraintMap2.get(ptrA);
    if (!bodyListA) {
      bodyListA = [];
      this._constraintMap2.set(ptrA, bodyListA);
    }
    bodyListA.push(constraint);
    const ptrB = def.bodyB._rawRigidBody.ptr;
    let bodyListB = this._constraintMap2.get(ptrB);
    if (!bodyListB) {
      bodyListB = [];
      this._constraintMap2.set(ptrA, bodyListB);
    }
    bodyListB.push(constraint);
    this._allConstraints2.push(constraint);
    this._rawDynamicsWorld.addConstraint(constraint._rawConstraint, true);
    return constraint;
  }
  destroyHingeConstraint(constraint) {
    const concrete = constraint;
    this._rawDynamicsWorld.removeConstraint(concrete._rawConstraint);
    const bodyListA = this._constraintMap2.get(concrete._bodyA._rawRigidBody.ptr);
    if (bodyListA) {
      const index2 = bodyListA.indexOf(concrete);
      if (index2 >= 0) {
        bodyListA.splice(index2, 0);
      }
    }
    const bodyListB = this._constraintMap2.get(concrete._bodyB._rawRigidBody.ptr);
    if (bodyListB) {
      const index2 = bodyListB.indexOf(concrete);
      if (index2 >= 0) {
        bodyListB.splice(index2, 0);
      }
    }
    const index = this._allConstraints2.indexOf(concrete);
    if (index >= 0) {
      this._allConstraints2.splice(index, 0);
    }
    concrete.dispose();
  }
  rayCast(from, to) {
    return rayCast(this._rawDynamicsWorld, this._bodyMap, {
      from,
      to,
      collisionFilterGroup: -1,
      collisionFilterMask: -1
    });
  }
  convexSweep(from, to, radius) {
    return convexSweep(this._rawDynamicsWorld, {
      from,
      to,
      collisionFilterGroup: -1,
      collisionFilterMask: -1,
      radius
    });
  }
  _initCollisionEvents() {
    const eventFlags = {
      world: 1 << 0,
      bodyA: 1 << 1,
      bodyB: 1 << 2
    };
    const _onContactChange = (event) => {
      const bodyA = event.data.getBodyA();
      const bodyB = event.data.getBodyB();
      const rigidBodyA = this._bodyMap.get(bodyA.ptr);
      const rigidBodyB = this._bodyMap.get(bodyB.ptr);
      if (!rigidBodyA || !rigidBodyB) {
        return;
      }
      const type = event.type;
      const collisionFlag = (this.isEventListenedTo(type) ? eventFlags.world : 0) | (rigidBodyA.isEventListenedTo(type) ? eventFlags.bodyA : 0) | (rigidBodyB.isEventListenedTo(type) ? eventFlags.bodyB : 0);
      if (collisionFlag == 0) {
        return;
      }
      const contactId = event.data.getId();
      const bulletPos = event.data.getPosition();
      const bulletNormalB = event.data.getNormalB();
      const position = {
        x: bulletPos.x(),
        y: bulletPos.y(),
        z: bulletPos.z()
      };
      const normalB = {
        x: bulletNormalB.x(),
        y: bulletNormalB.y(),
        z: bulletNormalB.z()
      };
      if (collisionFlag & eventFlags.world) {
        this.dispatchEvent({
          type,
          data: {
            contactId,
            rigidBodyA,
            rigidBodyB,
            position: fromValues$1(position.x, position.y, position.z),
            normalB: fromValues$1(normalB.x, normalB.y, normalB.z)
          }
        });
      }
      if (collisionFlag & eventFlags.bodyA) {
        rigidBodyA.dispatchEvent({
          type,
          data: {
            contactId,
            other: rigidBodyB,
            position: fromValues$1(position.x, position.y, position.z),
            normalB: fromValues$1(-normalB.x, -normalB.y, -normalB.z)
          }
        });
      }
      if (collisionFlag & eventFlags.bodyB) {
        rigidBodyB.dispatchEvent({
          type,
          data: {
            contactId,
            other: rigidBodyA,
            position: fromValues$1(position.x, position.y, position.z),
            normalB: fromValues$1(normalB.x, normalB.y, normalB.z)
          }
        });
      }
    };
    const bullet = WasmModuleHolder.get();
    bullet.on("beginContact", _onContactChange);
    bullet.on("updateContact", _onContactChange);
    bullet.on("endContact", _onContactChange);
    bullet.on("ccdContact", _onContactChange);
    bullet.listenToContactCallbacks();
  }
  stepSimulation(deltaTimeSec, maxSubSteps = 3, fixedStep = 1 / 60) {
    this._rawDynamicsWorld.stepSimulation(deltaTimeSec, maxSubSteps, fixedStep);
  }
  setGravity(x, y, z) {
    const bullet = WasmModuleHolder.get();
    const newVel = new bullet.btVector3(x, y, z);
    this._rawDynamicsWorld.setGravity(newVel);
    bullet.destroy(newVel);
  }
  setDebugWireframeCallback(callback) {
    const bullet = WasmModuleHolder.get();
    const contactPtr = bullet.addFunction(callback, "vfffffffff");
    this._rawDynamicsWorld.setDebugWireframeCallback(contactPtr);
  }
  setDebugWireframeFeaturesFlag(flag) {
    this._rawDynamicsWorld.setDebugWireframeFeaturesFlag(flag);
  }
  debugDrawWorld() {
    this._rawDynamicsWorld.debugDrawWorld();
  }
}
var DebugDrawFlags;
(function(DebugDrawFlags2) {
  DebugDrawFlags2[DebugDrawFlags2["DBG_NoDebug"] = 0] = "DBG_NoDebug";
  DebugDrawFlags2[DebugDrawFlags2["DBG_DrawWireframe"] = 1] = "DBG_DrawWireframe";
  DebugDrawFlags2[DebugDrawFlags2["DBG_DrawAabb"] = 2] = "DBG_DrawAabb";
  DebugDrawFlags2[DebugDrawFlags2["DBG_DrawFeaturesText"] = 4] = "DBG_DrawFeaturesText";
  DebugDrawFlags2[DebugDrawFlags2["DBG_DrawContactPoints"] = 8] = "DBG_DrawContactPoints";
  DebugDrawFlags2[DebugDrawFlags2["DBG_NoDeactivation"] = 16] = "DBG_NoDeactivation";
  DebugDrawFlags2[DebugDrawFlags2["DBG_NoHelpText"] = 32] = "DBG_NoHelpText";
  DebugDrawFlags2[DebugDrawFlags2["DBG_DrawText"] = 64] = "DBG_DrawText";
  DebugDrawFlags2[DebugDrawFlags2["DBG_ProfileTimings"] = 128] = "DBG_ProfileTimings";
  DebugDrawFlags2[DebugDrawFlags2["DBG_EnableSatComparison"] = 256] = "DBG_EnableSatComparison";
  DebugDrawFlags2[DebugDrawFlags2["DBG_DisableBulletLCP"] = 512] = "DBG_DisableBulletLCP";
  DebugDrawFlags2[DebugDrawFlags2["DBG_EnableCCD"] = 1024] = "DBG_EnableCCD";
  DebugDrawFlags2[DebugDrawFlags2["DBG_DrawConstraints"] = 2048] = "DBG_DrawConstraints";
  DebugDrawFlags2[DebugDrawFlags2["DBG_DrawConstraintLimits"] = 4096] = "DBG_DrawConstraintLimits";
  DebugDrawFlags2[DebugDrawFlags2["DBG_FastWireframe"] = 8192] = "DBG_FastWireframe";
  DebugDrawFlags2[DebugDrawFlags2["DBG_DrawNormals"] = 16384] = "DBG_DrawNormals";
  DebugDrawFlags2[DebugDrawFlags2["DBG_DrawFrames"] = 32768] = "DBG_DrawFrames";
})(DebugDrawFlags || (DebugDrawFlags = {}));
var index = Object.freeze({
  __proto__: null,
  ConcretePhysicBody,
  ConcretePhysicVehicle,
  ContactEventHandler,
  get DebugDrawFlags() {
    return DebugDrawFlags;
  },
  PhysicWorld,
  WasmModuleHolder,
  convexSweep,
  rayCast
});
var $BrowserFrankenPhysWasmModule = BrowserFrankenPhysWasmModule;
var $physics = index;

// src/webgl-ray-tracer/src/experiment/graphics/renderers/ray-tracer-renderer/shaders/ray-tracer.glsl.vert
var ray_tracer_glsl_default = `
#version 300 es

precision highp float;

in vec2 a_vertexPosition;
in vec3 a_plotPosition;

out vec3 v_position;

void main(void)
{
  gl_Position = vec4(a_vertexPosition, 1.0, 1.0);

  v_position = a_plotPosition;
}
`.trim();

// src/webgl-ray-tracer/src/experiment/graphics/renderers/ray-tracer-renderer/shaders/ray-tracer.glsl.frag
var ray_tracer_glsl_default2 = `
#version 300 es

precision highp int;
precision highp float;

//
//
//

// #define D_SIMPLIFIED

// Indices of refractionFactor
const float Air = 1.0;
const float Glass = 1.51714;

// Air to glass ratio of the indices of refractionFactor (Eta)
const float Eta = Air / Glass;

// see http://en.wikipedia.org/wiki/Refractive_index Reflectivity
const float R0 = ((Air - Glass) * (Air - Glass)) / ((Air + Glass) * (Air + Glass));

//
//
//

uniform vec3        u_cameraEye;

//

uniform highp sampler2D   u_sceneTextureData;
uniform int         u_sceneTextureSize;

uniform highp sampler2D   u_materialsTextureData;

uniform int       u_totalShapes;

//

uniform highp sampler2D   u_lightsTextureData;

uniform int       u_sunLightsStop;
uniform int       u_spotLightsStop;

//

uniform highp sampler2D   u_bvhDataTexture;

//
//
//

in vec3  v_position;

out vec4 o_color;

//

const float     g_ambiantLight = 0.15;

const vec3      g_backgroundColor = vec3(0.1);

//

struct RayValues
{
  vec3 origin;
  vec3 direction;
};

struct RayResult
{
  bool hasHit;
  float distance;
  vec3 position;
  vec3 normal;
  vec4 color;
  float reflectionFactor;
  float refractionFactor;
  bool lightEnabled;
};


struct StackData
{
  // int parentIndex;
  bool used;
  RayValues ray;
  RayResult result;
  int reflectionIndex;
  int refractionIndex;
};

//
//
//
//
//

vec3 apply_quat_to_vec3(vec3 position, vec4 q)
{
  vec3 v = position.xyz;
  return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}
mat3 quat_to_mat3(vec4 q)
{

  // multiply by sqrt(2) to get rid of all the 2.0 factors in the matrix
  q *= 1.414214;

  float xx = q.x * q.x;
  float xy = q.x * q.y;
  float xz = q.x * q.z;
  float xw = q.x * q.w;

  float yy = q.y * q.y;
  float yz = q.y * q.z;
  float yw = q.y * q.w;

  float zz = q.z * q.z;
  float zw = q.z * q.w;

  return mat3(
    1.0 - yy - zz,
    xy + zw,
    xz - yw,

    xy - zw,
    1.0 - xx - zz,
    yz + xw,

    xz + yw,
    yz - xw,
    1.0 - xx - yy
  );
}
//
//
//
//
//

bool intersectSphere(RayValues ray, float radius, out float outDistance, out vec3 normal)
{
  float nearValue = 0.001; // TODO: hardcoded
  float farValue = 100.0; // TODO: hardcoded

  float b = dot(ray.origin, ray.direction);
  float c = dot(ray.origin, ray.origin) - radius * radius;
  float h = b * b - c;
  if (h < 0.0) {
    return false;
  }

  h = sqrt(h);

  float d1 = -b - h;
  if (d1 >= nearValue && d1 <= farValue)
  {
    normal = normalize(ray.origin + ray.direction * d1);
    outDistance = d1;
    return true;
  }

  float d2 = -b + h;
  if (d2 >= nearValue && d2 <= farValue)
  {
    normal = normalize(ray.origin + ray.direction * d2);
    outDistance = d2;
    return true;
  }

  return false;
}

bool intersectBox(RayValues ray, vec3 boxSize, out float outDistance, out vec3 normal)
{
  float nearValue = 0.001; // TODO: hardcoded
  float farValue = 100.0; // TODO: hardcoded

  //
  //
  // sad hack: fix a shadow related bug

  // if (ray.origin.x == 0.0) ray.origin.x = -1e-8;
  // if (ray.origin.y == 0.0) ray.origin.y = -1e-8;
  // if (ray.origin.z == 0.0) ray.origin.z = -1e-8;

  if (ray.direction.x == 0.0) ray.direction.x = -1e-8;
  if (ray.direction.y == 0.0) ray.direction.y = -1e-8;
  if (ray.direction.z == 0.0) ray.direction.z = -1e-8;

  // sad hack: fix a shadow related bug
  //
  //

  vec3 m = sign(ray.direction) / max(abs(ray.direction), 1e-8);
  vec3 n = m * ray.origin;
  vec3 k = abs(m) * boxSize;

  vec3 t1 = -n - k;
  vec3 t2 = -n + k;

  float tN = max(max(t1.x, t1.y), t1.z);
  float tF = min(min(t2.x, t2.y), t2.z);

  if (tN > tF || tF <= 0.0) {
    return false;
  }

  if (tN >= nearValue && tN <= farValue)
  {
    normal = normalize(-sign(ray.direction) * step(t1.yzx, t1.xyz) * step(t1.zxy, t1.xyz));
    outDistance = tN;
    return true;
  }

  if (tF >= nearValue && tF <= farValue)
  {
    normal = normalize(-sign(ray.direction) * step(t1.yzx, t1.xyz) * step(t1.zxy, t1.xyz));
    outDistance = tF;
    return true;
  }

  return false;
}

bool intersectTriangle(RayValues ray, vec3 v0, vec3 v1, vec3 v2, out float outDistance, out vec3 normal)
{
  float nearValue = 0.001; // TODO: hardcoded
  float farValue = 100.0; // TODO: hardcoded

  vec3 v1v0 = v1 - v0;
  vec3 v2v0 = v2 - v0;
  vec3 rov0 = ray.origin - v0;

  vec3 n = cross(v1v0, v2v0);
  vec3 q = cross(rov0, ray.direction);
  float d = 1.0 / dot(ray.direction, n);
  float u = d * dot(-q, v2v0);
  float v = d * dot(q, v1v0);
  float t = d * dot(-n, rov0);

  if (u < 0.0 || v < 0.0 || (u + v) > 1.0 || t < nearValue || t > farValue) {
    return false;
  }

  normal = normalize(-n);
  outDistance = t;
  return true;
}

// float intersectPlane(RayValues ray, vec3 normal, float offset)
// {
//     return -(dot(ray.origin, normal) + offset) / dot(ray.direction, normal);
// }

// float intersectPlane2(RayValues ray, vec3 normal, float offset)
// {
//     float nearValue = 0.001; // TODO: hardcoded
//     float farValue = 1000.0; // TODO: hardcoded

//     float a = dot(ray.direction, normal);
//     float d = -(dot(ray.origin, normal) + offset) / a;

//     if (a > 0.0 || d < nearValue || d > farValue)
//         return -1.0;

//     return d;
// }

// float diskIntersect(RayValues ray, vec3 center, vec3 normal, float radius)
// {
//     vec3  o = ray.origin - center;
//     float t = -dot(normal, o) / dot(ray.direction, normal);
//     vec3  q = o + ray.direction * t;
//     return (dot(q, q) < radius * radius) ? t : -1.0;
// }

//
//
//
//
//


void intersectSceneOneShape(int index, RayValues ray, inout RayResult outBestResult, bool shadowMode)
{
  RayValues tmpRay;
  vec3 normal;

  vec4 shTexel0 = texelFetch(u_sceneTextureData, ivec2(index + 0, 0), 0);

  int materialIndex = int(shTexel0.g);
  vec4 matTexel1 = texelFetch(u_materialsTextureData, ivec2(materialIndex * 2 + 1, 0), 0);

  bool castShadow = (matTexel1.g != 0.0);

  if (shadowMode && !castShadow) {
    return; // this sphere does not cast a shadow
  }

  vec4 shTexel1 = texelFetch(u_sceneTextureData, ivec2(index + 1, 0), 0);
  vec4 shTexel2 = texelFetch(u_sceneTextureData, ivec2(index + 2, 0), 0);

  int shapeType = int(shTexel0.r);

  switch (shapeType) {
    case 1: {

      vec3 center = vec3(shTexel0.b, shTexel0.a, shTexel1.r);

      float radius = shTexel2.g;

#ifdef D_SIMPLIFIED
      float refractionFactor = 0.0;
#else
      float refractionFactor = matTexel1.r;
      if (refractionFactor > 0.0)
      {
        // [refraction logic] -> primary ray

        tmpRay.origin = ray.origin - center;
        tmpRay.direction = ray.direction;

        float currDistance1 = 0.0;
        if (
          !intersectSphere(tmpRay, radius, currDistance1, normal) ||
          (outBestResult.distance > 0.0 && currDistance1 > outBestResult.distance)
        ) {
          return;
        }

        // [refraction logic] -> secondary ray -> inside the sphere

        // here we use 1.01 as coef for the new origin -> get properly inside the sphere
        vec3 newOrigin = ray.origin + (currDistance1 * 1.01) * ray.direction;

        tmpRay.origin = (newOrigin - center);
        tmpRay.direction = ray.direction;

        tmpRay.direction = refract(tmpRay.direction, -normal, Eta);

        float currDistance2 = 0.0;
        if (
          !intersectSphere(tmpRay, radius, currDistance2, normal) ||
          (outBestResult.distance > 0.0 && currDistance2 > outBestResult.distance)
        ) {
          return;
        }

        vec4 matTexel0 = texelFetch(u_materialsTextureData, ivec2(materialIndex * 2 + 0, 0), 0);

        float reflectionFactor = matTexel0.a;

        outBestResult.hasHit = true;
        outBestResult.distance = currDistance1 + currDistance2;
        outBestResult.position = newOrigin + (currDistance2 * 1.01) * ray.direction;
        outBestResult.normal = normal;
        outBestResult.reflectionFactor = reflectionFactor;
        outBestResult.refractionFactor = refractionFactor;

        bool lightEnabled = (matTexel1.b != 0.0);
        outBestResult.lightEnabled = lightEnabled;

        vec3 color = matTexel0.rgb;

        outBestResult.color = vec4(color, 0.5);

        return; // bypass non refractive logic
      }
#endif

      vec4 orientation = vec4(
        shTexel1.g,
        shTexel1.b,
        shTexel1.a,
        shTexel2.r
      );
      mat3 normalMatrix = quat_to_mat3(orientation);
      mat3 inverseNormalMatrix = inverse(normalMatrix);

      // convert ray from world space to box space
      tmpRay.origin = (inverseNormalMatrix * (ray.origin - center));
      tmpRay.direction = (inverseNormalMatrix * ray.direction);

      float currDistance = 0.0;
      if (
        !intersectSphere(tmpRay, radius, currDistance, normal) ||
        (outBestResult.distance > 0.0 && currDistance > outBestResult.distance)
      ) {
        return;
      }

      // convert normal from box space to world space
      normal = normalMatrix * normal;

      outBestResult.hasHit = true;
      outBestResult.distance = currDistance;
      outBestResult.position = ray.origin + currDistance * ray.direction;
      outBestResult.normal = normal;
      outBestResult.refractionFactor = 0.0;

      bool chessboardMaterialEnabled = (matTexel1.a != 0.0);

      vec4 matTexel0 = texelFetch(u_materialsTextureData, ivec2(materialIndex * 2 + 0, 0), 0);

      if (chessboardMaterialEnabled)
      {
        vec3 localPos = ray.origin + currDistance * ray.direction;
        vec3 txPos = inverseNormalMatrix * (localPos - center);

        // chessboard color effect
        if ((fract(txPos.x * 0.9) > 0.5) == (fract(txPos.y * 0.9) > 0.5) == (fract(txPos.z * 0.9) > 0.5))
        {

          if (shadowMode)
          {

// #ifdef D_SIMPLIFIED
//             outBestResult.hasHit = true;
// #else
            outBestResult.hasHit = false; // no shadow -> allow light to go through
// #endif

            // outBestResult.color = vec4(1.0, 1.0, 0.0, 1.0);
            outBestResult.reflectionFactor = 0.0; // override reflection -> plain color
            outBestResult.refractionFactor = 0.0;
          }
          else
          {
            vec3 color = matTexel0.rgb;

            outBestResult.hasHit = true;
            outBestResult.color = vec4(color, 1.0);
            outBestResult.reflectionFactor = 0.0; // override reflection -> plain color
            outBestResult.refractionFactor = 1.0;
          }

          return;
        }
        else
        {
          outBestResult.hasHit = true;
          outBestResult.distance = currDistance;
          outBestResult.position = ray.origin + currDistance * ray.direction;
          outBestResult.normal = normal;
          // outBestResult.refractionFactor = 0.0;


          // blue/green, mat
          outBestResult.color = vec4(1.0, 1.0, 1.0, 1.0);
          outBestResult.reflectionFactor = 0.0;
          outBestResult.refractionFactor = 0.0;
        }
      }
      else
      {

        outBestResult.hasHit = true;
        outBestResult.distance = currDistance;
        outBestResult.position = ray.origin + currDistance * ray.direction;
        outBestResult.normal = normal;
        // outBestResult.refractionFactor = 0.0;

        vec3 color = matTexel0.rgb;

        float reflectionFactor = matTexel0.a;

        outBestResult.color = vec4(color, 0.5);
        outBestResult.reflectionFactor = reflectionFactor;
        outBestResult.refractionFactor = refractionFactor;
      }

      bool lightEnabled = (matTexel1.b != 0.0);
      outBestResult.lightEnabled = lightEnabled;


      break;
    }

    case 2: {


      tmpRay.origin = ray.origin;
      tmpRay.direction = ray.direction;

      vec3 center = vec3(shTexel0.b, shTexel0.a, shTexel1.r);
      vec4 orientation = vec4(
        shTexel1.g,
        shTexel1.b,
        shTexel1.a,
        shTexel2.r
      );

      vec3 boxSize = shTexel2.gba;

      float refractionFactor = matTexel1.r;
      if (refractionFactor > 0.0)
      {

        // refraction logic

        // convert ray from world space to sphere space
        mat3 normalMatrix = quat_to_mat3(orientation);
        mat3 inverseNormalMatrix = inverse(normalMatrix);

        tmpRay.origin = (inverseNormalMatrix * (ray.origin - center));
        tmpRay.direction = (inverseNormalMatrix * ray.direction);

        float currDistance1 = 0.0;
        if (
          !intersectBox(tmpRay, boxSize, currDistance1, normal) ||
          (outBestResult.distance > 0.0 && currDistance1 > outBestResult.distance)
        ) {
          return;
        }

        // now collide with the inside of the box

        vec3 newOrigin = ray.origin + (currDistance1 * 1.000) * ray.direction;

        tmpRay.origin = inverseNormalMatrix * (newOrigin - center);
        tmpRay.direction = refract(tmpRay.direction, normal, Eta);

        float currDistance2 = 0.0;
        if (
          !intersectBox(tmpRay, boxSize, currDistance2, normal) ||
          (outBestResult.distance > 0.0 && currDistance2 > outBestResult.distance)
        ) {
          return;
        }

        // convert normal from box space to world space
        normal = normalMatrix * normal;

        vec4 matTexel0 = texelFetch(u_materialsTextureData, ivec2(materialIndex * 2 + 0, 0), 0);

        float reflectionFactor = matTexel0.a;

        outBestResult.hasHit = true;
        outBestResult.distance = currDistance1 + currDistance2;
        outBestResult.position = newOrigin + (currDistance2 * 1.000) * ray.direction;
        outBestResult.normal = normal;
        outBestResult.reflectionFactor = reflectionFactor;
        outBestResult.refractionFactor = refractionFactor;

        bool lightEnabled = (matTexel1.b != 0.0);
        outBestResult.lightEnabled = lightEnabled;

        vec3 color = matTexel0.rgb;
        outBestResult.color = vec4(color, 0.5);

        return; // bypass non refractive logic
      }

      // convert ray from world space to sphere space
      mat3 normalMatrix = quat_to_mat3(orientation);
      mat3 inverseNormalMatrix = inverse(normalMatrix);
      tmpRay.origin = (inverseNormalMatrix * (ray.origin - center));
      tmpRay.direction = (inverseNormalMatrix * tmpRay.direction);

      float currDistance = 0.0;
      if (
        !intersectBox(tmpRay, boxSize, currDistance, normal) ||
        (outBestResult.distance > 0.0 && currDistance > outBestResult.distance)
      ) {
        return;
      }

      // convert normal from box space to world space
      normal = normalMatrix * normal;

      outBestResult.hasHit = true;
      outBestResult.distance = currDistance;
      outBestResult.position = ray.origin + currDistance * ray.direction;
      outBestResult.normal = normal;
      outBestResult.refractionFactor = 0.0;

      bool chessboardMaterialEnabled = (matTexel1.a != 0.0);

      vec4 matTexel0 = texelFetch(u_materialsTextureData, ivec2(materialIndex * 2 + 0, 0), 0);

      if (chessboardMaterialEnabled)
      {
        outBestResult.reflectionFactor = 0.5;
        outBestResult.refractionFactor = 0.0; // TODO

        // the multiplication by 0.999 will remove graphic artifact
        vec3 txPos = (inverseNormalMatrix * 0.999) * (center - outBestResult.position);

        // chessboard color effect
        // if (fract(txPos.x * 0.2) > 0.5 == fract(txPos.z * 0.2) > 0.5 == fract(txPos.y * 0.2) > 0.5)
        if (fract(txPos.x * 0.9) > 0.5 == fract(txPos.y * 0.9) > 0.5 == fract(txPos.z * 0.9) > 0.5)
        {
          outBestResult.color = vec4(1.0);
        }
        else
        {
          outBestResult.color = vec4(0.0, 0.4, 0.45, 1.0);
        }
      }
      else
      {
        vec3 color = matTexel0.rgb;

        float reflectionFactor = matTexel0.a;

        outBestResult.color = vec4(color, 1.0);
        outBestResult.reflectionFactor = reflectionFactor;
        outBestResult.refractionFactor = refractionFactor;
      }

      bool lightEnabled = (matTexel1.b != 0.0);
      outBestResult.lightEnabled = lightEnabled;


      break;
    }
    case 3: {



      tmpRay.origin = ray.origin;
      tmpRay.direction = ray.direction;

      vec3 v0 = vec3(shTexel0.b, shTexel0.a, shTexel1.r);
      vec3 v1 = shTexel1.gba;
      vec3 v2 = shTexel2.rgb;

      float currDistance = 0.0;
      if (
        !intersectTriangle(tmpRay, v0, v1, v2, currDistance, normal) ||
        (outBestResult.distance > 0.0 && currDistance > outBestResult.distance)
      ) {
        return;
      }

      vec4 matTexel0 = texelFetch(u_materialsTextureData, ivec2(materialIndex * 2 + 0, 0), 0);

      outBestResult.hasHit = true;
      outBestResult.distance = currDistance;
      outBestResult.position = ray.origin + currDistance * ray.direction;
      outBestResult.normal = normal;

      outBestResult.refractionFactor = 0.0; // TODO

      vec3 color = matTexel0.rgb;

      float reflectionFactor = matTexel0.a;

      outBestResult.color = vec4(color, 1.0);
      outBestResult.reflectionFactor = reflectionFactor;

      bool lightEnabled = (matTexel1.b != 0.0);
      outBestResult.lightEnabled = lightEnabled;



      break;
    }
  }


}


bool rayIntersectBvhAABB(RayValues ray, vec3 bvhMin, vec3 bvhMax)
{
  vec3 valA = (bvhMin - ray.origin) / ray.direction;
  vec3 valB = (bvhMax - ray.origin) / ray.direction;
  vec3 minVal = min(valA, valB);
  vec3 maxVal = max(valA, valB);

  float max_minVal = max(minVal.x, max(minVal.y, minVal.z));
  float min_maxVal = min(maxVal.x, min(maxVal.y, maxVal.z));

  return max_minVal < min_maxVal;
}

bool intersectScene(RayValues ray, out RayResult outBestResult, bool shadowMode)
{
  outBestResult.hasHit = false;
  outBestResult.distance = -1.0;

  if (u_sceneTextureSize <= 0) {
    return false;
  }

  // for (int index = 0; index < u_totalShapes; index += 3) {
  //   intersectSceneOneShape(index, ray, outBestResult, shadowMode);
  // }


  /**/
  if (u_totalShapes > 0) {

    const int maxBvhStack = 16;
    int bvhStack[maxBvhStack];

    bvhStack[0] = 0; // BVH root node index
    int top = 0;

    while (top >= 0) {

      // pop stack
      int bv_idx = bvhStack[top];
      top -= 1;

      vec4 rootNodeTexel0 = texelFetch(u_bvhDataTexture, ivec2(bv_idx * 3 + 0, 0), 0);
      vec4 rootNodeTexel1 = texelFetch(u_bvhDataTexture, ivec2(bv_idx * 3 + 1, 0), 0);

      vec3 aabbMin = rootNodeTexel0.rgb;
      vec3 aabbMax = vec3(rootNodeTexel0.a, rootNodeTexel1.r, rootNodeTexel1.g);

      if (!rayIntersectBvhAABB(ray, aabbMin, aabbMax)) {
        continue;
      }

      //

      int leftNodeIndex = int(rootNodeTexel1.b);
      if (leftNodeIndex >= 0) {
        // push left bvh node index on to the stack
        top += 1;
        bvhStack[top] = leftNodeIndex;
      }

      int rightNodeIndex = int(rootNodeTexel1.a);
      if (rightNodeIndex >= 0) {
        // push right bvh node index on to the stack
        top += 1;
        bvhStack[top] = rightNodeIndex;
      }

      //

      vec4 rootNodeTexel2 = texelFetch(u_bvhDataTexture, ivec2(bv_idx * 3 + 2, 0), 0);

      int leftLEafIndex = int(rootNodeTexel2.r);
      if (leftLEafIndex >= 0) {
        intersectSceneOneShape(leftLEafIndex * 3, ray, outBestResult, shadowMode);
      }

      int rightLeafIndex = int(rootNodeTexel2.g);
      if (rightLeafIndex >= 0) {
        intersectSceneOneShape(rightLeafIndex * 3, ray, outBestResult, shadowMode);
      }

      //

    }

  }
  //*/

#ifdef D_SIMPLIFIED
  outBestResult.reflectionFactor = 0.0;
  outBestResult.refractionFactor = 0.0;
#endif

  return outBestResult.hasHit;
}

float lightAt(vec3 impactPosition, vec3 impactNormal, vec3 viewer)
{
  float bestIntensity = 0.0;

  for (int index = 0; index < u_sunLightsStop; index += 1)
  {
    vec4 texel0 = texelFetch(u_lightsTextureData, ivec2(index + 0, 0), 0);
    vec3 lightDir = texel0.rgb;
    float localIntensity = texel0.a;

    float coef = localIntensity;
    lightDir = normalize(lightDir);

    // is the sun light blocked by an object?
    RayResult result;
    if (intersectScene(RayValues(impactPosition, lightDir), result, true)) {
      // light ray is blocked, skip this light
      continue;
    }

    //
    //
    //

    float intensity = 0.0;
    vec3 reflectionFactor = reflect(-lightDir, impactNormal);
    intensity += 0.6 * pow(max(dot(reflectionFactor, viewer), 0.0), 30.0);
    intensity += 1.0 * dot(lightDir, impactNormal);

    intensity *= coef;

    if (bestIntensity < intensity) {
      bestIntensity = intensity;
    }
  }

  for (int index = u_sunLightsStop; index < u_spotLightsStop; index += 2)
  {
    vec3 lightDir = vec3(1.0);
    float coef = 1.0;

    // spot light

    vec4 texel0 = texelFetch(u_lightsTextureData, ivec2(index + 0, 0), 0);
    vec4 texel1 = texelFetch(u_lightsTextureData, ivec2(index + 1, 0), 0);
    vec3 lightPos = texel0.rgb;
    float lightRadius = texel0.a;
    float localIntensity = texel1.r;

    vec3 lightToImpactVec3 = lightPos - impactPosition;

    // is it out of the spot light effect radius?
    float lightToImpactDistance = length(lightToImpactVec3);
    if (lightToImpactDistance > lightRadius) {
      // out of range, do not apply this light
      continue;
    }

    lightDir.x = lightToImpactVec3.x / lightToImpactDistance; // normalize
    lightDir.y = lightToImpactVec3.y / lightToImpactDistance; // normalize
    lightDir.z = lightToImpactVec3.z / lightToImpactDistance; // normalize

    coef = localIntensity * (1.0 - lightToImpactDistance / lightRadius);

    RayResult result;
    if (
      // is the spot light blocked by an object?
      intersectScene(RayValues(impactPosition, lightDir), result, true) &&
      // is the blocking object in range of the spot light effect radius?
      result.distance < lightToImpactDistance
    ) {
      // light ray is blocked, skip this light
      continue;
    }

    //
    //
    //

    float intensity = 0.0;
    vec3 reflectionFactor = reflect(-lightDir, impactNormal);
    intensity += 0.6 * pow(max(dot(reflectionFactor, viewer), 0.0), 30.0);
    intensity += 1.0 * dot(lightDir, impactNormal);

    intensity *= coef;

    if (bestIntensity < intensity) {
      bestIntensity = intensity;
    }
  }

  return max(g_ambiantLight, bestIntensity);
}

void main()
{
  //
  //
  // initial ray

  vec3 rayDir = normalize(v_position - u_cameraEye); // camera direction
  vec3 finalPixelColor = g_backgroundColor;

#ifdef D_SIMPLIFIED
  const int maxStack = 1;
#else
  const int maxStack = 4;
#endif
  StackData _stack[maxStack];

  // initialize stack
  for (int ii = 0; ii < maxStack; ++ii)
  {
    _stack[ii].used = false;
    _stack[ii].result.reflectionFactor = 0.0;
    _stack[ii].result.refractionFactor = 0.0;
    _stack[ii].result.lightEnabled = false;
    _stack[ii].reflectionIndex = -1;
    _stack[ii].refractionIndex = -1;
  }

  // initialize first stack element
  _stack[0].used = true;
  _stack[0].ray = RayValues(u_cameraEye, rayDir);
  _stack[0].result.position = u_cameraEye;
#ifdef D_SIMPLIFIED
  _stack[0].result.reflectionFactor = 0.0;
  _stack[0].result.refractionFactor = 0.0;
#else
  _stack[0].result.reflectionFactor = 1.0;
  _stack[0].result.refractionFactor = 1.0;
#endif
  _stack[0].result.lightEnabled = true;
  _stack[0].reflectionIndex = -1;
  _stack[0].refractionIndex = -1;

  int stackIndex = 0;

  for (int ii = 0; ii < maxStack; ++ii)
  {
    // intersect object
    // if reflection/refraction push to stack & set index
    // repeat

    if (!_stack[ii].used) {
      break;
    }

    _stack[ii].result.hasHit = intersectScene(
      _stack[ii].ray,
      _stack[ii].result,
      false
    );

    if (!_stack[ii].result.hasHit)
    {
      continue;
    }

    float lightIntensity = 1.0;

    if (_stack[ii].result.lightEnabled)
    {
      lightIntensity = lightAt(
        _stack[ii].result.position,
        _stack[ii].result.normal,
        -_stack[ii].ray.direction
      );
    }

    _stack[ii].result.color.xyz *= lightIntensity;

    if (_stack[ii].result.lightEnabled && lightIntensity <= 0.0)
    {
      // not lit
      continue;
    }

    // reflection/refraction here

    if (stackIndex + 1 >= maxStack)
    {
      // no more stack space left
      continue;
    }

    if (_stack[ii].result.refractionFactor > 0.0)
    {
      // push refraction to the stack
      stackIndex += 1;

      _stack[stackIndex].used = true;
      _stack[stackIndex].ray.origin = _stack[ii].result.position;
      _stack[stackIndex].ray.direction = refract(_stack[ii].ray.direction, _stack[ii].result.normal, Eta);

      _stack[ii].refractionIndex = stackIndex;
    }

    if (_stack[ii].result.reflectionFactor > 0.0)
    {
      // push reflection to the stack
      stackIndex += 1;

      _stack[stackIndex].used = true;
      _stack[stackIndex].ray.origin = _stack[ii].result.position;
      _stack[stackIndex].ray.direction = reflect(_stack[ii].ray.direction, _stack[ii].result.normal);

      _stack[ii].reflectionIndex = stackIndex;
    }

  }

  // combine all colors (from last element to first element)
  for (int ii = maxStack - 1; ii >= 0; --ii)
  {


    if (!_stack[ii].used || !_stack[ii].result.hasHit) {
      _stack[ii].result.color.xyz = g_backgroundColor;
      continue;
    }

    if (_stack[ii].reflectionIndex != -1)
    {
      _stack[ii].result.color.xyz =
        _stack[ii].result.color.xyz * (1.0 - _stack[ii].result.reflectionFactor) +
        _stack[_stack[ii].reflectionIndex].result.color.xyz * _stack[ii].result.reflectionFactor;
    }

    if (_stack[ii].refractionIndex != -1)
    {
      _stack[ii].result.color.xyz =
        _stack[ii].result.color.xyz * (1.0 - _stack[ii].result.refractionFactor) +
        _stack[_stack[ii].refractionIndex].result.color.xyz * _stack[ii].result.refractionFactor;
    }
  }

  if (_stack[0].result.hasHit) {
    finalPixelColor = _stack[0].result.color.xyz;
  }

  o_color = vec4(finalPixelColor, 1.0);

}
`.trim();

// src/webgl-ray-tracer/src/experiment/graphics/renderers/ray-tracer-renderer/shaders/texture.glsl.vert
var texture_glsl_default = `
#version 300 es

precision highp float;

in vec2 a_vertexPosition;
in vec2 a_vertexTextureCoord;

out vec2 v_textureCoord;

void main(void)
{
  v_textureCoord = a_vertexTextureCoord;

  gl_Position = vec4(a_vertexPosition, 1.0, 1.0);
}
`.trim();

// src/webgl-ray-tracer/src/experiment/graphics/renderers/ray-tracer-renderer/shaders/texture.glsl.frag
var texture_glsl_default2 = `
#version 300 es

precision highp float;

uniform sampler2D u_texture;
uniform vec2 u_step;

in vec2 v_textureCoord;

out vec4 o_color;

void main(void)
{
  // gl_FragColor = texture(u_texture, v_textureCoord);

  float total = 0.0;
  vec4 accumulated = vec4(0.0);

  //

  if (v_textureCoord.x - u_step.x > 0.0)
  {
    accumulated += texture(u_texture, vec2(v_textureCoord.x - u_step.x, v_textureCoord.y));
    total += 1.0;
  }

  if (v_textureCoord.x + u_step.x > 0.0)
  {
    accumulated += texture(u_texture, vec2(v_textureCoord.x + u_step.x, v_textureCoord.y));
    total += 1.0;
  }

  if (v_textureCoord.y - u_step.y > 0.0)
  {
    accumulated += texture(u_texture, vec2(v_textureCoord.x, v_textureCoord.y - u_step.y));
    total += 1.0;
  }

  if (v_textureCoord.y + u_step.y > 0.0)
  {
    accumulated += texture(u_texture, vec2(v_textureCoord.x, v_textureCoord.y + u_step.y));
    total += 1.0;
  }

  //

  if (v_textureCoord.x - u_step.x > 0.0 && v_textureCoord.y - u_step.y > 0.0)
  {
    accumulated += texture(u_texture, vec2(v_textureCoord.x - u_step.x, v_textureCoord.y - u_step.y));
    total += 1.0;
  }

  if (v_textureCoord.x + u_step.x > 0.0 && v_textureCoord.y - u_step.y > 0.0)
  {
    accumulated += texture(u_texture, vec2(v_textureCoord.x + u_step.x, v_textureCoord.y - u_step.y));
    total += 1.0;
  }

  if (v_textureCoord.x - u_step.x > 0.0 && v_textureCoord.y + u_step.y > 0.0)
  {
    accumulated += texture(u_texture, vec2(v_textureCoord.x - u_step.x, v_textureCoord.y + u_step.y));
    total += 1.0;
  }

  if (v_textureCoord.x + u_step.x > 0.0 && v_textureCoord.y + u_step.y > 0.0)
  {
    accumulated += texture(u_texture, vec2(v_textureCoord.x + u_step.x, v_textureCoord.y + u_step.y));
    total += 1.0;
  }

  //

  if (total > 0.0)
    o_color = accumulated / total;
  else
    o_color = vec4(1.0, 0.0, 0.0, 1.0); // warning
}
`.trim();

// src/webgl-ray-tracer/src/experiment/graphics/renderers/ray-tracer-renderer/shaders/ascii-art.glsl.vert
var ascii_art_glsl_default = `
#version 300 es

precision highp float;

in vec2 a_vertexPosition;
in vec2 a_vertexTextureCoord;

out vec2 v_textureCoord;

void main(void)
{
  v_textureCoord = a_vertexTextureCoord;

  gl_Position = vec4(a_vertexPosition, 1.0, 1.0);
}
`.trim();

// src/webgl-ray-tracer/src/experiment/graphics/renderers/ray-tracer-renderer/shaders/ascii-art.glsl.frag
var ascii_art_glsl_default2 = `
#version 300 es

precision highp float;

uniform sampler2D u_texture;



// https://www.shadertoy.com/view/4ll3RB

#define r vec2(800, 600)
// #define t 0

#define zoom 1.
#define P(id,a,b,c,d,e,f,g,h) if( id == int(pos.y) ){ int pa = a+2*(b+2*(c+2*(d+2*(e+2*(f+2*(g+2*(h))))))); cha = floor(mod(float(pa)/pow(2.,float(pos.x)-1.),2.)); }

float gray(vec3 _i)
{
  return _i.x*0.299+_i.y*0.587+_i.z*0.114;
}
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
  vec2 uv = vec2(floor(fragCoord.x/8./zoom)*8.*zoom,floor(fragCoord.y/12./zoom)*12.*zoom)/r;
  ivec2 pos = ivec2(mod(fragCoord.x/zoom,8.),mod(fragCoord.y/zoom,12.));
  vec4 tex = texture(u_texture,uv);
  float cha = 0.;

  float g = gray(tex.xyz);
  if( g < .125 )
  {
    P(11,0,0,0,0,0,0,0,0);
    P(10,0,0,0,0,0,0,0,0);
    P(9,0,0,0,0,0,0,0,0);
    P(8,0,0,0,0,0,0,0,0);
    P(7,0,0,0,0,0,0,0,0);
    P(6,0,0,0,0,0,0,0,0);
    P(5,0,0,0,0,0,0,0,0);
    P(4,0,0,0,0,0,0,0,0);
    P(3,0,0,0,0,0,0,0,0);
    P(2,0,0,0,0,0,0,0,0);
    P(1,0,0,0,0,0,0,0,0);
    P(0,0,0,0,0,0,0,0,0);
  }
  else if( g < .25 ) // .
  {
    P(11,0,0,0,0,0,0,0,0);
    P(10,0,0,0,0,0,0,0,0);
    P(9,0,0,0,0,0,0,0,0);
    P(8,0,0,0,0,0,0,0,0);
    P(7,0,0,0,0,0,0,0,0);
    P(6,0,0,0,0,0,0,0,0);
    P(5,0,0,0,0,0,0,0,0);
    P(4,0,0,0,1,1,0,0,0);
    P(3,0,0,0,1,1,0,0,0);
    P(2,0,0,0,0,0,0,0,0);
    P(1,0,0,0,0,0,0,0,0);
    P(0,0,0,0,0,0,0,0,0);
  }
  else if( g < .375 ) // ,
  {
    P(11,0,0,0,0,0,0,0,0);
    P(10,0,0,0,0,0,0,0,0);
    P(9,0,0,0,0,0,0,0,0);
    P(8,0,0,0,0,0,0,0,0);
    P(7,0,0,0,0,0,0,0,0);
    P(6,0,0,0,0,0,0,0,0);
    P(5,0,0,0,0,0,0,0,0);
    P(4,0,0,0,1,1,0,0,0);
    P(3,0,0,0,1,1,0,0,0);
    P(2,0,0,0,0,1,0,0,0);
    P(1,0,0,0,1,0,0,0,0);
    P(0,0,0,0,0,0,0,0,0);
  }
  else if( g < .5 ) // -
  {
    P(11,0,0,0,0,0,0,0,0);
    P(10,0,0,0,0,0,0,0,0);
    P(9,0,0,0,0,0,0,0,0);
    P(8,0,0,0,0,0,0,0,0);
    P(7,0,0,0,0,0,0,0,0);
    P(6,1,1,1,1,1,1,1,0);
    P(5,0,0,0,0,0,0,0,0);
    P(4,0,0,0,0,0,0,0,0);
    P(3,0,0,0,0,0,0,0,0);
    P(2,0,0,0,0,0,0,0,0);
    P(1,0,0,0,0,0,0,0,0);
    P(0,0,0,0,0,0,0,0,0);
  }
  else if(g < .625 ) // +
  {
    P(11,0,0,0,0,0,0,0,0);
    P(10,0,0,0,0,0,0,0,0);
    P(9,0,0,0,1,0,0,0,0);
    P(8,0,0,0,1,0,0,0,0);
    P(7,0,0,0,1,0,0,0,0);
    P(6,1,1,1,1,1,1,1,0);
    P(5,0,0,0,1,0,0,0,0);
    P(4,0,0,0,1,0,0,0,0);
    P(3,0,0,0,1,0,0,0,0);
    P(2,0,0,0,0,0,0,0,0);
    P(1,0,0,0,0,0,0,0,0);
    P(0,0,0,0,0,0,0,0,0);
  }
  else if(g < .75 ) // *
  {
    P(11,0,0,0,0,0,0,0,0);
    P(10,0,0,0,1,0,0,0,0);
    P(9,1,0,0,1,0,0,1,0);
    P(8,0,1,0,1,0,1,0,0);
    P(7,0,0,1,1,1,0,0,0);
    P(6,0,0,0,1,0,0,0,0);
    P(5,0,0,1,1,1,0,0,0);
    P(4,0,1,0,1,0,1,0,0);
    P(3,1,0,0,1,0,0,1,0);
    P(2,0,0,0,1,0,0,0,0);
    P(1,0,0,0,0,0,0,0,0);
    P(0,0,0,0,0,0,0,0,0);
  }
  else if(g < .875 ) // #
  {
    P(11,0,0,0,0,0,0,0,0);
    P(10,0,0,1,0,0,1,0,0);
    P(9,0,0,1,0,0,1,0,0);
    P(8,1,1,1,1,1,1,1,0);
    P(7,0,0,1,0,0,1,0,0);
    P(6,0,0,1,0,0,1,0,0);
    P(5,0,1,0,0,1,0,0,0);
    P(4,0,1,0,0,1,0,0,0);
    P(3,1,1,1,1,1,1,1,0);
    P(2,0,1,0,0,1,0,0,0);
    P(1,0,1,0,0,1,0,0,0);
    P(0,0,0,0,0,0,0,0,0);
  }
  else // @
  {
    P(11,0,0,0,0,0,0,0,0);
    P(10,0,0,1,1,1,1,0,0);
    P(9,0,1,0,0,0,0,1,0);
    P(8,1,0,0,0,1,1,1,0);
    P(7,1,0,0,1,0,0,1,0);
    P(6,1,0,0,1,0,0,1,0);
    P(5,1,0,0,1,0,0,1,0);
    P(4,1,0,0,1,0,0,1,0);
    P(3,1,0,0,1,1,1,1,0);
    P(2,0,1,0,0,0,0,0,0);
    P(1,0,0,1,1,1,1,1,0);
    P(0,0,0,0,0,0,0,0,0);
  }

  vec3 col = tex.xyz/max(tex.x,max(tex.y,tex.z));
  fragColor = vec4(cha*col,1.);
}


in vec2 v_textureCoord;

out vec4 o_color;

void main(void)
{
  mainImage(o_color, v_textureCoord * r);
  // mainImage(o_color, vec2(gl_FragCoord));

}
`.trim();

// src/webgl-ray-tracer/src/experiment/graphics/renderers/ray-tracer-renderer/BVH.ts
var k_minDelta = 0.01;
var _renderAABB = (renderer, min4, max4, color) => {
  const vertices = [
    [min4[0], min4[1], min4[2]],
    [max4[0], min4[1], min4[2]],
    [min4[0], max4[1], min4[2]],
    [max4[0], max4[1], min4[2]],
    [min4[0], min4[1], max4[2]],
    [max4[0], min4[1], max4[2]],
    [min4[0], max4[1], max4[2]],
    [max4[0], max4[1], max4[2]]
  ];
  const indices = [
    [0, 1],
    [1, 3],
    [3, 2],
    [2, 0],
    [4, 5],
    [5, 7],
    [7, 6],
    [6, 4],
    [0, 4],
    [1, 5],
    [2, 6],
    [3, 7]
  ];
  for (const pair of indices) {
    renderer.pushLine(vertices[pair[0]], vertices[pair[1]], color);
  }
};

class BVHNode {
  _index = -1;
  _min = exports_vec3.create();
  _max = exports_vec3.create();
  _leftNode;
  _rightNode;
  _leftLeaf;
  _rightLeaf;
  static s_index = 0;
  constructor(min4, max4) {
    this._index = BVHNode.s_index;
    BVHNode.s_index += 1;
    exports_vec3.copy(this._min, min4);
    exports_vec3.copy(this._max, max4);
  }
  subDivide(allShapes) {
    if (allShapes.length <= 2) {
      this._leftLeaf = allShapes[0];
      this._rightLeaf = allShapes[1];
      return;
    }
    const dx = Math.abs(this._max[0] - this._min[0]);
    const dy = Math.abs(this._max[1] - this._min[1]);
    const dz = Math.abs(this._max[2] - this._min[2]);
    const largestDelta = Math.max(dx, dy, dz);
    if (largestDelta === dx) {
      this._splitAcross(0, allShapes);
    } else if (largestDelta === dy) {
      this._splitAcross(1, allShapes);
    } else {
      this._splitAcross(2, allShapes);
    }
  }
  _splitAcross(axis, allShapes) {
    const sorted = [...allShapes].sort((shapeA, shapeB) => {
      const a0 = shapeA.min[axis];
      const a1 = shapeA.max[axis];
      const b0 = shapeB.min[axis];
      const b1 = shapeB.max[axis];
      return (a0 + a1) / 2 - (b0 + b1) / 2;
    });
    const h = sorted.length / 2;
    const l = sorted.length;
    const ltFaces = sorted.slice(0, h);
    const rtFaces = sorted.slice(h, l);
    if (ltFaces.length > 0) {
      const min4 = exports_vec3.fromValues(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);
      const max4 = exports_vec3.fromValues(Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER);
      ltFaces.forEach((f) => {
        min4[0] = Math.min(min4[0], f.min[0]);
        min4[1] = Math.min(min4[1], f.min[1]);
        min4[2] = Math.min(min4[2], f.min[2]);
        max4[0] = Math.max(max4[0], f.max[0]);
        max4[1] = Math.max(max4[1], f.max[1]);
        max4[2] = Math.max(max4[2], f.max[2]);
      });
      this._leftNode = new BVHNode(min4, max4);
    }
    if (rtFaces.length > 0) {
      const min4 = exports_vec3.fromValues(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);
      const max4 = exports_vec3.fromValues(Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER);
      rtFaces.forEach((f) => {
        min4[0] = Math.min(min4[0], f.min[0]);
        min4[1] = Math.min(min4[1], f.min[1]);
        min4[2] = Math.min(min4[2], f.min[2]);
        max4[0] = Math.max(max4[0], f.max[0]);
        max4[1] = Math.max(max4[1], f.max[1]);
        max4[2] = Math.max(max4[2], f.max[2]);
      });
      this._rightNode = new BVHNode(min4, max4);
    }
    if (this._leftNode) {
      this._leftNode.subDivide(ltFaces);
    }
    if (this._rightNode) {
      this._rightNode.subDivide(rtFaces);
    }
  }
  render(renderer, color) {
    _renderAABB(renderer, this._min, this._max, color);
    if (this._leftNode) {
      this._leftNode.render(renderer, [0, 0.5, 0]);
      renderer.pushLine([this._max[0] + 0.1, this._max[1] + 0.1, this._max[2] + 0.1], [this._leftNode._max[0] + 0.1, this._leftNode._max[1] + 0.1, this._leftNode._max[2] + 0.1], [1, 0, 1]);
    }
    if (this._rightNode) {
      this._rightNode.render(renderer, [0, 0, 0.5]);
      renderer.pushLine([this._max[0] + 0.1, this._max[1] + 0.1, this._max[2] + 0.1], [this._rightNode._max[0] + 0.1, this._rightNode._max[1] + 0.1, this._rightNode._max[2] + 0.1], [1, 0, 1]);
    }
    if (this._leftLeaf) {
      _renderAABB(renderer, this._leftLeaf.min, this._leftLeaf.max, [0.5, 0.5, 0]);
      renderer.pushLine([this._max[0] + 0.1, this._max[1] + 0.1, this._max[2] + 0.1], [this._leftLeaf.max[0] + 0.1, this._leftLeaf.max[1] + 0.1, this._leftLeaf.max[2] + 0.1], [1, 0, 0]);
    }
    if (this._rightLeaf) {
      _renderAABB(renderer, this._rightLeaf.min, this._rightLeaf.max, [0.5, 0.5, 0]);
      renderer.pushLine([this._max[0] + 0.1, this._max[1] + 0.1, this._max[2] + 0.1], [this._rightLeaf.max[0] + 0.1, this._rightLeaf.max[1] + 0.1, this._rightLeaf.max[2] + 0.1], [1, 0, 0]);
    }
  }
}

class BVH {
  _allShapes = [];
  _rootNode;
  constructor() {
  }
  reset() {
    this._allShapes.length = 0;
    this._rootNode = undefined;
  }
  synchronize(allSpheres, allBoxes, allTriangles) {
    this.reset();
    let index2 = 0;
    for (const currShape of allSpheres) {
      const min5 = exports_vec3.fromValues(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);
      const max5 = exports_vec3.fromValues(Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER);
      min5[0] = Math.min(min5[0], currShape.position[0] - currShape.radius);
      min5[1] = Math.min(min5[1], currShape.position[1] - currShape.radius);
      min5[2] = Math.min(min5[2], currShape.position[2] - currShape.radius);
      max5[0] = Math.max(max5[0], currShape.position[0] + currShape.radius);
      max5[1] = Math.max(max5[1], currShape.position[1] + currShape.radius);
      max5[2] = Math.max(max5[2], currShape.position[2] + currShape.radius);
      if (max5[0] - min5[0] < k_minDelta) {
        max5[0] += k_minDelta;
      }
      if (max5[1] - min5[1] < k_minDelta) {
        max5[1] += k_minDelta;
      }
      if (max5[2] - min5[2] < k_minDelta) {
        max5[2] += k_minDelta;
      }
      this._allShapes.push({ index: index2++, type: "sphere", shape: currShape, min: min5, max: max5 });
    }
    for (const currShape of allBoxes) {
      const min5 = exports_vec3.fromValues(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);
      const max5 = exports_vec3.fromValues(Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER);
      const vertices = [
        exports_vec3.fromValues(-currShape.boxSize[0], -currShape.boxSize[1], -currShape.boxSize[2]),
        exports_vec3.fromValues(+currShape.boxSize[0], -currShape.boxSize[1], -currShape.boxSize[2]),
        exports_vec3.fromValues(-currShape.boxSize[0], +currShape.boxSize[1], -currShape.boxSize[2]),
        exports_vec3.fromValues(+currShape.boxSize[0], +currShape.boxSize[1], -currShape.boxSize[2]),
        exports_vec3.fromValues(-currShape.boxSize[0], -currShape.boxSize[1], +currShape.boxSize[2]),
        exports_vec3.fromValues(+currShape.boxSize[0], -currShape.boxSize[1], +currShape.boxSize[2]),
        exports_vec3.fromValues(-currShape.boxSize[0], +currShape.boxSize[1], +currShape.boxSize[2]),
        exports_vec3.fromValues(+currShape.boxSize[0], +currShape.boxSize[1], +currShape.boxSize[2])
      ];
      vertices.forEach((vertex) => {
        const pos = exports_vec3.fromValues(0, 0, 0);
        const mat4 = exports_mat4.identity(exports_mat4.create());
        exports_mat4.translate(mat4, mat4, currShape.position);
        const mat4b = exports_mat4.fromQuat(exports_mat4.create(), currShape.orientation);
        exports_mat4.multiply(mat4, mat4, mat4b);
        exports_vec3.transformMat4(pos, vertex, mat4);
        min5[0] = Math.min(min5[0], pos[0]);
        min5[1] = Math.min(min5[1], pos[1]);
        min5[2] = Math.min(min5[2], pos[2]);
        max5[0] = Math.max(max5[0], pos[0]);
        max5[1] = Math.max(max5[1], pos[1]);
        max5[2] = Math.max(max5[2], pos[2]);
      });
      if (max5[0] - min5[0] < k_minDelta) {
        max5[0] += k_minDelta;
      }
      if (max5[1] - min5[1] < k_minDelta) {
        max5[1] += k_minDelta;
      }
      if (max5[2] - min5[2] < k_minDelta) {
        max5[2] += k_minDelta;
      }
      this._allShapes.push({ index: index2++, type: "box", shape: currShape, min: min5, max: max5 });
    }
    for (const currShape of allTriangles) {
      const min5 = exports_vec3.fromValues(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);
      const max5 = exports_vec3.fromValues(Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER);
      min5[0] = Math.min(min5[0], currShape.v0[0]);
      min5[1] = Math.min(min5[1], currShape.v0[1]);
      min5[2] = Math.min(min5[2], currShape.v0[2]);
      max5[0] = Math.max(max5[0], currShape.v0[0]);
      max5[1] = Math.max(max5[1], currShape.v0[1]);
      max5[2] = Math.max(max5[2], currShape.v0[2]);
      min5[0] = Math.min(min5[0], currShape.v1[0]);
      min5[1] = Math.min(min5[1], currShape.v1[1]);
      min5[2] = Math.min(min5[2], currShape.v1[2]);
      max5[0] = Math.max(max5[0], currShape.v1[0]);
      max5[1] = Math.max(max5[1], currShape.v1[1]);
      max5[2] = Math.max(max5[2], currShape.v1[2]);
      min5[0] = Math.min(min5[0], currShape.v2[0]);
      min5[1] = Math.min(min5[1], currShape.v2[1]);
      min5[2] = Math.min(min5[2], currShape.v2[2]);
      max5[0] = Math.max(max5[0], currShape.v2[0]);
      max5[1] = Math.max(max5[1], currShape.v2[1]);
      max5[2] = Math.max(max5[2], currShape.v2[2]);
      if (max5[0] - min5[0] < k_minDelta) {
        max5[0] += k_minDelta;
      }
      if (max5[1] - min5[1] < k_minDelta) {
        max5[1] += k_minDelta;
      }
      if (max5[2] - min5[2] < k_minDelta) {
        max5[2] += k_minDelta;
      }
      this._allShapes.push({ index: index2++, type: "triangle", shape: currShape, min: min5, max: max5 });
    }
    const min4 = exports_vec3.fromValues(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);
    const max4 = exports_vec3.fromValues(Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER, Number.MIN_SAFE_INTEGER);
    for (const currShape of this._allShapes) {
      min4[0] = Math.min(min4[0], currShape.min[0]);
      min4[1] = Math.min(min4[1], currShape.min[1]);
      min4[2] = Math.min(min4[2], currShape.min[2]);
      max4[0] = Math.max(max4[0], currShape.max[0]);
      max4[1] = Math.max(max4[1], currShape.max[1]);
      max4[2] = Math.max(max4[2], currShape.max[2]);
    }
    BVHNode.s_index = 0;
    this._rootNode = new BVHNode(min4, max4);
    this._rootNode.subDivide(this._allShapes);
  }
  fillDataTexture() {
    const pixels = [];
    if (!this._rootNode) {
      return pixels;
    }
    const allNodes = [];
    const _recFunc = (currNode) => {
      allNodes.push(currNode);
      if (currNode._leftNode) {
        _recFunc(currNode._leftNode);
      }
      if (currNode._rightNode) {
        _recFunc(currNode._rightNode);
      }
    };
    _recFunc(this._rootNode);
    allNodes.sort((a, b) => a._index - b._index);
    for (const currNode of allNodes) {
      pixels.push([
        currNode._min[0],
        currNode._min[1],
        currNode._min[2],
        currNode._max[0]
      ]);
      pixels.push([
        currNode._max[1],
        currNode._max[2],
        (currNode._leftNode?._index ?? -2) + 0.5,
        (currNode._rightNode?._index ?? -2) + 0.5
      ]);
      pixels.push([
        (currNode._leftLeaf?.index ?? -2) + 0.5,
        (currNode._rightLeaf?.index ?? -2) + 0.5,
        0,
        0
      ]);
    }
    return pixels;
  }
  render(renderer) {
    if (!this._rootNode) {
      return;
    }
    this._rootNode.render(renderer, [0.5, 0, 0]);
    for (const currShape of this._allShapes) {
      _renderAABB(renderer, currShape.min, currShape.max, [1, 1, 0]);
    }
  }
}

// src/webgl-ray-tracer/src/experiment/graphics/renderers/ray-tracer-renderer/RayTracerRenderer.ts
var {
  WebGLContext: WebGLContext15,
  DataTextureVec4f32: DataTextureVec4f323,
  Texture: Texture4,
  FrameBuffer: FrameBuffer3,
  ShaderProgram: ShaderProgram3,
  GeometryWrapper
} = exports_graphics.webgl2;
var _degreeToRad = (angle3) => angle3 * Math.PI / 180;

class RayTracerRenderer {
  _cameraFovy;
  _canvasWidth;
  _canvasHeight;
  _renderWidth;
  _renderHeight;
  _resolutionCoef = 1;
  _antiAliasing = false;
  _rayTracerShaderProgram;
  _textureShaderProgram;
  _asciiArtShaderProgram;
  _rayTracerGeometry;
  _screenGeometry;
  _asciiArtScreenGeometry;
  _finalTexture;
  _frameBuffer;
  _sceneDataTexture;
  _spheres = [];
  _boxes = [];
  _triangles = [];
  _materialsDataTexture;
  _lightsDataTexture;
  _sunLights = [];
  _spotLights = [];
  _bvhDataTexture;
  _camera;
  _bvh = new BVH;
  constructor(inDef) {
    this._cameraFovy = inDef.fovy;
    this._renderWidth = this._canvasWidth = inDef.canvasWidth;
    this._renderHeight = this._canvasHeight = inDef.canvasHeight;
    this._rayTracerShaderProgram = new ShaderProgram3("RayTracerRenderer-1", {
      vertexSrc: ray_tracer_glsl_default,
      fragmentSrc: ray_tracer_glsl_default2,
      attributes: ["a_vertexPosition", "a_plotPosition"],
      uniforms: [
        "u_cameraEye",
        "u_sceneTextureData",
        "u_sceneTextureSize",
        "u_materialsTextureData",
        "u_totalShapes",
        "u_lightsTextureData",
        "u_sunLightsStop",
        "u_spotLightsStop",
        "u_bvhDataTexture"
      ]
    });
    this._textureShaderProgram = new ShaderProgram3("RayTracerRenderer-1", {
      vertexSrc: texture_glsl_default,
      fragmentSrc: texture_glsl_default2,
      attributes: ["a_vertexPosition", "a_vertexTextureCoord"],
      uniforms: ["u_texture", "u_step"]
    });
    this._asciiArtShaderProgram = new ShaderProgram3("RayTracerRenderer-ascii-art", {
      vertexSrc: ascii_art_glsl_default,
      fragmentSrc: ascii_art_glsl_default2,
      attributes: ["a_vertexPosition", "a_vertexTextureCoord"],
      uniforms: ["u_texture"]
    });
    this._finalTexture = new Texture4;
    this._frameBuffer = new FrameBuffer3;
    this._finalTexture.initialize();
    this._finalTexture.preBind((boundTexture) => {
      boundTexture.allocate(this._renderWidth, this._renderHeight);
      this._frameBuffer.bind((boundFrameBuffer) => {
        boundFrameBuffer.attachTexture(boundTexture);
      });
    });
    const geoBuilder = new GeometryWrapper.GeometryBuilder;
    geoBuilder.reset().setPrimitiveType("triangleStrip").addVbo().addVboAttribute("a_vertexPosition", "vec2f").addVbo().setVboAsDynamic().addVboAttribute("a_plotPosition", "vec3f");
    this._rayTracerGeometry = new GeometryWrapper.Geometry(this._rayTracerShaderProgram, geoBuilder.getDef());
    const rayTracerVertices = [];
    rayTracerVertices.push(1, 1);
    rayTracerVertices.push(-1, 1);
    rayTracerVertices.push(1, -1);
    rayTracerVertices.push(-1, -1);
    this._rayTracerGeometry.allocateBuffer(0, rayTracerVertices, rayTracerVertices.length);
    this._rayTracerGeometry.setPrimitiveStart(0);
    this._rayTracerGeometry.setPrimitiveCount(4);
    const screenVertices = [];
    screenVertices.push(1, 1, 1, 1);
    screenVertices.push(-1, 1, 0, 1);
    screenVertices.push(1, -1, 1, 0);
    screenVertices.push(-1, -1, 0, 0);
    geoBuilder.reset().setPrimitiveType("triangleStrip").addVbo().addVboAttribute("a_vertexPosition", "vec2f").addVboAttribute("a_vertexTextureCoord", "vec2f");
    this._screenGeometry = new GeometryWrapper.Geometry(this._asciiArtShaderProgram, geoBuilder.getDef());
    this._screenGeometry.allocateBuffer(0, screenVertices, screenVertices.length);
    this._screenGeometry.setPrimitiveStart(0);
    this._screenGeometry.setPrimitiveCount(4);
    this._asciiArtScreenGeometry = new GeometryWrapper.Geometry(this._asciiArtShaderProgram, geoBuilder.getDef());
    this._asciiArtScreenGeometry.allocateBuffer(0, screenVertices, screenVertices.length);
    this._asciiArtScreenGeometry.setPrimitiveStart(0);
    this._asciiArtScreenGeometry.setPrimitiveCount(4);
    this._sceneDataTexture = new DataTextureVec4f323;
    this._sceneDataTexture.initialize(2048);
    this._materialsDataTexture = new DataTextureVec4f323;
    this._materialsDataTexture.initialize(2048);
    this._lightsDataTexture = new DataTextureVec4f323;
    this._lightsDataTexture.initialize(2048);
    this._bvhDataTexture = new DataTextureVec4f323;
    this._bvhDataTexture.initialize(2048);
    this._camera = {
      position: exports_vec3.fromValues(0, 0, 0),
      target: exports_vec3.fromValues(1.5, 1.5, 1.5),
      up: exports_vec3.fromValues(0, 1, 0)
    };
  }
  pushSphere({
    position,
    orientation,
    radius,
    color,
    reflectionFactor,
    refractionFactor,
    chessboardEnabled,
    castShadowEnabled,
    receiveLightEnabled
  }) {
    if (radius <= 0) {
      throw new Error("invalid sphere radius");
    }
    if (reflectionFactor < 0 || reflectionFactor > 1) {
      throw new Error("invalid sphere reflection");
    }
    if (refractionFactor < 0 || refractionFactor > 1) {
      throw new Error("invalid sphere refractionFactor");
    }
    this._spheres.push({
      position: [position[0], position[1], position[2]],
      orientation: [orientation[0], orientation[1], orientation[2], orientation[3]],
      radius,
      color: [color[0], color[1], color[2]],
      reflectionFactor,
      refractionFactor,
      chessboardEnabled,
      castShadowEnabled,
      receiveLightEnabled
    });
  }
  pushBox({
    position,
    orientation,
    boxSize,
    color,
    reflectionFactor,
    refractionFactor,
    chessboardEnabled,
    castShadowEnabled,
    receiveLightEnabled
  }) {
    if (boxSize[0] <= 0 || boxSize[1] <= 0 || boxSize[2] <= 0) {
      throw new Error("invalid box size");
    }
    if (reflectionFactor < 0 || reflectionFactor > 1) {
      throw new Error("invalid box reflection");
    }
    this._boxes.push({
      position: [position[0], position[1], position[2]],
      orientation: [orientation[0], orientation[1], orientation[2], orientation[3]],
      boxSize: exports_vec3.clone(boxSize),
      color: exports_vec3.clone(color),
      reflectionFactor,
      refractionFactor,
      chessboardEnabled,
      castShadowEnabled,
      receiveLightEnabled
    });
  }
  pushTriangle({
    v0,
    v1,
    v2,
    color,
    reflectionFactor,
    castShadowEnabled,
    receiveLightEnabled
  }) {
    if (reflectionFactor < 0 || reflectionFactor > 1) {
      throw new Error("invalid triangle reflection");
    }
    this._triangles.push({
      v0: exports_vec3.clone(v0),
      v1: exports_vec3.clone(v1),
      v2: exports_vec3.clone(v2),
      color: exports_vec3.clone(color),
      reflectionFactor,
      castShadowEnabled,
      receiveLightEnabled
    });
  }
  pushSunLight({ direction, intensity }) {
    if (intensity <= 0)
      throw new Error("intensity cannot be 0");
    if (exports_vec3.length(direction) === 0)
      throw new Error("direction cannot be 0");
    const dir = exports_vec3.normalize(exports_vec3.clone(direction), direction);
    this._sunLights.push({ direction: dir, intensity });
  }
  pushSpotLight({ position, intensity, radius }) {
    if (intensity <= 0)
      throw new Error("intensity cannot be 0");
    if (radius <= 0)
      throw new Error("radius cannot be <= 0");
    this._spotLights.push({
      position: exports_vec3.clone(position),
      intensity,
      radius
    });
  }
  lookAt(eye, target, up) {
    exports_vec3.copy(this._camera.position, eye);
    let forwardDir = exports_vec3.sub(exports_vec3.create(), target, eye);
    forwardDir = exports_vec3.normalize(forwardDir, forwardDir);
    forwardDir = exports_vec3.add(forwardDir, eye, forwardDir);
    exports_vec3.copy(this._camera.target, forwardDir);
    const upDir = exports_vec3.normalize(exports_vec3.create(), up);
    exports_vec3.copy(this._camera.up, upDir);
  }
  render() {
    this._renderTexturePass();
    this._renderRayTracingPass();
  }
  renderAsciiArt() {
    this._renderAsciiArtTexturePass();
    this._renderRayTracingPass();
  }
  _renderTexturePass() {
    const gl = WebGLContext15.getContext();
    gl.viewport(0, 0, this._canvasWidth, this._canvasHeight);
    gl.clear(gl.COLOR_BUFFER_BIT);
    const shader = this._textureShaderProgram;
    shader.bind((boundShader) => {
      boundShader.setTextureUniform("u_texture", this._finalTexture, 0);
      if (this._antiAliasing) {
        const stepX = (1 - this._renderWidth / this._canvasWidth) * 0.005;
        const stepY = (1 - this._renderHeight / this._canvasHeight) * 0.005;
        boundShader.setFloat2Uniform("u_step", stepX, stepY);
      } else {
        boundShader.setFloat2Uniform("u_step", 0, 0);
      }
      this._screenGeometry.render();
    });
  }
  _renderAsciiArtTexturePass() {
    const gl = WebGLContext15.getContext();
    gl.viewport(0, 0, this._canvasWidth, this._canvasHeight);
    gl.clear(gl.COLOR_BUFFER_BIT);
    const shader = this._asciiArtShaderProgram;
    shader.bind((boundShader) => {
      boundShader.setTextureUniform("u_texture", this._finalTexture, 0);
      this._asciiArtScreenGeometry.render();
    });
  }
  _renderRayTracingPass() {
    const gl = WebGLContext15.getContext();
    const farCorners = this._computeCameraFarCorners();
    this._rayTracerGeometry.allocateBuffer(1, farCorners, farCorners.length);
    const scaledWidth = Math.floor(this._renderWidth);
    const scaledHeight = Math.floor(this._renderHeight);
    this._bvh.synchronize(this._spheres, this._boxes, this._triangles);
    const bvhPixelsData = this._bvh.fillDataTexture();
    this._bvhDataTexture.bind((boundTexture) => {
      boundTexture.update(0, bvhPixelsData);
    });
    this._frameBuffer.bind(() => {
      gl.viewport(0, 0, scaledWidth, scaledHeight);
      gl.clear(gl.COLOR_BUFFER_BIT);
      {
        const shader = this._rayTracerShaderProgram;
        shader.bind((boundShader) => {
          boundShader.setFloat3Uniform("u_cameraEye", this._camera.position[0], this._camera.position[1], this._camera.position[2]);
          {
            const sceneDataValues = [];
            const materialsDataValues = [];
            let materialIndex = 0;
            {
              {
                for (const sphere of this._spheres) {
                  sceneDataValues.push([
                    1,
                    materialIndex + 0.5,
                    sphere.position[0],
                    sphere.position[1]
                  ]);
                  sceneDataValues.push([
                    sphere.position[2],
                    sphere.orientation[0],
                    sphere.orientation[1],
                    sphere.orientation[2]
                  ]);
                  sceneDataValues.push([
                    sphere.orientation[3],
                    sphere.radius,
                    0,
                    0
                  ]);
                  materialsDataValues.push([
                    sphere.color[0],
                    sphere.color[1],
                    sphere.color[2],
                    sphere.reflectionFactor
                  ]);
                  materialsDataValues.push([
                    sphere.refractionFactor,
                    sphere.castShadowEnabled ? 1 : 0,
                    sphere.receiveLightEnabled ? 1 : 0,
                    sphere.chessboardEnabled ? 1 : 0
                  ]);
                  materialIndex += 1;
                }
              }
              {
                for (const box of this._boxes) {
                  sceneDataValues.push([
                    2,
                    materialIndex + 0.5,
                    box.position[0],
                    box.position[1]
                  ]);
                  sceneDataValues.push([
                    box.position[2],
                    box.orientation[0],
                    box.orientation[1],
                    box.orientation[2]
                  ]);
                  sceneDataValues.push([
                    box.orientation[3],
                    box.boxSize[0],
                    box.boxSize[1],
                    box.boxSize[2]
                  ]);
                  materialsDataValues.push([
                    box.color[0],
                    box.color[1],
                    box.color[2],
                    box.reflectionFactor
                  ]);
                  materialsDataValues.push([
                    box.refractionFactor,
                    box.castShadowEnabled ? 1 : 0,
                    box.receiveLightEnabled ? 1 : 0,
                    box.chessboardEnabled ? 1 : 0
                  ]);
                  materialIndex += 1;
                }
              }
              {
                for (const triangle of this._triangles) {
                  sceneDataValues.push([
                    3,
                    materialIndex + 0.5,
                    triangle.v0[0],
                    triangle.v0[1]
                  ]);
                  sceneDataValues.push([
                    triangle.v0[2],
                    triangle.v1[0],
                    triangle.v1[1],
                    triangle.v1[2]
                  ]);
                  sceneDataValues.push([
                    triangle.v2[0],
                    triangle.v2[1],
                    triangle.v2[2],
                    0
                  ]);
                  materialsDataValues.push([
                    triangle.color[0],
                    triangle.color[1],
                    triangle.color[2],
                    triangle.reflectionFactor
                  ]);
                  materialsDataValues.push([
                    0,
                    triangle.castShadowEnabled ? 1 : 0,
                    triangle.receiveLightEnabled ? 1 : 0,
                    0
                  ]);
                  materialIndex += 1;
                }
                boundShader.setInteger1Uniform("u_totalShapes", sceneDataValues.length);
              }
            }
            gl.activeTexture(gl.TEXTURE0 + 0);
            this._sceneDataTexture.preBind((boundDataTexture) => {
              boundDataTexture.update(0, sceneDataValues);
            });
            boundShader.setInteger1Uniform("u_sceneTextureData", 0);
            boundShader.setInteger1Uniform("u_sceneTextureSize", sceneDataValues.length);
            {
              gl.activeTexture(gl.TEXTURE0 + 7);
              this._materialsDataTexture.preBind((boundDataTexture) => {
                boundDataTexture.update(0, materialsDataValues);
              });
              boundShader.setInteger1Uniform("u_materialsTextureData", 7);
            }
          }
          {
            const lightsDataValues = [];
            {
              for (const sunLight of this._sunLights) {
                lightsDataValues.push([
                  sunLight.direction[0],
                  sunLight.direction[1],
                  sunLight.direction[2],
                  sunLight.intensity
                ]);
              }
              boundShader.setInteger1Uniform("u_sunLightsStop", lightsDataValues.length);
            }
            {
              for (const spotLight of this._spotLights) {
                lightsDataValues.push([
                  spotLight.position[0],
                  spotLight.position[1],
                  spotLight.position[2],
                  spotLight.radius
                ]);
                lightsDataValues.push([
                  spotLight.intensity,
                  0,
                  0,
                  0
                ]);
              }
              boundShader.setInteger1Uniform("u_spotLightsStop", lightsDataValues.length);
            }
            gl.activeTexture(gl.TEXTURE0 + 1);
            this._lightsDataTexture.preBind((boundDataTexture) => {
              boundDataTexture.update(0, lightsDataValues);
            });
            boundShader.setInteger1Uniform("u_lightsTextureData", 1);
          }
          {
            gl.activeTexture(gl.TEXTURE0 + 6);
            this._bvhDataTexture.preBind((boundDataTexture) => {
              boundDataTexture.update(0, bvhPixelsData);
            });
            boundShader.setInteger1Uniform("u_bvhDataTexture", 6);
          }
          this._rayTracerGeometry.render();
        });
      }
    });
    gl.viewport(0, 0, this._canvasWidth, this._canvasHeight);
  }
  reset() {
    this._sunLights.length = 0;
    this._spotLights.length = 0;
    this._spheres.length = 0;
    this._boxes.length = 0;
    this._triangles.length = 0;
  }
  bvhRender(renderer) {
    this._bvh.render(renderer);
  }
  setResolutionCoef(inResolutionCoef) {
    if (inResolutionCoef === this._resolutionCoef || inResolutionCoef <= 0 || inResolutionCoef > 1) {
      return;
    }
    this._resolutionCoef = inResolutionCoef;
    this._renderWidth = Math.floor(this._canvasWidth * this._resolutionCoef);
    this._renderHeight = Math.floor(this._canvasHeight * this._resolutionCoef);
    this._finalTexture.preBind((boundTexture) => {
      boundTexture.resize(this._renderWidth, this._renderHeight);
    });
  }
  getResolutionCoef() {
    return this._resolutionCoef;
  }
  setAntiAliasing(enabled) {
    this._antiAliasing = enabled;
  }
  getAntiAliasing() {
    return this._antiAliasing;
  }
  getCurrentSize() {
    return [this._renderWidth, this._renderHeight];
  }
  _computeCameraFarCorners() {
    const forwardDir = exports_vec3.sub(exports_vec3.create(), this._camera.target, this._camera.position);
    const leftDir = exports_vec3.cross(exports_vec3.create(), forwardDir, this._camera.up);
    const upDir = exports_vec3.cross(exports_vec3.create(), leftDir, forwardDir);
    const radHFovy = _degreeToRad(this._cameraFovy * 0.5);
    const xLength = Math.cos(radHFovy) * 1 / Math.sin(radHFovy);
    const scaledForwardDir = exports_vec3.multiply(exports_vec3.create(), forwardDir, exports_vec3.fromValues(xLength, xLength, xLength));
    const farCenter = exports_vec3.add(exports_vec3.create(), this._camera.position, scaledForwardDir);
    const aspectRatio = this._canvasWidth / this._canvasHeight;
    const farHalfWidth = exports_vec3.multiply(exports_vec3.create(), leftDir, exports_vec3.fromValues(aspectRatio, aspectRatio, aspectRatio));
    const farUp = exports_vec3.add(exports_vec3.create(), farCenter, upDir);
    const farBottom = exports_vec3.subtract(exports_vec3.create(), farCenter, upDir);
    const farTopLeft = exports_vec3.subtract(exports_vec3.create(), farUp, farHalfWidth);
    const farBottomLeft = exports_vec3.subtract(exports_vec3.create(), farBottom, farHalfWidth);
    const farTopRight = exports_vec3.add(exports_vec3.create(), farUp, farHalfWidth);
    const farBottomRight = exports_vec3.add(exports_vec3.create(), farBottom, farHalfWidth);
    return [
      farTopRight[0],
      farTopRight[1],
      farTopRight[2],
      farTopLeft[0],
      farTopLeft[1],
      farTopLeft[2],
      farBottomRight[0],
      farBottomRight[1],
      farBottomRight[2],
      farBottomLeft[0],
      farBottomLeft[1],
      farBottomLeft[2]
    ];
  }
  get canvasWidth() {
    return this._canvasWidth;
  }
  get canvasHeight() {
    return this._canvasHeight;
  }
  get renderWidth() {
    return this._renderWidth;
  }
  get renderHeight() {
    return this._renderHeight;
  }
  get camera() {
    return this._camera;
  }
  get spheres() {
    return this._spheres;
  }
  get boxes() {
    return this._boxes;
  }
  get triangles() {
    return this._triangles;
  }
  get sunLights() {
    return this._sunLights;
  }
  get spotLights() {
    return this._spotLights;
  }
}
// src/webgl-ray-tracer/src/experiment/graphics/Renderer.ts
var { WebGLContext: WebGLContext16 } = exports_graphics.webgl2;
var { Camera: Camera3 } = exports_graphics.camera;
var { TextRenderer: TextRenderer3, StackRenderers: StackRenderers3 } = exports_graphics.renderers;
var k_fovy = 70;

class Renderer {
  _def;
  _rayTracerRenderer;
  _textRenderer;
  _stackRenderers;
  _multipleBuffering;
  _debugSceneCamera = new Camera3;
  _mainHudCamera = new Camera3;
  constructor(def) {
    this._def = def;
    this.resize(this._def.canvasDomElement.width, this._def.canvasDomElement.height);
    WebGLContext16.initialize(this._def.canvasDomElement);
    this._rayTracerRenderer = new RayTracerRenderer({
      canvasWidth: this._def.canvasDomElement.width,
      canvasHeight: this._def.canvasDomElement.height,
      fovy: k_fovy
    });
    this._textRenderer = new TextRenderer3;
    this._stackRenderers = new StackRenderers3;
    this._multipleBuffering = new exports_graphics.renderers.MultiBuffersRendering(this._def.canvasDomElement.width, this._def.canvasDomElement.height);
  }
  initialize() {
    const gl = WebGLContext16.getContext();
    gl.disable(gl.DEPTH_TEST);
    gl.disable(gl.BLEND);
    gl.disable(gl.CULL_FACE);
    gl.depthFunc(gl.NEVER);
    gl.clearColor(0, 0, 0, 1);
    gl.clearDepth(1);
  }
  resize(width, height) {
    this._debugSceneCamera.setViewportSize(width, height);
    this._debugSceneCamera.setAsPerspective({
      fovy: k_fovy,
      near: 1,
      far: 500
    });
    this._mainHudCamera.setViewportSize(width, height);
    const hWidth = width * 0.5;
    const hHeight = height * 0.5;
    this._mainHudCamera.setAsOrthogonal({
      left: -hWidth,
      right: +hWidth,
      top: -hHeight,
      bottom: +hHeight,
      near: -200,
      far: 200
    });
    this._mainHudCamera.setEye([hWidth, hHeight, 1]);
    this._mainHudCamera.setTarget([hWidth, hHeight, 0]);
    this._mainHudCamera.setUpAxis([0, 1, 0]);
    this._mainHudCamera.computeMatrices();
  }
  _pushWireFrameSphere(sphere) {
    const X = 0.5257311121191336 * sphere.radius;
    const Z = 0.8506508083520399 * sphere.radius;
    const N = 0;
    const positions = [
      [-X, N, Z],
      [X, N, Z],
      [-X, N, -Z],
      [X, N, -Z],
      [N, Z, X],
      [N, Z, -X],
      [N, -Z, X],
      [N, -Z, -X],
      [Z, X, N],
      [-Z, X, N],
      [Z, -X, N],
      [-Z, -X, N]
    ];
    for (let ii = 0;ii < positions.length; ++ii) {
      positions[ii][0] += sphere.position[0];
      positions[ii][1] += sphere.position[1];
      positions[ii][2] += sphere.position[2];
    }
    const indices = [
      [0, 4, 1],
      [0, 9, 4],
      [9, 5, 4],
      [4, 5, 8],
      [4, 8, 1],
      [8, 10, 1],
      [8, 3, 10],
      [5, 3, 8],
      [5, 2, 3],
      [2, 7, 3],
      [7, 10, 3],
      [7, 6, 10],
      [7, 11, 6],
      [11, 0, 6],
      [0, 1, 6],
      [6, 1, 10],
      [9, 0, 11],
      [9, 11, 2],
      [9, 2, 5],
      [7, 2, 11]
    ];
    for (const index2 of indices) {
      const v1 = positions[index2[0]];
      const v2 = positions[index2[1]];
      const v3 = positions[index2[2]];
      this._stackRenderers.pushLine(v1, v2, sphere.color);
      this._stackRenderers.pushLine(v2, v3, sphere.color);
      this._stackRenderers.pushLine(v3, v1, sphere.color);
    }
  }
  _pushWireFrameBox(box) {
    const vertices = [
      exports_vec3.fromValues(-box.boxSize[0], -box.boxSize[1], -box.boxSize[2]),
      exports_vec3.fromValues(+box.boxSize[0], -box.boxSize[1], -box.boxSize[2]),
      exports_vec3.fromValues(-box.boxSize[0], +box.boxSize[1], -box.boxSize[2]),
      exports_vec3.fromValues(+box.boxSize[0], +box.boxSize[1], -box.boxSize[2]),
      exports_vec3.fromValues(-box.boxSize[0], -box.boxSize[1], +box.boxSize[2]),
      exports_vec3.fromValues(+box.boxSize[0], -box.boxSize[1], +box.boxSize[2]),
      exports_vec3.fromValues(-box.boxSize[0], +box.boxSize[1], +box.boxSize[2]),
      exports_vec3.fromValues(+box.boxSize[0], +box.boxSize[1], +box.boxSize[2])
    ];
    const vertices2 = [];
    vertices.forEach((vertex) => {
      const pos = exports_vec3.fromValues(0, 0, 0);
      const mat4 = exports_mat4.identity(exports_mat4.create());
      exports_mat4.translate(mat4, mat4, box.position);
      const mat4b = exports_mat4.fromQuat(exports_mat4.create(), box.orientation);
      exports_mat4.multiply(mat4, mat4, mat4b);
      exports_vec3.transformMat4(pos, vertex, mat4);
      vertices2.push(pos);
    });
    const indicesGroup = [
      [0, 1],
      [1, 3],
      [3, 2],
      [2, 0],
      [4, 5],
      [5, 7],
      [7, 6],
      [6, 4],
      [0, 4],
      [1, 5],
      [3, 7],
      [2, 6]
    ];
    indicesGroup.forEach((index2) => {
      this._stackRenderers.pushLine(vertices2[index2[0]], vertices2[index2[1]], box.color);
    });
  }
  _pushWireFrameTriangle(triangle) {
    this._stackRenderers.pushLine(triangle.v0, triangle.v1, triangle.color);
    this._stackRenderers.pushLine(triangle.v1, triangle.v2, triangle.color);
    this._stackRenderers.pushLine(triangle.v2, triangle.v0, triangle.color);
  }
  safeSceneWireFrame(inCallback) {
    this._debugSceneCamera.setEye(this._rayTracerRenderer.camera.position);
    this._debugSceneCamera.setTarget(this._rayTracerRenderer.camera.target);
    this._debugSceneCamera.setUpAxis(this._rayTracerRenderer.camera.up);
    this._debugSceneCamera.computeMatrices();
    this._stackRenderers.safeRender(this._debugSceneCamera.getComposedMatrix(), inCallback);
  }
  flushHudWireFrame() {
    this._stackRenderers.flush(this._mainHudCamera.getComposedMatrix());
  }
  flushHudText() {
    this._textRenderer.flush(this._mainHudCamera.getComposedMatrix());
  }
  setupDebugRenderer() {
    this._rayTracerRenderer.bvhRender(this._stackRenderers);
    this._rayTracerRenderer.spheres.forEach((sphere) => {
      this._pushWireFrameSphere(sphere);
    });
    this._rayTracerRenderer.boxes.forEach((box) => {
      this._pushWireFrameBox(box);
    });
    this._rayTracerRenderer.triangles.forEach((triangle) => {
      this._pushWireFrameTriangle(triangle);
    });
  }
  get rayTracerRenderer() {
    return this._rayTracerRenderer;
  }
  get stackRenderers() {
    return this._stackRenderers;
  }
  get textRenderer() {
    return this._textRenderer;
  }
  get multipleBuffering() {
    return this._multipleBuffering;
  }
  get debugSceneCamera() {
    return this._debugSceneCamera;
  }
  get mainHudCamera() {
    return this._mainHudCamera;
  }
}

// src/webgl-ray-tracer/src/experiment/scenes/TestScene2.ts
var continuousTime = 0;
var continuousAngle = 0;
var currStep = 0;
var nextStep = 1;
var allSteps = [
  [-5, 4, 0],
  [5, 4, 0],
  [5, 10, 0],
  [-5, 10, 0]
];

class TestScene2 {
  reset() {
    continuousTime = 0;
    continuousAngle = 0;
    currStep = 0;
    nextStep = 1;
  }
  run(elapsedTime, renderer, physicWorld) {
    continuousAngle += elapsedTime * 2;
    if (continuousAngle >= Math.PI * 2) {
      continuousAngle -= Math.PI * 2;
    }
    continuousTime += elapsedTime * 0.75;
    if (continuousTime > 1) {
      continuousTime = 0;
      currStep = (currStep + 1) % allSteps.length;
      nextStep = (currStep + 1) % allSteps.length;
    }
    const lightPos = [
      allSteps[currStep][0] + (allSteps[nextStep][0] - allSteps[currStep][0]) * continuousTime,
      allSteps[currStep][1] + (allSteps[nextStep][1] - allSteps[currStep][1]) * continuousTime,
      allSteps[currStep][2] + (allSteps[nextStep][2] - allSteps[currStep][2]) * continuousTime
    ];
    {
      renderer.rayTracerRenderer.pushSpotLight({
        position: [0, 10, 10],
        intensity: 2,
        radius: 20
      });
      renderer.rayTracerRenderer.pushSphere({
        position: [0, 10, 10],
        orientation: [0, 0, 1, 0],
        radius: 0.25,
        color: [1, 1, 1],
        reflectionFactor: 0,
        refractionFactor: 0,
        chessboardEnabled: false,
        receiveLightEnabled: false,
        castShadowEnabled: false
      });
      renderer.rayTracerRenderer.pushSpotLight({
        position: lightPos,
        intensity: 2,
        radius: 10
      });
      renderer.rayTracerRenderer.pushSphere({
        position: lightPos,
        orientation: [0, 0, 1, 0],
        radius: 0.25,
        color: [1, 1, 1],
        reflectionFactor: 0,
        refractionFactor: 0,
        chessboardEnabled: false,
        receiveLightEnabled: false,
        castShadowEnabled: false
      });
      const allBoxes = [
        { pos: [-2, 4, -1], size: [1, 1.125, 0.125] },
        { pos: [-2, 4, 1], size: [1, 1.125, 0.125] },
        { pos: [-2, 3, 0], size: [1, 0.125, 1.125] },
        { pos: [-2, 5, 0], size: [1, 0.125, 1.125] },
        { pos: [2, 4, -1], size: [1, 1.125, 0.125] },
        { pos: [2, 4, 1], size: [1, 1.125, 0.125] },
        { pos: [2, 3, 0], size: [1, 0.125, 1.125] },
        { pos: [2, 5, 0], size: [1, 0.125, 1.125] },
        { pos: [0, 8, -8], size: [8, 8, 0.125], color: [1, 0.5, 0.5] },
        { pos: [-8, 8, 0], size: [0.125, 8, 8], color: [0.5, 1, 0.5] },
        { pos: [8, 8, 0], size: [0.125, 8, 8], color: [0.5, 0.5, 1] },
        { pos: [0, 0, -1], size: [8, 0.125, 8], reflectionFactor: 0.3 }
      ];
      allBoxes.forEach(({ pos, size, color, reflectionFactor }) => {
        renderer.rayTracerRenderer.pushBox({
          position: pos,
          orientation: [0, 0, 1, 0],
          boxSize: size,
          color: color ?? [1, 1, 1],
          reflectionFactor: reflectionFactor ?? 0,
          refractionFactor: 0,
          chessboardEnabled: false,
          receiveLightEnabled: true,
          castShadowEnabled: true
        });
      });
      {
        const allRotatedBoxes = [
          {
            pos: [
              5 + 1 * Math.cos(continuousAngle),
              6,
              0 + 1 * Math.sin(continuousAngle)
            ],
            angleY: -continuousAngle,
            size: [0.125, 1, 1.125]
          },
          {
            pos: [
              5 - 1 * Math.cos(continuousAngle),
              8,
              0 - 1 * Math.sin(continuousAngle)
            ],
            angleY: -continuousAngle,
            size: [0.125, 1, 1.125]
          },
          {
            pos: [
              5 + 1 * Math.cos(continuousAngle + Math.PI * 0.5),
              7,
              0 + 1 * Math.sin(continuousAngle + Math.PI * 0.5)
            ],
            angleY: -continuousAngle + Math.PI * 0.5,
            size: [0.125, 2, 1]
          },
          {
            pos: [
              5 + 1 * Math.cos(continuousAngle - Math.PI * 0.5),
              7,
              0 + 1 * Math.sin(continuousAngle - Math.PI * 0.5)
            ],
            angleY: -continuousAngle - Math.PI * 0.5,
            size: [0.125, 2, 1]
          }
        ];
        allRotatedBoxes.forEach(({ pos, angleY, size }) => {
          renderer.rayTracerRenderer.pushBox({
            position: pos,
            orientation: exports_quat.setAxisAngle(exports_quat.create(), [0, 1, 0], angleY),
            boxSize: size,
            color: [0, 1, 0],
            reflectionFactor: 0,
            refractionFactor: 0,
            chessboardEnabled: false,
            receiveLightEnabled: true,
            castShadowEnabled: true
          });
        });
      }
    }
  }
}
// src/webgl-ray-tracer/src/experiment/Experiment.ts
var {
  GlobalMouseManager: GlobalMouseManager2,
  GlobalKeyboardManager: GlobalKeyboardManager2,
  GlobalTouchManager: GlobalTouchManager2,
  GlobalVisibilityManager: GlobalVisibilityManager2,
  GlobalPointerLockManager: GlobalPointerLockManager2
} = exports_system.browser;
var { WebGLContext: WebGLContext17 } = exports_graphics.webgl2;
var { FreeFlyController: FreeFlyController3 } = exports_system.controllers;
var g_frames_left = 3;
var framerate = -1;
var k_maxFramesUntilNextCheck = 3;

class Experiment {
  _canvasElement;
  _animationFrameHandle = 0;
  _def;
  _freeFlyController;
  _renderer;
  _physicWorld;
  _running;
  _errorGraphicContext;
  _lastFrameTime = Date.now();
  _currFrameMsecTime = Date.now();
  _frameProfiler = new exports_system.metrics.FrameProfiler;
  _perfAutoScalingEnabled = true;
  _framesUntilNextCheck = k_maxFramesUntilNextCheck;
  _scene = new TestScene2;
  constructor(inDef) {
    this._canvasElement = inDef.canvasElement;
    this._def = inDef;
    this._freeFlyController = new FreeFlyController3({
      coordinates: ["Z", "X", "Y"],
      position: [-5, 5, 10],
      theta: Math.PI * 1.05,
      phi: -Math.PI * 0.25,
      mouseSensibility: 6,
      keyboardSensibility: Math.PI * 0.55,
      touchSensibility: 8,
      movingSpeed: 16
    });
    {
      GlobalKeyboardManager2.activate();
      GlobalTouchManager2.activate(this._canvasElement);
      GlobalVisibilityManager2.activate();
      GlobalVisibilityManager2.addVisibilityChange((isVisible) => {
        if (isVisible === false) {
          this._def.logger.log("document visibility changed: hidden");
          this.stop();
        } else {
          this._def.logger.log("document visibility changed: visible");
          this.start();
        }
      });
      GlobalPointerLockManager2.allowPointerLockedOnClickEvent(this._canvasElement);
      GlobalPointerLockManager2.addOnLockChange(() => {
        const isLocked = GlobalPointerLockManager2.isPointerLocked(this._canvasElement);
        if (isLocked) {
          this._def.logger.log("The pointer lock status is now locked");
          GlobalMouseManager2.activate(this._canvasElement);
        } else {
          this._def.logger.log("The pointer lock status is now unlocked");
          GlobalMouseManager2.deactivate(this._canvasElement);
          GlobalPointerLockManager2.allowPointerLockedOnClickEvent(this._canvasElement);
        }
      });
      GlobalPointerLockManager2.addOnLockError((event) => {
        this._def.logger.log(`The pointer lock sent an error, event: "${JSON.stringify(event)}"`);
      });
      this._renderer = new Renderer({ canvasDomElement: this._canvasElement });
      this._renderer.initialize();
    }
    this._running = false;
    this._errorGraphicContext = false;
    this._def.resolution.addEventListener("input", (event) => {
      const newValue = this._def.resolution.value;
      this._setResolution(newValue);
      this._logResolution();
    });
    this._def.anti_aliasing_enabled.addEventListener("click", () => {
      const newValue = this._def.anti_aliasing_enabled.checked === true;
      this._renderer.rayTracerRenderer.setAntiAliasing(newValue);
      this._def.logger.log(`Anti aliasing change: ${newValue === true ? "enabled" : "disabled"}`);
    });
    this._setResolution(this._def.resolution.value);
    this._def.perfAutoScaling.addEventListener("input", () => {
      this._framesUntilNextCheck = k_maxFramesUntilNextCheck;
      this._perfAutoScalingEnabled = this._def.perfAutoScaling.checked === true;
      this._def.logger.log(`Performance auto scaler change: ${this._perfAutoScalingEnabled === true ? "enabled" : "disabled"}`);
    });
  }
  async init() {
    await this._renderer.initialize();
    await $BrowserFrankenPhysWasmModule.load({
      jsUrl: "./dist/wasm/FrankenPhys.0.0.1.js",
      wasmUrl: "./dist/wasm"
    });
    $physics.WasmModuleHolder.set($BrowserFrankenPhysWasmModule.get());
    this._physicWorld = new $physics.PhysicWorld;
    this._physicWorld.setGravity(0, -10, 0);
    let debugDrawerFlag = 0;
    debugDrawerFlag |= $physics.DebugDrawFlags.DBG_DrawWireframe;
    debugDrawerFlag |= $physics.DebugDrawFlags.DBG_DrawAabb;
    debugDrawerFlag |= $physics.DebugDrawFlags.DBG_DrawContactPoints;
    debugDrawerFlag |= $physics.DebugDrawFlags.DBG_DrawConstraints;
    debugDrawerFlag |= $physics.DebugDrawFlags.DBG_DrawConstraintLimits;
    debugDrawerFlag |= $physics.DebugDrawFlags.DBG_DrawNormals;
    debugDrawerFlag |= $physics.DebugDrawFlags.DBG_DrawFrames;
    this._physicWorld.setDebugWireframeFeaturesFlag(debugDrawerFlag);
    this._physicWorld.setDebugWireframeCallback((x1, y1, z1, x2, y2, z2, r, g, b) => {
      this._renderer.stackRenderers.pushLine([x1, y1, z1], [x2, y2, z2], [r, g, b]);
    });
  }
  resize(inWidth, inHeight, inIsFullScreen) {
    let currentWidth = inWidth;
    let currentHeight = inHeight;
    if (inIsFullScreen) {
      this._canvasElement.style.position = "absolute";
      currentWidth = window.innerWidth;
      currentHeight = window.innerHeight;
    } else {
      this._canvasElement.style.position = "relative";
    }
    this._canvasElement.style.left = "0px";
    this._canvasElement.style.top = "0px";
    this._canvasElement.style.width = `${currentWidth}px`;
    this._canvasElement.style.height = `${currentHeight}px`;
    this._canvasElement.width = currentWidth;
    this._canvasElement.height = currentHeight;
    this._renderer.resize(currentWidth, currentHeight);
  }
  start() {
    if (this.isRunning()) {
      return;
    }
    this._running = true;
    this._tick();
  }
  stop() {
    if (!this.isRunning()) {
      return;
    }
    this._running = false;
    if (framerate < 0) {
      window.cancelAnimationFrame(this._animationFrameHandle);
    } else {
      window.clearTimeout(this._animationFrameHandle);
    }
  }
  isRunning() {
    return this._running && !this._errorGraphicContext;
  }
  _tick() {
    const tick = () => {
      if (!this._running || this._errorGraphicContext) {
        return;
      }
      if (g_frames_left-- <= 0) {
      }
      if (framerate < 0) {
        this._animationFrameHandle = window.requestAnimationFrame(tick);
      } else {
        this._animationFrameHandle = window.setTimeout(tick, 1000 / framerate);
      }
      this._mainLoop();
    };
    tick();
  }
  _mainLoop() {
    const currentMsecTime = Date.now();
    const deltaFrameMsecTime = currentMsecTime - this._lastFrameTime;
    this._lastFrameTime = currentMsecTime;
    this._handlePerformanceAutoScaling(deltaFrameMsecTime);
    this._frameProfiler.pushDelta(deltaFrameMsecTime);
    const deltaMsecTime = currentMsecTime - this._currFrameMsecTime;
    this._currFrameMsecTime = currentMsecTime;
    const safeDelta = Math.min(deltaMsecTime, 100);
    const deltaSecTime = safeDelta / 1000;
    this._freeFlyController.update(deltaSecTime);
    GlobalMouseManager2.resetDeltas();
    GlobalTouchManager2.resetDeltas();
    if (this._physicWorld) {
      this._scene.run(deltaSecTime, this._renderer, this._physicWorld);
    }
    this._renderScene();
    this._renderHud();
  }
  _renderHud() {
    const gl = WebGLContext17.getContext();
    gl.viewport(0, 0, this._canvasElement.width, this._canvasElement.height);
    gl.clear(gl.DEPTH_BUFFER_BIT);
    gl.enable(gl.DEPTH_TEST);
    gl.depthFunc(gl.LESS);
    {
      const keyEventsPos = [27, 165];
      const touchEventsPos = [27, 260];
      const boardPos = [7, 35];
      exports_graphics.renderers.widgets.addKeyStrokesWidgets(keyEventsPos, this._renderer.stackRenderers, this._renderer.textRenderer);
      exports_graphics.renderers.widgets.addArrowStrokesWidgets(touchEventsPos, this._renderer.stackRenderers, this._renderer.textRenderer);
      exports_graphics.renderers.widgets.addKeysTouchesWidgets(this._canvasElement, boardPos, this._renderer.stackRenderers, this._renderer.textRenderer);
    }
    exports_graphics.renderers.widgets.renderFpsMeter([10, this._canvasElement.height - 60, 0], [100, 50], this._frameProfiler, this._renderer.stackRenderers, this._renderer.textRenderer, true);
    this._renderer.flushHudWireFrame();
    this._renderer.flushHudText();
    this._renderer.rayTracerRenderer.reset();
  }
  _renderScene() {
    {
      const gl = WebGLContext17.getContext();
      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      gl.disable(gl.DEPTH_TEST);
    }
    this._renderer.rayTracerRenderer.lookAt(this._freeFlyController.getPosition(), this._freeFlyController.getTarget(), this._freeFlyController.getUpAxis());
    this._renderer.rayTracerRenderer.renderAsciiArt();
    const showDebug = this._def.physic_debug_mode_enabled.checked === true;
    if (showDebug) {
      this._renderer.stackRenderers.clear();
      this._renderer.safeSceneWireFrame(() => {
        const axisOrigin = [0, 0, 0];
        const axisX = [100, 0, 0];
        const axisY = [0, 100, 0];
        const axisZ = [0, 0, 100];
        this._renderer.stackRenderers.pushLine(axisOrigin, axisX, [1, 0, 0]);
        this._renderer.stackRenderers.pushLine(axisOrigin, axisY, [0, 1, 0]);
        this._renderer.stackRenderers.pushLine(axisOrigin, axisZ, [0, 0, 1]);
        this._physicWorld.debugDrawWorld();
      });
    }
    const showBvhDebug = this._def.bvh_debug_mode_enabled.checked === true;
    if (showBvhDebug) {
      this._renderer.stackRenderers.clear();
      this._renderer.safeSceneWireFrame(() => {
        const axisOrigin = [0, 0, 0];
        const axisX = [100, 0, 0];
        const axisY = [0, 100, 0];
        const axisZ = [0, 0, 100];
        this._renderer.stackRenderers.pushLine(axisOrigin, axisX, [1, 0, 0]);
        this._renderer.stackRenderers.pushLine(axisOrigin, axisY, [0, 1, 0]);
        this._renderer.stackRenderers.pushLine(axisOrigin, axisZ, [0, 0, 1]);
        this._renderer.setupDebugRenderer();
      });
    }
  }
  _setResolution(inValue) {
    const safeValue = exports_system.math.clamp(inValue, 0, 9);
    const newValue = 10 - safeValue;
    const newCoef = 1 / newValue;
    this._renderer.rayTracerRenderer.setResolutionCoef(newCoef);
  }
  _logResolution() {
    const rayTracerRenderer = this._renderer.rayTracerRenderer;
    const newCoef = rayTracerRenderer.getResolutionCoef();
    const newSize = rayTracerRenderer.getCurrentSize();
    const totalPixels = newSize[0] * newSize[1];
    this._def.logger.log(`resolution changed (1/${Math.ceil(1 / newCoef)}) => ${newSize[0]}x${newSize[1]} (${totalPixels}px)`);
  }
  _handlePerformanceAutoScaling(inDeltaMsecTime) {
    if (this._perfAutoScalingEnabled !== true) {
      return;
    }
    if (inDeltaMsecTime <= 20) {
      this._framesUntilNextCheck = k_maxFramesUntilNextCheck;
      return;
    }
    --this._framesUntilNextCheck;
    if (this._framesUntilNextCheck > 0) {
      return;
    }
    this._def.logger.log(`performance auto scaling: slow framerate, scaling down resolution`);
    const currValue = this._def.resolution.value;
    const newValue = currValue - 1;
    if (newValue >= 0 && newValue <= 9) {
      this._setResolution(newValue);
      this._logResolution();
      this._def.resolution.value = newValue;
    }
    this._framesUntilNextCheck = k_maxFramesUntilNextCheck;
  }
}

// src/webgl-ray-tracer/src/utilities/setupOutdatedPage.ts
var setupOutdatedPage = (maxDuration, onTimeout) => {
  if (!exports_system.browser.GlobalVisibilityManager.isSupported()) {
    return;
  }
  let timeoutHandle = -1;
  exports_system.browser.GlobalVisibilityManager.addVisibilityChange((isVisible) => {
    if (isVisible) {
      if (timeoutHandle >= 0) {
        clearTimeout(timeoutHandle);
        timeoutHandle = -1;
      }
    } else {
      timeoutHandle = window.setTimeout(onTimeout, maxDuration);
    }
  });
  exports_system.browser.GlobalVisibilityManager.activate();
};
// src/webgl-ray-tracer/src/main.ts
var logger = null;
var mainDemo = null;
var _queryDomElement = (inName) => {
  const newElement = document.querySelector(inName);
  if (!newElement) {
    throw new Error(`html element "${inName}" not found`);
  }
  return newElement;
};
var onPageLoad = async () => {
  logger = new Logger("loggerOutput");
  logger.log("[SETUP] page loaded");
  const canvasElement = _queryDomElement("#rendering-canvas");
  const perfAutoScaling = _queryDomElement("#auto-scaling-enabled");
  const resolution = _queryDomElement("#resolution");
  const anti_aliasing_enabled = _queryDomElement("#anti-aliasing-enabled");
  const physic_debug_mode_enabled = _queryDomElement("#debug-mode-enabled");
  const bvh_debug_mode_enabled = _queryDomElement("#bvh-debug-mode-enabled");
  const errorText = _queryDomElement("#error-text");
  const _onPageError = (err) => {
    if (!mainDemo) {
      return;
    }
    console.log("onPageError", err);
    try {
      mainDemo.stop();
    } catch (err2) {
    }
    mainDemo = null;
    exports_system.browser.GlobalKeyboardManager.deactivate();
    exports_system.browser.GlobalMouseManager.deactivate(canvasElement);
    exports_system.browser.GlobalTouchManager.deactivate(canvasElement);
    exports_system.browser.GlobalFullScreenManager.removeAllCallbacks();
    exports_system.browser.GlobalPointerLockManager.removeAllCallbacks();
    exports_system.browser.GlobalVisibilityManager.removeAllCallbacks();
    exports_system.browser.GlobalVisibilityManager.deactivate();
    errorText.style.width = "800px";
    errorText.style.height = "600px";
    errorText.innerHTML = err.message;
    canvasElement.style.display = "none";
    errorText.style.display = "block";
    perfAutoScaling.disabled = true;
    resolution.min = resolution.max = resolution.value = 0;
    anti_aliasing_enabled.disabled = true;
    physic_debug_mode_enabled.disabled = true;
    bvh_debug_mode_enabled.disabled = true;
    document.title += " (ERR)";
  };
  window.addEventListener("error", _onPageError);
  if (!exports_system.browser.isWebGL2Supported()) {
    throw new Error("missing WebGL2 feature (unsupported)");
  }
  mainDemo = new Experiment({
    canvasElement,
    logger,
    perfAutoScaling,
    resolution,
    anti_aliasing_enabled,
    physic_debug_mode_enabled,
    bvh_debug_mode_enabled
  });
  logger.log("[SETUP] Demo: initializing");
  await mainDemo.init();
  logger.log("[SETUP] Demo: initialized");
  mainDemo.start();
  logger.log("[SETUP] Demo: running");
  const pageMaxTimeInvisible = 60000;
  setupOutdatedPage(pageMaxTimeInvisible, () => {
    throw new Error("<br/><br/><br/>The page was inactive for too long<br/><br/>please reload");
  });
};
window.addEventListener("load", onPageLoad, false);

//# debugId=F0D423EB8F86C6CB64756e2164756e21
//# sourceMappingURL=data:application/json;base64,
