var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};

// src/local-framework/system/index.ts
var exports_system = {};
__export(exports_system, {
  utilities: () => {
    {
      return exports_utilities;
    }
  },
  rng: () => {
    {
      return exports_rng;
    }
  },
  metrics: () => {
    {
      return exports_metrics;
    }
  },
  math: () => {
    {
      return exports_math;
    }
  },
  controllers: () => {
    {
      return exports_controllers;
    }
  },
  browser: () => {
    {
      return exports_browser;
    }
  }
});

// src/local-framework/system/browser/index.ts
var exports_browser = {};
__export(exports_browser, {
  isWebWorkerSupported: () => {
    {
      return isWebWorkerSupported;
    }
  },
  isWebGL2Supported: () => {
    {
      return isWebGL2Supported;
    }
  },
  isNumber: () => {
    {
      return isNumber;
    }
  },
  isLetter: () => {
    {
      return isLetter;
    }
  },
  isAlphanumeric: () => {
    {
      return isAlphanumeric;
    }
  },
  GlobalVisibilityManager: () => {
    {
      return GlobalVisibilityManager;
    }
  },
  GlobalTouchManager: () => {
    {
      return GlobalTouchManager;
    }
  },
  GlobalPointerLockManager: () => {
    {
      return GlobalPointerLockManager;
    }
  },
  GlobalMouseManager: () => {
    {
      return GlobalMouseManager;
    }
  },
  GlobalKeyboardManager: () => {
    {
      return GlobalKeyboardManager;
    }
  },
  GlobalFullScreenManager: () => {
    {
      return GlobalFullScreenManager;
    }
  },
  AllKeyCodes: () => {
    {
      return AllKeyCodes;
    }
  }
});

// src/local-framework/system/browser/FullScreenManager.ts
var allRequestEvents = [
  "requestFullscreen",
  "webkitRequestFullscreen",
  "mozRequestFullScreen",
  "msRequestFullscreen"
];
var allChangeEvents = [
  "fullscreenchange",
  "webkitfullscreenchange",
  "mozfullscreenchange",
  "msfullscreenchange"
];

class FullScreenManager {
  _onFullScreenChangeCallbacks = [];
  _isInitialized = false;
  _initialize() {
    if (this._isInitialized) {
      return;
    }
    this._isInitialized = true;
    const onLockChange = () => {
      this._onFullScreenChangeCallbacks.forEach((callback) => callback());
    };
    for (const currEvent of allChangeEvents)
      document.addEventListener(currEvent, onLockChange, false);
  }
  isCompatible(inTargetElement) {
    for (const currEvent of allRequestEvents) {
      if (currEvent in inTargetElement) {
        return true;
      }
    }
    return false;
  }
  isFullScreen(inTargetElement) {
    return document.fullscreenElement === inTargetElement;
  }
  async requestFullScreen(inTargetElement) {
    if (this.isFullScreen(inTargetElement)) {
      return { success: false, message: "element already in full screen" };
    }
    this._initialize();
    for (const currEvent of allRequestEvents) {
      if (currEvent in inTargetElement) {
        inTargetElement[currEvent]();
        return { success: true, message: "request for full screen done" };
      }
    }
    return { success: false, message: "unsupported request for full screen" };
  }
  addOnFullScreenChange(inCallback) {
    this._onFullScreenChangeCallbacks.push(inCallback);
  }
  removeOnFullScreenChange(inCallback) {
    const index = this._onFullScreenChangeCallbacks.indexOf(inCallback);
    if (index < 0) {
      return;
    }
    this._onFullScreenChangeCallbacks.splice(index, 1);
  }
  removeAllCallbacks() {
    this._onFullScreenChangeCallbacks.length = 0;
  }
}
var GlobalFullScreenManager = new FullScreenManager;
// src/local-framework/system/browser/KeyCodes.ts
var AllKeyCodes = {
  Num0: 48,
  Num1: 49,
  Num2: 50,
  Num3: 51,
  Num4: 52,
  Num5: 53,
  Num6: 54,
  Num7: 55,
  Num8: 56,
  Num9: 57,
  A: 65,
  B: 66,
  C: 67,
  D: 68,
  E: 69,
  F: 70,
  G: 71,
  H: 72,
  I: 73,
  J: 74,
  K: 75,
  L: 76,
  M: 77,
  N: 78,
  O: 79,
  P: 80,
  Q: 81,
  R: 82,
  S: 83,
  T: 84,
  U: 85,
  V: 86,
  W: 87,
  X: 88,
  Y: 89,
  Z: 90,
  Semicolon: 186,
  Equal: 187,
  Comma: 188,
  Minus: 189,
  Period: 190,
  BackQuote: 192,
  BracketLeft: 219,
  Backslash: 220,
  BracketRight: 221,
  Quote: 222,
  Shift: 16,
  Ctrl: 17,
  Alt: 18,
  CapsLock: 20,
  Tab: 9,
  Enter: 13,
  Pause: 19,
  Escape: 27,
  Space: 32,
  PageUp: 33,
  PageDown: 34,
  End: 35,
  Home: 36,
  ArrowLeft: 37,
  ArrowUp: 38,
  ArrowRight: 39,
  ArrowDown: 40,
  PrintScreen: 44,
  Insert: 45,
  Delete: 46,
  ContextMenu: 93,
  ScrollLock: 145,
  F1: 112,
  F2: 113,
  F3: 114,
  F4: 115,
  F5: 116,
  F6: 117,
  F7: 118,
  F8: 119,
  F9: 120,
  F10: 121,
  F11: 122,
  F12: 123,
  F13: 124,
  F14: 125,
  F15: 126,
  F16: 127,
  F17: 128,
  F18: 129,
  F19: 130,
  F20: 131,
  F21: 132,
  F22: 133,
  F23: 134,
  F24: 135,
  NumPad0: 96,
  NumPad1: 97,
  NumPad2: 98,
  NumPad3: 99,
  NumPad4: 100,
  NumPad5: 101,
  NumPad6: 102,
  NumPad7: 103,
  NumPad8: 104,
  NumPad9: 105,
  NumPadMultiply: 106,
  NumPadAdd: 107,
  NumPadSubtract: 109,
  NumPadDecimal: 110,
  NumPadDivide: 111,
  NumLock: 144,
  NumPadComma: 194,
  NumPadEqual: 12
};
var isLetter = (key) => {
  return key >= AllKeyCodes.A && key <= AllKeyCodes.Z;
};
var isNumber = (key) => {
  return key >= AllKeyCodes.Num0 && key <= AllKeyCodes.Num9 || key >= AllKeyCodes.NumPad0 && key <= AllKeyCodes.NumPad9;
};
var isAlphanumeric = (key) => {
  return isNumber(key) || isLetter(key);
};

// src/local-framework/system/browser/KeyboardManager.ts
class KeyboardManager {
  _pressedKeysSet = new Set;
  _preventDefaultKeysSet = new Set;
  _activated = false;
  _handleKeyDown;
  _handleKeyUp;
  _onEvent;
  constructor() {
    const handleKeyDown = (event) => {
      const { keyCode } = event;
      if (this._onEvent) {
        this._onEvent();
      }
      if (this._preventDefaultKeysSet.has(keyCode)) {
        event.preventDefault();
      }
      this._pressedKeysSet.add(keyCode);
    };
    const handleKeyUp = (event) => {
      const { keyCode } = event;
      if (this._onEvent) {
        this._onEvent();
      }
      if (this._preventDefaultKeysSet.has(keyCode)) {
        event.preventDefault();
      }
      this._pressedKeysSet.delete(keyCode);
    };
    this._activated = false;
    this._handleKeyDown = handleKeyDown.bind(this);
    this._handleKeyUp = handleKeyUp.bind(this);
  }
  isPressed(...inKeys) {
    for (const key of inKeys) {
      if (this._pressedKeysSet.has(AllKeyCodes[key])) {
        return true;
      }
    }
    return false;
  }
  preventDefault(inKey) {
    this._preventDefaultKeysSet.add(AllKeyCodes[inKey]);
  }
  enableDefault(inKey) {
    this._preventDefaultKeysSet.delete(AllKeyCodes[inKey]);
  }
  activate() {
    if (this._activated) {
      return;
    }
    this._pressedKeysSet.clear();
    document.addEventListener("keydown", this._handleKeyDown);
    document.addEventListener("keyup", this._handleKeyUp);
    this._activated = true;
  }
  deactivate() {
    if (!this._activated) {
      return;
    }
    this._pressedKeysSet.clear();
    document.removeEventListener("keydown", this._handleKeyDown);
    document.removeEventListener("keyup", this._handleKeyUp);
    this._activated = false;
  }
  onEvent(callback) {
    this._onEvent = callback;
  }
}
var GlobalKeyboardManager = new KeyboardManager;
// src/local-framework/system/browser/MouseManager.ts
var AllMouseButtons = {
  Left: 0,
  Middle: 1,
  Right: 2
};

class MouseManager {
  _pressedButtonsSet = new Set;
  _activated = false;
  _handleMouseDown;
  _handleMouseUp;
  _handleMouseMove;
  _handleMouseWheel;
  _positionX = 0;
  _positionY = 0;
  _deltaX = 0;
  _deltaY = 0;
  _wheelDeltaY = 0;
  _onEvent;
  constructor() {
    const handleMouseDown = (event) => {
      if (this._onEvent) {
        this._onEvent();
      }
      this._positionX = event.pageX;
      this._positionY = event.pageY;
      this._pressedButtonsSet.add(event.button);
    };
    const handleMouseUp = (event) => {
      if (this._onEvent) {
        this._onEvent();
      }
      this._positionX = event.pageX;
      this._positionY = event.pageY;
      this._pressedButtonsSet.delete(event.button);
    };
    const handleMouseMove = (event) => {
      if (this._onEvent) {
        this._onEvent();
      }
      this._positionX = event.pageX;
      this._positionY = event.pageY;
      this._deltaX += event.movementX || event.mozMovementX || event.webkitMovementX || 0;
      this._deltaY += event.movementY || event.mozMovementY || event.webkitMovementY || 0;
    };
    const handleWheelEvent = (event) => {
      if (this._onEvent) {
        this._onEvent();
      }
      this._wheelDeltaY += event.deltaY || 0;
    };
    this._activated = false;
    this._handleMouseDown = handleMouseDown.bind(this);
    this._handleMouseUp = handleMouseUp.bind(this);
    this._handleMouseMove = handleMouseMove.bind(this);
    this._handleMouseWheel = handleWheelEvent.bind(this);
  }
  activate(domElement) {
    if (this._activated) {
      return;
    }
    this._pressedButtonsSet.clear();
    domElement.addEventListener("mousedown", this._handleMouseDown);
    domElement.addEventListener("mouseup", this._handleMouseUp);
    domElement.addEventListener("mousemove", this._handleMouseMove);
    domElement.addEventListener("wheel", this._handleMouseWheel);
    this._activated = true;
  }
  deactivate(domElement) {
    if (!this._activated) {
      return;
    }
    this._pressedButtonsSet.clear();
    domElement.removeEventListener("mousedown", this._handleMouseDown);
    domElement.removeEventListener("mouseup", this._handleMouseUp);
    domElement.removeEventListener("mousemove", this._handleMouseMove);
    domElement.removeEventListener("wheel", this._handleMouseWheel);
    this._activated = false;
  }
  isButtonPressed(inKey) {
    return this._pressedButtonsSet.has(AllMouseButtons[inKey]);
  }
  get positionX() {
    return this._positionX;
  }
  get positionY() {
    return this._positionY;
  }
  deltaX() {
    return this._deltaX;
  }
  deltaY() {
    return this._deltaY;
  }
  wheelDeltaY() {
    return this._wheelDeltaY;
  }
  resetDeltas() {
    this._deltaX = 0;
    this._deltaY = 0;
    this._wheelDeltaY = 0;
  }
  onEvent(callback) {
    this._onEvent = callback;
  }
}
var GlobalMouseManager = new MouseManager;
// src/local-framework/system/browser/PointerLockManager.ts
var allRequestEvents2 = [
  "requestPointerLock",
  "mozRequestPointerLock",
  "webkitRequestPointerLock"
];
var allExitEvents = [
  "exitPointerLock",
  "mozExitPointerLock",
  "webkitExitPointerLock"
];
var allStateEvents = [
  "pointerLockElement",
  "mozPointerLockElement",
  "webkitPointerLockElement"
];
var allChangeEvents2 = [
  { methodName: "onpointerlockchange", propertyName: "pointerlockchange" },
  {
    methodName: "onmozpointerlockchange",
    propertyName: "mozpointerlockchange"
  },
  {
    methodName: "onwebkitpointerlockchange",
    propertyName: "webkitpointerlockchange"
  }
];
var allErrorEvents = [
  { methodName: "onpointerlockerror", propertyName: "pointerlockerror" },
  { methodName: "onmozpointerlockerror", propertyName: "mozpointerlockerror" },
  {
    methodName: "onwebkitpointerlockerror",
    propertyName: "webkitpointerlockerror"
  }
];

class PointerLockManager {
  _onLockChangeCallbacks = [];
  _onLockErrorCallbacks = [];
  _timeSinceLastLockChange = 0;
  _latestRequestHtmlElement;
  _isInitialized = false;
  _initialize() {
    if (this._isInitialized) {
      return;
    }
    this._isInitialized = true;
    const onLockChange = () => {
      this._timeSinceLastLockChange = Date.now();
      this._onLockChangeCallbacks.forEach((callback) => callback());
    };
    const onLockError = (event) => {
      this._timeSinceLastLockChange = Date.now();
      this._onLockErrorCallbacks.forEach((callback) => callback(event));
    };
    for (const currEvent of allChangeEvents2) {
      if (currEvent.methodName in document) {
        document.addEventListener(currEvent.propertyName, onLockChange, false);
        break;
      }
    }
    for (const currEvent of allErrorEvents) {
      if (currEvent.methodName in document) {
        document.addEventListener(currEvent.propertyName, onLockError, false);
        break;
      }
    }
  }
  canBePointerLocked(inTargetElement) {
    for (const currEvent of allRequestEvents2) {
      if (currEvent in inTargetElement) {
        return true;
      }
    }
    return false;
  }
  isPointerLocked(inTargetElement) {
    for (const currEvent of allStateEvents) {
      if (currEvent in document) {
        return document[currEvent] === inTargetElement;
      }
    }
    return false;
  }
  async requestPointerLock(inTargetElement) {
    if (this.isPointerLocked(inTargetElement)) {
      return { success: false, message: "element already locked" };
    }
    this._initialize();
    if (this._timeSinceLastLockChange > 0) {
      const elapsedSecTime = (Date.now() - this._timeSinceLastLockChange) / 1000;
      if (elapsedSecTime < 1.1) {
        return {
          success: false,
          message: `request for lock was too early, time to wait: ${elapsedSecTime.toFixed(2)}sec`
        };
      }
    }
    this._timeSinceLastLockChange = Date.now();
    for (const currEvent of allRequestEvents2) {
      if (currEvent in inTargetElement) {
        const options = {
          unadjustedMovement: false
        };
        try {
          await inTargetElement[currEvent](options);
        } catch (err) {
          const elapsedSecTime = (Date.now() - this._timeSinceLastLockChange) / 1000;
          return {
            success: false,
            message: `request for lock was too early, time to wait: ${elapsedSecTime.toFixed(2)}sec`
          };
        }
        this._timeSinceLastLockChange = Date.now();
        return { success: true, message: "request for lock done" };
      }
    }
    return { success: false, message: "unsupported request for lock" };
  }
  allowPointerLockedOnClickEvent(inTargetElement) {
    if (inTargetElement === this._latestRequestHtmlElement) {
      return;
    }
    this._latestRequestHtmlElement = inTargetElement;
    const onClick = async () => {
      inTargetElement.removeEventListener("click", onClick);
      const result = await this.requestPointerLock(inTargetElement);
      this._latestRequestHtmlElement = undefined;
      if (!result.success) {
        this.allowPointerLockedOnClickEvent(inTargetElement);
      }
    };
    inTargetElement.addEventListener("click", onClick);
  }
  exitPointerLock() {
    for (const currEvent of allExitEvents) {
      if (currEvent in document) {
        document[currEvent]();
        break;
      }
    }
  }
  addOnLockChange(inCallback) {
    this._onLockChangeCallbacks.push(inCallback);
  }
  removeOnLockChange(inCallback) {
    const index = this._onLockChangeCallbacks.indexOf(inCallback);
    if (index < 0) {
      return;
    }
    this._onLockChangeCallbacks.splice(index, 1);
  }
  addOnLockError(inCallback) {
    this._onLockErrorCallbacks.push(inCallback);
  }
  removeOnLockError(inCallback) {
    const index = this._onLockErrorCallbacks.indexOf(inCallback);
    if (index < 0) {
      return;
    }
    this._onLockErrorCallbacks.splice(index, 1);
  }
  removeAllCallbacks() {
    this._onLockChangeCallbacks.length = 0;
    this._onLockErrorCallbacks.length = 0;
  }
}
var GlobalPointerLockManager = new PointerLockManager;
// src/local-framework/system/browser/TouchManager.ts
class TouchData {
  id;
  createdAt = Date.now();
  positionX;
  positionY;
  deltaX = 0;
  deltaY = 0;
  constructor(id, positionX, positionY) {
    this.id = id;
    this.positionX = positionX;
    this.positionY = positionY;
  }
  resetDelta() {
    this.deltaX = 0;
    this.deltaY = 0;
  }
}

class TouchManager {
  _activated = false;
  _allTouchDataMap = new Map;
  _allCachedTouchDataArray = [];
  _handleTouchStart;
  _handleTouchEnd;
  _handleTouchMove;
  _onEvent;
  constructor() {
    const handleTouchStart = (event) => {
      event.preventDefault();
      if (this._onEvent) {
        this._onEvent();
      }
      for (let ii = 0;ii < event.changedTouches.length; ++ii) {
        const { identifier, pageX, pageY } = event.changedTouches[ii];
        const newData = new TouchData(identifier, pageX, pageY);
        this._allTouchDataMap.set(`${identifier}`, newData);
        this._allCachedTouchDataArray.length = 0;
      }
    };
    const handleTouchEnd = (event) => {
      event.preventDefault();
      if (this._onEvent) {
        this._onEvent();
      }
      for (let ii = 0;ii < event.changedTouches.length; ++ii) {
        const { identifier } = event.changedTouches[ii];
        this._allTouchDataMap.delete(`${identifier}`);
        this._allCachedTouchDataArray.length = 0;
      }
    };
    const handleTouchMove = (event) => {
      event.preventDefault();
      if (this._onEvent) {
        this._onEvent();
      }
      for (let ii = 0;ii < event.changedTouches.length; ++ii) {
        const { identifier, pageX, pageY } = event.changedTouches[ii];
        const currData = this._allTouchDataMap.get(`${identifier}`);
        if (!currData) {
          continue;
        }
        const deltaX = pageX - currData.positionX;
        const deltaY = pageY - currData.positionY;
        currData.deltaX += deltaX;
        currData.deltaY += deltaY;
        currData.positionX = pageX;
        currData.positionY = pageY;
      }
    };
    this._activated = false;
    this._handleTouchStart = handleTouchStart.bind(this);
    this._handleTouchEnd = handleTouchEnd.bind(this);
    this._handleTouchMove = handleTouchMove.bind(this);
  }
  isSupported(inTargetElement) {
    return "ontouchstart" in inTargetElement;
  }
  activate(inTargetElement) {
    if (!this.isSupported(inTargetElement)) {
      return;
    }
    if (this._activated) {
      return;
    }
    this._allTouchDataMap.clear();
    this._allCachedTouchDataArray.length = 0;
    inTargetElement.addEventListener("touchstart", this._handleTouchStart);
    inTargetElement.addEventListener("touchend", this._handleTouchEnd);
    inTargetElement.addEventListener("touchcancel", this._handleTouchEnd);
    inTargetElement.addEventListener("touchmove", this._handleTouchMove, {
      passive: false
    });
    this._activated = true;
  }
  deactivate(inTargetElement) {
    if (!this._activated) {
      return;
    }
    this._allTouchDataMap.clear();
    this._allCachedTouchDataArray.length = 0;
    inTargetElement.removeEventListener("touchstart", this._handleTouchStart);
    inTargetElement.removeEventListener("touchend", this._handleTouchEnd);
    inTargetElement.removeEventListener("touchcancel", this._handleTouchEnd);
    inTargetElement.removeEventListener("touchmove", this._handleTouchMove);
    this._activated = false;
  }
  _refreshCache() {
    if (this._allCachedTouchDataArray.length === 0) {
      this._allCachedTouchDataArray = [...this._allTouchDataMap.values()];
    }
  }
  getTouchData() {
    this._refreshCache();
    return this._allCachedTouchDataArray;
  }
  resetDeltas() {
    this._refreshCache();
    this._allCachedTouchDataArray.forEach((item) => item.resetDelta());
  }
  onEvent(callback) {
    this._onEvent = callback;
  }
}
var GlobalTouchManager = new TouchManager;
// src/local-framework/system/browser/VisibilityManager.ts
class VisibilityManager {
  _activated = false;
  _onVisibilityChangeCallbacks = [];
  _handleVisibilityChange;
  constructor() {
    const handleVisibilityChange = () => {
      const isVisible = this.isVisible();
      this._onVisibilityChangeCallbacks.forEach((callback) => callback(isVisible));
    };
    this._handleVisibilityChange = handleVisibilityChange.bind(this);
  }
  activate() {
    if (!this.isSupported()) {
      return;
    }
    if (this._activated) {
      return;
    }
    document.addEventListener("visibilitychange", this._handleVisibilityChange, false);
    this._activated = true;
  }
  deactivate() {
    if (!this._activated) {
      return;
    }
    document.removeEventListener("visibilitychange", this._handleVisibilityChange, false);
    this._activated = false;
  }
  isSupported() {
    return "onvisibilitychange" in document;
  }
  isVisible() {
    return document.visibilityState === "visible";
  }
  addVisibilityChange(inCallback) {
    this._onVisibilityChangeCallbacks.push(inCallback);
  }
  removeVisibilityChange(inCallback) {
    const index = this._onVisibilityChangeCallbacks.indexOf(inCallback);
    if (index < 0) {
      return;
    }
    this._onVisibilityChangeCallbacks.splice(index, 1);
  }
  removeAllCallbacks() {
    this._onVisibilityChangeCallbacks.length = 0;
  }
}
var GlobalVisibilityManager = new VisibilityManager;
// src/local-framework/system/browser/isWebWorkerSupported.ts
var isWebWorkerSupported = () => {
  return !!window.Worker;
};
// src/local-framework/system/browser/isWebGL2Supported.ts
var isWebGL2Supported = () => {
  return !!window.WebGL2RenderingContext;
};
// src/local-framework/system/controllers/index.ts
var exports_controllers = {};
__export(exports_controllers, {
  FreeFlyController: () => {
    {
      return FreeFlyController;
    }
  }
});

// node_modules/gl-matrix/esm/common.js
var EPSILON = 0.000001;
var ARRAY_TYPE = typeof Float32Array !== "undefined" ? Float32Array : Array;
var RANDOM = Math.random;
var degree = Math.PI / 180;
if (!Math.hypot)
  Math.hypot = function() {
    var y = 0, i = arguments.length;
    while (i--) {
      y += arguments[i] * arguments[i];
    }
    return Math.sqrt(y);
  };

// node_modules/gl-matrix/esm/mat4.js
var exports_mat4 = {};
__export(exports_mat4, {
  transpose: () => {
    {
      return transpose;
    }
  },
  translate: () => {
    {
      return translate;
    }
  },
  targetTo: () => {
    {
      return targetTo;
    }
  },
  subtract: () => {
    {
      return subtract;
    }
  },
  sub: () => {
    {
      return sub;
    }
  },
  str: () => {
    {
      return str;
    }
  },
  set: () => {
    {
      return set;
    }
  },
  scale: () => {
    {
      return scale;
    }
  },
  rotateZ: () => {
    {
      return rotateZ;
    }
  },
  rotateY: () => {
    {
      return rotateY;
    }
  },
  rotateX: () => {
    {
      return rotateX;
    }
  },
  rotate: () => {
    {
      return rotate;
    }
  },
  perspectiveZO: () => {
    {
      return perspectiveZO;
    }
  },
  perspectiveNO: () => {
    {
      return perspectiveNO;
    }
  },
  perspectiveFromFieldOfView: () => {
    {
      return perspectiveFromFieldOfView;
    }
  },
  perspective: () => {
    {
      return perspective;
    }
  },
  orthoZO: () => {
    {
      return orthoZO;
    }
  },
  orthoNO: () => {
    {
      return orthoNO;
    }
  },
  ortho: () => {
    {
      return ortho;
    }
  },
  multiplyScalarAndAdd: () => {
    {
      return multiplyScalarAndAdd;
    }
  },
  multiplyScalar: () => {
    {
      return multiplyScalar;
    }
  },
  multiply: () => {
    {
      return multiply;
    }
  },
  mul: () => {
    {
      return mul;
    }
  },
  lookAt: () => {
    {
      return lookAt;
    }
  },
  invert: () => {
    {
      return invert;
    }
  },
  identity: () => {
    {
      return identity;
    }
  },
  getTranslation: () => {
    {
      return getTranslation;
    }
  },
  getScaling: () => {
    {
      return getScaling;
    }
  },
  getRotation: () => {
    {
      return getRotation;
    }
  },
  frustum: () => {
    {
      return frustum;
    }
  },
  fromZRotation: () => {
    {
      return fromZRotation;
    }
  },
  fromYRotation: () => {
    {
      return fromYRotation;
    }
  },
  fromXRotation: () => {
    {
      return fromXRotation;
    }
  },
  fromValues: () => {
    {
      return fromValues;
    }
  },
  fromTranslation: () => {
    {
      return fromTranslation;
    }
  },
  fromScaling: () => {
    {
      return fromScaling;
    }
  },
  fromRotationTranslationScaleOrigin: () => {
    {
      return fromRotationTranslationScaleOrigin;
    }
  },
  fromRotationTranslationScale: () => {
    {
      return fromRotationTranslationScale;
    }
  },
  fromRotationTranslation: () => {
    {
      return fromRotationTranslation;
    }
  },
  fromRotation: () => {
    {
      return fromRotation;
    }
  },
  fromQuat2: () => {
    {
      return fromQuat2;
    }
  },
  fromQuat: () => {
    {
      return fromQuat;
    }
  },
  frob: () => {
    {
      return frob;
    }
  },
  exactEquals: () => {
    {
      return exactEquals;
    }
  },
  equals: () => {
    {
      return equals;
    }
  },
  determinant: () => {
    {
      return determinant;
    }
  },
  create: () => {
    {
      return create;
    }
  },
  copy: () => {
    {
      return copy;
    }
  },
  clone: () => {
    {
      return clone;
    }
  },
  adjoint: () => {
    {
      return adjoint;
    }
  },
  add: () => {
    {
      return add;
    }
  }
});
function create() {
  var out = new ARRAY_TYPE(16);
  if (ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
  }
  out[0] = 1;
  out[5] = 1;
  out[10] = 1;
  out[15] = 1;
  return out;
}
function clone(a) {
  var out = new ARRAY_TYPE(16);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  var out = new ARRAY_TYPE(16);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function transpose(out, a) {
  if (out === a) {
    var a01 = a[1], a02 = a[2], a03 = a[3];
    var a12 = a[6], a13 = a[7];
    var a23 = a[11];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a01;
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a02;
    out[9] = a12;
    out[11] = a[14];
    out[12] = a03;
    out[13] = a13;
    out[14] = a23;
  } else {
    out[0] = a[0];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a[1];
    out[5] = a[5];
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a[2];
    out[9] = a[6];
    out[10] = a[10];
    out[11] = a[14];
    out[12] = a[3];
    out[13] = a[7];
    out[14] = a[11];
    out[15] = a[15];
  }
  return out;
}
function invert(out, a) {
  var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32;
  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
  if (!det) {
    return null;
  }
  det = 1 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
  return out;
}
function adjoint(out, a) {
  var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
  return out;
}
function determinant(a) {
  var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32;
  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
}
function multiply(out, a, b) {
  var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
  var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[4];
  b1 = b[5];
  b2 = b[6];
  b3 = b[7];
  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[8];
  b1 = b[9];
  b2 = b[10];
  b3 = b[11];
  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[12];
  b1 = b[13];
  b2 = b[14];
  b3 = b[15];
  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  return out;
}
function translate(out, a, v) {
  var x = v[0], y = v[1], z = v[2];
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;
  if (a === out) {
    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
  } else {
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a03;
    out[4] = a10;
    out[5] = a11;
    out[6] = a12;
    out[7] = a13;
    out[8] = a20;
    out[9] = a21;
    out[10] = a22;
    out[11] = a23;
    out[12] = a00 * x + a10 * y + a20 * z + a[12];
    out[13] = a01 * x + a11 * y + a21 * z + a[13];
    out[14] = a02 * x + a12 * y + a22 * z + a[14];
    out[15] = a03 * x + a13 * y + a23 * z + a[15];
  }
  return out;
}
function scale(out, a, v) {
  var x = v[0], y = v[1], z = v[2];
  out[0] = a[0] * x;
  out[1] = a[1] * x;
  out[2] = a[2] * x;
  out[3] = a[3] * x;
  out[4] = a[4] * y;
  out[5] = a[5] * y;
  out[6] = a[6] * y;
  out[7] = a[7] * y;
  out[8] = a[8] * z;
  out[9] = a[9] * z;
  out[10] = a[10] * z;
  out[11] = a[11] * z;
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
function rotate(out, a, rad, axis) {
  var x = axis[0], y = axis[1], z = axis[2];
  var len = Math.hypot(x, y, z);
  var s, c, t;
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;
  var b00, b01, b02;
  var b10, b11, b12;
  var b20, b21, b22;
  if (len < EPSILON) {
    return null;
  }
  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c;
  a00 = a[0];
  a01 = a[1];
  a02 = a[2];
  a03 = a[3];
  a10 = a[4];
  a11 = a[5];
  a12 = a[6];
  a13 = a[7];
  a20 = a[8];
  a21 = a[9];
  a22 = a[10];
  a23 = a[11];
  b00 = x * x * t + c;
  b01 = y * x * t + z * s;
  b02 = z * x * t - y * s;
  b10 = x * y * t - z * s;
  b11 = y * y * t + c;
  b12 = z * y * t + x * s;
  b20 = x * z * t + y * s;
  b21 = y * z * t - x * s;
  b22 = z * z * t + c;
  out[0] = a00 * b00 + a10 * b01 + a20 * b02;
  out[1] = a01 * b00 + a11 * b01 + a21 * b02;
  out[2] = a02 * b00 + a12 * b01 + a22 * b02;
  out[3] = a03 * b00 + a13 * b01 + a23 * b02;
  out[4] = a00 * b10 + a10 * b11 + a20 * b12;
  out[5] = a01 * b10 + a11 * b11 + a21 * b12;
  out[6] = a02 * b10 + a12 * b11 + a22 * b12;
  out[7] = a03 * b10 + a13 * b11 + a23 * b12;
  out[8] = a00 * b20 + a10 * b21 + a20 * b22;
  out[9] = a01 * b20 + a11 * b21 + a21 * b22;
  out[10] = a02 * b20 + a12 * b21 + a22 * b22;
  out[11] = a03 * b20 + a13 * b21 + a23 * b22;
  if (a !== out) {
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }
  return out;
}
function rotateX(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];
  if (a !== out) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }
  out[4] = a10 * c + a20 * s;
  out[5] = a11 * c + a21 * s;
  out[6] = a12 * c + a22 * s;
  out[7] = a13 * c + a23 * s;
  out[8] = a20 * c - a10 * s;
  out[9] = a21 * c - a11 * s;
  out[10] = a22 * c - a12 * s;
  out[11] = a23 * c - a13 * s;
  return out;
}
function rotateY(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];
  if (a !== out) {
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }
  out[0] = a00 * c - a20 * s;
  out[1] = a01 * c - a21 * s;
  out[2] = a02 * c - a22 * s;
  out[3] = a03 * c - a23 * s;
  out[8] = a00 * s + a20 * c;
  out[9] = a01 * s + a21 * c;
  out[10] = a02 * s + a22 * c;
  out[11] = a03 * s + a23 * c;
  return out;
}
function rotateZ(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];
  if (a !== out) {
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }
  out[0] = a00 * c + a10 * s;
  out[1] = a01 * c + a11 * s;
  out[2] = a02 * c + a12 * s;
  out[3] = a03 * c + a13 * s;
  out[4] = a10 * c - a00 * s;
  out[5] = a11 * c - a01 * s;
  out[6] = a12 * c - a02 * s;
  out[7] = a13 * c - a03 * s;
  return out;
}
function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = v[1];
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = v[2];
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function fromRotation(out, rad, axis) {
  var x = axis[0], y = axis[1], z = axis[2];
  var len = Math.hypot(x, y, z);
  var s, c, t;
  if (len < EPSILON) {
    return null;
  }
  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c;
  out[0] = x * x * t + c;
  out[1] = y * x * t + z * s;
  out[2] = z * x * t - y * s;
  out[3] = 0;
  out[4] = x * y * t - z * s;
  out[5] = y * y * t + c;
  out[6] = z * y * t + x * s;
  out[7] = 0;
  out[8] = x * z * t + y * s;
  out[9] = y * z * t - x * s;
  out[10] = z * z * t + c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function fromXRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = c;
  out[6] = s;
  out[7] = 0;
  out[8] = 0;
  out[9] = -s;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function fromYRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = c;
  out[1] = 0;
  out[2] = -s;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = s;
  out[9] = 0;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function fromZRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = 0;
  out[4] = -s;
  out[5] = c;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function fromRotationTranslation(out, q, v) {
  var x = q[0], y = q[1], z = q[2], w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - (yy + zz);
  out[1] = xy + wz;
  out[2] = xz - wy;
  out[3] = 0;
  out[4] = xy - wz;
  out[5] = 1 - (xx + zz);
  out[6] = yz + wx;
  out[7] = 0;
  out[8] = xz + wy;
  out[9] = yz - wx;
  out[10] = 1 - (xx + yy);
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
function fromQuat2(out, a) {
  var translation = new ARRAY_TYPE(3);
  var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7];
  var magnitude = bx * bx + by * by + bz * bz + bw * bw;
  if (magnitude > 0) {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
  } else {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
  }
  fromRotationTranslation(out, a, translation);
  return out;
}
function getTranslation(out, mat) {
  out[0] = mat[12];
  out[1] = mat[13];
  out[2] = mat[14];
  return out;
}
function getScaling(out, mat) {
  var m11 = mat[0];
  var m12 = mat[1];
  var m13 = mat[2];
  var m21 = mat[4];
  var m22 = mat[5];
  var m23 = mat[6];
  var m31 = mat[8];
  var m32 = mat[9];
  var m33 = mat[10];
  out[0] = Math.hypot(m11, m12, m13);
  out[1] = Math.hypot(m21, m22, m23);
  out[2] = Math.hypot(m31, m32, m33);
  return out;
}
function getRotation(out, mat) {
  var scaling = new ARRAY_TYPE(3);
  getScaling(scaling, mat);
  var is1 = 1 / scaling[0];
  var is2 = 1 / scaling[1];
  var is3 = 1 / scaling[2];
  var sm11 = mat[0] * is1;
  var sm12 = mat[1] * is2;
  var sm13 = mat[2] * is3;
  var sm21 = mat[4] * is1;
  var sm22 = mat[5] * is2;
  var sm23 = mat[6] * is3;
  var sm31 = mat[8] * is1;
  var sm32 = mat[9] * is2;
  var sm33 = mat[10] * is3;
  var trace = sm11 + sm22 + sm33;
  var S = 0;
  if (trace > 0) {
    S = Math.sqrt(trace + 1) * 2;
    out[3] = 0.25 * S;
    out[0] = (sm23 - sm32) / S;
    out[1] = (sm31 - sm13) / S;
    out[2] = (sm12 - sm21) / S;
  } else if (sm11 > sm22 && sm11 > sm33) {
    S = Math.sqrt(1 + sm11 - sm22 - sm33) * 2;
    out[3] = (sm23 - sm32) / S;
    out[0] = 0.25 * S;
    out[1] = (sm12 + sm21) / S;
    out[2] = (sm31 + sm13) / S;
  } else if (sm22 > sm33) {
    S = Math.sqrt(1 + sm22 - sm11 - sm33) * 2;
    out[3] = (sm31 - sm13) / S;
    out[0] = (sm12 + sm21) / S;
    out[1] = 0.25 * S;
    out[2] = (sm23 + sm32) / S;
  } else {
    S = Math.sqrt(1 + sm33 - sm11 - sm22) * 2;
    out[3] = (sm12 - sm21) / S;
    out[0] = (sm31 + sm13) / S;
    out[1] = (sm23 + sm32) / S;
    out[2] = 0.25 * S;
  }
  return out;
}
function fromRotationTranslationScale(out, q, v, s) {
  var x = q[0], y = q[1], z = q[2], w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
  var x = q[0], y = q[1], z = q[2], w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  var ox = o[0];
  var oy = o[1];
  var oz = o[2];
  var out0 = (1 - (yy + zz)) * sx;
  var out1 = (xy + wz) * sx;
  var out2 = (xz - wy) * sx;
  var out4 = (xy - wz) * sy;
  var out5 = (1 - (xx + zz)) * sy;
  var out6 = (yz + wx) * sy;
  var out8 = (xz + wy) * sz;
  var out9 = (yz - wx) * sz;
  var out10 = (1 - (xx + yy)) * sz;
  out[0] = out0;
  out[1] = out1;
  out[2] = out2;
  out[3] = 0;
  out[4] = out4;
  out[5] = out5;
  out[6] = out6;
  out[7] = 0;
  out[8] = out8;
  out[9] = out9;
  out[10] = out10;
  out[11] = 0;
  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
  out[15] = 1;
  return out;
}
function fromQuat(out, q) {
  var x = q[0], y = q[1], z = q[2], w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var yx = y * x2;
  var yy = y * y2;
  var zx = z * x2;
  var zy = z * y2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - yy - zz;
  out[1] = yx + wz;
  out[2] = zx - wy;
  out[3] = 0;
  out[4] = yx - wz;
  out[5] = 1 - xx - zz;
  out[6] = zy + wx;
  out[7] = 0;
  out[8] = zx + wy;
  out[9] = zy - wx;
  out[10] = 1 - xx - yy;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function frustum(out, left, right, bottom, top, near, far) {
  var rl = 1 / (right - left);
  var tb = 1 / (top - bottom);
  var nf = 1 / (near - far);
  out[0] = near * 2 * rl;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = near * 2 * tb;
  out[6] = 0;
  out[7] = 0;
  out[8] = (right + left) * rl;
  out[9] = (top + bottom) * tb;
  out[10] = (far + near) * nf;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = far * near * 2 * nf;
  out[15] = 0;
  return out;
}
function perspectiveNO(out, fovy, aspect, near, far) {
  var f = 1 / Math.tan(fovy / 2), nf;
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[15] = 0;
  if (far != null && far !== Infinity) {
    nf = 1 / (near - far);
    out[10] = (far + near) * nf;
    out[14] = 2 * far * near * nf;
  } else {
    out[10] = -1;
    out[14] = -2 * near;
  }
  return out;
}
function perspectiveZO(out, fovy, aspect, near, far) {
  var f = 1 / Math.tan(fovy / 2), nf;
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[15] = 0;
  if (far != null && far !== Infinity) {
    nf = 1 / (near - far);
    out[10] = far * nf;
    out[14] = far * near * nf;
  } else {
    out[10] = -1;
    out[14] = -near;
  }
  return out;
}
function perspectiveFromFieldOfView(out, fov, near, far) {
  var upTan = Math.tan(fov.upDegrees * Math.PI / 180);
  var downTan = Math.tan(fov.downDegrees * Math.PI / 180);
  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180);
  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180);
  var xScale = 2 / (leftTan + rightTan);
  var yScale = 2 / (upTan + downTan);
  out[0] = xScale;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = yScale;
  out[6] = 0;
  out[7] = 0;
  out[8] = -((leftTan - rightTan) * xScale * 0.5);
  out[9] = (upTan - downTan) * yScale * 0.5;
  out[10] = far / (near - far);
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = far * near / (near - far);
  out[15] = 0;
  return out;
}
function orthoNO(out, left, right, bottom, top, near, far) {
  var lr = 1 / (left - right);
  var bt = 1 / (bottom - top);
  var nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 2 * nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = (far + near) * nf;
  out[15] = 1;
  return out;
}
function orthoZO(out, left, right, bottom, top, near, far) {
  var lr = 1 / (left - right);
  var bt = 1 / (bottom - top);
  var nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = near * nf;
  out[15] = 1;
  return out;
}
function lookAt(out, eye, center, up) {
  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
  var eyex = eye[0];
  var eyey = eye[1];
  var eyez = eye[2];
  var upx = up[0];
  var upy = up[1];
  var upz = up[2];
  var centerx = center[0];
  var centery = center[1];
  var centerz = center[2];
  if (Math.abs(eyex - centerx) < EPSILON && Math.abs(eyey - centery) < EPSILON && Math.abs(eyez - centerz) < EPSILON) {
    return identity(out);
  }
  z0 = eyex - centerx;
  z1 = eyey - centery;
  z2 = eyez - centerz;
  len = 1 / Math.hypot(z0, z1, z2);
  z0 *= len;
  z1 *= len;
  z2 *= len;
  x0 = upy * z2 - upz * z1;
  x1 = upz * z0 - upx * z2;
  x2 = upx * z1 - upy * z0;
  len = Math.hypot(x0, x1, x2);
  if (!len) {
    x0 = 0;
    x1 = 0;
    x2 = 0;
  } else {
    len = 1 / len;
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }
  y0 = z1 * x2 - z2 * x1;
  y1 = z2 * x0 - z0 * x2;
  y2 = z0 * x1 - z1 * x0;
  len = Math.hypot(y0, y1, y2);
  if (!len) {
    y0 = 0;
    y1 = 0;
    y2 = 0;
  } else {
    len = 1 / len;
    y0 *= len;
    y1 *= len;
    y2 *= len;
  }
  out[0] = x0;
  out[1] = y0;
  out[2] = z0;
  out[3] = 0;
  out[4] = x1;
  out[5] = y1;
  out[6] = z1;
  out[7] = 0;
  out[8] = x2;
  out[9] = y2;
  out[10] = z2;
  out[11] = 0;
  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
  out[15] = 1;
  return out;
}
function targetTo(out, eye, target, up) {
  var eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2];
  var z0 = eyex - target[0], z1 = eyey - target[1], z2 = eyez - target[2];
  var len = z0 * z0 + z1 * z1 + z2 * z2;
  if (len > 0) {
    len = 1 / Math.sqrt(len);
    z0 *= len;
    z1 *= len;
    z2 *= len;
  }
  var x0 = upy * z2 - upz * z1, x1 = upz * z0 - upx * z2, x2 = upx * z1 - upy * z0;
  len = x0 * x0 + x1 * x1 + x2 * x2;
  if (len > 0) {
    len = 1 / Math.sqrt(len);
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }
  out[0] = x0;
  out[1] = x1;
  out[2] = x2;
  out[3] = 0;
  out[4] = z1 * x2 - z2 * x1;
  out[5] = z2 * x0 - z0 * x2;
  out[6] = z0 * x1 - z1 * x0;
  out[7] = 0;
  out[8] = z0;
  out[9] = z1;
  out[10] = z2;
  out[11] = 0;
  out[12] = eyex;
  out[13] = eyey;
  out[14] = eyez;
  out[15] = 1;
  return out;
}
function str(a) {
  return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")";
}
function frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
}
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  out[9] = a[9] + b[9];
  out[10] = a[10] + b[10];
  out[11] = a[11] + b[11];
  out[12] = a[12] + b[12];
  out[13] = a[13] + b[13];
  out[14] = a[14] + b[14];
  out[15] = a[15] + b[15];
  return out;
}
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  out[9] = a[9] - b[9];
  out[10] = a[10] - b[10];
  out[11] = a[11] - b[11];
  out[12] = a[12] - b[12];
  out[13] = a[13] - b[13];
  out[14] = a[14] - b[14];
  out[15] = a[15] - b[15];
  return out;
}
function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  out[9] = a[9] * b;
  out[10] = a[10] * b;
  out[11] = a[11] * b;
  out[12] = a[12] * b;
  out[13] = a[13] * b;
  out[14] = a[14] * b;
  out[15] = a[15] * b;
  return out;
}
function multiplyScalarAndAdd(out, a, b, scale2) {
  out[0] = a[0] + b[0] * scale2;
  out[1] = a[1] + b[1] * scale2;
  out[2] = a[2] + b[2] * scale2;
  out[3] = a[3] + b[3] * scale2;
  out[4] = a[4] + b[4] * scale2;
  out[5] = a[5] + b[5] * scale2;
  out[6] = a[6] + b[6] * scale2;
  out[7] = a[7] + b[7] * scale2;
  out[8] = a[8] + b[8] * scale2;
  out[9] = a[9] + b[9] * scale2;
  out[10] = a[10] + b[10] * scale2;
  out[11] = a[11] + b[11] * scale2;
  out[12] = a[12] + b[12] * scale2;
  out[13] = a[13] + b[13] * scale2;
  out[14] = a[14] + b[14] * scale2;
  out[15] = a[15] + b[15] * scale2;
  return out;
}
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
}
function equals(a, b) {
  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
  var a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7];
  var a8 = a[8], a9 = a[9], a10 = a[10], a11 = a[11];
  var a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];
  var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
  var b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7];
  var b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11];
  var b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= EPSILON * Math.max(1, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= EPSILON * Math.max(1, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= EPSILON * Math.max(1, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= EPSILON * Math.max(1, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= EPSILON * Math.max(1, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= EPSILON * Math.max(1, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= EPSILON * Math.max(1, Math.abs(a15), Math.abs(b15));
}
var perspective = perspectiveNO;
var ortho = orthoNO;
var mul = multiply;
var sub = subtract;

// node_modules/gl-matrix/esm/vec3.js
var exports_vec3 = {};
__export(exports_vec3, {
  zero: () => {
    {
      return zero;
    }
  },
  transformQuat: () => {
    {
      return transformQuat;
    }
  },
  transformMat4: () => {
    {
      return transformMat4;
    }
  },
  transformMat3: () => {
    {
      return transformMat3;
    }
  },
  subtract: () => {
    {
      return subtract2;
    }
  },
  sub: () => {
    {
      return sub2;
    }
  },
  str: () => {
    {
      return str2;
    }
  },
  squaredLength: () => {
    {
      return squaredLength;
    }
  },
  squaredDistance: () => {
    {
      return squaredDistance;
    }
  },
  sqrLen: () => {
    {
      return sqrLen;
    }
  },
  sqrDist: () => {
    {
      return sqrDist;
    }
  },
  set: () => {
    {
      return set2;
    }
  },
  scaleAndAdd: () => {
    {
      return scaleAndAdd;
    }
  },
  scale: () => {
    {
      return scale2;
    }
  },
  round: () => {
    {
      return round;
    }
  },
  rotateZ: () => {
    {
      return rotateZ2;
    }
  },
  rotateY: () => {
    {
      return rotateY2;
    }
  },
  rotateX: () => {
    {
      return rotateX2;
    }
  },
  random: () => {
    {
      return random;
    }
  },
  normalize: () => {
    {
      return normalize;
    }
  },
  negate: () => {
    {
      return negate;
    }
  },
  multiply: () => {
    {
      return multiply2;
    }
  },
  mul: () => {
    {
      return mul2;
    }
  },
  min: () => {
    {
      return min;
    }
  },
  max: () => {
    {
      return max;
    }
  },
  lerp: () => {
    {
      return lerp;
    }
  },
  length: () => {
    {
      return length;
    }
  },
  len: () => {
    {
      return len;
    }
  },
  inverse: () => {
    {
      return inverse;
    }
  },
  hermite: () => {
    {
      return hermite;
    }
  },
  fromValues: () => {
    {
      return fromValues2;
    }
  },
  forEach: () => {
    {
      return forEach;
    }
  },
  floor: () => {
    {
      return floor;
    }
  },
  exactEquals: () => {
    {
      return exactEquals2;
    }
  },
  equals: () => {
    {
      return equals2;
    }
  },
  dot: () => {
    {
      return dot;
    }
  },
  divide: () => {
    {
      return divide;
    }
  },
  div: () => {
    {
      return div;
    }
  },
  distance: () => {
    {
      return distance;
    }
  },
  dist: () => {
    {
      return dist;
    }
  },
  cross: () => {
    {
      return cross;
    }
  },
  create: () => {
    {
      return create2;
    }
  },
  copy: () => {
    {
      return copy2;
    }
  },
  clone: () => {
    {
      return clone2;
    }
  },
  ceil: () => {
    {
      return ceil;
    }
  },
  bezier: () => {
    {
      return bezier;
    }
  },
  angle: () => {
    {
      return angle;
    }
  },
  add: () => {
    {
      return add2;
    }
  }
});
function create2() {
  var out = new ARRAY_TYPE(3);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }
  return out;
}
function clone2(a) {
  var out = new ARRAY_TYPE(3);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
function length(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return Math.hypot(x, y, z);
}
function fromValues2(x, y, z) {
  var out = new ARRAY_TYPE(3);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
function copy2(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
function set2(out, x, y, z) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
function add2(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  return out;
}
function subtract2(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  return out;
}
function multiply2(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  return out;
}
function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  return out;
}
function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  return out;
}
function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  return out;
}
function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  return out;
}
function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  return out;
}
function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  return out;
}
function scale2(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  return out;
}
function scaleAndAdd(out, a, b, scale3) {
  out[0] = a[0] + b[0] * scale3;
  out[1] = a[1] + b[1] * scale3;
  out[2] = a[2] + b[2] * scale3;
  return out;
}
function distance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return Math.hypot(x, y, z);
}
function squaredDistance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return x * x + y * y + z * z;
}
function squaredLength(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return x * x + y * y + z * z;
}
function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  return out;
}
function inverse(out, a) {
  out[0] = 1 / a[0];
  out[1] = 1 / a[1];
  out[2] = 1 / a[2];
  return out;
}
function normalize(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var len = x * x + y * y + z * z;
  if (len > 0) {
    len = 1 / Math.sqrt(len);
  }
  out[0] = a[0] * len;
  out[1] = a[1] * len;
  out[2] = a[2] * len;
  return out;
}
function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
function cross(out, a, b) {
  var ax = a[0], ay = a[1], az = a[2];
  var bx = b[0], by = b[1], bz = b[2];
  out[0] = ay * bz - az * by;
  out[1] = az * bx - ax * bz;
  out[2] = ax * by - ay * bx;
  return out;
}
function lerp(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  return out;
}
function hermite(out, a, b, c, d, t) {
  var factorTimes2 = t * t;
  var factor1 = factorTimes2 * (2 * t - 3) + 1;
  var factor2 = factorTimes2 * (t - 2) + t;
  var factor3 = factorTimes2 * (t - 1);
  var factor4 = factorTimes2 * (3 - 2 * t);
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
function bezier(out, a, b, c, d, t) {
  var inverseFactor = 1 - t;
  var inverseFactorTimesTwo = inverseFactor * inverseFactor;
  var factorTimes2 = t * t;
  var factor1 = inverseFactorTimesTwo * inverseFactor;
  var factor2 = 3 * t * inverseFactorTimesTwo;
  var factor3 = 3 * factorTimes2 * inverseFactor;
  var factor4 = factorTimes2 * t;
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
function random(out, scale3) {
  scale3 = scale3 || 1;
  var r = RANDOM() * 2 * Math.PI;
  var z = RANDOM() * 2 - 1;
  var zScale = Math.sqrt(1 - z * z) * scale3;
  out[0] = Math.cos(r) * zScale;
  out[1] = Math.sin(r) * zScale;
  out[2] = z * scale3;
  return out;
}
function transformMat4(out, a, m) {
  var x = a[0], y = a[1], z = a[2];
  var w = m[3] * x + m[7] * y + m[11] * z + m[15];
  w = w || 1;
  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
  return out;
}
function transformMat3(out, a, m) {
  var x = a[0], y = a[1], z = a[2];
  out[0] = x * m[0] + y * m[3] + z * m[6];
  out[1] = x * m[1] + y * m[4] + z * m[7];
  out[2] = x * m[2] + y * m[5] + z * m[8];
  return out;
}
function transformQuat(out, a, q) {
  var qx = q[0], qy = q[1], qz = q[2], qw = q[3];
  var x = a[0], y = a[1], z = a[2];
  var uvx = qy * z - qz * y, uvy = qz * x - qx * z, uvz = qx * y - qy * x;
  var uuvx = qy * uvz - qz * uvy, uuvy = qz * uvx - qx * uvz, uuvz = qx * uvy - qy * uvx;
  var w2 = qw * 2;
  uvx *= w2;
  uvy *= w2;
  uvz *= w2;
  uuvx *= 2;
  uuvy *= 2;
  uuvz *= 2;
  out[0] = x + uvx + uuvx;
  out[1] = y + uvy + uuvy;
  out[2] = z + uvz + uuvz;
  return out;
}
function rotateX2(out, a, b, rad) {
  var p = [], r = [];
  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2];
  r[0] = p[0];
  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);
  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);
  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
function rotateY2(out, a, b, rad) {
  var p = [], r = [];
  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2];
  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);
  r[1] = p[1];
  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);
  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
function rotateZ2(out, a, b, rad) {
  var p = [], r = [];
  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2];
  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);
  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);
  r[2] = p[2];
  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
function angle(a, b) {
  var ax = a[0], ay = a[1], az = a[2], bx = b[0], by = b[1], bz = b[2], mag1 = Math.sqrt(ax * ax + ay * ay + az * az), mag2 = Math.sqrt(bx * bx + by * by + bz * bz), mag = mag1 * mag2, cosine = mag && dot(a, b) / mag;
  return Math.acos(Math.min(Math.max(cosine, -1), 1));
}
function zero(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  return out;
}
function str2(a) {
  return "vec3(" + a[0] + ", " + a[1] + ", " + a[2] + ")";
}
function exactEquals2(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
}
function equals2(a, b) {
  var a0 = a[0], a1 = a[1], a2 = a[2];
  var b0 = b[0], b1 = b[1], b2 = b[2];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2));
}
var sub2 = subtract2;
var mul2 = multiply2;
var div = divide;
var dist = distance;
var sqrDist = squaredDistance;
var len = length;
var sqrLen = squaredLength;
var forEach = function() {
  var vec = create2();
  return function(a, stride, offset, count, fn, arg) {
    var i, l;
    if (!stride) {
      stride = 3;
    }
    if (!offset) {
      offset = 0;
    }
    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }
    for (i = offset;i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
    }
    return a;
  };
}();

// node_modules/gl-matrix/esm/vec4.js
var exports_vec4 = {};
__export(exports_vec4, {
  zero: () => {
    {
      return zero2;
    }
  },
  transformQuat: () => {
    {
      return transformQuat2;
    }
  },
  transformMat4: () => {
    {
      return transformMat42;
    }
  },
  subtract: () => {
    {
      return subtract3;
    }
  },
  sub: () => {
    {
      return sub3;
    }
  },
  str: () => {
    {
      return str3;
    }
  },
  squaredLength: () => {
    {
      return squaredLength2;
    }
  },
  squaredDistance: () => {
    {
      return squaredDistance2;
    }
  },
  sqrLen: () => {
    {
      return sqrLen2;
    }
  },
  sqrDist: () => {
    {
      return sqrDist2;
    }
  },
  set: () => {
    {
      return set3;
    }
  },
  scaleAndAdd: () => {
    {
      return scaleAndAdd2;
    }
  },
  scale: () => {
    {
      return scale3;
    }
  },
  round: () => {
    {
      return round2;
    }
  },
  random: () => {
    {
      return random2;
    }
  },
  normalize: () => {
    {
      return normalize2;
    }
  },
  negate: () => {
    {
      return negate2;
    }
  },
  multiply: () => {
    {
      return multiply3;
    }
  },
  mul: () => {
    {
      return mul3;
    }
  },
  min: () => {
    {
      return min2;
    }
  },
  max: () => {
    {
      return max2;
    }
  },
  lerp: () => {
    {
      return lerp2;
    }
  },
  length: () => {
    {
      return length2;
    }
  },
  len: () => {
    {
      return len2;
    }
  },
  inverse: () => {
    {
      return inverse2;
    }
  },
  fromValues: () => {
    {
      return fromValues3;
    }
  },
  forEach: () => {
    {
      return forEach2;
    }
  },
  floor: () => {
    {
      return floor2;
    }
  },
  exactEquals: () => {
    {
      return exactEquals3;
    }
  },
  equals: () => {
    {
      return equals3;
    }
  },
  dot: () => {
    {
      return dot2;
    }
  },
  divide: () => {
    {
      return divide2;
    }
  },
  div: () => {
    {
      return div2;
    }
  },
  distance: () => {
    {
      return distance2;
    }
  },
  dist: () => {
    {
      return dist2;
    }
  },
  cross: () => {
    {
      return cross2;
    }
  },
  create: () => {
    {
      return create3;
    }
  },
  copy: () => {
    {
      return copy3;
    }
  },
  clone: () => {
    {
      return clone3;
    }
  },
  ceil: () => {
    {
      return ceil2;
    }
  },
  add: () => {
    {
      return add3;
    }
  }
});
function create3() {
  var out = new ARRAY_TYPE(4);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
  }
  return out;
}
function clone3(a) {
  var out = new ARRAY_TYPE(4);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
function fromValues3(x, y, z, w) {
  var out = new ARRAY_TYPE(4);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}
function copy3(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
function set3(out, x, y, z, w) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}
function add3(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  return out;
}
function subtract3(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  return out;
}
function multiply3(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  out[3] = a[3] * b[3];
  return out;
}
function divide2(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  out[3] = a[3] / b[3];
  return out;
}
function ceil2(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  out[3] = Math.ceil(a[3]);
  return out;
}
function floor2(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  out[3] = Math.floor(a[3]);
  return out;
}
function min2(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  out[3] = Math.min(a[3], b[3]);
  return out;
}
function max2(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  out[3] = Math.max(a[3], b[3]);
  return out;
}
function round2(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  out[3] = Math.round(a[3]);
  return out;
}
function scale3(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}
function scaleAndAdd2(out, a, b, scale4) {
  out[0] = a[0] + b[0] * scale4;
  out[1] = a[1] + b[1] * scale4;
  out[2] = a[2] + b[2] * scale4;
  out[3] = a[3] + b[3] * scale4;
  return out;
}
function distance2(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  var w = b[3] - a[3];
  return Math.hypot(x, y, z, w);
}
function squaredDistance2(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  var w = b[3] - a[3];
  return x * x + y * y + z * z + w * w;
}
function length2(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  return Math.hypot(x, y, z, w);
}
function squaredLength2(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  return x * x + y * y + z * z + w * w;
}
function negate2(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = -a[3];
  return out;
}
function inverse2(out, a) {
  out[0] = 1 / a[0];
  out[1] = 1 / a[1];
  out[2] = 1 / a[2];
  out[3] = 1 / a[3];
  return out;
}
function normalize2(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  var len2 = x * x + y * y + z * z + w * w;
  if (len2 > 0) {
    len2 = 1 / Math.sqrt(len2);
  }
  out[0] = x * len2;
  out[1] = y * len2;
  out[2] = z * len2;
  out[3] = w * len2;
  return out;
}
function dot2(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
}
function cross2(out, u, v, w) {
  var A = v[0] * w[1] - v[1] * w[0], B = v[0] * w[2] - v[2] * w[0], C = v[0] * w[3] - v[3] * w[0], D = v[1] * w[2] - v[2] * w[1], E = v[1] * w[3] - v[3] * w[1], F = v[2] * w[3] - v[3] * w[2];
  var G = u[0];
  var H = u[1];
  var I = u[2];
  var J = u[3];
  out[0] = H * F - I * E + J * D;
  out[1] = -(G * F) + I * C - J * B;
  out[2] = G * E - H * C + J * A;
  out[3] = -(G * D) + H * B - I * A;
  return out;
}
function lerp2(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  var aw = a[3];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  out[3] = aw + t * (b[3] - aw);
  return out;
}
function random2(out, scale4) {
  scale4 = scale4 || 1;
  var v1, v2, v3, v4;
  var s1, s2;
  do {
    v1 = RANDOM() * 2 - 1;
    v2 = RANDOM() * 2 - 1;
    s1 = v1 * v1 + v2 * v2;
  } while (s1 >= 1);
  do {
    v3 = RANDOM() * 2 - 1;
    v4 = RANDOM() * 2 - 1;
    s2 = v3 * v3 + v4 * v4;
  } while (s2 >= 1);
  var d = Math.sqrt((1 - s1) / s2);
  out[0] = scale4 * v1;
  out[1] = scale4 * v2;
  out[2] = scale4 * v3 * d;
  out[3] = scale4 * v4 * d;
  return out;
}
function transformMat42(out, a, m) {
  var x = a[0], y = a[1], z = a[2], w = a[3];
  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
  return out;
}
function transformQuat2(out, a, q) {
  var x = a[0], y = a[1], z = a[2];
  var qx = q[0], qy = q[1], qz = q[2], qw = q[3];
  var ix = qw * x + qy * z - qz * y;
  var iy = qw * y + qz * x - qx * z;
  var iz = qw * z + qx * y - qy * x;
  var iw = -qx * x - qy * y - qz * z;
  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  out[3] = a[3];
  return out;
}
function zero2(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  return out;
}
function str3(a) {
  return "vec4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
}
function exactEquals3(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}
function equals3(a, b) {
  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
  var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3));
}
var sub3 = subtract3;
var mul3 = multiply3;
var div2 = divide2;
var dist2 = distance2;
var sqrDist2 = squaredDistance2;
var len2 = length2;
var sqrLen2 = squaredLength2;
var forEach2 = function() {
  var vec = create3();
  return function(a, stride, offset, count, fn, arg) {
    var i, l;
    if (!stride) {
      stride = 4;
    }
    if (!offset) {
      offset = 0;
    }
    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }
    for (i = offset;i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      vec[3] = a[i + 3];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
      a[i + 3] = vec[3];
    }
    return a;
  };
}();

// node_modules/gl-matrix/esm/vec2.js
var exports_vec2 = {};
__export(exports_vec2, {
  zero: () => {
    {
      return zero3;
    }
  },
  transformMat4: () => {
    {
      return transformMat43;
    }
  },
  transformMat3: () => {
    {
      return transformMat32;
    }
  },
  transformMat2d: () => {
    {
      return transformMat2d;
    }
  },
  transformMat2: () => {
    {
      return transformMat2;
    }
  },
  subtract: () => {
    {
      return subtract4;
    }
  },
  sub: () => {
    {
      return sub4;
    }
  },
  str: () => {
    {
      return str4;
    }
  },
  squaredLength: () => {
    {
      return squaredLength3;
    }
  },
  squaredDistance: () => {
    {
      return squaredDistance3;
    }
  },
  sqrLen: () => {
    {
      return sqrLen3;
    }
  },
  sqrDist: () => {
    {
      return sqrDist3;
    }
  },
  set: () => {
    {
      return set4;
    }
  },
  scaleAndAdd: () => {
    {
      return scaleAndAdd3;
    }
  },
  scale: () => {
    {
      return scale4;
    }
  },
  round: () => {
    {
      return round3;
    }
  },
  rotate: () => {
    {
      return rotate2;
    }
  },
  random: () => {
    {
      return random3;
    }
  },
  normalize: () => {
    {
      return normalize3;
    }
  },
  negate: () => {
    {
      return negate3;
    }
  },
  multiply: () => {
    {
      return multiply4;
    }
  },
  mul: () => {
    {
      return mul4;
    }
  },
  min: () => {
    {
      return min3;
    }
  },
  max: () => {
    {
      return max3;
    }
  },
  lerp: () => {
    {
      return lerp3;
    }
  },
  length: () => {
    {
      return length3;
    }
  },
  len: () => {
    {
      return len3;
    }
  },
  inverse: () => {
    {
      return inverse3;
    }
  },
  fromValues: () => {
    {
      return fromValues4;
    }
  },
  forEach: () => {
    {
      return forEach3;
    }
  },
  floor: () => {
    {
      return floor3;
    }
  },
  exactEquals: () => {
    {
      return exactEquals4;
    }
  },
  equals: () => {
    {
      return equals4;
    }
  },
  dot: () => {
    {
      return dot3;
    }
  },
  divide: () => {
    {
      return divide3;
    }
  },
  div: () => {
    {
      return div3;
    }
  },
  distance: () => {
    {
      return distance3;
    }
  },
  dist: () => {
    {
      return dist3;
    }
  },
  cross: () => {
    {
      return cross3;
    }
  },
  create: () => {
    {
      return create4;
    }
  },
  copy: () => {
    {
      return copy4;
    }
  },
  clone: () => {
    {
      return clone4;
    }
  },
  ceil: () => {
    {
      return ceil3;
    }
  },
  angle: () => {
    {
      return angle2;
    }
  },
  add: () => {
    {
      return add4;
    }
  }
});
function create4() {
  var out = new ARRAY_TYPE(2);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
  }
  return out;
}
function clone4(a) {
  var out = new ARRAY_TYPE(2);
  out[0] = a[0];
  out[1] = a[1];
  return out;
}
function fromValues4(x, y) {
  var out = new ARRAY_TYPE(2);
  out[0] = x;
  out[1] = y;
  return out;
}
function copy4(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  return out;
}
function set4(out, x, y) {
  out[0] = x;
  out[1] = y;
  return out;
}
function add4(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  return out;
}
function subtract4(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  return out;
}
function multiply4(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  return out;
}
function divide3(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  return out;
}
function ceil3(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  return out;
}
function floor3(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  return out;
}
function min3(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  return out;
}
function max3(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  return out;
}
function round3(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  return out;
}
function scale4(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  return out;
}
function scaleAndAdd3(out, a, b, scale5) {
  out[0] = a[0] + b[0] * scale5;
  out[1] = a[1] + b[1] * scale5;
  return out;
}
function distance3(a, b) {
  var x = b[0] - a[0], y = b[1] - a[1];
  return Math.hypot(x, y);
}
function squaredDistance3(a, b) {
  var x = b[0] - a[0], y = b[1] - a[1];
  return x * x + y * y;
}
function length3(a) {
  var x = a[0], y = a[1];
  return Math.hypot(x, y);
}
function squaredLength3(a) {
  var x = a[0], y = a[1];
  return x * x + y * y;
}
function negate3(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  return out;
}
function inverse3(out, a) {
  out[0] = 1 / a[0];
  out[1] = 1 / a[1];
  return out;
}
function normalize3(out, a) {
  var x = a[0], y = a[1];
  var len3 = x * x + y * y;
  if (len3 > 0) {
    len3 = 1 / Math.sqrt(len3);
  }
  out[0] = a[0] * len3;
  out[1] = a[1] * len3;
  return out;
}
function dot3(a, b) {
  return a[0] * b[0] + a[1] * b[1];
}
function cross3(out, a, b) {
  var z = a[0] * b[1] - a[1] * b[0];
  out[0] = out[1] = 0;
  out[2] = z;
  return out;
}
function lerp3(out, a, b, t) {
  var ax = a[0], ay = a[1];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  return out;
}
function random3(out, scale5) {
  scale5 = scale5 || 1;
  var r = RANDOM() * 2 * Math.PI;
  out[0] = Math.cos(r) * scale5;
  out[1] = Math.sin(r) * scale5;
  return out;
}
function transformMat2(out, a, m) {
  var x = a[0], y = a[1];
  out[0] = m[0] * x + m[2] * y;
  out[1] = m[1] * x + m[3] * y;
  return out;
}
function transformMat2d(out, a, m) {
  var x = a[0], y = a[1];
  out[0] = m[0] * x + m[2] * y + m[4];
  out[1] = m[1] * x + m[3] * y + m[5];
  return out;
}
function transformMat32(out, a, m) {
  var x = a[0], y = a[1];
  out[0] = m[0] * x + m[3] * y + m[6];
  out[1] = m[1] * x + m[4] * y + m[7];
  return out;
}
function transformMat43(out, a, m) {
  var x = a[0];
  var y = a[1];
  out[0] = m[0] * x + m[4] * y + m[12];
  out[1] = m[1] * x + m[5] * y + m[13];
  return out;
}
function rotate2(out, a, b, rad) {
  var p0 = a[0] - b[0], p1 = a[1] - b[1], sinC = Math.sin(rad), cosC = Math.cos(rad);
  out[0] = p0 * cosC - p1 * sinC + b[0];
  out[1] = p0 * sinC + p1 * cosC + b[1];
  return out;
}
function angle2(a, b) {
  var x1 = a[0], y1 = a[1], x2 = b[0], y2 = b[1], mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2), cosine = mag && (x1 * x2 + y1 * y2) / mag;
  return Math.acos(Math.min(Math.max(cosine, -1), 1));
}
function zero3(out) {
  out[0] = 0;
  out[1] = 0;
  return out;
}
function str4(a) {
  return "vec2(" + a[0] + ", " + a[1] + ")";
}
function exactEquals4(a, b) {
  return a[0] === b[0] && a[1] === b[1];
}
function equals4(a, b) {
  var a0 = a[0], a1 = a[1];
  var b0 = b[0], b1 = b[1];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1));
}
var len3 = length3;
var sub4 = subtract4;
var mul4 = multiply4;
var div3 = divide3;
var dist3 = distance3;
var sqrDist3 = squaredDistance3;
var sqrLen3 = squaredLength3;
var forEach3 = function() {
  var vec = create4();
  return function(a, stride, offset, count, fn, arg) {
    var i, l;
    if (!stride) {
      stride = 2;
    }
    if (!offset) {
      offset = 0;
    }
    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }
    for (i = offset;i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
    }
    return a;
  };
}();

// src/local-framework/system/math/angles.ts
var rad2Deg = (rad) => rad / Math.PI * 180;
var deg2Rad = (deg) => deg * Math.PI / 180;
var getEuler = (vector3) => {
  const theta = Math.atan2(vector3[1], vector3[0]);
  const magnitude = exports_vec2.length([vector3[0], vector3[1]]);
  const phi = Math.atan2(vector3[2], magnitude);
  return [theta, phi];
};

// src/local-framework/system/controllers/FreeFlyController.ts
var AllAxises = {
  X: 0,
  Y: 1,
  Z: 2
};

class FreeFlyController {
  _isActivated = false;
  _theta = 0;
  _phi = 0;
  _mouseSensibility;
  _keyboardSensibility;
  _touchSensibility;
  _movingSpeed;
  _touchWasActive = false;
  _touchStartTime = 0;
  _touchMoveForward = false;
  _axisIndices;
  _position = exports_vec3.fromValues(0, 0, 0);
  _target = exports_vec3.fromValues(0, 0, 0);
  _forwardAxis = exports_vec3.fromValues(1, 0, 0);
  _leftAxis = exports_vec3.fromValues(0, 0, 1);
  _upAxis = exports_vec3.fromValues(0, 1, 0);
  _move_forwardAxis = exports_vec3.fromValues(1, 0, 0);
  _move_leftAxis = exports_vec3.fromValues(0, 0, 1);
  _move_upAxis = exports_vec3.fromValues(0, 1, 0);
  constructor(def) {
    this._mouseSensibility = def.mouseSensibility;
    this._keyboardSensibility = def.keyboardSensibility;
    this._touchSensibility = def.touchSensibility;
    this._movingSpeed = def.movingSpeed;
    exports_vec3.copy(this._position, def.position);
    this._axisIndices = [
      def.coordinates ? AllAxises[def.coordinates[0]] : AllAxises.X,
      def.coordinates ? AllAxises[def.coordinates[1]] : AllAxises.Y,
      def.coordinates ? AllAxises[def.coordinates[2]] : AllAxises.Z
    ];
    this._theta = def.theta;
    this._phi = def.phi;
  }
  isActivated() {
    return this._isActivated;
  }
  activate() {
    this._isActivated = true;
    GlobalKeyboardManager.preventDefault("Z");
    GlobalKeyboardManager.preventDefault("W");
    GlobalKeyboardManager.preventDefault("S");
    GlobalKeyboardManager.preventDefault("A");
    GlobalKeyboardManager.preventDefault("Q");
    GlobalKeyboardManager.preventDefault("D");
    GlobalKeyboardManager.preventDefault("Shift");
    GlobalKeyboardManager.preventDefault("C");
    GlobalKeyboardManager.preventDefault("Space");
    GlobalKeyboardManager.preventDefault("ArrowUp");
    GlobalKeyboardManager.preventDefault("ArrowDown");
    GlobalKeyboardManager.preventDefault("ArrowLeft");
    GlobalKeyboardManager.preventDefault("ArrowRight");
  }
  deactivate() {
    this._isActivated = false;
    GlobalKeyboardManager.enableDefault("Z");
    GlobalKeyboardManager.enableDefault("W");
    GlobalKeyboardManager.enableDefault("S");
    GlobalKeyboardManager.enableDefault("A");
    GlobalKeyboardManager.enableDefault("Q");
    GlobalKeyboardManager.enableDefault("D");
    GlobalKeyboardManager.enableDefault("Shift");
    GlobalKeyboardManager.enableDefault("C");
    GlobalKeyboardManager.enableDefault("Space");
    GlobalKeyboardManager.enableDefault("ArrowUp");
    GlobalKeyboardManager.enableDefault("ArrowDown");
    GlobalKeyboardManager.enableDefault("ArrowLeft");
    GlobalKeyboardManager.enableDefault("ArrowRight");
  }
  isInteractedWith() {
    return GlobalKeyboardManager.isPressed("Z", "W", "S", "A", "Q", "D") || GlobalKeyboardManager.isPressed("Shift", "C", "Space") || GlobalKeyboardManager.isPressed("ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight");
  }
  update(deltaMsTime, fpsControls = false) {
    let moveForward = false;
    let moveBackward = false;
    let strafeLeft = false;
    let strafeRight = false;
    let isRunning = false;
    let isDiving = false;
    let isRising = false;
    let lookDeltaX = 0;
    let lookDeltaY = 0;
    {
      const deltaX = GlobalMouseManager.deltaX() * this._mouseSensibility;
      const deltaY = GlobalMouseManager.deltaY() * this._mouseSensibility;
      lookDeltaX -= deg2Rad(deltaX) * deltaMsTime;
      lookDeltaY -= deg2Rad(deltaY) * deltaMsTime;
    }
    const isTouched = GlobalTouchManager.getTouchData().length > 0;
    if (isTouched) {
      if (!this._touchWasActive) {
        const currTime = Date.now();
        const elapsed = (currTime - this._touchStartTime) / 1000;
        if (elapsed < 0.25) {
          this._touchMoveForward = true;
        } else {
          this._touchStartTime = currTime;
        }
      }
      const firstTouch = GlobalTouchManager.getTouchData()[0];
      const deltaX = firstTouch.deltaX * this._touchSensibility;
      const deltaY = firstTouch.deltaY * this._touchSensibility;
      lookDeltaX -= deg2Rad(deltaX) * deltaMsTime;
      lookDeltaY -= deg2Rad(deltaY) * deltaMsTime;
    } else {
      this._touchMoveForward = false;
    }
    this._touchWasActive = isTouched;
    if (this._touchMoveForward) {
      moveForward = true;
    }
    if (GlobalKeyboardManager.isPressed("Z", "W")) {
      moveForward = true;
    }
    if (GlobalKeyboardManager.isPressed("S")) {
      moveBackward = true;
    }
    if (GlobalKeyboardManager.isPressed("A", "Q")) {
      strafeLeft = true;
    }
    if (GlobalKeyboardManager.isPressed("D")) {
      strafeRight = true;
    }
    if (GlobalKeyboardManager.isPressed("Shift")) {
      isRunning = true;
    }
    if (!fpsControls) {
      if (GlobalKeyboardManager.isPressed("C")) {
        isDiving = true;
      }
      if (GlobalKeyboardManager.isPressed("Space")) {
        isRising = true;
      }
    }
    const currentLinearSpeed = this._movingSpeed * (isRunning ? 4 : 1) * deltaMsTime;
    const currentAngularSpeed = this._keyboardSensibility * deltaMsTime;
    if (GlobalKeyboardManager.isPressed("ArrowUp")) {
      lookDeltaY += currentAngularSpeed;
    } else if (GlobalKeyboardManager.isPressed("ArrowDown")) {
      lookDeltaY -= currentAngularSpeed;
    }
    if (GlobalKeyboardManager.isPressed("ArrowLeft")) {
      lookDeltaX += currentAngularSpeed;
    } else if (GlobalKeyboardManager.isPressed("ArrowRight")) {
      lookDeltaX -= currentAngularSpeed;
    }
    this._theta += lookDeltaX;
    this._phi += lookDeltaY;
    const hPi = Math.PI * 0.5;
    const verticalLimit = hPi * 0.95;
    this._phi = Math.min(Math.max(this._phi, -verticalLimit), +verticalLimit);
    const cosTheta = Math.cos(this._theta);
    const sinTheta = Math.sin(this._theta);
    const [axisX, axisY, axisZ] = this._axisIndices;
    const upRadius = Math.cos(this._phi + hPi);
    this._upAxis[axisX] = upRadius * cosTheta;
    this._upAxis[axisY] = upRadius * sinTheta;
    this._upAxis[axisZ] = Math.sin(this._phi + hPi);
    const forwardRadius = Math.cos(this._phi);
    this._forwardAxis[axisX] = forwardRadius * cosTheta;
    this._forwardAxis[axisY] = forwardRadius * sinTheta;
    this._forwardAxis[axisZ] = Math.sin(this._phi);
    exports_vec3.cross(this._leftAxis, this._upAxis, this._forwardAxis);
    if (fpsControls) {
      this._move_forwardAxis[axisX] = cosTheta;
      this._move_forwardAxis[axisY] = sinTheta;
      this._move_forwardAxis[axisZ] = 0;
      this._move_leftAxis[axisX] = -sinTheta;
      this._move_leftAxis[axisY] = cosTheta;
      this._move_leftAxis[axisZ] = 0;
      this._move_upAxis[axisX] = 0;
      this._move_upAxis[axisY] = 0;
      this._move_upAxis[axisZ] = 1;
    } else {
      exports_vec3.copy(this._move_forwardAxis, this._forwardAxis);
      exports_vec3.copy(this._move_leftAxis, this._leftAxis);
      exports_vec3.copy(this._move_upAxis, this._upAxis);
    }
    const scaledForward = exports_vec3.fromValues(0, 0, 0);
    exports_vec3.scale(scaledForward, this._move_forwardAxis, currentLinearSpeed);
    const scaledLeft = exports_vec3.fromValues(0, 0, 0);
    exports_vec3.scale(scaledLeft, this._move_leftAxis, currentLinearSpeed);
    const scaledUp = exports_vec3.fromValues(0, 0, 0);
    exports_vec3.scale(scaledUp, this._move_upAxis, currentLinearSpeed);
    if (moveForward) {
      exports_vec3.add(this._position, this._position, scaledForward);
    } else if (moveBackward) {
      exports_vec3.sub(this._position, this._position, scaledForward);
    }
    if (strafeLeft) {
      exports_vec3.add(this._position, this._position, scaledLeft);
    } else if (strafeRight) {
      exports_vec3.sub(this._position, this._position, scaledLeft);
    }
    if (isRising) {
      exports_vec3.add(this._position, this._position, scaledUp);
    } else if (isDiving) {
      exports_vec3.sub(this._position, this._position, scaledUp);
    }
    exports_vec3.add(this._target, this._position, this._forwardAxis);
  }
  getPosition() {
    return this._position;
  }
  setPosition(inPos) {
    exports_vec3.copy(this._position, inPos);
    exports_vec3.add(this._target, this._position, this._forwardAxis);
  }
  getTarget() {
    return this._target;
  }
  getUpAxis() {
    return this._upAxis;
  }
  getTheta() {
    return this._theta;
  }
  getPhi() {
    return this._phi;
  }
  getTouchMoveForward() {
    return this._touchMoveForward;
  }
}
// src/local-framework/system/math/index.ts
var exports_math = {};
__export(exports_math, {
  rayCaster: () => {
    {
      return exports_rayCaster;
    }
  },
  rad2Deg: () => {
    {
      return rad2Deg;
    }
  },
  polarCoords: () => {
    {
      return exports_polarCoords;
    }
  },
  lerp: () => {
    {
      return lerp4;
    }
  },
  getEuler: () => {
    {
      return getEuler;
    }
  },
  easing: () => {
    {
      return exports_easing;
    }
  },
  deg2Rad: () => {
    {
      return deg2Rad;
    }
  },
  collisions: () => {
    {
      return exports_collisions;
    }
  },
  clamp: () => {
    {
      return clamp;
    }
  }
});

// src/local-framework/system/math/clamp.ts
var clamp = (currVal, minVal, maxVal) => Math.min(Math.max(currVal, minVal), maxVal);
// src/local-framework/system/math/collisions.ts
var exports_collisions = {};
__export(exports_collisions, {
  intersectSegment: () => {
    {
      return intersectSegment;
    }
  },
  collisionLinesStrip: () => {
    {
      return collisionLinesStrip;
    }
  }
});
var intersectSegment = (A, B, I, P) => {
  const D = exports_vec2.fromValues(0, 0);
  const E = exports_vec2.fromValues(0, 0);
  D[0] = B[0] - A[0];
  D[1] = B[1] - A[1];
  E[0] = P[0] - I[0];
  E[1] = P[1] - I[1];
  const denom = D[0] * E[1] - D[1] * E[0];
  if (denom == 0) {
    return -1;
  }
  const t = -(A[0] * E[1] - I[0] * E[1] - E[0] * A[1] + E[0] * I[1]) / denom;
  if (t < 0 || t >= 1) {
    return 0;
  }
  const u = -(-D[0] * A[1] + D[0] * I[1] + D[1] * A[0] - D[1] * I[0]) / denom;
  if (u < 0 || u >= 1) {
    return 0;
  }
  return 1;
};
var collisionLinesStrip = (tab, P) => {
  const I = exports_vec2.fromValues(0, 0);
  I[0] = 1e4 + Math.random() * 100;
  I[1] = 1e4 + Math.random() * 100;
  let nbIntersections = 0;
  for (let ii = 0;ii < tab.length; ++ii) {
    let jj = (ii + 1) % tab.length;
    const result = intersectSegment(tab[ii], tab[jj], I, P);
    if (result == -1) {
      return collisionLinesStrip(tab, P);
    }
    nbIntersections += result;
  }
  if (nbIntersections % 2 == 1) {
    return true;
  }
  return false;
};
// src/local-framework/system/math/easing.ts
var exports_easing = {};
__export(exports_easing, {
  easePinPong: () => {
    {
      return easePinPong;
    }
  },
  easeOutSine: () => {
    {
      return easeOutSine;
    }
  },
  easeOutQuint: () => {
    {
      return easeOutQuint;
    }
  },
  easeOutQuart: () => {
    {
      return easeOutQuart;
    }
  },
  easeOutQuad: () => {
    {
      return easeOutQuad;
    }
  },
  easeOutExpo: () => {
    {
      return easeOutExpo;
    }
  },
  easeOutElastic: () => {
    {
      return easeOutElastic;
    }
  },
  easeOutCubic: () => {
    {
      return easeOutCubic;
    }
  },
  easeOutCirc: () => {
    {
      return easeOutCirc;
    }
  },
  easeOutBounce: () => {
    {
      return easeOutBounce;
    }
  },
  easeOutBack: () => {
    {
      return easeOutBack;
    }
  },
  easeInSine: () => {
    {
      return easeInSine;
    }
  },
  easeInQuint: () => {
    {
      return easeInQuint;
    }
  },
  easeInQuart: () => {
    {
      return easeInQuart;
    }
  },
  easeInQuad: () => {
    {
      return easeInQuad;
    }
  },
  easeInOutSine: () => {
    {
      return easeInOutSine;
    }
  },
  easeInOutQuint: () => {
    {
      return easeInOutQuint;
    }
  },
  easeInOutQuart: () => {
    {
      return easeInOutQuart;
    }
  },
  easeInOutQuad: () => {
    {
      return easeInOutQuad;
    }
  },
  easeInOutExpo: () => {
    {
      return easeInOutExpo;
    }
  },
  easeInOutElastic: () => {
    {
      return easeInOutElastic;
    }
  },
  easeInOutCubic: () => {
    {
      return easeInOutCubic;
    }
  },
  easeInOutCirc: () => {
    {
      return easeInOutCirc;
    }
  },
  easeInOutBounce: () => {
    {
      return easeInOutBounce;
    }
  },
  easeInOutBack: () => {
    {
      return easeInOutBack;
    }
  },
  easeInExpo: () => {
    {
      return easeInExpo;
    }
  },
  easeInElastic: () => {
    {
      return easeInElastic;
    }
  },
  easeInCubic: () => {
    {
      return easeInCubic;
    }
  },
  easeInCirc: () => {
    {
      return easeInCirc;
    }
  },
  easeInBounce: () => {
    {
      return easeInBounce;
    }
  },
  easeInBack: () => {
    {
      return easeInBack;
    }
  },
  easeClamp: () => {
    {
      return easeClamp;
    }
  }
});
var easeClamp = (t) => {
  if (t > 1) {
    return t - Math.floor(t);
  }
  return t;
};
var easePinPong = (t) => {
  t *= 2;
  if (t < 1)
    return t;
  t -= 1;
  return 1 - t;
};
var easeInSine = (t) => {
  return Math.sin(1.5707963 * t);
};
var easeOutSine = (t) => {
  return 1 + Math.sin(1.5707963 * (t - 1));
};
var easeInOutSine = (t) => {
  return 0.5 * (1 + Math.sin(3.1415926 * (t - 0.5)));
};
var easeInQuad = (t) => {
  return t * t;
};
var easeOutQuad = (t) => {
  return t * (2 - t);
};
var easeInOutQuad = (t) => {
  return t < 0.5 ? 2 * t * t : t * (4 - 2 * t) - 1;
};
var easeInCubic = (t) => {
  return t * t * t;
};
var easeOutCubic = (t) => {
  const t2 = t - 1;
  return 1 + t2 * t2 * t2;
};
var easeInOutCubic = (t) => {
  const t2 = t - 1;
  const t3 = t2 - 1;
  return t < 0.5 ? 4 * t * t * t : 1 + t2 * (2 * t3) * (2 * t3);
};
var easeInQuart = (t) => {
  t *= t;
  return t * t;
};
var easeOutQuart = (t) => {
  const t2 = t - 1;
  t = t2 * t2;
  return 1 - t * t;
};
var easeInOutQuart = (t) => {
  if (t < 0.5) {
    t *= t;
    return 8 * t * t;
  }
  const t2 = t - 1;
  t = t2 * t2;
  return 1 - 8 * t * t;
};
var easeInQuint = (t) => {
  const t2 = t * t;
  return t * t2 * t2;
};
var easeOutQuint = (t) => {
  const tx = t - 1;
  const t2 = tx * tx;
  return 1 + tx * t2 * t2;
};
var easeInOutQuint = (t) => {
  let t2;
  if (t < 0.5) {
    t2 = t * t;
    return 16 * t * t2 * t2;
  }
  const tx = t - 1;
  t2 = tx * tx;
  return 1 + 16 * tx * t2 * t2;
};
var easeInExpo = (t) => {
  return (Math.pow(2, 8 * t) - 1) / 255;
};
var easeOutExpo = (t) => {
  return 1 - Math.pow(2, -8 * t);
};
var easeInOutExpo = (t) => {
  if (t < 0.5)
    return (Math.pow(2, 16 * t) - 1) / 510;
  return 1 - 0.5 * Math.pow(2, -16 * (t - 0.5));
};
var easeInCirc = (t) => {
  return 1 - Math.sqrt(1 - t);
};
var easeOutCirc = (t) => {
  return Math.sqrt(t);
};
var easeInOutCirc = (t) => {
  if (t < 0.5)
    return (1 - Math.sqrt(1 - 2 * t)) * 0.5;
  return (1 + Math.sqrt(2 * t - 1)) * 0.5;
};
var easeInBack = (t) => {
  return t * t * (2.70158 * t - 1.70158);
};
var easeOutBack = (t) => {
  const tx = t - 1;
  return 1 + tx * tx * (2.70158 * tx + 1.70158);
};
var easeInOutBack = (t) => {
  if (t < 0.5)
    return t * t * (7 * t - 2.5) * 2;
  const tx = t - 1;
  return 1 + tx * tx * 2 * (7 * tx + 2.5);
};
var easeInElastic = (t) => {
  const t2 = t * t;
  return t2 * t2 * Math.sin(t * Math.PI * 4.5);
};
var easeOutElastic = (t) => {
  const t2 = (t - 1) * (t - 1);
  return 1 - t2 * t2 * Math.cos(t * Math.PI * 4.5);
};
var easeInOutElastic = (t) => {
  let t2;
  if (t < 0.45) {
    t2 = t * t;
    return 8 * t2 * t2 * Math.sin(t * Math.PI * 9);
  }
  if (t < 0.55)
    return 0.5 + 0.75 * Math.sin(t * Math.PI * 4);
  t2 = (t - 1) * (t - 1);
  return 1 - 8 * t2 * t2 * Math.sin(t * Math.PI * 9);
};
var easeInBounce = (t) => {
  return Math.pow(2, 6 * (t - 1)) * Math.abs(Math.sin(t * Math.PI * 3.5));
};
var easeOutBounce = (t) => {
  return 1 - Math.pow(2, -6 * t) * Math.abs(Math.cos(t * Math.PI * 3.5));
};
var easeInOutBounce = (t) => {
  if (t < 0.5)
    return 8 * Math.pow(2, 8 * (t - 1)) * Math.abs(Math.sin(t * Math.PI * 7));
  return 1 - 8 * Math.pow(2, -8 * t) * Math.abs(Math.sin(t * Math.PI * 7));
};
// src/local-framework/system/math/lerp.ts
var lerp4 = (ratio, minVal, maxVal) => minVal + (maxVal - minVal) * ratio;
// src/local-framework/system/math/polarCoords.ts
var exports_polarCoords = {};
__export(exports_polarCoords, {
  polar2Cartesian: () => {
    {
      return polar2Cartesian;
    }
  },
  cartesian2Polar: () => {
    {
      return cartesian2Polar;
    }
  }
});
var polar2Cartesian = (lat, lng, relAltitude = 0, globRadius = 100) => {
  const phi = (90 - lat) * Math.PI / 180;
  const theta = (90 - lng) * Math.PI / 180;
  const r = globRadius * (1 + relAltitude);
  return [
    r * Math.sin(phi) * Math.cos(theta),
    r * Math.cos(phi),
    r * Math.sin(phi) * Math.sin(theta)
  ];
};
var cartesian2Polar = (x, y, z, globRadius = 100) => {
  const r = Math.sqrt(x * x + y * y + z * z);
  const phi = Math.acos(y / r);
  const theta = Math.atan2(z, x);
  return {
    lat: 90 - phi * 180 / Math.PI,
    lng: 90 - theta * 180 / Math.PI - (theta < -Math.PI / 2 ? 360 : 0),
    altitude: r / globRadius - 1
  };
};
// src/local-framework/system/math/rayCaster.ts
var exports_rayCaster = {};
__export(exports_rayCaster, {
  intersectRaySphere: () => {
    {
      return intersectRaySphere;
    }
  }
});
var intersectRaySphere = (pos, dir, center, radius) => {
  const m = exports_vec3.sub(exports_vec3.create(), pos, center);
  const b = exports_vec3.dot(m, dir);
  const c = exports_vec3.dot(m, m) - radius * radius;
  if (c > 0 && b > 0) {
    return null;
  }
  const discr = b * b - c;
  if (discr < 0) {
    return null;
  }
  let t = -b - Math.sqrt(discr);
  if (t < 0) {
    t = 0;
  }
  return exports_vec3.fromValues(pos[0] + t * dir[0], pos[1] + t * dir[1], pos[2] + t * dir[2]);
};
// src/local-framework/system/metrics/index.ts
var exports_metrics = {};
__export(exports_metrics, {
  FrameProfiler: () => {
    {
      return FrameProfiler;
    }
  }
});

// src/local-framework/system/metrics/FrameProfiler.ts
class FrameProfiler {
  _framesDelta = [];
  _averageDelta = 0;
  _minDelta = 0;
  _maxDelta = 0;
  pushDelta(inDelta) {
    if (this._framesDelta.length >= 100) {
      this._framesDelta.shift();
    }
    this._framesDelta.push(inDelta);
    this._minDelta = 999999999;
    this._maxDelta = -999999999;
    this._averageDelta = 0;
    for (const currDelta of this._framesDelta) {
      this._minDelta = Math.min(this._minDelta, currDelta);
      this._maxDelta = Math.max(this._maxDelta, currDelta);
      this._averageDelta += currDelta;
    }
    this._averageDelta /= this._framesDelta.length;
  }
  get framesDelta() {
    return this._framesDelta;
  }
  get averageDelta() {
    return this._averageDelta;
  }
  get minDelta() {
    return this._minDelta;
  }
  get maxDelta() {
    return this._maxDelta;
  }
}
// src/local-framework/system/utilities/index.ts
var exports_utilities = {};
__export(exports_utilities, {
  FetchHelpers: () => {
    {
      return exports_FetchHelpers;
    }
  },
  AsyncHelpers: () => {
    {
      return exports_AsyncHelpers;
    }
  }
});

// src/local-framework/system/utilities/FetchHelpers.ts
var exports_FetchHelpers = {};
__export(exports_FetchHelpers, {
  progressFetch: () => {
    {
      return progressFetch;
    }
  }
});
var progressFetch = async (url, onProgress) => {
  const response = await fetch(url);
  const reader = response.body.getReader();
  let totalProgress = 0;
  const stream = new ReadableStream({
    start(controller) {
      return pump();
      function pump() {
        return reader.read().then(({ done, value }) => {
          if (done) {
            controller.close();
            return;
          }
          if (onProgress) {
            totalProgress += value.length;
            onProgress(totalProgress);
          }
          controller.enqueue(value);
          return pump();
        });
      }
    }
  });
  await stream;
  return new Response(stream);
};
// src/local-framework/system/utilities/AsyncHelpers.ts
var exports_AsyncHelpers = {};
__export(exports_AsyncHelpers, {
  sleep: () => {
    {
      return sleep;
    }
  },
  cancellableSleep: () => {
    {
      return cancellableSleep;
    }
  }
});
var sleep = async (delay) => {
  await new Promise((resolve) => setTimeout(resolve, delay));
};
var cancellableSleep = (delay) => {
  let timeoutHandle = -1;
  let resolveCallback = undefined;
  const promise = new Promise((resolve) => {
    resolveCallback = resolve;
    timeoutHandle = window.setTimeout(resolve, delay);
  });
  return {
    promise,
    cancel: () => {
      if (timeoutHandle >= 0) {
        window.clearTimeout(timeoutHandle);
      }
      if (resolveCallback) {
        resolveCallback();
      }
    }
  };
};
// src/local-framework/system/rng/index.ts
var exports_rng = {};
__export(exports_rng, {
  DeterministicRng: () => {
    {
      return DeterministicRng;
    }
  }
});

// src/local-framework/system/rng/DeterministicRng.ts
var RAND_MAX = 2147483648 | 0;

class DeterministicRng {
  _seed = 1 | 0;
  random() {
    if (this._seed == 0) {
      this._seed = 123459876 | 0;
    }
    const hi = this._seed / 127773 | 0;
    const lo = this._seed % 127773 | 0;
    let x = 16807 * lo - 2836 * hi | 0;
    if (x < 0) {
      x += 2147483647 | 0;
    }
    this._seed = x;
    return x % (RAND_MAX + 1) / -RAND_MAX;
  }
  setSeed(inSeed) {
    this._seed = inSeed | 0;
  }
}
// src/local-framework/graphics/index.ts
var exports_graphics = {};
__export(exports_graphics, {
  webgl2: () => {
    {
      return exports_webgl2;
    }
  },
  renderers: () => {
    {
      return exports_renderers;
    }
  },
  images: () => {
    {
      return exports_images;
    }
  },
  geometries: () => {
    {
      return exports_geometries;
    }
  },
  camera: () => {
    {
      return exports_camera;
    }
  }
});

// src/local-framework/graphics/camera/index.ts
var exports_camera = {};
__export(exports_camera, {
  screenToSceneCoordinatesFromInvComposed: () => {
    {
      return screenToSceneCoordinatesFromInvComposed;
    }
  },
  screenToSceneCoordinatesFromComposed: () => {
    {
      return screenToSceneCoordinatesFromComposed;
    }
  },
  screenToSceneCoordinates: () => {
    {
      return screenToSceneCoordinates;
    }
  },
  sceneToScreenCoordsFromComposed: () => {
    {
      return sceneToScreenCoordsFromComposed;
    }
  },
  sceneToScreenCoordinates: () => {
    {
      return sceneToScreenCoordinates;
    }
  },
  FrustumCulling: () => {
    {
      return FrustumCulling;
    }
  },
  Camera: () => {
    {
      return Camera;
    }
  }
});

// src/local-framework/graphics/camera/Camera.ts
var ProjectionType;
(function(ProjectionType2) {
  ProjectionType2[ProjectionType2["perspective"] = 0] = "perspective";
  ProjectionType2[ProjectionType2["orthogonal"] = 1] = "orthogonal";
})(ProjectionType || (ProjectionType = {}));

class Camera {
  _projectionType = ProjectionType.perspective;
  _perspectiveData;
  _orthogonalData;
  _viewportPos = exports_vec2.fromValues(0, 0);
  _viewportSize = exports_vec2.fromValues(0, 0);
  _projectionMatrix = exports_mat4.create();
  _viewMatrix = exports_mat4.create();
  _composedMatrix = exports_mat4.create();
  _eye = exports_vec3.fromValues(0, 0, 0);
  _target = exports_vec3.fromValues(0, 0, 0);
  _upAxis = exports_vec3.fromValues(0, 0, 0);
  setAsPerspective(inData) {
    this._projectionType = ProjectionType.perspective;
    let aspectRatio = inData.aspectRatio;
    if (aspectRatio === undefined) {
      aspectRatio = this._viewportSize[0] / this._viewportSize[1];
    }
    this._perspectiveData = {
      fovy: inData.fovy,
      aspectRatio,
      near: inData.near,
      far: inData.far
    };
  }
  setAsOrthogonal(inData) {
    this._projectionType = ProjectionType.orthogonal;
    this._orthogonalData = { ...inData };
  }
  setViewportPos(width, height) {
    this._viewportPos[0] = width;
    this._viewportPos[1] = height;
  }
  getViewportPos() {
    return this._viewportPos;
  }
  setViewportSize(width, height) {
    this._viewportSize[0] = width;
    this._viewportSize[1] = height;
    if (this._projectionType !== ProjectionType.perspective && this._perspectiveData) {
      this._perspectiveData.aspectRatio = this._viewportSize[0] / this._viewportSize[1];
    }
  }
  getViewportSize() {
    return this._viewportSize;
  }
  lookAt(inEye, inTarget, inUpAxis) {
    this.setEye(inEye);
    this.setTarget(inTarget);
    this.setUpAxis(inUpAxis);
  }
  setEye(inEye) {
    exports_vec3.copy(this._eye, inEye);
  }
  setTarget(inTarget) {
    exports_vec3.copy(this._target, inTarget);
  }
  setUpAxis(inUpAxis) {
    exports_vec3.copy(this._upAxis, inUpAxis);
  }
  getEye() {
    return this._eye;
  }
  getTarget() {
    return this._target;
  }
  getUpAxis() {
    return this._upAxis;
  }
  computeMatrices() {
    if (this._projectionType === ProjectionType.perspective) {
      const { fovy, aspectRatio, near, far } = this._perspectiveData;
      exports_mat4.perspective(this._projectionMatrix, deg2Rad(fovy), aspectRatio, near, far);
    } else if (this._projectionType === ProjectionType.orthogonal) {
      const { left, right, top, bottom, near, far } = this._orthogonalData;
      exports_mat4.ortho(this._projectionMatrix, left, right, top, bottom, near, far);
    }
    exports_mat4.lookAt(this._viewMatrix, this._eye, this._target, this._upAxis);
    this.computeComposedMatrix();
  }
  computeComposedMatrix() {
    exports_mat4.multiply(this._composedMatrix, this._projectionMatrix, this._viewMatrix);
  }
  setProjectionMatrix(inMat4) {
    exports_mat4.copy(this._projectionMatrix, inMat4);
  }
  setViewMatrix(inMat4) {
    exports_mat4.copy(this._viewMatrix, inMat4);
  }
  setComposedMatrix(inMat4) {
    exports_mat4.copy(this._composedMatrix, inMat4);
  }
  getProjectionMatrix() {
    return this._projectionMatrix;
  }
  getViewMatrix() {
    return this._viewMatrix;
  }
  getComposedMatrix() {
    return this._composedMatrix;
  }
  getPerspectiveData() {
    if (this._projectionType !== ProjectionType.perspective) {
      throw new Error("not a perspective projection");
    }
    return this._perspectiveData;
  }
  getOrthogonalData() {
    if (this._projectionType !== ProjectionType.orthogonal) {
      throw new Error("not an orthogonal projection");
    }
    return this._orthogonalData;
  }
}
// src/local-framework/graphics/camera/FrustumCulling.ts
var FrustumSide;
(function(FrustumSide2) {
  FrustumSide2[FrustumSide2["Right"] = 0] = "Right";
  FrustumSide2[FrustumSide2["Left"] = 1] = "Left";
  FrustumSide2[FrustumSide2["Bottom"] = 2] = "Bottom";
  FrustumSide2[FrustumSide2["Top"] = 3] = "Top";
  FrustumSide2[FrustumSide2["Back"] = 4] = "Back";
  FrustumSide2[FrustumSide2["Front"] = 5] = "Front";
})(FrustumSide || (FrustumSide = {}));

class FrustumCulling {
  _frustum = new Float32Array(24);
  _setPlane(side, left, right, coef) {
    const index = side * 4;
    this._frustum[index + 0] = left[0] + right[0] * coef;
    this._frustum[index + 1] = left[1] + right[1] * coef;
    this._frustum[index + 2] = left[2] + right[2] * coef;
    this._frustum[index + 3] = left[3] + right[3] * coef;
    const magnitude = Math.sqrt(this._frustum[index + 0] * this._frustum[index + 0] + this._frustum[index + 1] * this._frustum[index + 1] + this._frustum[index + 2] * this._frustum[index + 2]);
    if (magnitude === 0)
      return;
    this._frustum[index + 0] /= magnitude;
    this._frustum[index + 1] /= magnitude;
    this._frustum[index + 2] /= magnitude;
    this._frustum[index + 3] /= magnitude;
  }
  calculateFrustum(proj, view) {
    const clip = exports_mat4.multiply(exports_mat4.create(), proj, view);
    const row0 = exports_vec4.fromValues(clip[0], clip[4], clip[8], clip[12]);
    const row1 = exports_vec4.fromValues(clip[1], clip[5], clip[9], clip[13]);
    const row2 = exports_vec4.fromValues(clip[2], clip[6], clip[10], clip[14]);
    const row3 = exports_vec4.fromValues(clip[3], clip[7], clip[11], clip[15]);
    this._setPlane(FrustumSide.Right, row3, row0, -1);
    this._setPlane(FrustumSide.Left, row3, row0, 1);
    this._setPlane(FrustumSide.Bottom, row3, row1, 1);
    this._setPlane(FrustumSide.Top, row3, row1, -1);
    this._setPlane(FrustumSide.Back, row3, row2, -1);
    this._setPlane(FrustumSide.Front, row3, row2, 1);
  }
  sphereInFrustum(x, y, z, radius) {
    for (let ii = 0;ii < 6; ++ii) {
      const index = ii * 4;
      if (this._frustum[index + 0] * x + this._frustum[index + 1] * y + this._frustum[index + 2] * z + this._frustum[index + 3] <= -radius) {
        return false;
      }
    }
    return true;
  }
  pointInFrustum(x, y, z) {
    return this.sphereInFrustum(x, y, z, 0);
  }
  cubeInFrustumVec3(center, inSize) {
    return this.cubeInFrustum(center[0], center[1], center[2], inSize);
  }
  cubeInFrustum(inX, inY, inZ, inSize) {
    const hSize = inSize * 0.5;
    const minX = inX - hSize;
    const minY = inY - hSize;
    const minZ = inZ - hSize;
    const maxX = inX + hSize;
    const maxY = inY + hSize;
    const maxZ = inZ + hSize;
    for (let ii = 0;ii < 6; ++ii) {
      const index = ii * 4;
      const planA = this._frustum[index + 0];
      const planB = this._frustum[index + 1];
      const planC = this._frustum[index + 2];
      const planD = this._frustum[index + 3];
      if (planA * minX + planB * minY + planC * minZ + planD > 0 || planA * maxX + planB * minY + planC * minZ + planD > 0 || planA * minX + planB * maxY + planC * minZ + planD > 0 || planA * maxX + planB * maxY + planC * minZ + planD > 0 || planA * minX + planB * minY + planC * maxZ + planD > 0 || planA * maxX + planB * minY + planC * maxZ + planD > 0 || planA * minX + planB * maxY + planC * maxZ + planD > 0 || planA * maxX + planB * maxY + planC * maxZ + planD > 0) {
        continue;
      }
      return false;
    }
    return true;
  }
}
// src/local-framework/graphics/camera/sceneToScreenCoordinates.ts
var sceneToScreenCoordinates = (scenePos, modelView, projection, viewport) => {
  const composedMatrix = exports_mat4.create();
  exports_mat4.multiply(composedMatrix, projection, modelView);
  return sceneToScreenCoordsFromComposed(scenePos, composedMatrix, viewport);
};
var sceneToScreenCoordsFromComposed = (allScenePos, composedMatrix, viewport) => {
  const inputVec4 = exports_vec4.create();
  const multipliedVec4 = exports_vec4.create();
  const results = [];
  allScenePos.forEach((scenePos) => {
    inputVec4[0] = scenePos[0];
    inputVec4[1] = scenePos[1];
    inputVec4[2] = scenePos[2];
    inputVec4[3] = 1;
    exports_vec4.transformMat4(multipliedVec4, inputVec4, composedMatrix);
    if (multipliedVec4[3] === 0) {
      return null;
    }
    multipliedVec4[3] = 1 / multipliedVec4[3];
    multipliedVec4[0] *= multipliedVec4[3];
    multipliedVec4[1] *= multipliedVec4[3];
    multipliedVec4[2] *= multipliedVec4[3];
    multipliedVec4[0] = (multipliedVec4[0] * 0.5 + 0.5) * viewport[2] + viewport[0], multipliedVec4[1] = (multipliedVec4[1] * 0.5 + 0.5) * viewport[3] + viewport[1];
    results.push(exports_vec3.copy(exports_vec3.create(), multipliedVec4));
  });
  return results;
};
// src/local-framework/graphics/camera/screenToSceneCoordinates.ts
var screenToSceneCoordinates = (allScreenPos, modelView, projection, viewport) => {
  const composedMatrix = exports_mat4.multiply(exports_mat4.create(), projection, modelView);
  return screenToSceneCoordinatesFromComposed(allScreenPos, composedMatrix, viewport);
};
var screenToSceneCoordinatesFromComposed = (allScreenPos, composedMatrix, viewport) => {
  const invertedComposedMatrix = exports_mat4.invert(exports_mat4.create(), composedMatrix);
  return screenToSceneCoordinatesFromInvComposed(allScreenPos, invertedComposedMatrix, viewport);
};
var screenToSceneCoordinatesFromInvComposed = (allScreenPos, invertedComposedMatrix, viewport) => {
  const results = [];
  const multipliedVec4 = exports_vec4.create();
  allScreenPos.forEach((screenPos) => {
    multipliedVec4[0] = (screenPos[0] - viewport[0]) / viewport[2] * 2 - 1;
    multipliedVec4[1] = (screenPos[1] - viewport[1]) / viewport[3] * 2 - 1;
    multipliedVec4[2] = 2 * screenPos[2] - 1;
    multipliedVec4[3] = 1;
    exports_vec4.transformMat4(multipliedVec4, multipliedVec4, invertedComposedMatrix);
    if (multipliedVec4[3] === 0) {
      return;
    }
    multipliedVec4[3] = 1 / multipliedVec4[3];
    multipliedVec4[0] *= multipliedVec4[3];
    multipliedVec4[1] *= multipliedVec4[3];
    multipliedVec4[2] *= multipliedVec4[3];
    results.push(exports_vec3.copy(exports_vec3.create(), multipliedVec4));
  });
  return results;
};
// src/local-framework/graphics/renderers/index.ts
var exports_renderers = {};
__export(exports_renderers, {
  widgets: () => {
    {
      return exports_widgets;
    }
  },
  TextRenderer: () => {
    {
      return TextRenderer;
    }
  },
  StackRenderers: () => {
    {
      return StackRenderers;
    }
  },
  MultiBuffersRendering: () => {
    {
      return MultiBuffersRendering;
    }
  },
  GeometryRendererFlat: () => {
    {
      return GeometryRendererFlat;
    }
  },
  GeometryRenderer: () => {
    {
      return GeometryRenderer;
    }
  }
});

// src/local-framework/graphics/webgl2/index.ts
var exports_webgl2 = {};
__export(exports_webgl2, {
  getCubeMapType: () => {
    {
      return getCubeMapType;
    }
  },
  checkError: () => {
    {
      return checkError;
    }
  },
  WebGLContext: () => {
    {
      return WebGLContext;
    }
  },
  TextureRepeat: () => {
    {
      return TextureRepeat;
    }
  },
  TextureFilter: () => {
    {
      return TextureFilter;
    }
  },
  TextureArray: () => {
    {
      return TextureArray;
    }
  },
  Texture: () => {
    {
      return Texture;
    }
  },
  ShaderProgram: () => {
    {
      return ShaderProgram;
    }
  },
  RenderBuffer: () => {
    {
      return RenderBuffer;
    }
  },
  GeometryWrapper: () => {
    {
      return exports_GeometryWrapper;
    }
  },
  FrameBuffer: () => {
    {
      return FrameBuffer;
    }
  },
  FenceSync: () => {
    {
      return FenceSync;
    }
  },
  DataTextureVec4: () => {
    {
      return DataTextureVec4;
    }
  },
  DataTexture: () => {
    {
      return DataTexture;
    }
  },
  CubeMapType: () => {
    {
      return CubeMapType;
    }
  },
  CubeMap: () => {
    {
      return CubeMap;
    }
  }
});

// src/local-framework/graphics/webgl2/WebGLContext.ts
class WebGLContext {
  static _gl = null;
  static _extensionLoseContext = null;
  static initialize(canvas) {
    const renderingContextAttribs = {
      alpha: false,
      antialias: false,
      depth: true,
      failIfMajorPerformanceCaveat: false,
      powerPreference: "high-performance",
      premultipliedAlpha: true,
      preserveDrawingBuffer: true,
      stencil: false
    };
    WebGLContext._gl = canvas.getContext("webgl2", renderingContextAttribs);
    if (!WebGLContext._gl)
      throw new Error("could not create webgl context");
    WebGLContext._extensionLoseContext = WebGLContext._gl.getExtension("WEBGL_lose_context");
    WebGLContext._gl.getExtension("EXT_color_buffer_float");
    WebGLContext._gl.getExtension("EXT_float_blend");
  }
  static getContext() {
    if (!WebGLContext._gl) {
      throw new Error("webgl context not initialized");
    }
    return WebGLContext._gl;
  }
  static getExtensionLoseContext() {
    return WebGLContext._extensionLoseContext;
  }
  static getExtensionLoseContextStrict() {
    if (!WebGLContext._extensionLoseContext) {
      throw new Error("lose context extension not available");
    }
    return WebGLContext._extensionLoseContext;
  }
}

// src/local-framework/graphics/webgl2/CubeMap.ts
var CubeMapType;
(function(CubeMapType2) {
  CubeMapType2[CubeMapType2["positiveX"] = 0] = "positiveX";
  CubeMapType2[CubeMapType2["negativeX"] = 1] = "negativeX";
  CubeMapType2[CubeMapType2["positiveY"] = 2] = "positiveY";
  CubeMapType2[CubeMapType2["negativeY"] = 3] = "negativeY";
  CubeMapType2[CubeMapType2["positiveZ"] = 4] = "positiveZ";
  CubeMapType2[CubeMapType2["negativeZ"] = 5] = "negativeZ";
})(CubeMapType || (CubeMapType = {}));
var getCubeMapType = (inType) => {
  const gl = WebGLContext.getContext();
  switch (inType) {
    case CubeMapType.positiveX:
      return gl.TEXTURE_CUBE_MAP_POSITIVE_X;
    case CubeMapType.negativeX:
      return gl.TEXTURE_CUBE_MAP_NEGATIVE_X;
    case CubeMapType.positiveY:
      return gl.TEXTURE_CUBE_MAP_POSITIVE_Y;
    case CubeMapType.negativeY:
      return gl.TEXTURE_CUBE_MAP_NEGATIVE_Y;
    case CubeMapType.positiveZ:
      return gl.TEXTURE_CUBE_MAP_POSITIVE_Z;
    case CubeMapType.negativeZ:
      return gl.TEXTURE_CUBE_MAP_NEGATIVE_Z;
  }
};

class CubeMap {
  _width = 0;
  _height = 0;
  _minBufferSize = 0;
  _texture = null;
  initialize(width, height) {
    if (width < 1)
      throw new Error(`cube map: width is < 1, input: ${width}`);
    if (height < 1)
      throw new Error(`cube map: height is < 1, input: ${height}`);
    const gl = WebGLContext.getContext();
    this._texture = gl.createTexture();
    this._width = width;
    this._height = height;
    this._minBufferSize = this._width * this._height * 4;
  }
  dispose() {
    const gl = WebGLContext.getContext();
    gl.deleteTexture(this._texture);
  }
  rawBind() {
    if (!this._texture)
      throw new Error("cube map: not initialized");
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_CUBE_MAP, this._texture);
  }
  bind(inCallback) {
    this.rawBind();
    inCallback(this);
    CubeMap.unbind();
  }
  static unbind() {
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);
  }
  loadFromMemory(inType, inPixels) {
    if (!this._texture)
      throw new Error("cube map: not initialized");
    if (inPixels.length < this._minBufferSize)
      throw new Error(`cube map: miss-matching pixels buffer size, input: ${inPixels.length}`);
    const gl = WebGLContext.getContext();
    const level = 0;
    const internalFormat = gl.RGBA;
    const border = 0;
    const srcFormat = gl.RGBA;
    const srcType = gl.UNSIGNED_BYTE;
    gl.texImage2D(getCubeMapType(inType), level, internalFormat, this._width, this._height, border, srcFormat, srcType, inPixels);
  }
  allocate() {
    const gl = WebGLContext.getContext();
    const level = 0;
    const internalFormat = gl.RGBA;
    const border = 0;
    const srcFormat = gl.RGBA;
    const srcType = gl.UNSIGNED_BYTE;
    const pixels = new Uint8Array(this._width * this._height * 4);
    [
      CubeMapType.negativeX,
      CubeMapType.negativeY,
      CubeMapType.negativeZ,
      CubeMapType.positiveX,
      CubeMapType.positiveY,
      CubeMapType.positiveZ
    ].forEach((type) => {
      gl.texImage2D(getCubeMapType(type), level, internalFormat, this._width, this._height, border, srcFormat, srcType, pixels);
    });
  }
  complete() {
    const gl = WebGLContext.getContext();
    gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
  }
  getWidth() {
    if (!this._texture)
      throw new Error("cube map: not initialized");
    return this._width;
  }
  getHeight() {
    if (!this._texture)
      throw new Error("cube map: not initialized");
    return this._height;
  }
  getRawObject() {
    if (!this._texture)
      throw new Error("texture not initialized");
    return this._texture;
  }
}
// src/local-framework/graphics/webgl2/DataTexture.ts
class DataTexture {
  _texture = null;
  _buffer;
  initialize(data) {
    if (this._texture) {
      throw new Error("data texture already initialized");
    }
    const gl = WebGLContext.getContext();
    this._texture = gl.createTexture();
    if (!this._texture) {
      throw new Error("data texture failed to be created");
    }
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    this.allocate(data);
  }
  dispose() {
    const gl = WebGLContext.getContext();
    gl.deleteTexture(this._texture);
  }
  allocate(data) {
    if (!this._texture) {
      throw new Error("data texture not initialized");
    }
    const dataSize = Array.isArray(data) ? data.length : data;
    if (dataSize <= 0) {
      throw new Error("texture: width must be positive");
    }
    if (dataSize > 2048) {
      throw new Error(`data texture max size is 2048 (input was ${dataSize})`);
    }
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
    if (Array.isArray(data)) {
      this._buffer = new Float32Array(data);
    } else {
      this._buffer = new Float32Array(data);
    }
    const level = 0;
    const internalFormat = gl.R32F;
    const width = dataSize;
    const height = 1;
    const border = 0;
    const format = gl.RED;
    const type = gl.FLOAT;
    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, format, type, this._buffer);
  }
  update(start, data) {
    if (!this._texture) {
      throw new Error("data texture not initialized");
    }
    if (!this._buffer) {
      throw new Error("data texture update but not previously allocated");
    }
    if (start + data.length > this._buffer.length) {
      throw new Error(`data texture update but size is larger (start: ${start}, length: ${data.length}, max: ${this._buffer.length})`);
    }
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
    for (let ii = 0;ii < data.length; ++ii) {
      this._buffer[ii] = data[ii];
    }
    const level = 0;
    const width = data.length;
    const height = 1;
    const format = gl.RED;
    const type = gl.FLOAT;
    const xoffset = start;
    const yoffset = 0;
    const srcOffset = 0;
    gl.texSubImage2D(gl.TEXTURE_2D, level, xoffset, yoffset, width, height, format, type, this._buffer, srcOffset);
  }
  rawBind() {
    if (!this._texture) {
      throw new Error("data texture not initialized");
    }
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
  }
  preBind(inCallback) {
    this.rawBind();
    inCallback(this);
  }
  bind(inCallback) {
    this.preBind(inCallback);
    DataTexture.unbind();
  }
  static unbind() {
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, null);
  }
}
// src/local-framework/graphics/webgl2/DataTextureVec4.ts
class DataTextureVec4 {
  _texture = null;
  _buffer;
  initialize(data = []) {
    if (this._texture) {
      throw new Error("data texture already initialized");
    }
    const gl = WebGLContext.getContext();
    this._texture = gl.createTexture();
    if (!this._texture) {
      throw new Error("data texture failed to be created");
    }
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    this.allocate(data);
  }
  dispose() {
    const gl = WebGLContext.getContext();
    gl.deleteTexture(this._texture);
  }
  allocate(data) {
    if (!this._texture) {
      throw new Error("data texture not initialized");
    }
    if (data.length <= 0) {
      throw new Error("texture: width must be positive");
    }
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
    this._buffer = new Uint8Array(data.flat());
    const level = 0;
    const internalFormat = gl.RGBA;
    const width = data.length;
    const height = 1;
    const border = 0;
    const format = gl.RGBA;
    const type = gl.UNSIGNED_BYTE;
    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border, format, type, this._buffer);
  }
  update(start, data) {
    if (!this._texture) {
      throw new Error("data texture not initialized");
    }
    if (!this._buffer) {
      throw new Error("data texture update but not previously allocated");
    }
    if (start + data.length > this._buffer.length) {
      throw new Error(`data texture update but size is larger (start: ${start}, length: ${data.length}, max: ${this._buffer.length})`);
    }
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
    for (let ii = 0;ii < data.length; ++ii) {
      this._buffer[ii * 4 + 0] = data[ii][0];
      this._buffer[ii * 4 + 1] = data[ii][1];
      this._buffer[ii * 4 + 2] = data[ii][2];
      this._buffer[ii * 4 + 3] = data[ii][3];
    }
    const level = 0;
    const width = data.length;
    const height = 1;
    const format = gl.RGBA;
    const type = gl.UNSIGNED_BYTE;
    const xoffset = start;
    const yoffset = 0;
    const srcOffset = 0;
    gl.texSubImage2D(gl.TEXTURE_2D, level, xoffset, yoffset, width, height, format, type, this._buffer, srcOffset);
  }
  rawBind() {
    if (!this._texture) {
      throw new Error("data texture not initialized");
    }
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
  }
  preBind(inCallback) {
    this.rawBind();
    inCallback(this);
  }
  bind(inCallback) {
    this.preBind(inCallback);
    DataTextureVec4.unbind();
  }
  static unbind() {
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, null);
  }
}
// src/local-framework/graphics/webgl2/Error.ts
var checkError = () => {
  const gl = WebGLContext.getContext();
  const errorId = gl.getError();
  switch (errorId) {
    case gl.INVALID_ENUM:
      throw new Error("gl.INVALID_ENUM\nAn unacceptable value is specified for an enumerated argument. The offending command is ignored and has no other side effect than to set the error flag.");
    case gl.INVALID_VALUE:
      throw new Error("gl.INVALID_VALUE\nA numeric argument is out of range. The offending command is ignored and has no other side effect than to set the error flag.");
    case gl.INVALID_OPERATION:
      throw new Error("gl.INVALID_OPERATION\nThe specified operation is not allowed in the current state. The offending command is ignored and has no other side effect than to set the error flag.");
    case gl.INVALID_FRAMEBUFFER_OPERATION:
      throw new Error("gl.INVALID_FRAMEBUFFER_OPERATION\nThe framebuffer object is not complete. The offending command is ignored and has no other side effect than to set the error flag.");
    case gl.OUT_OF_MEMORY:
      throw new Error("gl.OUT_OF_MEMORY\nThere is not enough memory left to execute the command. The state of the GL is undefined, except for the state of the error flags, after this error is recorded.");
    case gl.CONTEXT_LOST_WEBGL:
      throw new Error("gl.CONTEXT_LOST_WEBGL\n If the WebGL context is lost, this error is returned on the first call to getError. Afterwards and until the context has been restored, it returns gl.NO_ERROR.");
  }
};
// src/local-framework/graphics/webgl2/Fence.ts
class FenceSync {
  _sync;
  constructor() {
  }
  dispose() {
    if (!this._sync) {
      return;
    }
    const gl = WebGLContext.getContext();
    gl.deleteSync(this._sync);
    this._sync = undefined;
  }
  isStarted() {
    return this._sync !== undefined;
  }
  start() {
    if (this._sync) {
      this.dispose();
    }
    const gl = WebGLContext.getContext();
    const tmpSync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);
    if (tmpSync === null) {
      throw new Error("could not create a webgl fence");
    }
    this._sync = tmpSync;
    gl.flush();
    gl.finish();
  }
  isSignaled() {
    if (!this._sync) {
      throw new Error("fence not started");
    }
    const gl = WebGLContext.getContext();
    const signaled = gl.getSyncParameter(this._sync, gl.SYNC_STATUS);
    return signaled === gl.SIGNALED;
  }
  wait(timeoutNanoSec) {
    if (!this._sync) {
      throw new Error("fence not started");
    }
    const gl = WebGLContext.getContext();
    const bitflags = 0;
    const status = gl.clientWaitSync(this._sync, bitflags, timeoutNanoSec);
    switch (status) {
      case gl.TIMEOUT_EXPIRED:
        return "timed-out";
      case gl.WAIT_FAILED:
        console.warn("fence.wait -> should never get here");
        this.dispose();
        return "done";
      case gl.ALREADY_SIGNALED:
      case gl.CONDITION_SATISFIED:
      default:
        this.dispose();
        return "done";
    }
  }
}
// src/local-framework/graphics/webgl2/FrameBuffer.ts
class FrameBuffer {
  _frameBuffer;
  constructor() {
    const gl = WebGLContext.getContext();
    const tmpFbo = gl.createFramebuffer();
    if (tmpFbo === null)
      throw new Error("null frame buffer object");
    this._frameBuffer = tmpFbo;
  }
  dispose() {
    const gl = WebGLContext.getContext();
    gl.deleteFramebuffer(this._frameBuffer);
  }
  rawBind() {
    const gl = WebGLContext.getContext();
    gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);
  }
  bind(inCallback) {
    this.rawBind();
    inCallback(this);
    FrameBuffer.unbind();
  }
  static unbind() {
    const gl = WebGLContext.getContext();
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  }
  attachTexture(texture) {
    const gl = WebGLContext.getContext();
    const mipmapLevel = 0;
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture.getRawObject(), mipmapLevel);
  }
  attachDepthTexture(texture) {
    const gl = WebGLContext.getContext();
    const mipmapLevel = 0;
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, texture.getRawObject(), mipmapLevel);
  }
  attachRenderBuffer(texture) {
    const gl = WebGLContext.getContext();
    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, texture.getRawObject());
  }
  attachCubeMap(texture, type) {
    const gl = WebGLContext.getContext();
    const mipmapLevel = 0;
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, getCubeMapType(type), texture.getRawObject(), mipmapLevel);
  }
  getPixels(x, y, width, height, outDst) {
    const gl = WebGLContext.getContext();
    gl.readPixels(x, y, width, height, gl.RGBA, gl.UNSIGNED_BYTE, outDst);
  }
}
// src/local-framework/graphics/webgl2/GeometryWrapper.ts
var exports_GeometryWrapper = {};
__export(exports_GeometryWrapper, {
  PrimitiveType: () => {
    {
      return PrimitiveType;
    }
  },
  GeometryBuilder: () => {
    {
      return GeometryBuilder;
    }
  },
  Geometry: () => {
    {
      return Geometry;
    }
  },
  BytesPerPixel: () => {
    {
      return BytesPerPixel;
    }
  },
  AttributeType: () => {
    {
      return AttributeType;
    }
  }
});
var BytesPerPixel = 4;
var AttributeType;
(function(AttributeType2) {
  AttributeType2[AttributeType2["float"] = 0] = "float";
  AttributeType2[AttributeType2["vec2f"] = 1] = "vec2f";
  AttributeType2[AttributeType2["vec3f"] = 2] = "vec3f";
  AttributeType2[AttributeType2["vec4f"] = 3] = "vec4f";
  AttributeType2[AttributeType2["mat3f"] = 4] = "mat3f";
  AttributeType2[AttributeType2["mat4f"] = 5] = "mat4f";
})(AttributeType || (AttributeType = {}));
var getAttrTypeSize = (inType) => {
  switch (inType) {
    case AttributeType.float:
      return 1;
    case AttributeType.vec2f:
      return 2;
    case AttributeType.vec3f:
      return 3;
    case AttributeType.vec4f:
      return 4;
    case AttributeType.mat3f:
      return 9;
    case AttributeType.mat4f:
      return 16;
  }
};
var PrimitiveType;
(function(PrimitiveType2) {
  PrimitiveType2[PrimitiveType2["lines"] = 0] = "lines";
  PrimitiveType2[PrimitiveType2["lineStrip"] = 1] = "lineStrip";
  PrimitiveType2[PrimitiveType2["lineLoop"] = 2] = "lineLoop";
  PrimitiveType2[PrimitiveType2["triangles"] = 3] = "triangles";
  PrimitiveType2[PrimitiveType2["triangleStrip"] = 4] = "triangleStrip";
  PrimitiveType2[PrimitiveType2["triangleFan"] = 5] = "triangleFan";
})(PrimitiveType || (PrimitiveType = {}));
var _ensureFloatBuffer = (vertices) => {
  if (vertices instanceof Float32Array) {
    return vertices;
  }
  return new Float32Array(vertices);
};
var _getBufferUsage = (inMode) => {
  const gl = WebGLContext.getContext();
  if (inMode === "dynamic") {
    return gl.DYNAMIC_DRAW;
  }
  if (inMode === "streaming") {
    return gl.STREAM_DRAW;
  }
  return gl.STATIC_DRAW;
};

class Geometry {
  _def;
  _vao;
  _vbos;
  _primitiveType;
  _primitiveStart = 0;
  _primitiveCount = 0;
  _instanceCount = 0;
  _isInstanced = false;
  constructor(shader, def) {
    const gl = WebGLContext.getContext();
    if (def.vbos.length === 0) {
      throw new Error("empty vbo definition");
    }
    for (const vbo of def.vbos) {
      if (vbo.attrs.length === 0) {
        throw new Error("empty vbo attribute definition");
      }
      for (const attr of vbo.attrs) {
        if (!shader.hasAttribute(attr.name)) {
          throw new Error(`attribute not found, name="${attr.name}"`);
        }
      }
    }
    this._def = def;
    switch (def.primitiveType) {
      case PrimitiveType.lines:
        this._primitiveType = gl.LINES;
        break;
      case PrimitiveType.lineStrip:
        this._primitiveType = gl.LINE_STRIP;
        break;
      case PrimitiveType.lineLoop:
        this._primitiveType = gl.LINE_LOOP;
        break;
      case PrimitiveType.triangles:
        this._primitiveType = gl.TRIANGLES;
        break;
      case PrimitiveType.triangleStrip:
        this._primitiveType = gl.TRIANGLE_STRIP;
        break;
      case PrimitiveType.triangleFan:
        this._primitiveType = gl.TRIANGLE_FAN;
        break;
      default:
        throw new Error("primitive type not found");
    }
    const newVao = gl.createVertexArray();
    if (!newVao) {
      throw new Error("fail o create a vao unit");
    }
    this._vao = newVao;
    gl.bindVertexArray(this._vao);
    this._vbos = [];
    for (const vboDef of this._def.vbos) {
      const newVbo = gl.createBuffer();
      if (!newVbo) {
        throw new Error("fail o create a vbo unit");
      }
      this._vbos.push({
        object: newVbo,
        maxSize: 0,
        mode: vboDef.mode || "static"
      });
      gl.bindBuffer(gl.ARRAY_BUFFER, newVbo);
      let stride = vboDef.stride || 0;
      if (!stride) {
        for (const attr of vboDef.attrs) {
          switch (attr.type) {
            case AttributeType.float:
              stride += 1;
              break;
            case AttributeType.vec2f:
              stride += 2;
              break;
            case AttributeType.vec3f:
              stride += 3;
              break;
            case AttributeType.vec4f:
              stride += 4;
              break;
            case AttributeType.mat3f:
              stride += 9;
              break;
            case AttributeType.mat4f:
              stride += 16;
              break;
          }
        }
        stride *= BytesPerPixel;
      }
      for (const attr of vboDef.attrs) {
        let rowSize = 1;
        let totalRows = 1;
        switch (attr.type) {
          case AttributeType.float:
            rowSize = 1;
            totalRows = 1;
            break;
          case AttributeType.vec2f:
            rowSize = 2;
            totalRows = 1;
            break;
          case AttributeType.vec3f:
            rowSize = 3;
            totalRows = 1;
            break;
          case AttributeType.vec4f:
            rowSize = 4;
            totalRows = 1;
            break;
          case AttributeType.mat3f:
            rowSize = 3;
            totalRows = 3;
            break;
          case AttributeType.mat4f:
            rowSize = 4;
            totalRows = 4;
            break;
        }
        const attrLocation = shader.getAttribute(attr.name);
        for (let ii = 0;ii < totalRows; ++ii) {
          const attrId = attrLocation + ii;
          const rowIndex = (attr.index + ii * rowSize) * BytesPerPixel;
          gl.enableVertexAttribArray(attrId);
          gl.vertexAttribPointer(attrId, rowSize, gl.FLOAT, false, stride, rowIndex);
          if (vboDef.instanced === true) {
            gl.vertexAttribDivisor(attrId, 1);
            this._isInstanced = true;
          }
        }
      }
    }
    gl.bindVertexArray(null);
  }
  dispose() {
    const gl = WebGLContext.getContext();
    for (const vbo of this._vbos) {
      gl.deleteBuffer(vbo.object);
    }
    this._vbos.length = 0;
    gl.deleteVertexArray(this._vao);
  }
  setBufferSize(inIndex, inSize) {
    if (inIndex < 0 || inIndex >= this._vbos.length) {
      throw new Error(`no vbo available to that index (input: ${inIndex})`);
    }
    if (inSize <= 0) {
      throw new Error(`vbo must be > 0 (input: ${inSize})`);
    }
    const currVbo = this._vbos[inIndex];
    if (inSize < currVbo.maxSize) {
      return;
    }
    currVbo.maxSize = inSize;
    const gl = WebGLContext.getContext();
    gl.bindBuffer(gl.ARRAY_BUFFER, currVbo.object);
    gl.bufferData(gl.ARRAY_BUFFER, inSize, _getBufferUsage(currVbo.mode));
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
  }
  setFloatBufferSize(index, inSize) {
    this.setBufferSize(index, inSize * 4);
  }
  allocateBuffer(inIndex, inVertices, inSize) {
    if (inIndex < 0 || inIndex >= this._vbos.length) {
      throw new Error(`no vbo available to that index (input: ${inIndex}, total vbos: ${this._vbos.length})`);
    }
    if (inSize <= 0) {
      throw new Error(`size must be > 0 (input: ${inSize})`);
    }
    const currVbo = this._vbos[inIndex];
    if (inSize <= 0) {
      throw new Error(`vbo must be > 0 (input: ${inSize})`);
    }
    currVbo.maxSize = inSize;
    const buffer = _ensureFloatBuffer(inVertices);
    const gl = WebGLContext.getContext();
    gl.bindBuffer(gl.ARRAY_BUFFER, currVbo.object);
    gl.bufferData(gl.ARRAY_BUFFER, buffer, _getBufferUsage(currVbo.mode), 0, inSize);
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
  }
  updateBuffer(inIndex, inVertices, inSize, inStartOffset) {
    if (inIndex < 0 || inIndex >= this._vbos.length) {
      throw new Error(`no vbo available to that index (input: ${inIndex}, total vbos: ${this._vbos.length})`);
    }
    if (inSize <= 0) {
      throw new Error(`size must be > 0 (input: ${inSize})`);
    }
    const currVbo = this._vbos[inIndex];
    if (inStartOffset !== undefined) {
      if (inStartOffset < 0) {
        throw new Error(`offset must be >= 0 (input: ${inStartOffset})`);
      }
      const endIndex = inStartOffset + inSize;
      if (endIndex > currVbo.maxSize) {
        throw new Error(`offset + size > to vbo max size (input: ${endIndex}, max size: ${currVbo.maxSize})`);
      }
    } else if (inSize > currVbo.maxSize) {
      throw new Error(`size must be < to vbo max size (input: ${inSize}, max size: ${currVbo.maxSize})`);
    }
    const buffer = _ensureFloatBuffer(inVertices);
    const gl = WebGLContext.getContext();
    gl.bindBuffer(gl.ARRAY_BUFFER, currVbo.object);
    gl.bufferSubData(gl.ARRAY_BUFFER, inStartOffset ?? 0, buffer, 0, inSize);
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
  }
  render() {
    if (this._primitiveCount == 0) {
      return;
    }
    if (this._isInstanced && this._instanceCount == 0) {
      return;
    }
    const gl = WebGLContext.getContext();
    gl.bindVertexArray(this._vao);
    if (this._isInstanced === true) {
      gl.drawArraysInstanced(this._primitiveType, this._primitiveStart, this._primitiveCount, this._instanceCount);
    } else {
      gl.drawArrays(this._primitiveType, this._primitiveStart, this._primitiveCount);
    }
    gl.bindVertexArray(null);
  }
  setPrimitiveStart(start) {
    this._primitiveStart = start;
  }
  setPrimitiveCount(count) {
    this._primitiveCount = count;
  }
  setInstancedCount(count) {
    this._instanceCount = count;
  }
}

class GeometryBuilder {
  _def = {
    vbos: [],
    primitiveType: PrimitiveType.lines
  };
  reset() {
    this._def = {
      vbos: [],
      primitiveType: PrimitiveType.lines
    };
    return this;
  }
  getDef() {
    return this._def;
  }
  setPrimitiveType(inPrimitive) {
    this._def.primitiveType = PrimitiveType[inPrimitive];
    return this;
  }
  addVbo() {
    this._def.vbos.push({
      attrs: [],
      instanced: false
    });
    return this;
  }
  setVboAsInstanced() {
    this._getLastVbo().instanced = true;
    return this;
  }
  setVboAsDynamic() {
    this._getLastVbo().mode = "dynamic";
    return this;
  }
  setVboAsStreaming() {
    this._getLastVbo().mode = "streaming";
    return this;
  }
  setStride(inStride) {
    this._getLastVbo().stride = inStride;
    return this;
  }
  addVboAttribute(inName, inType) {
    const currVbo = this._getLastVbo();
    const lastAttr = currVbo.attrs.length > 0 ? currVbo.attrs[currVbo.attrs.length - 1] : null;
    currVbo.attrs.push({
      name: inName,
      type: AttributeType[inType],
      index: lastAttr ? lastAttr.index + getAttrTypeSize(lastAttr.type) : 0
    });
    return this;
  }
  _getLastVbo() {
    if (this._def.vbos.length === 0) {
      throw new Error("no VBO setup");
    }
    return this._def.vbos[this._def.vbos.length - 1];
  }
}
// src/local-framework/graphics/webgl2/RenderBuffer.ts
class RenderBuffer {
  _buffer;
  constructor() {
    const gl = WebGLContext.getContext();
    const tmpBuf = gl.createRenderbuffer();
    if (tmpBuf === null) {
      throw new Error("null render buffer object");
    }
    this._buffer = tmpBuf;
  }
  dispose() {
    const gl = WebGLContext.getContext();
    gl.deleteRenderbuffer(this._buffer);
  }
  rawBind() {
    const gl = WebGLContext.getContext();
    gl.bindRenderbuffer(gl.RENDERBUFFER, this._buffer);
  }
  preBind(inCallback) {
    this.rawBind();
    inCallback(this);
  }
  bind(inCallback) {
    this.preBind(inCallback);
    RenderBuffer.unbind();
  }
  static unbind() {
    const gl = WebGLContext.getContext();
    gl.bindRenderbuffer(gl.RENDERBUFFER, null);
  }
  setSize(type, width, height) {
    const gl = WebGLContext.getContext();
    let internalFormat = gl.DEPTH_COMPONENT32F;
    switch (type) {
      case "depth16": {
        internalFormat = gl.DEPTH_COMPONENT16;
        break;
      }
      case "depth24": {
        internalFormat = gl.DEPTH_COMPONENT16;
        break;
      }
    }
    gl.renderbufferStorage(gl.RENDERBUFFER, internalFormat, width, height);
  }
  getRawObject() {
    return this._buffer;
  }
}
// src/local-framework/graphics/webgl2/ShaderProgram.ts
class ShaderProgram {
  static _isBound = null;
  _name;
  _program;
  _attributes = new Map;
  _uniforms = new Map;
  constructor(inName, opt) {
    this._name = inName;
    const gl = WebGLContext.getContext();
    const vertexShader = this._getShader(opt.vertexSrc, gl.VERTEX_SHADER);
    const fragmentShader = this._getShader(opt.fragmentSrc, gl.FRAGMENT_SHADER);
    const program = gl.createProgram();
    if (!program) {
      throw new Error("could not create a shader program");
    }
    gl.attachShader(program, vertexShader);
    gl.attachShader(program, fragmentShader);
    gl.linkProgram(program);
    gl.deleteShader(vertexShader);
    gl.deleteShader(fragmentShader);
    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
      const lastError = gl.getProgramInfoLog(program);
      throw new Error("Failed to initialized shaders, Error linking:" + lastError);
    }
    this._program = program;
    this.bind(() => {
      this._getAttributes(opt.attributes);
      this._getUniforms(opt.uniforms);
    });
  }
  dispose() {
    const gl = WebGLContext.getContext();
    gl.deleteProgram(this._program);
  }
  bind(inCallback) {
    if (ShaderProgram._isBound !== null) {
      throw new Error(`Double shader binding (bound: ${ShaderProgram._isBound._name}, binding: ${this._name})`);
    }
    ShaderProgram._isBound = this;
    const gl = WebGLContext.getContext();
    gl.useProgram(this._program);
    inCallback(this);
    ShaderProgram.unbind();
  }
  static unbind() {
    const gl = WebGLContext.getContext();
    gl.useProgram(null);
    ShaderProgram._isBound = null;
  }
  isBound() {
    return ShaderProgram._isBound === this;
  }
  hasAttribute(name) {
    return this._attributes.has(name);
  }
  getAttribute(name) {
    const attribute = this._attributes.get(name);
    if (attribute === undefined) {
      throw new Error(`attribute not found: ${name}`);
    }
    return attribute;
  }
  getUniform(name) {
    const uniform = this._uniforms.get(name);
    if (uniform === undefined) {
      throw new Error(`uniform not found: ${name}`);
    }
    return uniform;
  }
  setTextureUniform(inName, inTexture, inIndex) {
    const gl = WebGLContext.getContext();
    gl.activeTexture(gl.TEXTURE0 + inIndex);
    gl.uniform1i(this.getUniform(inName), inIndex);
    inTexture.rawBind();
  }
  setInteger1Uniform(inName, inValue) {
    const gl = WebGLContext.getContext();
    gl.uniform1i(this.getUniform(inName), inValue);
  }
  setInteger2Uniform(inName, inValueX, inValueY) {
    const gl = WebGLContext.getContext();
    gl.uniform2i(this.getUniform(inName), inValueX, inValueY);
  }
  setInteger3Uniform(inName, inValueX, inValueY, inValueZ) {
    const gl = WebGLContext.getContext();
    gl.uniform3i(this.getUniform(inName), inValueX, inValueY, inValueZ);
  }
  setFloat1Uniform(inName, inValue) {
    const gl = WebGLContext.getContext();
    gl.uniform1f(this.getUniform(inName), inValue);
  }
  setFloat2Uniform(inName, inValueX, inValueY) {
    const gl = WebGLContext.getContext();
    gl.uniform2f(this.getUniform(inName), inValueX, inValueY);
  }
  setFloat3Uniform(inName, inValueX, inValueY, inValueZ) {
    const gl = WebGLContext.getContext();
    gl.uniform3f(this.getUniform(inName), inValueX, inValueY, inValueZ);
  }
  setMatrix3Uniform(inName, inMatrix) {
    const gl = WebGLContext.getContext();
    gl.uniformMatrix3fv(this.getUniform(inName), false, inMatrix);
  }
  setMatrix4Uniform(inName, inMatrix) {
    const gl = WebGLContext.getContext();
    gl.uniformMatrix4fv(this.getUniform(inName), false, inMatrix);
  }
  _getAttributes(attributes) {
    const gl = WebGLContext.getContext();
    for (let ii = 0;ii < attributes.length; ++ii) {
      const value = gl.getAttribLocation(this._program, attributes[ii]);
      if (value < 0) {
        throw new Error(`attribute not found => ${attributes[ii]}`);
      }
      this._attributes.set(attributes[ii], value);
    }
  }
  _getUniforms(uniforms) {
    const gl = WebGLContext.getContext();
    for (let ii = 0;ii < uniforms.length; ++ii) {
      const value = gl.getUniformLocation(this._program, uniforms[ii]);
      if (value === null) {
        throw new Error(`uniform not found => ${uniforms[ii]}`);
      }
      this._uniforms.set(uniforms[ii], value);
    }
  }
  _getShader(src, type) {
    const gl = WebGLContext.getContext();
    const shader = gl.createShader(type);
    if (!shader) {
      throw new Error("could not create a shader");
    }
    gl.shaderSource(shader, src);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
      let error_str = gl.getShaderInfoLog(shader);
      if (!error_str)
        error_str = "failed to compile a shader";
      throw new Error(error_str);
    }
    return shader;
  }
}
// src/local-framework/graphics/webgl2/Texture.ts
var TextureFilter;
(function(TextureFilter2) {
  TextureFilter2[TextureFilter2["pixelated"] = 0] = "pixelated";
  TextureFilter2[TextureFilter2["linear"] = 1] = "linear";
  TextureFilter2[TextureFilter2["mipmap"] = 2] = "mipmap";
})(TextureFilter || (TextureFilter = {}));
var TextureRepeat;
(function(TextureRepeat2) {
  TextureRepeat2[TextureRepeat2["noRepeat"] = 0] = "noRepeat";
  TextureRepeat2[TextureRepeat2["repeat"] = 1] = "repeat";
})(TextureRepeat || (TextureRepeat = {}));

class Texture {
  _width = 0;
  _height = 0;
  _texture = null;
  initialize() {
    if (this._texture)
      throw new Error("texture: already initialized");
    const gl = WebGLContext.getContext();
    this._texture = gl.createTexture();
  }
  rawBind() {
    if (!this._texture)
      throw new Error("texture: not initialized");
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, this._texture);
  }
  preBind(inCallback) {
    this.rawBind();
    inCallback(this);
  }
  bind(inCallback) {
    this.preBind(inCallback);
    Texture.unbind();
  }
  static unbind() {
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D, null);
  }
  loadFromImage(inImage, mode = TextureFilter.pixelated, repeat = TextureRepeat.noRepeat) {
    this._allocate(inImage.width, inImage.height, inImage, mode, repeat);
  }
  loadFromMemory(inWidth, inHeight, inPixels, mode = TextureFilter.pixelated, repeat = TextureRepeat.noRepeat) {
    this._allocate(inWidth, inHeight, inPixels, mode, repeat);
  }
  allocate(inWidth, inHeight, mode = TextureFilter.pixelated, repeat = TextureRepeat.noRepeat) {
    this._allocate(inWidth, inHeight, null, mode, repeat);
  }
  allocateDepth(inWidth, inHeight, mode = TextureFilter.pixelated, repeat = TextureRepeat.noRepeat) {
    this._allocate(inWidth, inHeight, null, mode, repeat, true);
  }
  resize(inWidth, inHeight, mode = TextureFilter.pixelated, repeat = TextureRepeat.noRepeat) {
    this._allocate(inWidth, inHeight, null, mode, repeat);
  }
  _allocate(inWidth, inHeight, inPixels = null, mode = TextureFilter.pixelated, repeat = TextureRepeat.noRepeat, isDepthTexture = false) {
    if (!this._texture) {
      throw new Error("texture: not initialized");
    }
    if (inWidth <= 0) {
      throw new Error("texture: width must be positive");
    }
    if (inHeight <= 0) {
      throw new Error("texture: height must be positive");
    }
    const gl = WebGLContext.getContext();
    this._width = inWidth;
    this._height = inHeight;
    const level = 0;
    const internalFormat = isDepthTexture ? gl.DEPTH_COMPONENT32F : gl.RGBA;
    const border = 0;
    const srcFormat = isDepthTexture ? gl.DEPTH_COMPONENT : gl.RGBA;
    const srcType = isDepthTexture ? gl.FLOAT : gl.UNSIGNED_BYTE;
    if (inPixels instanceof HTMLImageElement) {
      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, srcFormat, srcType, inPixels);
    } else {
      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, inWidth, inHeight, border, srcFormat, srcType, inPixels);
    }
    if (repeat === TextureRepeat.noRepeat) {
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    } else if (repeat === TextureRepeat.repeat) {
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
    }
    if (mode === TextureFilter.pixelated) {
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    } else if (mode === TextureFilter.linear) {
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
    } else if (mode === TextureFilter.mipmap) {
      gl.generateMipmap(gl.TEXTURE_2D);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
    }
  }
  getWidth() {
    if (!this._texture)
      throw new Error("texture not initialized");
    return this._width;
  }
  getHeight() {
    if (!this._texture)
      throw new Error("texture not initialized");
    return this._height;
  }
  getRawObject() {
    if (!this._texture)
      throw new Error("texture not initialized");
    return this._texture;
  }
}
// src/local-framework/graphics/webgl2/TextureArray.ts
class TextureArray {
  _width = 0;
  _height = 0;
  _texture = null;
  initialize() {
    if (this._texture)
      throw new Error("texture: already initialized");
    const gl = WebGLContext.getContext();
    this._texture = gl.createTexture();
  }
  dispose() {
    const gl = WebGLContext.getContext();
    gl.deleteTexture(this._texture);
  }
  rawBind() {
    if (!this._texture)
      throw new Error("texture: not initialized");
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D_ARRAY, this._texture);
  }
  preBind(inCallback) {
    this.rawBind();
    inCallback(this);
  }
  bind(inCallback) {
    this.preBind(inCallback);
    TextureArray.unbind();
  }
  static unbind() {
    const gl = WebGLContext.getContext();
    gl.bindTexture(gl.TEXTURE_2D_ARRAY, null);
  }
  loadFromImage(inWidth, inHeight, inTotalLayers, inImage, mode = TextureFilter.pixelated, repeat = TextureRepeat.noRepeat) {
    this._allocate(inWidth, inHeight, inTotalLayers, inImage, mode, repeat);
  }
  loadFromMemory(inWidth, inHeight, inTotalLayers, inPixels, mode = TextureFilter.pixelated, repeat = TextureRepeat.noRepeat) {
    this._allocate(inWidth, inHeight, inTotalLayers, inPixels, mode, repeat);
  }
  _allocate(inWidth, inHeight, inTotalLayers, inPixels = null, mode = TextureFilter.pixelated, repeat = TextureRepeat.noRepeat) {
    if (!this._texture) {
      throw new Error("texture: not initialized");
    }
    if (inWidth <= 0) {
      throw new Error("texture: width must be positive");
    }
    if (inHeight <= 0) {
      throw new Error("texture: height must be positive");
    }
    const gl = WebGLContext.getContext();
    this._width = inWidth;
    this._height = inHeight;
    const level = 0;
    const internalFormat = gl.RGBA;
    const border = 0;
    const srcFormat = gl.RGBA;
    const srcType = gl.UNSIGNED_BYTE;
    if (inPixels instanceof HTMLImageElement) {
      gl.texImage3D(gl.TEXTURE_2D_ARRAY, level, internalFormat, inWidth, inHeight, inTotalLayers, border, srcFormat, srcType, inPixels);
    } else {
      gl.texImage3D(gl.TEXTURE_2D_ARRAY, level, internalFormat, inWidth, inHeight, inTotalLayers, border, srcFormat, srcType, inPixels);
    }
    if (repeat === TextureRepeat.noRepeat) {
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    } else if (repeat === TextureRepeat.repeat) {
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_S, gl.REPEAT);
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_WRAP_T, gl.REPEAT);
    }
    if (mode === TextureFilter.pixelated) {
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    } else if (mode === TextureFilter.linear) {
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
    } else if (mode === TextureFilter.mipmap) {
      gl.generateMipmap(gl.TEXTURE_2D_ARRAY);
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
    }
  }
  getWidth() {
    if (!this._texture)
      throw new Error("texture not initialized");
    return this._width;
  }
  getHeight() {
    if (!this._texture)
      throw new Error("texture not initialized");
    return this._height;
  }
  getRawObject() {
    if (!this._texture)
      throw new Error("texture not initialized");
    return this._texture;
  }
}
// src/local-framework/graphics/renderers/geometry-renderer/shaders/geometry-renderer.glsl.vert
var geometry_renderer_glsl_default = `
#version 300 es

precision highp float;

uniform mat4 u_composedMatrix;

in vec3 a_vertex_position;
in vec3 a_vertex_normal;

in vec3 a_offset_center;
in vec4 a_offset_orientation;
in vec3 a_offset_color;
in vec3 a_offset_scale;

flat out vec4 v_color;
out vec3 v_worldSpacePosition;
out vec3 v_worldSpaceNormal;


vec3 apply_quat_to_vec3(vec3 position, vec4 q)
{
  vec3 v = position.xyz;
  return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

void main(void)
{
	vec3 worldSpacePosition = a_offset_center + apply_quat_to_vec3(a_vertex_position * a_offset_scale, a_offset_orientation);
	vec3 worldSpaceNormal = apply_quat_to_vec3(a_vertex_normal, a_offset_orientation);

  gl_Position = u_composedMatrix * vec4(worldSpacePosition, 1.0);

  v_color = vec4(a_offset_color, 1.0);
  v_worldSpacePosition = worldSpacePosition;
  v_worldSpaceNormal = worldSpaceNormal;
}
`.trim();

// src/local-framework/graphics/renderers/geometry-renderer/shaders/geometry-renderer.glsl.frag
var geometry_renderer_glsl_default2 = `
#version 300 es

precision lowp float;

uniform vec3 u_lightPos;

flat in vec4 v_color;
in vec3 v_worldSpacePosition;
in vec3 v_worldSpaceNormal;

out vec4 o_color;

//
//
//

const float k_ambiantCoef = 0.1;

const vec3 k_specColor = vec3(1.0, 1.0, 1.0);

vec3 _getLightColor(vec4 currentColor)
{
  vec3 normal = normalize(v_worldSpaceNormal);
  vec3 lightDir = normalize(u_lightPos - v_worldSpacePosition);

  float diffuseCoef = max(dot(lightDir, v_worldSpaceNormal.xyz), 0.0);
  float specularCoef = 0.0;

  // if (diffuseCoef > 0.0 && v_skipSpecular < 0.5)
  // {
  //   // specular

  //   vec3 reflectDir = reflect(-lightDir, normal);
  //   vec3 viewDir = normalize(u_lightPos - v_worldSpacePosition);

  //   float specAngle = max(dot(reflectDir, viewDir), 0.0);
  //   specularCoef = pow(specAngle, 32.0);
  // }

  vec3 diffuseColor = currentColor.rgb * (k_ambiantCoef + diffuseCoef);
  vec3 specularColor = k_specColor * specularCoef * currentColor.a;

  return diffuseColor + specularColor;
}

//
//
//

void main(void)
{
  o_color = vec4(_getLightColor(v_color), 1.0);
}
`.trim();

// src/local-framework/graphics/renderers/geometry-renderer/GeometryRenderer.ts
var k_bufferSize = 14336;

class GeometryRenderer {
  _shader;
  _geometry;
  _buffer = new Float32Array(k_bufferSize);
  _currentSize = 0;
  constructor() {
    this._shader = new ShaderProgram("GeometryRenderer", {
      vertexSrc: geometry_renderer_glsl_default,
      fragmentSrc: geometry_renderer_glsl_default2,
      attributes: [
        "a_vertex_position",
        "a_vertex_normal",
        "a_offset_center",
        "a_offset_orientation",
        "a_offset_color",
        "a_offset_scale"
      ],
      uniforms: ["u_composedMatrix", "u_lightPos"]
    });
    const geoBuilder = new exports_GeometryWrapper.GeometryBuilder;
    geoBuilder.reset().setPrimitiveType("triangles").addVbo().addVboAttribute("a_vertex_position", "vec3f").addVboAttribute("a_vertex_normal", "vec3f").addVbo().setVboAsStreaming().setVboAsInstanced().addVboAttribute("a_offset_center", "vec3f").addVboAttribute("a_offset_orientation", "vec4f").addVboAttribute("a_offset_color", "vec3f").addVboAttribute("a_offset_scale", "vec3f");
    this._geometry = new exports_GeometryWrapper.Geometry(this._shader, geoBuilder.getDef());
    this._geometry.setFloatBufferSize(1, k_bufferSize);
  }
  setGeometryVertices(vertices) {
    const buf = new Float32Array([
      ...vertices.map((val) => [...val.pos, ...val.normal]).flat()
    ]);
    this._geometry.allocateBuffer(0, buf, buf.length);
    this._geometry.setPrimitiveCount(buf.length / 6);
  }
  push(inPointA, inQuat, inColor, inScale) {
    if (this._currentSize + 13 >= this._buffer.length) {
      if (this._shader.isBound()) {
        this._flush();
      } else {
        return;
      }
    }
    this._buffer[this._currentSize++] = inPointA[0];
    this._buffer[this._currentSize++] = inPointA[1];
    this._buffer[this._currentSize++] = inPointA[2];
    this._buffer[this._currentSize++] = inQuat[0];
    this._buffer[this._currentSize++] = inQuat[1];
    this._buffer[this._currentSize++] = inQuat[2];
    this._buffer[this._currentSize++] = inQuat[3];
    this._buffer[this._currentSize++] = inColor[0];
    this._buffer[this._currentSize++] = inColor[1];
    this._buffer[this._currentSize++] = inColor[2];
    this._buffer[this._currentSize++] = inScale[0];
    this._buffer[this._currentSize++] = inScale[1];
    this._buffer[this._currentSize++] = inScale[2];
  }
  flush(inCamera) {
    if (!this.canRender()) {
      return;
    }
    this._shader.bind((bound) => {
      bound.setMatrix4Uniform("u_composedMatrix", inCamera.getComposedMatrix());
      const eyePos = inCamera.getEye();
      bound.setFloat3Uniform("u_lightPos", eyePos[0], eyePos[1], eyePos[2]);
      this._flush();
    });
  }
  safeRender(inCamera, inCallback) {
    this._shader.bind((bound) => {
      bound.setMatrix4Uniform("u_composedMatrix", inCamera.getComposedMatrix());
      const eyePos = inCamera.getEye();
      bound.setFloat3Uniform("u_lightPos", eyePos[0], eyePos[1], eyePos[2]);
      inCallback();
      this._flush();
    });
  }
  _flush() {
    this._geometry.updateBuffer(1, this._buffer, this._currentSize, 0);
    this._geometry.setInstancedCount(this._currentSize / 13);
    this._geometry.render();
    this.clear();
  }
  canRender() {
    return this._currentSize > 0;
  }
  clear() {
    this._currentSize = 0;
  }
}
// src/local-framework/graphics/renderers/geometry-renderer-flat/shaders/geometry-renderer-flat.glsl.vert
var geometry_renderer_flat_glsl_default = `
#version 300 es

precision highp float;

uniform mat4 u_composedMatrix;

in vec3 a_vertex_position;

in vec3 a_offset_center;
in vec4 a_offset_orientation;
in vec3 a_offset_color;
in vec3 a_offset_scale;

flat out vec4 v_color;

vec3 apply_quat_to_vec3(vec3 position, vec4 q)
{
  vec3 v = position.xyz;
  return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);
}

void main(void)
{
	vec3 worldSpacePosition = a_offset_center + apply_quat_to_vec3(a_vertex_position * a_offset_scale, a_offset_orientation);

  gl_Position = u_composedMatrix * vec4(worldSpacePosition, 1.0);

  v_color = vec4(a_offset_color, 1.0);
}
`.trim();

// src/local-framework/graphics/renderers/geometry-renderer-flat/shaders/geometry-renderer-flat.glsl.frag
var geometry_renderer_flat_glsl_default2 = `
#version 300 es

precision lowp float;

flat in vec4 v_color;

out vec4 o_color;

void main(void)
{
  o_color = vec4(v_color.rbg, 1.0);
}
`.trim();

// src/local-framework/graphics/renderers/geometry-renderer-flat/GeometryRendererFlat.ts
var k_bufferSize2 = 14336;

class GeometryRendererFlat {
  _shader;
  _geometry;
  _buffer = new Float32Array(k_bufferSize2);
  _currentSize = 0;
  constructor() {
    this._shader = new ShaderProgram("GeometryRendererFlat", {
      vertexSrc: geometry_renderer_flat_glsl_default,
      fragmentSrc: geometry_renderer_flat_glsl_default2,
      attributes: [
        "a_vertex_position",
        "a_offset_center",
        "a_offset_orientation",
        "a_offset_color",
        "a_offset_scale"
      ],
      uniforms: [
        "u_composedMatrix"
      ]
    });
    const geoBuilder = new exports_GeometryWrapper.GeometryBuilder;
    geoBuilder.reset().setPrimitiveType("triangles").addVbo().addVboAttribute("a_vertex_position", "vec3f").addVbo().setVboAsStreaming().setVboAsInstanced().addVboAttribute("a_offset_center", "vec3f").addVboAttribute("a_offset_orientation", "vec4f").addVboAttribute("a_offset_color", "vec3f").addVboAttribute("a_offset_scale", "vec3f");
    this._geometry = new exports_GeometryWrapper.Geometry(this._shader, geoBuilder.getDef());
    this._geometry.setFloatBufferSize(1, k_bufferSize2);
  }
  setGeometryVertices(vertices) {
    const buf = new Float32Array([
      ...vertices.map((val) => [...val.pos]).flat()
    ]);
    this._geometry.allocateBuffer(0, buf, buf.length);
    this._geometry.setPrimitiveCount(buf.length / 3);
  }
  push(inPointA, inQuat, inColor, inScale) {
    if (this._currentSize + 13 >= this._buffer.length) {
      if (this._shader.isBound()) {
        this._flush();
      } else {
        return;
      }
    }
    this._buffer[this._currentSize++] = inPointA[0];
    this._buffer[this._currentSize++] = inPointA[1];
    this._buffer[this._currentSize++] = inPointA[2];
    this._buffer[this._currentSize++] = inQuat[0];
    this._buffer[this._currentSize++] = inQuat[1];
    this._buffer[this._currentSize++] = inQuat[2];
    this._buffer[this._currentSize++] = inQuat[3];
    this._buffer[this._currentSize++] = inColor[0];
    this._buffer[this._currentSize++] = inColor[1];
    this._buffer[this._currentSize++] = inColor[2];
    this._buffer[this._currentSize++] = inScale[0];
    this._buffer[this._currentSize++] = inScale[1];
    this._buffer[this._currentSize++] = inScale[2];
  }
  flush(inCamera) {
    if (!this.canRender()) {
      return;
    }
    this._shader.bind((bound) => {
      bound.setMatrix4Uniform("u_composedMatrix", inCamera.getComposedMatrix());
      this._flush();
    });
  }
  safeRender(inCamera, inCallback) {
    this._shader.bind((bound) => {
      bound.setMatrix4Uniform("u_composedMatrix", inCamera.getComposedMatrix());
      inCallback();
      this._flush();
    });
  }
  _flush() {
    this._geometry.updateBuffer(1, this._buffer, this._currentSize, 0);
    this._geometry.setInstancedCount(this._currentSize / 13);
    this._geometry.render();
    this.clear();
  }
  canRender() {
    return this._currentSize > 0;
  }
  clear() {
    this._currentSize = 0;
  }
}
// src/local-framework/graphics/renderers/multi-buffers-rendering/internals/SceneCapturer.ts
class SceneCapturer {
  _width = 0;
  _height = 0;
  _frameBuffer = new FrameBuffer;
  _renderBuffer = new RenderBuffer;
  _colorTextures = [];
  _currentIndex = 0;
  constructor(width, height) {
    this._colorTextures.push(new Texture);
    this._colorTextures.push(new Texture);
    this._colorTextures.forEach((texture) => texture.initialize());
    this.resize(width, height);
  }
  resize(width, height) {
    this._width = width;
    this._height = height;
    this._renderBuffer.bind((boundBuffer) => {
      boundBuffer.setSize("depth32f", this._width, this._height);
    });
    this._colorTextures.forEach((texture) => {
      texture.bind((boundTexture) => {
        boundTexture.allocate(this._width, this._height);
      });
    });
    this._frameBuffer.bind((boundFrameBuffer) => {
      this._renderBuffer.bind((boundBuffer) => {
        boundFrameBuffer.attachRenderBuffer(boundBuffer);
      });
    });
  }
  captureScene(renderCallback) {
    this._frameBuffer.bind((boundFrameBuffer) => {
      this._colorTextures[this._currentIndex].bind((boundTexture) => {
        boundFrameBuffer.attachTexture(boundTexture);
      });
      const gl = WebGLContext.getContext();
      gl.viewport(0, 0, this._width, this._height);
      gl.clearColor(0, 0, 0, 0);
      renderCallback();
    });
    this._currentIndex = (this._currentIndex + 1) % this._colorTextures.length;
  }
  get colorTexture() {
    return this._colorTextures[this._currentIndex];
  }
}

// src/local-framework/graphics/renderers/multi-buffers-rendering/internals/shaders/hud-texture-renderer.glsl.vert
var hud_texture_renderer_glsl_default = `
#version 300 es

precision highp float;

uniform mat4 u_composedMatrix;

in vec3  a_vertex_position;
in vec2  a_vertex_texCoord;

out vec2 v_texCoord;

void main(void)
{
  v_texCoord = a_vertex_texCoord;
  gl_Position = u_composedMatrix * vec4(a_vertex_position, 1.0);
}

`.trim();

// src/local-framework/graphics/renderers/multi-buffers-rendering/internals/shaders/hud-texture-renderer.glsl.frag
var hud_texture_renderer_glsl_default2 = `
#version 300 es

precision highp float;

uniform sampler2D u_texture;

in vec2 v_texCoord;

out vec4 o_color;

void main(void)
{
  o_color = texture(u_texture, v_texCoord);
}
`.trim();

// src/local-framework/graphics/renderers/multi-buffers-rendering/internals/RenderHudTexture.ts
class RenderHudTexture {
  _width = 0;
  _height = 0;
  _shader;
  _geometry;
  constructor(width, height) {
    this._shader = new ShaderProgram("RenderHudTexture", {
      vertexSrc: hud_texture_renderer_glsl_default,
      fragmentSrc: hud_texture_renderer_glsl_default2,
      attributes: ["a_vertex_position", "a_vertex_texCoord"],
      uniforms: ["u_composedMatrix", "u_texture"]
    });
    const geoBuilder = new exports_GeometryWrapper.GeometryBuilder;
    geoBuilder.reset().setPrimitiveType("triangleStrip").addVbo().addVboAttribute("a_vertex_position", "vec3f").addVboAttribute("a_vertex_texCoord", "vec2f");
    this._geometry = new exports_GeometryWrapper.Geometry(this._shader, geoBuilder.getDef());
    this.resize(width, height);
  }
  resize(width, height) {
    this._width = width;
    this._height = height;
    const tmpVertices = [
      { pos: [this._width * 0, this._height * 0, -1], tex: [0, 0] },
      { pos: [this._width * 1, this._height * 0, -1], tex: [1, 0] },
      { pos: [this._width * 0, this._height * 1, -1], tex: [0, 1] },
      { pos: [this._width * 1, this._height * 1, -1], tex: [1, 1] }
    ];
    const vertArr = tmpVertices.map((vertex) => {
      return [
        vertex.pos[0],
        vertex.pos[1],
        vertex.pos[2],
        vertex.tex[0],
        vertex.tex[1]
      ];
    }).flat();
    this._geometry.allocateBuffer(0, vertArr, vertArr.length);
    this._geometry.setPrimitiveCount(vertArr.length / 5);
  }
  flush(composedMatrix, cubeMap) {
    this._shader.bind((boundShader) => {
      boundShader.setMatrix4Uniform("u_composedMatrix", composedMatrix);
      boundShader.setTextureUniform("u_texture", cubeMap, 0);
      this._geometry.render();
    });
  }
}

// src/local-framework/graphics/renderers/multi-buffers-rendering/MultiBuffersRendering.ts
class MultiBuffersRendering {
  _sceneCapturer;
  _renderHudTexture;
  constructor(width, height) {
    this._sceneCapturer = new SceneCapturer(width, height);
    this._renderHudTexture = new RenderHudTexture(width, height);
  }
  resize(width, height) {
    this._sceneCapturer.resize(width, height);
    this._renderHudTexture.resize(width, height);
  }
  captureScene(renderCallback) {
    this._sceneCapturer.captureScene(renderCallback);
  }
  renderHud(composedMat4) {
    this._renderHudTexture.flush(composedMat4, this._sceneCapturer.colorTexture);
  }
}
// src/local-framework/graphics/renderers/stack-renderers/shaders/stack-renderer.glsl.vert
var stack_renderer_glsl_default = `
#version 300 es

precision highp float;

uniform mat4 u_composedMatrix;

in vec3 a_vertex_position;
in vec4 a_vertex_color;

flat out vec4 v_color;

void main(void)
{
  gl_Position = u_composedMatrix * vec4(a_vertex_position, 1.0);

  v_color = a_vertex_color;
}
`.trim();

// src/local-framework/graphics/renderers/stack-renderers/shaders/stack-renderer.glsl.frag
var stack_renderer_glsl_default2 = `
#version 300 es

precision lowp float;

flat in vec4 v_color;

out vec4 o_color;

void main(void)
{
  o_color = v_color;
}
`.trim();

// src/local-framework/graphics/renderers/stack-renderers/internals/WireFramesStackRenderer.ts
var k_bufferSize3 = 14336;

class WireFramesStackRenderer {
  _shader;
  _geometry;
  _buffer = new Float32Array(k_bufferSize3);
  _currentSize = 0;
  constructor(inShader, inGeometryDef) {
    this._shader = inShader;
    const geometryDef = {
      ...inGeometryDef,
      primitiveType: exports_GeometryWrapper.PrimitiveType.lines
    };
    this._geometry = new exports_GeometryWrapper.Geometry(inShader, geometryDef);
  }
  pushLine(inPointA, inPointB, inColor) {
    if (this._currentSize + 14 >= this._buffer.length) {
      if (this._shader.isBound()) {
        this.flush();
      } else {
        return;
      }
    }
    const alphaValue = inColor[3] ?? 1;
    this._buffer[this._currentSize + 0] = inPointA[0];
    this._buffer[this._currentSize + 1] = inPointA[1];
    this._buffer[this._currentSize + 2] = inPointA[2];
    this._buffer[this._currentSize + 3] = inColor[0];
    this._buffer[this._currentSize + 4] = inColor[1];
    this._buffer[this._currentSize + 5] = inColor[2];
    this._buffer[this._currentSize + 6] = alphaValue;
    this._currentSize += 7;
    this._buffer[this._currentSize + 0] = inPointB[0];
    this._buffer[this._currentSize + 1] = inPointB[1];
    this._buffer[this._currentSize + 2] = inPointB[2];
    this._buffer[this._currentSize + 3] = inColor[0];
    this._buffer[this._currentSize + 4] = inColor[1];
    this._buffer[this._currentSize + 5] = inColor[2];
    this._buffer[this._currentSize + 6] = alphaValue;
    this._currentSize += 7;
  }
  canRender() {
    return this._currentSize > 0;
  }
  flush() {
    if (!this.canRender())
      return;
    this._geometry.allocateBuffer(0, this._buffer, this._currentSize);
    this._geometry.setPrimitiveCount(this._currentSize / 7);
    this._geometry.render();
    this.clear();
  }
  clear() {
    this._currentSize = 0;
  }
}

// src/local-framework/graphics/renderers/stack-renderers/internals/TrianglesStackRenderer.ts
var k_bufferSize4 = 7168;

class TrianglesStackRenderer {
  _shader;
  _geometry;
  _buffer = new Float32Array(k_bufferSize4);
  _currentSize = 0;
  constructor(inShader, inGeometryDef) {
    this._shader = inShader;
    const geometryDef = {
      ...inGeometryDef,
      primitiveType: exports_GeometryWrapper.PrimitiveType.triangles
    };
    this._geometry = new exports_GeometryWrapper.Geometry(inShader, geometryDef);
  }
  pushTriangle(inPointA, inPointB, inPointC, inColor) {
    if (this._currentSize + 42 >= this._buffer.length) {
      if (this._shader.isBound()) {
        this.flush();
      } else {
        return;
      }
    }
    const alphaValue = inColor[3] ?? 1;
    this._buffer[this._currentSize + 0] = inPointA[0];
    this._buffer[this._currentSize + 1] = inPointA[1];
    this._buffer[this._currentSize + 2] = inPointA[2];
    this._buffer[this._currentSize + 3] = inColor[0];
    this._buffer[this._currentSize + 4] = inColor[1];
    this._buffer[this._currentSize + 5] = inColor[2];
    this._buffer[this._currentSize + 6] = alphaValue;
    this._currentSize += 7;
    this._buffer[this._currentSize + 0] = inPointB[0];
    this._buffer[this._currentSize + 1] = inPointB[1];
    this._buffer[this._currentSize + 2] = inPointB[2];
    this._buffer[this._currentSize + 3] = inColor[0];
    this._buffer[this._currentSize + 4] = inColor[1];
    this._buffer[this._currentSize + 5] = inColor[2];
    this._buffer[this._currentSize + 6] = alphaValue;
    this._currentSize += 7;
    this._buffer[this._currentSize + 0] = inPointC[0];
    this._buffer[this._currentSize + 1] = inPointC[1];
    this._buffer[this._currentSize + 2] = inPointC[2];
    this._buffer[this._currentSize + 3] = inColor[0];
    this._buffer[this._currentSize + 4] = inColor[1];
    this._buffer[this._currentSize + 5] = inColor[2];
    this._buffer[this._currentSize + 6] = alphaValue;
    this._currentSize += 7;
  }
  pushLine(inPointA, inPointB, thickness, inColor) {
    if (this._currentSize + 42 >= this._buffer.length) {
      return;
    }
    const diffX = inPointB[0] - inPointA[0];
    const diffY = inPointB[1] - inPointA[1];
    const angle3 = Math.atan2(diffY, diffX) + Math.PI * 0.5;
    const stepX = Math.cos(angle3) * thickness * 0.5;
    const stepY = Math.sin(angle3) * thickness * 0.5;
    this.pushTriangle([inPointA[0] - stepX, inPointA[1] - stepY, inPointA[2]], [inPointB[0] - stepX, inPointB[1] - stepY, inPointB[2]], [inPointB[0] + stepX, inPointB[1] + stepY, inPointB[2]], inColor);
    this.pushTriangle([inPointA[0] - stepX, inPointA[1] - stepY, inPointA[2]], [inPointB[0] + stepX, inPointB[1] + stepY, inPointB[2]], [inPointA[0] + stepX, inPointA[1] + stepY, inPointA[2]], inColor);
  }
  pushRotatedLine(center, angle3, length4, thickness, color) {
    this.pushLine([
      center[0] - length4 * Math.cos(angle3),
      center[1] - length4 * Math.sin(angle3),
      center[2]
    ], [
      center[0] + length4 * Math.cos(angle3),
      center[1] + length4 * Math.sin(angle3),
      center[2]
    ], thickness, color);
  }
  pushOriginBoundRectangle(inOrigin, inSize, inColor) {
    if (this._currentSize + 42 >= this._buffer.length) {
      return;
    }
    const maxCoord = [
      inOrigin[0] + inSize[0],
      inOrigin[1] + inSize[1]
    ];
    this.pushTriangle([inOrigin[0], inOrigin[1], inOrigin[2]], [maxCoord[0], maxCoord[1], inOrigin[2]], [inOrigin[0], maxCoord[1], inOrigin[2]], inColor);
    this.pushTriangle([inOrigin[0], inOrigin[1], inOrigin[2]], [maxCoord[0], inOrigin[1], inOrigin[2]], [maxCoord[0], maxCoord[1], inOrigin[2]], inColor);
  }
  pushCenteredRectangle(inCenter, inSize, inColor) {
    const origin = [
      inCenter[0] - inSize[0] * 0.5,
      inCenter[1] - inSize[1] * 0.5,
      inCenter[2]
    ];
    this.pushOriginBoundRectangle(origin, inSize, inColor);
  }
  canRender() {
    return this._currentSize > 0;
  }
  flush() {
    if (!this.canRender()) {
      return;
    }
    this._geometry.allocateBuffer(0, this._buffer, this._currentSize);
    this._geometry.setPrimitiveCount(this._currentSize / 7);
    this._geometry.render();
    this.clear();
  }
  clear() {
    this._currentSize = 0;
  }
}

// src/local-framework/graphics/renderers/stack-renderers/StackRenderers.ts
class StackRenderers {
  _shader;
  _wireFramesStackRenderer;
  _trianglesStackRenderer;
  constructor() {
    this._shader = new ShaderProgram("StackRenderers", {
      vertexSrc: stack_renderer_glsl_default,
      fragmentSrc: stack_renderer_glsl_default2,
      attributes: ["a_vertex_position", "a_vertex_color"],
      uniforms: ["u_composedMatrix"]
    });
    const geoBuilder = new exports_GeometryWrapper.GeometryBuilder;
    geoBuilder.reset().setPrimitiveType("lines").addVbo().setVboAsDynamic().addVboAttribute("a_vertex_position", "vec3f").addVboAttribute("a_vertex_color", "vec4f");
    this._wireFramesStackRenderer = new WireFramesStackRenderer(this._shader, geoBuilder.getDef());
    this._trianglesStackRenderer = new TrianglesStackRenderer(this._shader, geoBuilder.getDef());
  }
  pushLine(inPointA, inPointB, inColor) {
    this._wireFramesStackRenderer.pushLine(inPointA, inPointB, inColor);
  }
  pushCross(inCenter, inSize, inColor) {
    const crossVertices = [
      [inCenter[0] - inSize, inCenter[1], inCenter[2]],
      [inCenter[0] + inSize, inCenter[1], inCenter[2]],
      [inCenter[0], inCenter[1] - inSize, inCenter[2]],
      [inCenter[0], inCenter[1] + inSize, inCenter[2]],
      [inCenter[0], inCenter[1], inCenter[2] - inSize],
      [inCenter[0], inCenter[1], inCenter[2] + inSize]
    ];
    const crossIndices = [0, 1, 2, 3, 4, 5];
    for (let ii = 0;ii < crossIndices.length; ii += 2) {
      const vertexA = crossVertices[ii + 0];
      const vertexB = crossVertices[ii + 1];
      this._wireFramesStackRenderer.pushLine(vertexA, vertexB, inColor);
    }
  }
  pushThickLine(inPointA, inPointB, thickness, inColor) {
    this._trianglesStackRenderer.pushLine(inPointA, inPointB, thickness, inColor);
  }
  pushRotatedLine(center, angle3, length4, thickness, color) {
    this._trianglesStackRenderer.pushRotatedLine(center, angle3, length4, thickness, color);
  }
  pushOriginBoundRectangle(inOrigin, inSize, inColor) {
    this._trianglesStackRenderer.pushOriginBoundRectangle(inOrigin, inSize, inColor);
  }
  pushCenteredRectangle(inCenter, inSize, inColor) {
    this._trianglesStackRenderer.pushCenteredRectangle(inCenter, inSize, inColor);
  }
  pushTriangle(inPosA, inPosB, inPosC, inColor) {
    this._trianglesStackRenderer.pushTriangle(inPosA, inPosB, inPosC, inColor);
  }
  pushQuad(inPos, inSize, inColor) {
    this.pushTriangle([inPos[0] + inSize[0] * 0, inPos[1] + inSize[1] * 0, inPos[2]], [inPos[0] + inSize[0] * 1, inPos[1] + inSize[1] * 1, inPos[2]], [inPos[0] + inSize[0] * 1, inPos[1] + inSize[1] * 0, inPos[2]], inColor);
    this.pushTriangle([inPos[0] + inSize[0] * 0, inPos[1] + inSize[1] * 0, inPos[2]], [inPos[0] + inSize[0] * 1, inPos[1] + inSize[1] * 1, inPos[2]], [inPos[0] + inSize[0] * 0, inPos[1] + inSize[1] * 1, inPos[2]], inColor);
  }
  flush(inComposedMatrix) {
    if (!this._wireFramesStackRenderer.canRender() && !this._trianglesStackRenderer.canRender()) {
      return;
    }
    this._shader.bind((bound) => {
      bound.setMatrix4Uniform("u_composedMatrix", inComposedMatrix);
      this._wireFramesStackRenderer.flush();
      this._trianglesStackRenderer.flush();
    });
  }
  safeRender(inComposedMatrix, inCallback) {
    this._shader.bind((bound) => {
      bound.setMatrix4Uniform("u_composedMatrix", inComposedMatrix);
      inCallback();
      this._wireFramesStackRenderer.flush();
      this._trianglesStackRenderer.flush();
    });
  }
  clear() {
    this._wireFramesStackRenderer.clear();
    this._trianglesStackRenderer.clear();
  }
}
// src/local-framework/graphics/renderers/text-renderer/shaders/text-renderer.glsl.vert
var text_renderer_glsl_default = `
#version 300 es

precision highp float;

uniform mat4 u_composedMatrix;

in vec2 a_vertex_position;
in vec2 a_vertex_texCoord;
in vec3 a_offset_position;
in vec2 a_offset_texCoord;
in vec3 a_offset_color;
in float a_offset_scale;

out vec2 v_texCoord;
flat out vec3 v_color;

void main(void)
{
  vec3 position = vec3(a_vertex_position, 0.0) * a_offset_scale + a_offset_position;

  gl_Position = u_composedMatrix * vec4(position, 1.0);

  v_texCoord = a_vertex_texCoord + a_offset_texCoord;
  v_color = a_offset_color;
}
`.trim();

// src/local-framework/graphics/renderers/text-renderer/shaders/text-renderer.glsl.frag
var text_renderer_glsl_default2 = `
#version 300 es

precision mediump float;

uniform sampler2D u_texture;

in vec2 v_texCoord;
flat in vec3 v_color;

out vec4 o_color;

void main(void)
{
  vec4 textureColor = texture(u_texture, v_texCoord);
  if (textureColor.a < 0.5)
  {
    discard;
  }
  else
  {
    o_color = vec4(v_color, textureColor.a);
  }
}
`.trim();

// src/local-framework/graphics/renderers/text-renderer/internals/asciiTextureHex.ts
var asciiTextureHex = "7e7e28fd03fd07fe04fe0aff02ff7e4dfd0cfd03fd07fe04fe0aff02ff1afc0dfd10fc08fc0ffe55ff15fb0bfd03fd07fe04fe08f707fd04ff07fe02fe0cfd0ffd0cfd0aff03fe03ff0afe44fe15fb0bfd03fd04f204f607fd03fe07fe02fe0cfd0efd0efd0aff02fe02ff0bfe43fd15fb0cfe03fe05f204fe01ff02ff0afd02fd07fe02fe0bfd0efd10fd0afa0cfe42fd16fb1bfe04fe07fe01ff02ff0efd09fc1cfd12fd09fa0cfe41fd17fb1bfe04fe07f70bfd0afc04ff17fd12fd06f405f616f61cfd19fd1cfe04fe08f709fd0bfb02fe17fd12fd06f405f616f61bfd1afd1cfe04fe0aff02ff01fe08fd0bfe02fa17fd12fd09fa0cfe3efd37f207ff02ff01fe07fd02fd07fe03fc19fd10fd0afa0cfe3dfd38f204f607fe03fd07fe03fd1bfd0efd0aff02fe02ff0bfe0cfd1dfd0dfd1dfd1cfe04fe07f708ff04fd07fe02fb1bfd0cfd0aff03fe03ff0afe0cfd1dfd0cfd1efd1cfe04fe0aff02ff1afb02fe1bfc08fc0ffe1cfd1dfd0bfd1ffd1cfe04fe0aff02ff7afd7e7e7e7e7e7e0efd17fd10fc0af80bfe0bf909f90dfd08f609fb08f506f808f82cfd19fd0df807fd04fd0afe0afd03fd07fd03fd0bfc08fd0ffd0bfd05fd05fd04fd06fd04fd2afd1bfd0bfc02fc06fd03fc09fd0afd04fd06fd04fd09fb08fd0efd0cfd05fd05fd04fd06fd04fd09fd0cfd0efd1dfd0afe05fd06fd02fb06fa11fd0dfd08fe01fd08fd0dfd0dfd05fd05fd04fd06fd04fd09fd0cfd0dfd0af409fd10fd06fd02fb06fa10fd0dfd08fe02fd08fd0dfd15fd05fb02fd06fd04fd09fd0cfd0cfd0bf40afd0efd07fd01fe01fd09fd0ffd0bfb08fe03fd08f808f70efd08fa08f626fd23fd0cfd08fd01fe01fd09fd0efd0cfb08f606f707f60cfd09fa09f726fd23fd0bfd09fb02fd09fd0dfd10fd07f60cfc06fd04fd0bfd08fd02fb0dfd09fd0cfd0cfd0bf40afd0cfd09fb02fd09fd0cfd12fd0bfd0ffd06fd04fd0afd09fd04fd0dfd09fd0cfd0dfd0af409fd19fc03fd09fd0bfd03fd06fd04fd0bfd08fd04fd06fd04fd09fd0afd04fd0cfd0afd0cfd0efd1dfd1afd04fd09fd0afd04fd06fd03fd0cfd08fd03fd07fd04fd09fd0afd04fd0bfd19fd10fd1bfd0ffd0af807f707f607f90bf907f909f80afd0bf809fb2efd19fd10fd7e51fd17fd11fd7e7e7e7e13f87e78fd05fd08fc09f709f907f808f606f608f907fd03fd07f90df905fc03fd06fb0bfd05fd05fd05fd08fb08fd05fd07fa09fd03fd07fd03fd07fd02fd08fd04fe07fd04fe07fd03fd06fd03fd09fd11fd08fd03fd07fd0cfc03fc05fd05fd07fd01fd07fd05fd06fd02fd08fd03fd06fd04fd07fd03fd07fd05ff07fd05ff06fd04fd06fd03fd09fd11fd08fd02fd08fd0cfb01fb05fc04fd06fd03fd06fd05fd05fd04fd07fd03fd06fd0efd03fd07fd0dfd0cfd04fd06fd03fd09fd11fd08fd01fd09fd0cf505fb03fd05fd05fd05fd02fa05fd04fd07fd03fd06fd0efd03fd07fd03fe08fd03fe07fd0dfd03fd09fd11fd08fa0afd0cf505fa02fd05fd05fd05fd02fa05fd04fd07f807fd0efd03fd07f808f807fd0df709fd11fd08fb0bfd0cfd01fd01fd05fd01fd01fd05fd05fd05fd02fa05fd04fd07f807fd0efd03fd07f808f807fd0df709fd11fd08fb0bfd0cfd02ff02fd05fd02fa05fd05fd05fd02fa05f607fd03fd06fd0efd03fd07fd03fe08fd03fe07fd02fb06fd03fd09fd0bfd03fd08fa0afd0cfd05fd05fd03fb05fd05fd05fd0dfd04fd07fd03fd06fd0efd03fd07fd0dfd0cfd04fd06fd03fd09fd0bfd03fd08fd01fd09fd05ff06fd05fd05fd04fc05fd05fd05fd0dfd04fd07fd03fd06fd04fd07fd03fd07fd05ff07fd0cfd04fd06fd03fd09fd0bfd03fd08fd02fd08fd04fe06fd05fd05fd05fd06fd03fd06fd0dfd04fd07fd03fd07fd03fd07fd02fd08fd04fe07fd0dfd03fd06fd03fd09fd0bfd03fd08fd03fd07fd03fd06fd05fd05fd05fd07fd01fd07fd0dfd04fd06f709f907f808f606fb0df806fd03fd07f90af908fc03fd06f606fd05fd05fd05fd08fb0af87e7e7e7e7e7e7e68fe1af70afb08f708f807f505fd03fd07fd03fd07fd05fd05fd03fd07fd03fd07f608f907ff11f90afc1afd03fd07fc01fc07fd03fd06fd04fd06fe02fd02fe05fd03fd07fd03fd07fd05fd05fd03fd07fd03fd07fd04fd08fd0bfe14fd09fa19fd03fd07fd03fd07fd03fd06fd04fd06ff03fd03ff05fd03fd07fd03fd07fd05fd05fd03fd07fd03fd07fe05fd08fd0bfd13fd08fd02fd18fd03fd06fd05fd06fd03fd06fd04fd0afd09fd03fd07fd03fd07fd05fd06fd01fd08fd03fd07ff05fd09fd0cfd12fd07fd04fd17fd03fd06fd05fd06fd03fd06fd11fd09fd03fd07fd03fd07fd05fd07fb09fd03fd0cfd0afd0dfd11fd28f807fd05fd06f808f90cfd09fd03fd07fd03fd07fd02ff02fd08fd0bfd01fd0cfd0bfd0efd10fd28f807fd05fd06f809f90bfd09fd03fd07fd03fd07fd02ff02fd08fd0cfb0cfd0cfd0ffd0ffd28fd0cfd03fb06fd02fd0efd0afd09fd03fd07fd03fd07fd02ff02fd07fb0cfd0cfd0dfd10fd0efd28fd0cfd02fa06fd03fd06fd04fd0afd09fd03fd07fd03fd08f707fd01fd0bfd0bfd05ff08fd11fd0dfd28fd0df707fd03fd06fd04fd0afd09fd03fd08fd01fd09fc01fc06fd03fd0afd0afd05fe08fd12fd0cfd28fd0df707fd03fd06fd04fd0afd09fd03fd09fb0bfd01fd07fd03fd0afd0afd04fd08fd13fd0bfd27fb12fd06fc03fd07f809f908f90bfd0cfd01fd07fd03fd08f908f608f910fd06f93cfa7e54f07e72f07e7e7e7e0bfd1dfc21fb19fb18fc10fd0ffd07fc0dfa39fd1efd22fd19fd01fd18fd10fd0ffd08fd10fd3bfd1cfd22fd19fd01fd18fd10fd0ffd08fd10fd3bfd1cfd22fd19fd1cfd2dfd10fd4af909f808f909f808f90afd0cfb02fe07fd01fc08fa0cfa08fd03fd0afd09f606f809f91efd08fd03fd06fd03fd07fd03fd07fd03fd07f808fd03fd08fc02fd0afd0ffd08fd02fd0bfd09fd02ff02fd05fd03fd07fd03fd1dfd08fd03fd06fd03fd07fd03fd07fd03fd07f808fd03fd08fc02fd0afd0ffd08fd01fd0cfd09fd02ff02fd05fd03fd07fd03fd18f808fd03fd06fd0dfd03fd07f709fd0bfd03fd08fd03fd0afd0ffd08fa0dfd09fd02ff02fd05fd03fd07fd03fd17fd03fd08fd03fd06fd0dfd03fd07fd0ffd0bfd03fd08fd03fd0afd0ffd08fd01fd0cfd09fd02ff02fd05fd03fd07fd03fd17fd03fd08fd03fd06fd03fd07fd03fd07fd03fd09fd0cf808fd03fd0afd0ffd08fd02fd0bfd09fd02ff02fd05fd03fd07fd03fd17fd03fd08fd03fd06fd03fd07fd03fd07fd03fd09fd0df908fd03fd0afd0ffd08fd03fd0afd09fd02ff02fd05fd03fd07fd03fd18fb02fe06fe02fb08f909fb02fe07f908f90ffd07fc03fd07f706fd03fd07fc03fd07f706fd05fd05fd03fd08f978fd03fd27fd03fd7e4af92afa7e7e7e7e7e7e18fa09fc09fa1efe4eff6efd0dfc0dfd1cfc4cfe6efd0dfc0dfd1bfa4afd6efd0dfc0dfd1afd02fd07fe02fb07fb02fe07fc02fd08f908f707fd03fd07fd03fd07fd05fd05fd02fd09fd03fd06f80afd0efc0efd08fb03fd05fd04fd07fd03fd05fd03fd09f706fd04fe09fd0bfd03fd07fd03fd07fd05fd05fd02fd09fd03fd06fe03fd08fd24fd05fd01fd02fd05fe06fe07fd03fd05fd03fd09fc02fd06fd04fe09fd0bfd03fd07fd03fd07fd05fd06fa0afd03fd06ff03fd09fd24fd05fd02fd01fd05fe06fe07fd03fd05fd03fd09fd0dfb0cfd0bfd03fd07fd03fd07fd02ff02fd07fc0bfd03fd09fd0cfd0efc0efd07fd03fb06fe06fe07fd03fd05fd03fd09fd0ffb0afd0bfd03fd07fd03fd07fd02ff02fd07fc0bfd03fd08fd0efd0dfc0dfd19fe06fe07fd03fd05fd03fd09fd0cfe04fd09fd01fd07fd03fd08fd01fd09fc01fc07fa0bf908fd03ff0bfd0dfc0dfd19fe06fe07f807f809fd0cfe04fd09fd01fd07fd03fd09fb0bfd01fd07fd02fd0bfb08fd03fe0bfd0dfc0dfd19f607fd11fd08fb0cf90bfb09fb02fe09fd0cfd01fd07fd02fd0dfd08f80cfa09fc09fa1af607fd11fd7cfd69fb0ffb77fa";

// src/local-framework/graphics/renderers/text-renderer/TextRenderer.ts
var k_gridSize = [16, 6];
var k_texCoord = [1 / k_gridSize[0], 1 / k_gridSize[1]];
var k_bufferSize5 = 36864;

class TextRenderer {
  _shader;
  _geometry;
  _texture = new Texture;
  _texCoordMap;
  _buffer = new Float32Array(k_bufferSize5);
  _currentSize = 0;
  _textScale = 14;
  _textColor = [1, 1, 1];
  _horizontalTextAlign = "left";
  _verticalTextAlign = "top";
  constructor() {
    this._shader = new ShaderProgram("TextRenderer", {
      vertexSrc: text_renderer_glsl_default,
      fragmentSrc: text_renderer_glsl_default2,
      attributes: [
        "a_vertex_position",
        "a_vertex_texCoord",
        "a_offset_position",
        "a_offset_texCoord",
        "a_offset_color",
        "a_offset_scale"
      ],
      uniforms: ["u_composedMatrix", "u_texture"]
    });
    const geoBuilder = new exports_GeometryWrapper.GeometryBuilder;
    geoBuilder.reset().setPrimitiveType("triangles").addVbo().addVboAttribute("a_vertex_position", "vec2f").addVboAttribute("a_vertex_texCoord", "vec2f").setStride(16).addVbo().setVboAsDynamic().setVboAsInstanced().addVboAttribute("a_offset_position", "vec3f").addVboAttribute("a_offset_texCoord", "vec2f").addVboAttribute("a_offset_color", "vec3f").addVboAttribute("a_offset_scale", "float").setStride(36);
    this._geometry = new exports_GeometryWrapper.Geometry(this._shader, geoBuilder.getDef());
    const vertices = [
      {
        position: [0.5, -0.5],
        texCoord: [k_texCoord[0] * 1, k_texCoord[1] * 1]
      },
      {
        position: [-0.5, -0.5],
        texCoord: [k_texCoord[0] * 0, k_texCoord[1] * 1]
      },
      {
        position: [0.5, 0.5],
        texCoord: [k_texCoord[0] * 1, k_texCoord[1] * 0]
      },
      {
        position: [-0.5, 0.5],
        texCoord: [k_texCoord[0] * 0, k_texCoord[1] * 0]
      }
    ];
    const indices = [1, 0, 2, 1, 2, 3];
    const letterVertices = [];
    for (const index of indices) {
      const vertex = vertices[index];
      letterVertices.push(vertex.position[0], vertex.position[1], vertex.texCoord[0], vertex.texCoord[1]);
    }
    this._geometry.allocateBuffer(0, letterVertices, letterVertices.length);
    this._geometry.setPrimitiveCount(letterVertices.length / 4);
    this._texCoordMap = new Map([
      [" ", [0 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["!", [1 * k_texCoord[0], 0 * k_texCoord[1]]],
      ['"', [2 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["#", [3 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["$", [4 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["%", [5 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["&", [6 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["'", [7 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["(", [8 * k_texCoord[0], 0 * k_texCoord[1]]],
      [")", [9 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["*", [10 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["+", [11 * k_texCoord[0], 0 * k_texCoord[1]]],
      [",", [12 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["-", [13 * k_texCoord[0], 0 * k_texCoord[1]]],
      [".", [14 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["/", [15 * k_texCoord[0], 0 * k_texCoord[1]]],
      ["0", [0 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["1", [1 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["2", [2 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["3", [3 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["4", [4 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["5", [5 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["6", [6 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["7", [7 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["8", [8 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["9", [9 * k_texCoord[0], 1 * k_texCoord[1]]],
      [":", [10 * k_texCoord[0], 1 * k_texCoord[1]]],
      [";", [11 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["<", [12 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["=", [13 * k_texCoord[0], 1 * k_texCoord[1]]],
      [">", [14 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["?", [15 * k_texCoord[0], 1 * k_texCoord[1]]],
      ["@", [0 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["A", [1 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["B", [2 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["C", [3 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["D", [4 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["E", [5 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["F", [6 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["G", [7 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["H", [8 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["I", [9 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["J", [10 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["K", [11 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["L", [12 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["M", [13 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["N", [14 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["O", [15 * k_texCoord[0], 2 * k_texCoord[1]]],
      ["P", [0 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["Q", [1 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["R", [2 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["S", [3 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["T", [4 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["U", [5 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["V", [6 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["W", [7 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["X", [8 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["Y", [9 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["Z", [10 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["[", [11 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["\\", [12 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["]", [13 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["^", [14 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["_", [15 * k_texCoord[0], 3 * k_texCoord[1]]],
      ["`", [0 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["a", [1 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["b", [2 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["c", [3 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["d", [4 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["e", [5 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["f", [6 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["g", [7 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["h", [8 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["i", [9 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["j", [10 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["k", [11 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["l", [12 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["m", [13 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["n", [14 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["o", [15 * k_texCoord[0], 4 * k_texCoord[1]]],
      ["p", [0 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["q", [1 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["r", [2 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["s", [3 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["t", [4 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["u", [5 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["v", [6 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["w", [7 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["x", [8 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["y", [9 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["z", [10 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["{", [11 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["|", [12 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["}", [13 * k_texCoord[0], 5 * k_texCoord[1]]],
      ["~", [14 * k_texCoord[0], 5 * k_texCoord[1]]]
    ]);
    const width = 256;
    const height = 96;
    const imagePixels = new Uint8Array(width * height * 4);
    {
      let index = 0;
      for (let ii = 0;ii < asciiTextureHex.length; ii += 2) {
        let currSize = parseInt(`${asciiTextureHex.substring(ii, ii + 2)}000000`, 16) >> 24;
        let currVal = 0;
        if (currSize < 0) {
          currSize = -currSize;
          currVal = 255;
        }
        for (let ii2 = 0;ii2 < currSize; ++ii2) {
          imagePixels[index * 4 + 0] = currVal;
          imagePixels[index * 4 + 1] = currVal;
          imagePixels[index * 4 + 2] = currVal;
          imagePixels[index * 4 + 3] = currVal;
          ++index;
        }
      }
    }
    this._texture.initialize();
    this._texture.bind((boundTexture) => {
      boundTexture.loadFromMemory(width, height, imagePixels);
    });
  }
  setTextAlign(inHorizontalTextAlign, inVerticalTextAlign) {
    this._horizontalTextAlign = inHorizontalTextAlign;
    this._verticalTextAlign = inVerticalTextAlign;
    return this;
  }
  setTextScale(inScale) {
    this._textScale = inScale;
    return this;
  }
  setTextColor(inRed, inGreen, inBlue) {
    this._textColor[0] = inRed;
    this._textColor[1] = inGreen;
    this._textColor[2] = inBlue;
    return this;
  }
  pushText(inMessage, inPosition) {
    if (inMessage.length === 0) {
      return this;
    }
    if (this._textScale <= 0) {
      return this;
    }
    const allLineWidth = [0];
    for (let ii = 0;ii < inMessage.length; ++ii) {
      if (inMessage[ii] == "\n") {
        allLineWidth.push(0);
      } else {
        allLineWidth[allLineWidth.length - 1] += 1;
      }
    }
    if (allLineWidth.length === 0) {
      return this;
    }
    let lineIndex = 0;
    const currPos = [0, 0];
    const hScale = this._textScale * 0.5;
    switch (this._horizontalTextAlign) {
      case "left":
        currPos[0] = inPosition[0];
        break;
      case "centered":
        currPos[0] = inPosition[0] - allLineWidth[lineIndex] * hScale + hScale;
        break;
      case "right":
        currPos[0] = inPosition[0] - allLineWidth[lineIndex] * this._textScale + this._textScale;
        break;
    }
    switch (this._verticalTextAlign) {
      case "top":
        currPos[1] = inPosition[1];
        break;
      case "centered":
        currPos[1] = inPosition[1] + allLineWidth.length * hScale - hScale;
        break;
      case "bottom":
        currPos[1] = inPosition[1] - (allLineWidth.length - 1) * this._textScale;
        break;
    }
    for (let ii = 0;ii < inMessage.length; ++ii) {
      const letter = inMessage[ii];
      if (letter == "\n") {
        lineIndex += 1;
        switch (this._horizontalTextAlign) {
          case "left":
            currPos[0] = inPosition[0];
            break;
          case "centered":
            currPos[0] = inPosition[0] - allLineWidth[lineIndex] * hScale + hScale;
            break;
          case "right":
            currPos[0] = inPosition[0] - allLineWidth[lineIndex] * this._textScale + this._textScale;
            break;
        }
        currPos[1] -= this._textScale;
      } else {
        this._pushLetter(letter, currPos);
        currPos[0] += this._textScale;
      }
    }
    return this;
  }
  _pushLetter(inCharacter, inPosition) {
    if (this._currentSize + 90 >= this._buffer.length) {
      return;
    }
    const texCoord = this._texCoordMap.get(inCharacter);
    if (!texCoord)
      throw new Error(`fail to find a letter, letter=${inCharacter}`);
    for (let yy = -1;yy <= 1; ++yy) {
      for (let xx = -1;xx <= 1; ++xx) {
        this._buffer[this._currentSize++] = inPosition[0] + 2 * xx;
        this._buffer[this._currentSize++] = inPosition[1] + 2 * yy;
        this._buffer[this._currentSize++] = -0.1;
        this._buffer[this._currentSize++] = texCoord[0];
        this._buffer[this._currentSize++] = texCoord[1];
        this._buffer[this._currentSize++] = 0;
        this._buffer[this._currentSize++] = 0;
        this._buffer[this._currentSize++] = 0;
        this._buffer[this._currentSize++] = this._textScale;
      }
    }
    this._buffer[this._currentSize++] = inPosition[0];
    this._buffer[this._currentSize++] = inPosition[1];
    this._buffer[this._currentSize++] = 0;
    this._buffer[this._currentSize++] = texCoord[0];
    this._buffer[this._currentSize++] = texCoord[1];
    this._buffer[this._currentSize++] = this._textColor[0];
    this._buffer[this._currentSize++] = this._textColor[1];
    this._buffer[this._currentSize++] = this._textColor[2];
    this._buffer[this._currentSize++] = this._textScale;
  }
  flush(composedMatrix) {
    if (this._currentSize === 0) {
      return this;
    }
    this._shader.bind((boundShader) => {
      boundShader.setMatrix4Uniform("u_composedMatrix", composedMatrix);
      boundShader.setTextureUniform("u_texture", this._texture, 0);
      this._geometry.allocateBuffer(1, this._buffer, this._currentSize);
      this._geometry.setInstancedCount(this._currentSize / 9);
      this._geometry.render();
    });
    Texture.unbind();
    this.clear();
    return this;
  }
  clear() {
    this._currentSize = 0;
    return this;
  }
}
// src/local-framework/graphics/renderers/widgets/index.ts
var exports_widgets = {};
__export(exports_widgets, {
  renderFpsMeter: () => {
    {
      return renderFpsMeter;
    }
  },
  addKeysTouchesWidgets: () => {
    {
      return addKeysTouchesWidgets;
    }
  },
  addKeyStrokesWidgets: () => {
    {
      return addKeyStrokesWidgets;
    }
  },
  addArrowStrokesWidgets: () => {
    {
      return addArrowStrokesWidgets;
    }
  }
});

// src/local-framework/graphics/renderers/widgets/renderControls.ts
var defaultColor = [0.2, 0.2, 0.2];
var activatedColor = [0.2, 0.6, 0.2];
var _renderIndicator = (currIndicator, stackRenderers, textRenderer) => {
  const { center } = currIndicator;
  stackRenderers.pushCenteredRectangle(exports_vec3.fromValues(center[0], center[1], -0.3), currIndicator.size, [0, 0, 0]);
  stackRenderers.pushCenteredRectangle(exports_vec3.fromValues(center[0], center[1], -0.2), [currIndicator.size[0] - 2, currIndicator.size[1] - 2], currIndicator.color);
  if (currIndicator.text) {
    textRenderer.setTextScale(16).setTextAlign("centered", "centered").pushText(currIndicator.text, center).setTextAlign("left", "top");
  }
  if (currIndicator.lines) {
    currIndicator.lines.forEach((currLine) => {
      stackRenderers.pushThickLine([center[0] + currLine.a[0], center[1] + currLine.a[1], 0], [center[0] + currLine.b[0], center[1] + currLine.b[1], 0], currLine.thickness, currLine.color);
    });
  }
};
var addKeyStrokesWidgets = (inPos, stackRenderers, textRenderer) => {
  _renderIndicator({
    center: [inPos[0], inPos[1]],
    size: [40, 40],
    text: "A\nQ",
    color: GlobalKeyboardManager.isPressed("A", "Q") ? activatedColor : defaultColor
  }, stackRenderers, textRenderer);
  _renderIndicator({
    center: [inPos[0] + 45, inPos[1]],
    size: [40, 40],
    text: "S",
    color: GlobalKeyboardManager.isPressed("S") ? activatedColor : defaultColor
  }, stackRenderers, textRenderer);
  _renderIndicator({
    center: [inPos[0] + 45, inPos[1] + 45],
    size: [40, 40],
    text: "W\nZ",
    color: GlobalKeyboardManager.isPressed("W", "Z") ? activatedColor : defaultColor
  }, stackRenderers, textRenderer);
  _renderIndicator({
    center: [inPos[0] + 90, inPos[1]],
    size: [40, 40],
    text: "D",
    color: GlobalKeyboardManager.isPressed("D") ? activatedColor : defaultColor
  }, stackRenderers, textRenderer);
};
var addArrowStrokesWidgets = (inPos, stackRenderers, textRenderer) => {
  _renderIndicator({
    center: [inPos[0], inPos[1]],
    size: [40, 40],
    lines: [
      { a: [15, 0], b: [-8, 0], thickness: 6, color: [1, 1, 1] },
      { a: [0, 10], b: [-12, -2], thickness: 6, color: [1, 1, 1] },
      { a: [0, -10], b: [-12, 2], thickness: 6, color: [1, 1, 1] }
    ],
    color: GlobalKeyboardManager.isPressed("ArrowLeft") ? activatedColor : defaultColor
  }, stackRenderers, textRenderer);
  _renderIndicator({
    center: [inPos[0] + 45, inPos[1]],
    size: [40, 40],
    lines: [
      { a: [0, 15], b: [0, -8], thickness: 6, color: [1, 1, 1] },
      { a: [10, 0], b: [-2, -12], thickness: 6, color: [1, 1, 1] },
      { a: [-10, 0], b: [2, -12], thickness: 6, color: [1, 1, 1] }
    ],
    color: GlobalKeyboardManager.isPressed("ArrowDown") ? activatedColor : defaultColor
  }, stackRenderers, textRenderer);
  _renderIndicator({
    center: [inPos[0] + 45, inPos[1] + 45],
    size: [40, 40],
    lines: [
      { a: [0, -15], b: [0, 8], thickness: 6, color: [1, 1, 1] },
      { a: [10, 0], b: [-2, 12], thickness: 6, color: [1, 1, 1] },
      { a: [-10, 0], b: [2, 12], thickness: 6, color: [1, 1, 1] }
    ],
    color: GlobalKeyboardManager.isPressed("ArrowUp") ? activatedColor : defaultColor
  }, stackRenderers, textRenderer);
  _renderIndicator({
    center: [inPos[0] + 90, inPos[1]],
    size: [40, 40],
    lines: [
      { a: [-15, 0], b: [8, 0], thickness: 6, color: [1, 1, 1] },
      { a: [0, 10], b: [12, -2], thickness: 6, color: [1, 1, 1] },
      { a: [0, -10], b: [12, 2], thickness: 6, color: [1, 1, 1] }
    ],
    color: GlobalKeyboardManager.isPressed("ArrowRight") ? activatedColor : defaultColor
  }, stackRenderers, textRenderer);
};
var addKeysTouchesWidgets = (inCanvasElement, inPos, stackRenderers, textRenderer) => {
  if (GlobalTouchManager.isSupported(inCanvasElement)) {
    _renderIndicator({
      center: [inPos[0] + 115, inPos[1]],
      size: [230, 60],
      text: "Touch Events\nSupported\n(double tap)",
      color: [0, 0.5, 0]
    }, stackRenderers, textRenderer);
  } else {
    _renderIndicator({
      center: [inPos[0] + 115, inPos[1]],
      size: [230, 60],
      text: "Touch Events\nNot Supported",
      color: [0.5, 0, 0]
    }, stackRenderers, textRenderer);
  }
  if (GlobalPointerLockManager.canBePointerLocked(inCanvasElement)) {
    _renderIndicator({
      center: [inPos[0] + 105, inPos[1] + 70],
      size: [210, 60],
      text: "Mouse\nSupported",
      color: [0, 0.5, 0]
    }, stackRenderers, textRenderer);
  } else {
    _renderIndicator({
      center: [inPos[0] + 105, inPos[1] + 70],
      size: [210, 60],
      text: "Mouse Events\nNot Supported",
      color: [0.5, 0, 0]
    }, stackRenderers, textRenderer);
  }
};
// src/local-framework/graphics/renderers/widgets/renderFpsMeter.ts
var renderFpsMeter = (inPos, inSize, inFrameProfiler, inStackRenderers, inTextRenderer, inShowFps = false) => {
  const k_divider = 5;
  const k_verticalSize = Math.ceil(inFrameProfiler.maxDelta / k_divider) * k_divider;
  {
    inStackRenderers.pushOriginBoundRectangle(inPos, inSize, [0, 0, 0, 0.5]);
    const allVertices = [
      [inPos[0] + inSize[0] * 0, inPos[1] + inSize[1] * 0, 0],
      [inPos[0] + inSize[0] * 1, inPos[1] + inSize[1] * 0, 0],
      [inPos[0] + inSize[0] * 1, inPos[1] + inSize[1] * 1, 0],
      [inPos[0] + inSize[0] * 0, inPos[1] + inSize[1] * 1, 0]
    ];
    inStackRenderers.pushLine(allVertices[0], allVertices[1], [1, 1, 1]);
    inStackRenderers.pushLine(allVertices[1], allVertices[2], [1, 1, 1]);
    inStackRenderers.pushLine(allVertices[2], allVertices[3], [1, 1, 1]);
    inStackRenderers.pushLine(allVertices[3], allVertices[0], [1, 1, 1]);
  }
  {
    for (let currDivider = k_divider;currDivider < k_verticalSize; currDivider += k_divider) {
      const ratio = currDivider / k_verticalSize;
      const pointA = [
        inPos[0] + 0,
        inPos[1] + inSize[1] * ratio,
        0
      ];
      const pointB = [
        inPos[0] + inSize[0],
        inPos[1] + inSize[1] * ratio,
        0
      ];
      inStackRenderers.pushLine(pointA, pointB, [0.5, 0.5, 0.5]);
    }
  }
  {
    if (inFrameProfiler.framesDelta.length >= 2) {
      const widthStep = inSize[0] / inFrameProfiler.framesDelta.length;
      let prevDelta = inFrameProfiler.framesDelta[0];
      let prevCoordX = 0;
      let prevCoordY = inSize[1] * prevDelta / k_verticalSize;
      for (let ii = 1;ii < inFrameProfiler.framesDelta.length; ++ii) {
        const currDelta = inFrameProfiler.framesDelta[ii];
        const currCoordX = ii * widthStep;
        const currCoordY = inSize[1] * currDelta / k_verticalSize;
        const pointA = [
          inPos[0] + prevCoordX,
          inPos[1] + prevCoordY,
          0
        ];
        const pointB = [
          inPos[0] + currCoordX,
          inPos[1] + currCoordY,
          0
        ];
        inStackRenderers.pushLine(pointA, pointB, [1, 1, 1]);
        prevDelta = currDelta;
        prevCoordX = currCoordX;
        prevCoordY = currCoordY;
      }
    }
  }
  {
    const k_textScale = 14;
    const k_textHScale = k_textScale * 0.5;
    const averageValue = inFrameProfiler.averageDelta;
    const maxValue = inFrameProfiler.maxDelta;
    const minValue = inFrameProfiler.minDelta;
    let averageStr = `~${averageValue.toFixed(0)}ms`;
    let maxStr = `<${maxValue}ms`;
    let minStr = `>${minValue}ms`;
    if (inShowFps === true) {
      const _getFpsStr = (inVal) => inVal < 999 ? inVal.toFixed(0) : "???";
      averageStr += `\n~${_getFpsStr(1000 / averageValue)}fps`;
      maxStr += `\n<${_getFpsStr(1000 / maxValue)}fps`;
      minStr += `\n>${_getFpsStr(1000 / minValue)}fps`;
    }
    inTextRenderer.setTextScale(k_textScale).setTextAlign("left", "top").setTextColor(1, 1, 0.75).pushText(averageStr, [inPos[0] + 7, inPos[1] - 8]).setTextAlign("left", "centered").setTextColor(1, 0.75, 0.75).pushText(maxStr, [
      inPos[0] + inSize[0] + k_textHScale,
      inPos[1] + inSize[1] - k_textHScale * 1
    ]).setTextColor(0.75, 1, 0.75).pushText(minStr, [
      inPos[0] + inSize[0] + k_textHScale,
      inPos[1] + k_textHScale * 1
    ]).setTextColor(1, 1, 1);
  }
};
// src/local-framework/graphics/images/index.ts
var exports_images = {};
__export(exports_images, {
  getImageFromUrl: () => {
    {
      return getImageFromUrl;
    }
  },
  getImageFromBuffer: () => {
    {
      return getImageFromBuffer;
    }
  },
  fetchImageBuffer: () => {
    {
      return fetchImageBuffer;
    }
  }
});

// src/local-framework/graphics/images/getImageFromUrl.ts
var getImageFromUrl = (url) => {
  return new Promise((resolve, reject) => {
    const image = new Image;
    image.onerror = reject;
    image.onload = () => {
      resolve(image);
    };
    image.src = url;
  });
};
var fetchImageBuffer = async (url, onProgress) => {
  const response = await fetch(url);
  const reader = response.body.getReader();
  const contentLength = +response.headers.get("Content-Length");
  const contentType = response.headers.get("Content-Type");
  let lastPercent = 0;
  let receivedLength = 0;
  let chunks = [];
  while (true) {
    const { done, value } = await reader.read();
    if (done) {
      break;
    }
    chunks.push(value);
    receivedLength += value.length;
    if (onProgress) {
      onProgress(receivedLength, contentLength);
    }
  }
  const chunksAll = new Uint8Array(receivedLength);
  let position = 0;
  for (let chunk of chunks) {
    chunksAll.set(chunk, position);
    position += chunk.length;
  }
  return {
    buffer: chunksAll,
    type: contentType
  };
};
var getImageFromBuffer = async (buffer, type) => {
  return new Promise((resolve, reject) => {
    const image = new Image;
    image.onerror = reject;
    image.onload = () => {
      resolve(image);
    };
    image.src = URL.createObjectURL(new Blob([buffer], { type }));
  });
};
// src/local-framework/graphics/geometries/index.ts
var exports_geometries = {};
__export(exports_geometries, {
  makeSphere: () => {
    {
      return makeSphere;
    }
  },
  makeBox: () => {
    {
      return makeBox;
    }
  }
});

// src/local-framework/graphics/geometries/makeBox.ts
var makeBox = (inSize) => {
  const hSizeX = inSize[0] * 0.5;
  const hSizeY = inSize[1] * 0.5;
  const hSizeZ = inSize[2] * 0.5;
  const allNormals = [];
  allNormals.push([-1, 0, 0]);
  allNormals.push([1, 0, 0]);
  allNormals.push([0, -1, 0]);
  allNormals.push([0, 1, 0]);
  allNormals.push([0, 0, -1]);
  allNormals.push([0, 0, 1]);
  const allVertices = [];
  allVertices.push([-hSizeX, -hSizeY, -hSizeZ]);
  allVertices.push([+hSizeX, -hSizeY, -hSizeZ]);
  allVertices.push([-hSizeX, +hSizeY, -hSizeZ]);
  allVertices.push([+hSizeX, +hSizeY, -hSizeZ]);
  allVertices.push([-hSizeX, -hSizeY, +hSizeZ]);
  allVertices.push([+hSizeX, -hSizeY, +hSizeZ]);
  allVertices.push([-hSizeX, +hSizeY, +hSizeZ]);
  allVertices.push([+hSizeX, +hSizeY, +hSizeZ]);
  const allIndices = [];
  allIndices.push([0, 2, 1, 4]);
  allIndices.push([2, 3, 1, 4]);
  allIndices.push([4, 5, 6, 5]);
  allIndices.push([6, 5, 7, 5]);
  allIndices.push([1, 3, 5, 1]);
  allIndices.push([5, 3, 7, 1]);
  allIndices.push([0, 4, 2, 0]);
  allIndices.push([4, 6, 2, 0]);
  allIndices.push([2, 6, 3, 3]);
  allIndices.push([6, 7, 3, 3]);
  allIndices.push([0, 1, 4, 2]);
  allIndices.push([4, 1, 5, 2]);
  const vertices = [];
  for (const index of allIndices) {
    vertices.push({
      pos: exports_vec3.copy([0, 0, 0], allVertices[index[0]]),
      normal: exports_vec3.copy([0, 0, 0], allNormals[index[3]])
    });
    vertices.push({
      pos: exports_vec3.copy([0, 0, 0], allVertices[index[1]]),
      normal: exports_vec3.copy([0, 0, 0], allNormals[index[3]])
    });
    vertices.push({
      pos: exports_vec3.copy([0, 0, 0], allVertices[index[2]]),
      normal: exports_vec3.copy([0, 0, 0], allNormals[index[3]])
    });
  }
  return vertices;
};
// src/local-framework/graphics/geometries/makeSphere.ts
var _drawSpherePatch = (vertices, quality, radius, v01, v02, v03) => {
  if (quality <= 0) {
    vertices.push({
      pos: exports_vec3.scale(exports_vec3.create(), v01, radius),
      normal: exports_vec3.copy(exports_vec3.create(), v01)
    });
    vertices.push({
      pos: exports_vec3.scale(exports_vec3.create(), v03, radius),
      normal: exports_vec3.copy(exports_vec3.create(), v03)
    });
    vertices.push({
      pos: exports_vec3.scale(exports_vec3.create(), v02, radius),
      normal: exports_vec3.copy(exports_vec3.create(), v02)
    });
  } else {
    const v12 = exports_vec3.normalize(exports_vec3.create(), exports_vec3.lerp(exports_vec3.create(), v01, v02, 0.5));
    const v23 = exports_vec3.normalize(exports_vec3.create(), exports_vec3.lerp(exports_vec3.create(), v02, v03, 0.5));
    const v31 = exports_vec3.normalize(exports_vec3.create(), exports_vec3.lerp(exports_vec3.create(), v03, v01, 0.5));
    quality -= 1;
    _drawSpherePatch(vertices, quality, radius, v01, v12, v31);
    _drawSpherePatch(vertices, quality, radius, v12, v02, v23);
    _drawSpherePatch(vertices, quality, radius, v31, v23, v03);
    _drawSpherePatch(vertices, quality, radius, v12, v23, v31);
  }
};
var makeSphere = (quality, radius) => {
  const k_icx = 0.5257311121191336;
  const k_icz = 0.8506508083520399;
  const tmpVertices = [
    [-k_icx, 0, +k_icz],
    [+k_icx, 0, +k_icz],
    [-k_icx, 0, -k_icz],
    [+k_icx, 0, -k_icz],
    [0, +k_icz, +k_icx],
    [0, +k_icz, -k_icx],
    [0, -k_icz, +k_icx],
    [0, -k_icz, -k_icx],
    [+k_icz, +k_icx, 0],
    [-k_icz, +k_icx, 0],
    [+k_icz, -k_icx, 0],
    [-k_icz, -k_icx, 0]
  ];
  const tmpIndices = [
    [0, 4, 1],
    [0, 9, 4],
    [9, 5, 4],
    [4, 5, 8],
    [4, 8, 1],
    [8, 10, 1],
    [8, 3, 10],
    [5, 3, 8],
    [5, 2, 3],
    [2, 7, 3],
    [7, 10, 3],
    [7, 6, 10],
    [7, 11, 6],
    [11, 0, 6],
    [0, 1, 6],
    [6, 1, 10],
    [9, 0, 11],
    [9, 11, 2],
    [9, 2, 5],
    [7, 2, 11]
  ];
  const vertices = [];
  for (const index of tmpIndices) {
    _drawSpherePatch(vertices, quality, radius, tmpVertices[index[0]], tmpVertices[index[1]], tmpVertices[index[2]]);
  }
  return vertices;
};
// src/webgl-ray-tracer/src/experiment/utilities/Logger.ts
class Logger {
  _textAreaElement;
  _lines = [];
  _maxLines = 30;
  constructor(textAreaElementId) {
    this._textAreaElement = document.getElementById(textAreaElementId);
    if (!this._textAreaElement)
      throw new Error(`DOM elements not found, id=${textAreaElementId}`);
    this._textAreaElement.value = "";
  }
  log(...args) {
    if (args.length === 0)
      return;
    const text = Array.prototype.slice.call(args).join(" ");
    console.log(text);
    this._pushText(text);
  }
  error(...args) {
    if (args.length === 0)
      return;
    const text = Array.prototype.slice.call(args).join(" ");
    console.error(text);
    this._pushText(`[ERR] - ${text}`);
  }
  _pushText(text) {
    this._lines.push(text);
    if (this._lines.length > this._maxLines)
      this._lines.splice(0, this._lines.length - this._maxLines);
    this._textAreaElement.value = `${this._lines.join("\n")}\n`;
    this._textAreaElement.scrollTop = this._textAreaElement.scrollHeight;
  }
  peekLast() {
    if (this._lines.length > 0)
      return this._lines[this._lines.length - 1];
    return;
  }
  popLast() {
    if (this._lines.length > 0)
      this._lines.splice(this._lines.length - 1, 1);
  }
}

// src/webgl-ray-tracer/src/experiment/graphics/renderers/ray-tracer-renderer/shaders/ray-tracer.glsl.vert
var ray_tracer_glsl_default = `
#version 300 es

precision highp float;

in vec2 a_vertexPosition;
in vec3 a_plotPosition;

out vec3 v_position;

void main(void)
{
  gl_Position = vec4(a_vertexPosition, 1.0, 1.0);

  v_position = a_plotPosition;
}
`.trim();

// src/webgl-ray-tracer/src/experiment/graphics/renderers/ray-tracer-renderer/shaders/ray-tracer.glsl.frag
var ray_tracer_glsl_default2 = `
#version 300 es

precision highp float;

//
//
//


// Indices of refractionFactor
const float Air = 1.0;
const float Glass = 1.51714;

// Air to glass ratio of the indices of refractionFactor (Eta)
const float Eta = Air / Glass;

// see http://en.wikipedia.org/wiki/Refractive_index Reflectivity
const float R0 = ((Air - Glass) * (Air - Glass)) / ((Air + Glass) * (Air + Glass));

//
//
//

uniform vec3        u_cameraEye;

//

uniform sampler2D   u_sceneTextureData;
uniform int         u_sceneTextureSize;

uniform int       u_spheresStart;
uniform int       u_spheresStop;

uniform int       u_boxesStart;
uniform int       u_boxesStop;

uniform int       u_trianglesStart;
uniform int       u_trianglesStop;

//

uniform sampler2D   u_lightsTextureData;

uniform int       u_sunLightsStart;
uniform int       u_sunLightsStop;

uniform int       u_spotLightsStart;
uniform int       u_spotLightsStop;

//
//
//

in vec3  v_position;

out vec4 o_color;

//

const float     g_ambiantLight = 0.05;

const int       g_maxTotalReflection = 2;
const bool      g_shadowsEnabled = true;

const vec3      g_backgroundColor = vec3(0.1);

//

struct RayValues
{
  vec3 origin;
  vec3 direction;
};

struct RayResult
{
  bool hasHit;
  float distance;
  vec3 position;
  vec3 normal;
  vec4 color;
  float reflectionFactor;
  float refractionFactor;
  bool lightEnabled;
};

//
//
//
//
//

float getSceneDataByIndex(int index)
{
  return texelFetch(u_sceneTextureData, ivec2(index, 0), 0).x;
}

vec3 getSceneVec3ByIndex(int index)
{
  return vec3(
    texelFetch(u_sceneTextureData, ivec2(index + 0, 0), 0).x,
    texelFetch(u_sceneTextureData, ivec2(index + 1, 0), 0).x,
    texelFetch(u_sceneTextureData, ivec2(index + 2, 0), 0).x
  );
}

float getLightsDataByIndex(int index)
{
  return texelFetch(u_lightsTextureData, ivec2(index, 0), 0).x;
}

vec3 getLightsVec3ByIndex(int index)
{
  return vec3(
    texelFetch(u_lightsTextureData, ivec2(index + 0, 0), 0).x,
    texelFetch(u_lightsTextureData, ivec2(index + 1, 0), 0).x,
    texelFetch(u_lightsTextureData, ivec2(index + 2, 0), 0).x
  );
}

//
//
//
//
//

bool intersectSphere(
  RayValues ray,
  float radius,
  out float outDistance,
  out vec3 normal
) {
  float nearValue = 0.001; // TODO: hardcoded
  float farValue = 100.0; // TODO: hardcoded

  float b = dot(ray.origin, ray.direction);
  float c = dot(ray.origin, ray.origin) - radius * radius;
  float h = b * b - c;
  if (h < 0.0) {
    return false;
  }

  h = sqrt(h);

  float d1 = -b - h;
  if (d1 >= nearValue && d1 <= farValue)
  {
    normal = normalize(ray.origin + ray.direction * d1);
    outDistance = d1;
    return true;
  }

  float d2 = -b + h;
  if (d2 >= nearValue && d2 <= farValue)
  {
    normal = normalize(ray.origin + ray.direction * d2);
    outDistance = d2;
    return true;
  }

  return false;
}

bool intersectBox(RayValues ray, vec3 boxSize, out float outDistance, out vec3 normal)
{
  float nearValue = 0.001; // TODO: hardcoded
  float farValue = 100.0; // TODO: hardcoded

  //
  //
  // sad hack: fix a shadow related bug

  if (ray.direction.x == 0.0) ray.direction.x = -1e-8;
  if (ray.direction.y == 0.0) ray.direction.y = -1e-8;
  if (ray.direction.z == 0.0) ray.direction.z = -1e-8;

  // sad hack: fix a shadow related bug
  //
  //

  vec3 m = sign(ray.direction) / max(abs(ray.direction), 1e-8);
  vec3 n = m * ray.origin;
  vec3 k = abs(m) * boxSize;

  vec3 t1 = -n - k;
  vec3 t2 = -n + k;

  float tN = max(max(t1.x, t1.y), t1.z);
  float tF = min(min(t2.x, t2.y), t2.z);

  if (tN > tF || tF <= 0.0) {
    return false;
  }

  if (tN >= nearValue && tN <= farValue)
  {
    normal = normalize(-sign(ray.direction) * step(t1.yzx, t1.xyz) * step(t1.zxy, t1.xyz));
    outDistance = tN;
    return true;
  }

  if (tF >= nearValue && tF <= farValue)
  {
    normal = normalize(-sign(ray.direction) * step(t1.yzx, t1.xyz) * step(t1.zxy, t1.xyz));
    outDistance = tF;
    return true;
  }

  return false;
}

bool intersectTriangle(RayValues ray, vec3 v0, vec3 v1, vec3 v2, out float outDistance, out vec3 normal)
{
  float nearValue = 0.001; // TODO: hardcoded
  float farValue = 100.0; // TODO: hardcoded

  vec3 v1v0 = v1 - v0;
  vec3 v2v0 = v2 - v0;
  vec3 rov0 = ray.origin - v0;

  vec3 n = cross(v1v0, v2v0);
  vec3 q = cross(rov0, ray.direction);
  float d = 1.0 / dot(ray.direction, n);
  float u = d * dot(-q, v2v0);
  float v = d * dot(q, v1v0);
  float t = d * dot(-n, rov0);

  if (u < 0.0 || v < 0.0 || (u + v) > 1.0 || t < nearValue || t > farValue) {
    return false;
  }

  normal = normalize(-n);
  outDistance = t;
  return true;
}

// float intersectPlane(RayValues ray, vec3 normal, float offset)
// {
//     return -(dot(ray.origin, normal) + offset) / dot(ray.direction, normal);
// }

// float intersectPlane2(RayValues ray, vec3 normal, float offset)
// {
//     float nearValue = 0.001; // TODO: hardcoded
//     float farValue = 1000.0; // TODO: hardcoded

//     float a = dot(ray.direction, normal);
//     float d = -(dot(ray.origin, normal) + offset) / a;

//     if (a > 0.0 || d < nearValue || d > farValue)
//         return -1.0;

//     return d;
// }

// float diskIntersect(RayValues ray, vec3 center, vec3 normal, float radius)
// {
//     vec3  o = ray.origin - center;
//     float t = -dot(normal, o) / dot(ray.direction, normal);
//     vec3  q = o + ray.direction * t;
//     return (dot(q, q) < radius * radius) ? t : -1.0;
// }

//
//
//
//
//

bool intersectScene(RayValues ray, out RayResult outBestResult, bool shadowMode)
{
  float bestDistance = -1.0;

  outBestResult.hasHit = false;
  outBestResult.distance = -1.0;

  if (u_sceneTextureSize <= 0) {
    return false;
  }

  RayValues tmpRay;
  vec3 normal;

  for (int index = u_spheresStart; index < u_spheresStop; index += 12)
  {
    bool castShadow = (getSceneDataByIndex(index + 9) != 0.0);

    if (shadowMode && !castShadow) {
      continue;
    }

    tmpRay.origin = ray.origin;
    tmpRay.direction = ray.direction;

    vec3 center = getSceneVec3ByIndex(index + 0);

    tmpRay.origin -= center;

    float radius = getSceneDataByIndex(index + 3);

    float currDistance = 0.0;
    if (
      !intersectSphere(tmpRay, radius, currDistance, normal) ||
      (outBestResult.distance > 0.0 && currDistance > outBestResult.distance)
    ) {
      continue;
    }

    outBestResult.hasHit = true;
    outBestResult.distance = currDistance;
    outBestResult.position = ray.origin + currDistance * ray.direction;
    outBestResult.normal = normal;
    outBestResult.refractionFactor = 0.0;

    bool chessboardMaterialEnabled = (getSceneDataByIndex(index + 11) != 0.0);

    if (chessboardMaterialEnabled)
    {
      // vec3 txPos = (txx * vec4(outBestResult.position - center, 1.0)).xyz;
      vec3 txPos = (vec4(outBestResult.position - center, 1.0)).xyz;
      // chessboard color effect
      if (fract(txPos.x * 0.2) > 0.5 == fract(txPos.z * 0.2) > 0.5 == fract(txPos.y * 0.2) > 0.5)
      {
        outBestResult.color = vec4(1.0);
        outBestResult.reflectionFactor = 0.3;
      }
      else
      {
        outBestResult.color = vec4(0.0, 0.4, 0.45, 1.0);
        outBestResult.reflectionFactor = 0.0;
      }
    }
    else
    {
      vec3 color = getSceneVec3ByIndex(index + 4);

      float reflectionFactor = getSceneDataByIndex(index + 7);
      float refractionFactor = getSceneDataByIndex(index + 8);

      outBestResult.color = vec4(color, 0.5);
      outBestResult.reflectionFactor = reflectionFactor;
      outBestResult.refractionFactor = refractionFactor;
    }

    bool lightEnabled = (getSceneDataByIndex(index + 10) != 0.0);
    outBestResult.lightEnabled = lightEnabled;

    // if (shadowMode)
    //     return true;
  }

  for (int index = u_boxesStart; index < u_boxesStop; index += 26)
  {
    bool castShadow = (getSceneDataByIndex(index + 23) != 0.0);

    if (shadowMode && !castShadow) {
      continue;
    }

    tmpRay.origin = ray.origin;
    tmpRay.direction = ray.direction;

    mat4 normalTransformationMatrix = mat4(
      getSceneDataByIndex(index + 0),
      getSceneDataByIndex(index + 1),
      getSceneDataByIndex(index + 2),
      getSceneDataByIndex(index + 3),

      getSceneDataByIndex(index + 4),
      getSceneDataByIndex(index + 5),
      getSceneDataByIndex(index + 6),
      getSceneDataByIndex(index + 7),

      getSceneDataByIndex(index + 8),
      getSceneDataByIndex(index + 9),
      getSceneDataByIndex(index + 10),
      getSceneDataByIndex(index + 11),

      getSceneDataByIndex(index + 12),
      getSceneDataByIndex(index + 13),
      getSceneDataByIndex(index + 14),
      getSceneDataByIndex(index + 15)
    );

    vec3 boxSize = getSceneVec3ByIndex(index + 16);

    mat4 inversedTransformationMatrix = inverse(normalTransformationMatrix);

    // convert ray from world space to box space
    tmpRay.origin = (inversedTransformationMatrix * vec4(tmpRay.origin, 1.0)).xyz;
    tmpRay.direction = (inversedTransformationMatrix * vec4(tmpRay.direction, 0.0)).xyz;

    float currDistance = 0.0;
    if (
      !intersectBox(tmpRay, boxSize, currDistance, normal) ||
      (outBestResult.distance > 0.0 && currDistance > outBestResult.distance)
    ) {
      continue;
    }

    // convert normal from box space to world space
    normal = (normalTransformationMatrix * vec4(normal, 0.0)).xyz;

    outBestResult.hasHit = true;
    outBestResult.distance = currDistance;
    outBestResult.position = ray.origin + currDistance * ray.direction;
    outBestResult.normal = normal;
    outBestResult.refractionFactor = 0.0; // TODO

    bool chessboardMaterialEnabled = (getSceneDataByIndex(index + 25) != 0.0);

    if (chessboardMaterialEnabled)
    {
      vec3 txPos = (inversedTransformationMatrix * vec4(outBestResult.position, 1.0)).xyz;

      // chessboard color effect
      if (fract(txPos.x * 0.2) > 0.5 == fract(txPos.z * 0.2) > 0.5 == fract(txPos.y * 0.2) > 0.5)
      {
        outBestResult.color = vec4(1.0);
        outBestResult.reflectionFactor = 0.3;
      }
      else
      {
        outBestResult.color = vec4(0.0, 0.4, 0.45, 1.0);
        outBestResult.reflectionFactor = 0.0;
      }
    }
    else
    {
      vec3 color = getSceneVec3ByIndex(index + 19);

      float reflectionFactor = getSceneDataByIndex(index + 22);

      outBestResult.color = vec4(color, 1.0);
      outBestResult.reflectionFactor = reflectionFactor;
    }

    bool lightEnabled = (getSceneDataByIndex(index + 24) != 0.0);
    outBestResult.lightEnabled = lightEnabled;

    // if (shadowMode)
    //     return true;
  }

  for (int index = u_trianglesStart; index < u_trianglesStop; index += 15)
  {
    bool castShadow = (getSceneDataByIndex(index + 13) != 0.0);

    if (shadowMode && !castShadow) {
      continue;
    }

    tmpRay.origin = ray.origin;
    tmpRay.direction = ray.direction;

    vec3 v0 = getSceneVec3ByIndex(index + 0);
    vec3 v1 = getSceneVec3ByIndex(index + 3);
    vec3 v2 = getSceneVec3ByIndex(index + 6);

    float currDistance = 0.0;
    if (
      !intersectTriangle(tmpRay, v0, v1, v2, currDistance, normal) ||
      (outBestResult.distance > 0.0 && currDistance > outBestResult.distance)
    ) {
      continue;
    }

    outBestResult.hasHit = true;
    outBestResult.distance = currDistance;
    outBestResult.position = ray.origin + currDistance * ray.direction;
    outBestResult.normal = normal;
    outBestResult.refractionFactor = 0.0; // TODO

    vec3 color = getSceneVec3ByIndex(index + 9);

    float reflectionFactor = getSceneDataByIndex(index + 12);

    outBestResult.color = vec4(color, 1.0);
    outBestResult.reflectionFactor = reflectionFactor;

    bool lightEnabled = (getSceneDataByIndex(index + 14) != 0.0);
    outBestResult.lightEnabled = lightEnabled;

    // if (shadowMode)
    //     return true;
  }

  { // plane test

    // vec3 planeNormal = normalize(vec3(0.0, 0.0, 1.0));
    // float val = intersectPlane(tmpRay, planeNormal, 35.0/4.0*3.0);

    // vec3 planeNormal = normalize(vec3(0.0, 0.0, 1.0));
    // float val = intersectPlane(tmpRay, planeNormal, 0.0);

    // vec3 planeNormal = normalize(vec3(0.0, 0.0, 1.0));
    // float val = intersectPlane(tmpRay, planeNormal, 10.0);

    // if (val > 0.0 && (bestDistance <= 0.0 || val < bestDistance))
    // {
    //     outBestResult.hasHit = true;
    //     outBestResult.distance = val;
    //     outBestResult.position = ray.origin + val * ray.direction;
    //     outBestResult.normal = vec3(planeNormal);
    //     outBestResult.color = vec4(1.0, 1.0, 1.0, 1.0);
    //     outBestResult.reflectionFactor = 0.0;
    //     outBestResult.lightEnabled = true;
    // }

  } // plane test

  return outBestResult.hasHit;
}

float lightAt(vec3 impactPosition, vec3 impactNormal, vec3 viewer)
{
  float bestIntensity = 0.0;

  for (int index = u_sunLightsStart; index < u_sunLightsStop; index += 4)
  {
    if (!g_shadowsEnabled) {
      continue;
    }

    vec3 lightDir = getLightsVec3ByIndex(index + 0);
    float localIntensity = getLightsDataByIndex(index + 3);

    float coef = localIntensity;
    lightDir = normalize(lightDir);

    // is the sun light blocked by an object?
    RayResult result;
    if (intersectScene(RayValues(impactPosition, lightDir), result, true)) {
      // light ray is blocked, skip this light
      continue;
    }

    //
    //
    //

    float intensity = 0.0;
    vec3 reflectionFactor = reflect(-lightDir, impactNormal);
    intensity += 0.6 * pow(max(dot(reflectionFactor, viewer), 0.0), 30.0);
    intensity += 1.0 * dot(lightDir, impactNormal);

    intensity *= coef;

    if (bestIntensity < intensity) {
      bestIntensity = intensity;
    }
  }

  for (int index = u_spotLightsStart; index < u_spotLightsStop; index += 5)
  {
    vec3 lightDir = vec3(1.0);
    float coef = 1.0;

    // spot light

    vec3 lightPos = getLightsVec3ByIndex(index + 0);
    float lightRadius = getLightsDataByIndex(index + 3);

    vec3 lightToImpactVec3 = lightPos - impactPosition;

    // is it out of the spot light effect radius?
    float lightToImpactDistance = length(lightToImpactVec3);
    if (lightToImpactDistance > lightRadius) {
      // out of range, do not apply this light
      continue;
    }

    lightDir.x = lightToImpactVec3.x / lightToImpactDistance; // normalize
    lightDir.y = lightToImpactVec3.y / lightToImpactDistance; // normalize
    lightDir.z = lightToImpactVec3.z / lightToImpactDistance; // normalize

    float localIntensity = getLightsDataByIndex(index + 4);

    coef = localIntensity * (1.0 - lightToImpactDistance / lightRadius);

    if (!g_shadowsEnabled) {
      continue;
    }

    RayResult result;
    if (
      // is the spot light blocked by an object?
      intersectScene(RayValues(impactPosition, lightDir), result, true) &&
      // is the blocking object in range of the spot light effect radius?
      result.distance < lightToImpactDistance
    ) {
      // light ray is blocked, skip this light
      continue;
    }

    //
    //
    //

    float intensity = 0.0;
    vec3 reflectionFactor = reflect(-lightDir, impactNormal);
    intensity += 0.6 * pow(max(dot(reflectionFactor, viewer), 0.0), 30.0);
    intensity += 1.0 * dot(lightDir, impactNormal);

    intensity *= coef;

    if (bestIntensity < intensity) {
      bestIntensity = intensity;
    }
  }

  return max(g_ambiantLight, bestIntensity);
}

void main()
{
  //
  //
  // initial ray

  vec3 rayDir = normalize(v_position - u_cameraEye); // camera direction
  vec3 finalPixelColor = g_backgroundColor;

  RayValues currRay = RayValues(u_cameraEye, rayDir);
  RayResult result;

  result.position = u_cameraEye;
  result.reflectionFactor = 1.0;
  result.lightEnabled = true;

  float lastReflectionFactor = 1.0;
  float lastRefractionFactor = 1.0;

  const int maxIteration = g_maxTotalReflection;
  for (int iterationLeft = maxIteration; iterationLeft >= 0; --iterationLeft)
  {
    if (
      result.reflectionFactor <= 0.05 &&
      result.refractionFactor <= 0.05
    ) {
      break;
    }

    bool mustStop = false;

    currRay = RayValues(result.position, rayDir);

    result.hasHit = intersectScene(currRay, result, false);

    vec3 tmpColor = g_backgroundColor;

    if (result.hasHit)
    {
      float lightIntensity = 1.0;

      if (result.lightEnabled)
      {
        lightIntensity = lightAt(result.position, result.normal, -currRay.direction);

        if (lightIntensity <= 0.0)
        {
          // not lit
          mustStop = true;
        }
      }

      tmpColor = result.color.xyz * lightIntensity;
    }

    // vec3 incident = normalize( vec3( vertex - camera ) );

    // if (result.refractionFactor > 0.05) {

    //   finalPixelColor = finalPixelColor * (1.0 - lastReflectionFactor) + tmpColor * lastReflectionFactor;

    //   if (mustStop || !result.hasHit)
    //   {
    //     break;
    //   }

    //   // lastReflectionFactor *= result.reflectionFactor;
    //   lastRefractionFactor *= result.refractionFactor;

    //   // rayDir = refract(rayDir, result.normal);
    //   rayDir = refract(rayDir, result.normal, Eta);

    //   continue;
    // }

    finalPixelColor = finalPixelColor * (1.0 - lastReflectionFactor) + tmpColor * lastReflectionFactor;

    if (mustStop || !result.hasHit)
    {
      break;
    }

    lastReflectionFactor *= result.reflectionFactor;

    rayDir = reflect(rayDir, result.normal);

    // result.refractionFactor
    // rayDir = refract(rayDir, result.normal, Eta);

  }

  o_color = vec4(finalPixelColor, 1.0);
}
`.trim();

// src/webgl-ray-tracer/src/experiment/graphics/renderers/ray-tracer-renderer/shaders/texture.glsl.vert
var texture_glsl_default = `
#version 300 es

precision highp float;

in vec2 a_vertexPosition;
in vec2 a_vertexTextureCoord;

out vec2 v_textureCoord;

void main(void)
{
  v_textureCoord = a_vertexTextureCoord;

  gl_Position = vec4(a_vertexPosition, 1.0, 1.0);
}
`.trim();

// src/webgl-ray-tracer/src/experiment/graphics/renderers/ray-tracer-renderer/shaders/texture.glsl.frag
var texture_glsl_default2 = `
#version 300 es

precision highp float;

uniform sampler2D u_texture;
uniform vec2 u_step;

in vec2 v_textureCoord;

out vec4 o_color;

void main(void)
{
  // gl_FragColor = texture(u_texture, v_textureCoord);

  float total = 0.0;
  vec4 accumulated = vec4(0.0);

  //

  if (v_textureCoord.x - u_step.x > 0.0)
  {
    accumulated += texture(u_texture, vec2(v_textureCoord.x - u_step.x, v_textureCoord.y));
    total += 1.0;
  }

  if (v_textureCoord.x + u_step.x > 0.0)
  {
    accumulated += texture(u_texture, vec2(v_textureCoord.x + u_step.x, v_textureCoord.y));
    total += 1.0;
  }

  if (v_textureCoord.y - u_step.y > 0.0)
  {
    accumulated += texture(u_texture, vec2(v_textureCoord.x, v_textureCoord.y - u_step.y));
    total += 1.0;
  }

  if (v_textureCoord.y + u_step.y > 0.0)
  {
    accumulated += texture(u_texture, vec2(v_textureCoord.x, v_textureCoord.y + u_step.y));
    total += 1.0;
  }

  //

  if (v_textureCoord.x - u_step.x > 0.0 && v_textureCoord.y - u_step.y > 0.0)
  {
    accumulated += texture(u_texture, vec2(v_textureCoord.x - u_step.x, v_textureCoord.y - u_step.y));
    total += 1.0;
  }

  if (v_textureCoord.x + u_step.x > 0.0 && v_textureCoord.y - u_step.y > 0.0)
  {
    accumulated += texture(u_texture, vec2(v_textureCoord.x + u_step.x, v_textureCoord.y - u_step.y));
    total += 1.0;
  }

  if (v_textureCoord.x - u_step.x > 0.0 && v_textureCoord.y + u_step.y > 0.0)
  {
    accumulated += texture(u_texture, vec2(v_textureCoord.x - u_step.x, v_textureCoord.y + u_step.y));
    total += 1.0;
  }

  if (v_textureCoord.x + u_step.x > 0.0 && v_textureCoord.y + u_step.y > 0.0)
  {
    accumulated += texture(u_texture, vec2(v_textureCoord.x + u_step.x, v_textureCoord.y + u_step.y));
    total += 1.0;
  }

  //

  if (total > 0.0)
    o_color = accumulated / total;
  else
    o_color = vec4(1.0, 0.0, 0.0, 1.0); // warning
}
`.trim();

// src/webgl-ray-tracer/src/experiment/graphics/renderers/ray-tracer-renderer/RayTracerRenderer.ts
var {
  WebGLContext: WebGLContext14,
  DataTexture: DataTexture3,
  Texture: Texture4,
  FrameBuffer: FrameBuffer3,
  ShaderProgram: ShaderProgram3,
  GeometryWrapper
} = exports_graphics.webgl2;
var _degreeToRad = (angle3) => angle3 * Math.PI / 180;

class RayTracerRenderer {
  _cameraFovy;
  _canvasWidth;
  _canvasHeight;
  _renderWidth;
  _renderHeight;
  _resolutionCoef = 1;
  _antiAliasing = false;
  _rayTracerShaderProgram;
  _textureShaderProgram;
  _rayTracerGeometry;
  _screenGeometry;
  _finalTexture;
  _frameBuffer;
  _sceneDataTexture;
  _spheres = [];
  _boxes = [];
  _triangles = [];
  _lightsDataTexture;
  _sunLights = [];
  _spotLights = [];
  _camera;
  constructor(inDef) {
    this._cameraFovy = inDef.fovy;
    this._renderWidth = this._canvasWidth = inDef.canvasWidth;
    this._renderHeight = this._canvasHeight = inDef.canvasHeight;
    this._rayTracerShaderProgram = new ShaderProgram3("RayTracerRenderer-1", {
      vertexSrc: ray_tracer_glsl_default,
      fragmentSrc: ray_tracer_glsl_default2,
      attributes: ["a_vertexPosition", "a_plotPosition"],
      uniforms: [
        "u_cameraEye",
        "u_sceneTextureData",
        "u_sceneTextureSize",
        "u_spheresStart",
        "u_spheresStop",
        "u_boxesStart",
        "u_boxesStop",
        "u_trianglesStart",
        "u_trianglesStop",
        "u_lightsTextureData",
        "u_sunLightsStart",
        "u_sunLightsStop",
        "u_spotLightsStart",
        "u_spotLightsStop"
      ]
    });
    this._textureShaderProgram = new ShaderProgram3("RayTracerRenderer-1", {
      vertexSrc: texture_glsl_default,
      fragmentSrc: texture_glsl_default2,
      attributes: ["a_vertexPosition", "a_vertexTextureCoord"],
      uniforms: ["u_texture", "u_step"]
    });
    this._finalTexture = new Texture4;
    this._frameBuffer = new FrameBuffer3;
    this._finalTexture.initialize();
    this._finalTexture.preBind((boundTexture) => {
      boundTexture.allocate(this._renderWidth, this._renderHeight);
      this._frameBuffer.bind((boundFrameBuffer) => {
        boundFrameBuffer.attachTexture(boundTexture);
      });
    });
    const geoBuilder = new GeometryWrapper.GeometryBuilder;
    geoBuilder.reset().setPrimitiveType("triangleStrip").addVbo().addVboAttribute("a_vertexPosition", "vec2f").addVbo().setVboAsDynamic().addVboAttribute("a_plotPosition", "vec3f");
    this._rayTracerGeometry = new GeometryWrapper.Geometry(this._rayTracerShaderProgram, geoBuilder.getDef());
    const rayTracerVertices = [];
    rayTracerVertices.push(1, 1);
    rayTracerVertices.push(-1, 1);
    rayTracerVertices.push(1, -1);
    rayTracerVertices.push(-1, -1);
    this._rayTracerGeometry.allocateBuffer(0, rayTracerVertices, rayTracerVertices.length);
    this._rayTracerGeometry.setPrimitiveStart(0);
    this._rayTracerGeometry.setPrimitiveCount(4);
    geoBuilder.reset().setPrimitiveType("triangleStrip").addVbo().addVboAttribute("a_vertexPosition", "vec2f").addVboAttribute("a_vertexTextureCoord", "vec2f");
    this._screenGeometry = new GeometryWrapper.Geometry(this._textureShaderProgram, geoBuilder.getDef());
    const screenVertices = [];
    screenVertices.push(1, 1, 1, 1);
    screenVertices.push(-1, 1, 0, 1);
    screenVertices.push(1, -1, 1, 0);
    screenVertices.push(-1, -1, 0, 0);
    this._screenGeometry.allocateBuffer(0, screenVertices, screenVertices.length);
    this._screenGeometry.setPrimitiveStart(0);
    this._screenGeometry.setPrimitiveCount(4);
    this._sceneDataTexture = new DataTexture3;
    this._sceneDataTexture.initialize(2048);
    this._lightsDataTexture = new DataTexture3;
    this._lightsDataTexture.initialize(2048);
    this._camera = {
      position: exports_vec3.fromValues(0, 0, 0),
      target: exports_vec3.fromValues(1.5, 1.5, 1.5),
      up: exports_vec3.fromValues(0, 1, 0)
    };
  }
  pushSphere({
    position,
    radius,
    color,
    reflectionFactor,
    refractionFactor,
    chessboardEnabled,
    castShadowEnabled,
    receiveLightEnabled
  }) {
    if (radius <= 0) {
      throw new Error("invalid sphere radius");
    }
    if (reflectionFactor < 0 || reflectionFactor > 1) {
      throw new Error("invalid sphere reflection");
    }
    this._spheres.push({
      position: [position[0], position[1], position[2]],
      radius,
      color: [color[0], color[1], color[2]],
      reflectionFactor,
      refractionFactor,
      chessboardEnabled,
      castShadowEnabled,
      receiveLightEnabled
    });
  }
  pushBox({
    position,
    angleX,
    angleY,
    angleZ,
    boxSize,
    color,
    reflectionFactor,
    chessboardEnabled,
    castShadowEnabled,
    receiveLightEnabled
  }) {
    if (boxSize[0] <= 0 || boxSize[1] <= 0 || boxSize[2] <= 0) {
      throw new Error("invalid box size");
    }
    if (reflectionFactor < 0 || reflectionFactor > 1) {
      throw new Error("invalid box reflection");
    }
    const mat4 = exports_mat4.create();
    exports_mat4.identity(mat4);
    exports_mat4.translate(mat4, mat4, position);
    exports_mat4.rotateY(mat4, mat4, angleY);
    exports_mat4.rotateZ(mat4, mat4, angleZ);
    exports_mat4.rotateX(mat4, mat4, angleX);
    this._boxes.push({
      matrix: mat4,
      boxSize: exports_vec3.clone(boxSize),
      color: exports_vec3.clone(color),
      reflectionFactor,
      chessboardEnabled,
      castShadowEnabled,
      receiveLightEnabled
    });
  }
  pushTriangle({
    v0,
    v1,
    v2,
    color,
    reflectionFactor,
    castShadowEnabled,
    receiveLightEnabled
  }) {
    if (reflectionFactor < 0 || reflectionFactor > 1) {
      throw new Error("invalid triangle reflection");
    }
    this._triangles.push({
      v0: exports_vec3.clone(v0),
      v1: exports_vec3.clone(v1),
      v2: exports_vec3.clone(v2),
      color: exports_vec3.clone(color),
      reflectionFactor,
      castShadowEnabled,
      receiveLightEnabled
    });
  }
  pushSunLight({ direction, intensity }) {
    if (intensity <= 0)
      throw new Error("intensity cannot be 0");
    if (exports_vec3.length(direction) === 0)
      throw new Error("direction cannot be 0");
    const dir = exports_vec3.normalize(exports_vec3.clone(direction), direction);
    this._sunLights.push({ direction: dir, intensity });
  }
  pushSpotLight({ position, intensity, radius }) {
    if (intensity <= 0)
      throw new Error("intensity cannot be 0");
    if (radius <= 0)
      throw new Error("radius cannot be <= 0");
    this._spotLights.push({
      position: exports_vec3.clone(position),
      intensity,
      radius
    });
  }
  lookAt(eye, target, up) {
    exports_vec3.copy(this._camera.position, eye);
    let forwardDir = exports_vec3.sub(exports_vec3.create(), target, eye);
    forwardDir = exports_vec3.normalize(forwardDir, forwardDir);
    forwardDir = exports_vec3.add(forwardDir, eye, forwardDir);
    exports_vec3.copy(this._camera.target, forwardDir);
    const upDir = exports_vec3.normalize(exports_vec3.create(), up);
    exports_vec3.copy(this._camera.up, upDir);
  }
  render() {
    this._renderTexturePass();
    this._renderRayTracingPass();
  }
  _renderTexturePass() {
    const gl = WebGLContext14.getContext();
    gl.viewport(0, 0, this._canvasWidth, this._canvasHeight);
    gl.clear(gl.COLOR_BUFFER_BIT);
    const shader = this._textureShaderProgram;
    shader.bind((boundShader) => {
      boundShader.setTextureUniform("u_texture", this._finalTexture, 0);
      if (this._antiAliasing) {
        const stepX = (1 - this._renderWidth / this._canvasWidth) * 0.005;
        const stepY = (1 - this._renderHeight / this._canvasHeight) * 0.005;
        boundShader.setFloat2Uniform("u_step", stepX, stepY);
      } else {
        boundShader.setFloat2Uniform("u_step", 0, 0);
      }
      this._screenGeometry.render();
    });
  }
  _renderRayTracingPass() {
    const gl = WebGLContext14.getContext();
    const farCorners = this._computeCameraFarCorners();
    this._rayTracerGeometry.allocateBuffer(1, farCorners, farCorners.length);
    const scaledWidth = Math.floor(this._renderWidth);
    const scaledHeight = Math.floor(this._renderHeight);
    this._frameBuffer.bind(() => {
      gl.viewport(0, 0, scaledWidth, scaledHeight);
      gl.clear(gl.COLOR_BUFFER_BIT);
      {
        const shader = this._rayTracerShaderProgram;
        shader.bind((boundShader) => {
          boundShader.setFloat3Uniform("u_cameraEye", this._camera.position[0], this._camera.position[1], this._camera.position[2]);
          {
            const sceneDataValues = [];
            {
              {
                boundShader.setInteger1Uniform("u_spheresStart", 0);
                for (const sphere of this._spheres) {
                  sceneDataValues.push(sphere.position[0], sphere.position[1], sphere.position[2]);
                  sceneDataValues.push(sphere.radius);
                  sceneDataValues.push(sphere.color[0], sphere.color[1], sphere.color[2]);
                  sceneDataValues.push(sphere.reflectionFactor);
                  sceneDataValues.push(sphere.refractionFactor);
                  sceneDataValues.push(sphere.castShadowEnabled ? 1 : 0);
                  sceneDataValues.push(sphere.receiveLightEnabled ? 1 : 0);
                  sceneDataValues.push(sphere.chessboardEnabled ? 1 : 0);
                }
                boundShader.setInteger1Uniform("u_spheresStop", sceneDataValues.length);
              }
              {
                boundShader.setInteger1Uniform("u_boxesStart", sceneDataValues.length);
                for (const box of this._boxes) {
                  for (let ii = 0;ii < 16; ++ii)
                    sceneDataValues.push(box.matrix[ii]);
                  sceneDataValues.push(box.boxSize[0], box.boxSize[1], box.boxSize[2]);
                  sceneDataValues.push(box.color[0], box.color[1], box.color[2]);
                  sceneDataValues.push(box.reflectionFactor);
                  sceneDataValues.push(box.castShadowEnabled ? 1 : 0);
                  sceneDataValues.push(box.receiveLightEnabled ? 1 : 0);
                  sceneDataValues.push(box.chessboardEnabled ? 1 : 0);
                }
                boundShader.setInteger1Uniform("u_boxesStop", sceneDataValues.length);
              }
              {
                boundShader.setInteger1Uniform("u_trianglesStart", sceneDataValues.length);
                for (const triangle of this._triangles) {
                  sceneDataValues.push(triangle.v0[0], triangle.v0[1], triangle.v0[2]);
                  sceneDataValues.push(triangle.v1[0], triangle.v1[1], triangle.v1[2]);
                  sceneDataValues.push(triangle.v2[0], triangle.v2[1], triangle.v2[2]);
                  sceneDataValues.push(triangle.color[0], triangle.color[1], triangle.color[2]);
                  sceneDataValues.push(triangle.reflectionFactor);
                  sceneDataValues.push(triangle.castShadowEnabled ? 1 : 0);
                  sceneDataValues.push(triangle.receiveLightEnabled ? 1 : 0);
                }
                boundShader.setInteger1Uniform("u_trianglesStop", sceneDataValues.length);
              }
            }
            gl.activeTexture(gl.TEXTURE0 + 0);
            this._sceneDataTexture.preBind((boundDataTexture) => {
              boundDataTexture.update(0, sceneDataValues);
            });
            boundShader.setInteger1Uniform("u_sceneTextureData", 0);
            boundShader.setInteger1Uniform("u_sceneTextureSize", sceneDataValues.length);
          }
          {
            const lightsDataValues = [];
            {
              boundShader.setInteger1Uniform("u_sunLightsStart", 0);
              for (const sunLight of this._sunLights) {
                lightsDataValues.push(sunLight.direction[0], sunLight.direction[1], sunLight.direction[2]);
                lightsDataValues.push(sunLight.intensity);
              }
              boundShader.setInteger1Uniform("u_sunLightsStop", lightsDataValues.length);
            }
            {
              boundShader.setInteger1Uniform("u_spotLightsStart", lightsDataValues.length);
              for (const spotLight of this._spotLights) {
                lightsDataValues.push(spotLight.position[0], spotLight.position[1], spotLight.position[2]);
                lightsDataValues.push(spotLight.radius);
                lightsDataValues.push(spotLight.intensity);
              }
              boundShader.setInteger1Uniform("u_spotLightsStop", lightsDataValues.length);
            }
            gl.activeTexture(gl.TEXTURE0 + 1);
            this._lightsDataTexture.preBind((boundDataTexture) => {
              boundDataTexture.update(0, lightsDataValues);
            });
            boundShader.setInteger1Uniform("u_lightsTextureData", 1);
          }
          this._rayTracerGeometry.render();
        });
      }
    });
  }
  reset() {
    this._sunLights.length = 0;
    this._spotLights.length = 0;
    this._spheres.length = 0;
    this._boxes.length = 0;
    this._triangles.length = 0;
  }
  setResolutionCoef(inResolutionCoef) {
    if (inResolutionCoef === this._resolutionCoef || inResolutionCoef <= 0 || inResolutionCoef > 1) {
      return;
    }
    this._resolutionCoef = inResolutionCoef;
    this._renderWidth = Math.floor(this._canvasWidth * this._resolutionCoef);
    this._renderHeight = Math.floor(this._canvasHeight * this._resolutionCoef);
    this._finalTexture.preBind((boundTexture) => {
      boundTexture.resize(this._renderWidth, this._renderHeight);
    });
  }
  getResolutionCoef() {
    return this._resolutionCoef;
  }
  setAntiAliasing(enabled) {
    this._antiAliasing = enabled;
  }
  getAntiAliasing() {
    return this._antiAliasing;
  }
  getCurrentSize() {
    return [this._renderWidth, this._renderHeight];
  }
  _computeCameraFarCorners() {
    const forwardDir = exports_vec3.sub(exports_vec3.create(), this._camera.target, this._camera.position);
    const leftDir = exports_vec3.cross(exports_vec3.create(), forwardDir, this._camera.up);
    const upDir = exports_vec3.cross(exports_vec3.create(), leftDir, forwardDir);
    const radHFovy = _degreeToRad(this._cameraFovy * 0.5);
    const xLength = Math.cos(radHFovy) * 1 / Math.sin(radHFovy);
    const scaledForwardDir = exports_vec3.multiply(exports_vec3.create(), forwardDir, exports_vec3.fromValues(xLength, xLength, xLength));
    const farCenter = exports_vec3.add(exports_vec3.create(), this._camera.position, scaledForwardDir);
    const aspectRatio = this._canvasWidth / this._canvasHeight;
    const farHalfWidth = exports_vec3.multiply(exports_vec3.create(), leftDir, exports_vec3.fromValues(aspectRatio, aspectRatio, aspectRatio));
    const farUp = exports_vec3.add(exports_vec3.create(), farCenter, upDir);
    const farBottom = exports_vec3.subtract(exports_vec3.create(), farCenter, upDir);
    const farTopLeft = exports_vec3.subtract(exports_vec3.create(), farUp, farHalfWidth);
    const farBottomLeft = exports_vec3.subtract(exports_vec3.create(), farBottom, farHalfWidth);
    const farTopRight = exports_vec3.add(exports_vec3.create(), farUp, farHalfWidth);
    const farBottomRight = exports_vec3.add(exports_vec3.create(), farBottom, farHalfWidth);
    return [
      farTopRight[0],
      farTopRight[1],
      farTopRight[2],
      farTopLeft[0],
      farTopLeft[1],
      farTopLeft[2],
      farBottomRight[0],
      farBottomRight[1],
      farBottomRight[2],
      farBottomLeft[0],
      farBottomLeft[1],
      farBottomLeft[2]
    ];
  }
  get canvasWidth() {
    return this._canvasWidth;
  }
  get canvasHeight() {
    return this._canvasHeight;
  }
  get renderWidth() {
    return this._renderWidth;
  }
  get renderHeight() {
    return this._renderHeight;
  }
  get camera() {
    return this._camera;
  }
  get spheres() {
    return this._spheres;
  }
  get boxes() {
    return this._boxes;
  }
  get triangles() {
    return this._triangles;
  }
  get sunLights() {
    return this._sunLights;
  }
  get spotLights() {
    return this._spotLights;
  }
}
// src/webgl-ray-tracer/src/experiment/graphics/Renderer.ts
var { WebGLContext: WebGLContext15 } = exports_graphics.webgl2;
var { Camera: Camera3 } = exports_graphics.camera;
var { TextRenderer: TextRenderer3, StackRenderers: StackRenderers3 } = exports_graphics.renderers;
var k_fovy = 70;

class Renderer {
  _def;
  _rayTracerRenderer;
  _textRenderer;
  _stackRenderers;
  _multipleBuffering;
  _debugSceneCamera = new Camera3;
  _mainHudCamera = new Camera3;
  constructor(def) {
    this._def = def;
    this.resize(this._def.canvasDomElement.width, this._def.canvasDomElement.height);
    WebGLContext15.initialize(this._def.canvasDomElement);
    this._rayTracerRenderer = new RayTracerRenderer({
      canvasWidth: this._def.canvasDomElement.width,
      canvasHeight: this._def.canvasDomElement.height,
      fovy: k_fovy
    });
    this._textRenderer = new TextRenderer3;
    this._stackRenderers = new StackRenderers3;
    this._multipleBuffering = new exports_graphics.renderers.MultiBuffersRendering(this._def.canvasDomElement.width, this._def.canvasDomElement.height);
  }
  initialize() {
    const gl = WebGLContext15.getContext();
    const alignment = 1;
    gl.pixelStorei(gl.UNPACK_ALIGNMENT, alignment);
    gl.disable(gl.DEPTH_TEST);
    gl.disable(gl.BLEND);
    gl.disable(gl.CULL_FACE);
    gl.depthFunc(gl.NEVER);
    gl.clearColor(0, 0, 0, 1);
    gl.clearDepth(1);
  }
  resize(width, height) {
    this._debugSceneCamera.setViewportSize(width, height);
    this._debugSceneCamera.setAsPerspective({
      fovy: k_fovy,
      near: 1,
      far: 500
    });
    this._mainHudCamera.setViewportSize(width, height);
    const hWidth = width * 0.5;
    const hHeight = height * 0.5;
    this._mainHudCamera.setAsOrthogonal({
      left: -hWidth,
      right: +hWidth,
      top: -hHeight,
      bottom: +hHeight,
      near: -200,
      far: 200
    });
    this._mainHudCamera.setEye([hWidth, hHeight, 1]);
    this._mainHudCamera.setTarget([hWidth, hHeight, 0]);
    this._mainHudCamera.setUpAxis([0, 1, 0]);
    this._mainHudCamera.computeMatrices();
  }
  _pushWireFrameSphere(sphere) {
    const X = 0.5257311121191336 * sphere.radius;
    const Z = 0.8506508083520399 * sphere.radius;
    const N = 0;
    const positions = [
      [-X, N, Z],
      [X, N, Z],
      [-X, N, -Z],
      [X, N, -Z],
      [N, Z, X],
      [N, Z, -X],
      [N, -Z, X],
      [N, -Z, -X],
      [Z, X, N],
      [-Z, X, N],
      [Z, -X, N],
      [-Z, -X, N]
    ];
    for (let ii = 0;ii < positions.length; ++ii) {
      positions[ii][0] += sphere.position[0];
      positions[ii][1] += sphere.position[1];
      positions[ii][2] += sphere.position[2];
    }
    const indices = [
      [0, 4, 1],
      [0, 9, 4],
      [9, 5, 4],
      [4, 5, 8],
      [4, 8, 1],
      [8, 10, 1],
      [8, 3, 10],
      [5, 3, 8],
      [5, 2, 3],
      [2, 7, 3],
      [7, 10, 3],
      [7, 6, 10],
      [7, 11, 6],
      [11, 0, 6],
      [0, 1, 6],
      [6, 1, 10],
      [9, 0, 11],
      [9, 11, 2],
      [9, 2, 5],
      [7, 2, 11]
    ];
    for (const index of indices) {
      const v1 = positions[index[0]];
      const v2 = positions[index[1]];
      const v3 = positions[index[2]];
      this._stackRenderers.pushLine(v1, v2, sphere.color);
      this._stackRenderers.pushLine(v2, v3, sphere.color);
      this._stackRenderers.pushLine(v3, v1, sphere.color);
    }
  }
  _pushWireFrameBox(box) {
    const vertices = [
      exports_vec3.fromValues(-box.boxSize[0], -box.boxSize[1], -box.boxSize[2]),
      exports_vec3.fromValues(+box.boxSize[0], -box.boxSize[1], -box.boxSize[2]),
      exports_vec3.fromValues(-box.boxSize[0], +box.boxSize[1], -box.boxSize[2]),
      exports_vec3.fromValues(+box.boxSize[0], +box.boxSize[1], -box.boxSize[2]),
      exports_vec3.fromValues(-box.boxSize[0], -box.boxSize[1], +box.boxSize[2]),
      exports_vec3.fromValues(+box.boxSize[0], -box.boxSize[1], +box.boxSize[2]),
      exports_vec3.fromValues(-box.boxSize[0], +box.boxSize[1], +box.boxSize[2]),
      exports_vec3.fromValues(+box.boxSize[0], +box.boxSize[1], +box.boxSize[2])
    ];
    const vertices2 = [];
    vertices.forEach((vertex) => {
      const pos = exports_vec3.fromValues(0, 0, 0);
      exports_vec3.transformMat4(pos, vertex, box.matrix);
      vertices2.push(pos);
    });
    const indicesGroup = [
      [0, 1],
      [1, 3],
      [3, 2],
      [2, 0],
      [4, 5],
      [5, 7],
      [7, 6],
      [6, 4],
      [0, 4],
      [1, 5],
      [3, 7],
      [2, 6]
    ];
    indicesGroup.forEach((index) => {
      this._stackRenderers.pushLine(vertices2[index[0]], vertices2[index[1]], box.color);
    });
  }
  _pushWireFrameTriangle(triangle) {
    this._stackRenderers.pushLine(triangle.v0, triangle.v1, triangle.color);
    this._stackRenderers.pushLine(triangle.v1, triangle.v2, triangle.color);
    this._stackRenderers.pushLine(triangle.v2, triangle.v0, triangle.color);
  }
  safeSceneWireFrame(inCallback) {
    this._debugSceneCamera.setEye(this._rayTracerRenderer.camera.position);
    this._debugSceneCamera.setTarget(this._rayTracerRenderer.camera.target);
    this._debugSceneCamera.setUpAxis(this._rayTracerRenderer.camera.up);
    this._debugSceneCamera.computeMatrices();
    this._stackRenderers.safeRender(this._debugSceneCamera.getComposedMatrix(), inCallback);
  }
  flushHudWireFrame() {
    this._stackRenderers.flush(this._mainHudCamera.getComposedMatrix());
  }
  flushHudText() {
    this._textRenderer.flush(this._mainHudCamera.getComposedMatrix());
  }
  setupDebugRenderer() {
    this._rayTracerRenderer.spheres.forEach((sphere) => this._pushWireFrameSphere(sphere));
    this._rayTracerRenderer.boxes.forEach((box) => this._pushWireFrameBox(box));
    this._rayTracerRenderer.triangles.forEach((triangle) => this._pushWireFrameTriangle(triangle));
  }
  get rayTracerRenderer() {
    return this._rayTracerRenderer;
  }
  get stackRenderers() {
    return this._stackRenderers;
  }
  get textRenderer() {
    return this._textRenderer;
  }
  get multipleBuffering() {
    return this._multipleBuffering;
  }
  get debugSceneCamera() {
    return this._debugSceneCamera;
  }
  get mainHudCamera() {
    return this._mainHudCamera;
  }
}
// src/webgl-ray-tracer/src/experiment/scenes/TestScene2.ts
var continuousTime = 0;
var continuousAngle = 0;
var currStep = 0;
var nextStep = 1;
var allSteps = [
  [-5, 4, 0],
  [5, 4, 0],
  [5, 10, 0],
  [-5, 10, 0]
];

class TestScene2 {
  reset() {
    continuousTime = 0;
    continuousAngle = 0;
    currStep = 0;
    nextStep = 1;
  }
  run(renderer, elapsedTime) {
    continuousAngle += elapsedTime * 2;
    if (continuousAngle >= Math.PI * 2) {
      continuousAngle -= Math.PI * 2;
    }
    continuousTime += elapsedTime * 0.75;
    if (continuousTime > 1) {
      continuousTime = 0;
      currStep = (currStep + 1) % allSteps.length;
      nextStep = (currStep + 1) % allSteps.length;
    }
    const lightPos = [
      allSteps[currStep][0] + (allSteps[nextStep][0] - allSteps[currStep][0]) * continuousTime,
      allSteps[currStep][1] + (allSteps[nextStep][1] - allSteps[currStep][1]) * continuousTime,
      allSteps[currStep][2] + (allSteps[nextStep][2] - allSteps[currStep][2]) * continuousTime
    ];
    {
      renderer.rayTracerRenderer.pushSpotLight({
        position: [0, 10, 10],
        intensity: 2,
        radius: 20
      });
      renderer.rayTracerRenderer.pushSphere({
        position: [0, 10, 10],
        radius: 0.25,
        color: [1, 1, 1],
        reflectionFactor: 0,
        refractionFactor: 0,
        chessboardEnabled: false,
        receiveLightEnabled: false,
        castShadowEnabled: false
      });
      renderer.rayTracerRenderer.pushSpotLight({
        position: lightPos,
        intensity: 2,
        radius: 10
      });
      renderer.rayTracerRenderer.pushSphere({
        position: lightPos,
        radius: 0.25,
        color: [1, 1, 1],
        reflectionFactor: 0,
        refractionFactor: 0,
        chessboardEnabled: false,
        receiveLightEnabled: false,
        castShadowEnabled: false
      });
      const allBoxes = [
        { pos: [-2, 4, -1], size: [1, 1.125, 0.125] },
        { pos: [-2, 4, 1], size: [1, 1.125, 0.125] },
        { pos: [-2, 3, 0], size: [1, 0.125, 1.125] },
        { pos: [-2, 5, 0], size: [1, 0.125, 1.125] },
        { pos: [2, 4, -1], size: [1, 1.125, 0.125] },
        { pos: [2, 4, 1], size: [1, 1.125, 0.125] },
        { pos: [2, 3, 0], size: [1, 0.125, 1.125] },
        { pos: [2, 5, 0], size: [1, 0.125, 1.125] },
        { pos: [0, 8, -8], size: [8, 8, 0.125], color: [1, 0.5, 0.5] },
        { pos: [-8, 8, 0], size: [0.125, 8, 8], color: [0.5, 1, 0.5] },
        { pos: [8, 8, 0], size: [0.125, 8, 8], color: [0.5, 0.5, 1] },
        { pos: [0, 0, -1], size: [8, 0.125, 8], reflectionFactor: 0.3 }
      ];
      allBoxes.forEach(({ pos, size, color, reflectionFactor }) => {
        renderer.rayTracerRenderer.pushBox({
          position: pos,
          angleX: 0,
          angleY: 0,
          angleZ: 0,
          boxSize: size,
          color: color ?? [1, 1, 1],
          reflectionFactor: reflectionFactor ?? 0,
          chessboardEnabled: false,
          receiveLightEnabled: true,
          castShadowEnabled: true
        });
      });
      {
        const allRotatedBoxes = [
          {
            pos: [
              5 + 1 * Math.cos(continuousAngle),
              6,
              0 + 1 * Math.sin(continuousAngle)
            ],
            angleY: -continuousAngle,
            size: [0.125, 1, 1.125]
          },
          {
            pos: [
              5 - 1 * Math.cos(continuousAngle),
              8,
              0 - 1 * Math.sin(continuousAngle)
            ],
            angleY: -continuousAngle,
            size: [0.125, 1, 1.125]
          },
          {
            pos: [
              5 + 1 * Math.cos(continuousAngle + Math.PI * 0.5),
              7,
              0 + 1 * Math.sin(continuousAngle + Math.PI * 0.5)
            ],
            angleY: -continuousAngle + Math.PI * 0.5,
            size: [0.125, 2, 1]
          },
          {
            pos: [
              5 + 1 * Math.cos(continuousAngle - Math.PI * 0.5),
              7,
              0 + 1 * Math.sin(continuousAngle - Math.PI * 0.5)
            ],
            angleY: -continuousAngle - Math.PI * 0.5,
            size: [0.125, 2, 1]
          }
        ];
        allRotatedBoxes.forEach(({ pos, angleY, size }) => {
          renderer.rayTracerRenderer.pushBox({
            position: pos,
            angleX: 0,
            angleY,
            angleZ: 0,
            boxSize: size,
            color: [0, 1, 0],
            reflectionFactor: 0,
            chessboardEnabled: false,
            receiveLightEnabled: true,
            castShadowEnabled: true
          });
        });
      }
    }
  }
}
// src/webgl-ray-tracer/src/experiment/Experiment.ts
var {
  GlobalMouseManager: GlobalMouseManager2,
  GlobalKeyboardManager: GlobalKeyboardManager2,
  GlobalTouchManager: GlobalTouchManager2,
  GlobalVisibilityManager: GlobalVisibilityManager2,
  GlobalPointerLockManager: GlobalPointerLockManager2
} = exports_system.browser;
var { WebGLContext: WebGLContext16 } = exports_graphics.webgl2;
var { FreeFlyController: FreeFlyController3 } = exports_system.controllers;
var _clamp = (inValue, inMin, inMax) => Math.min(Math.max(inValue, inMin), inMax);
var k_maxFramesUntilNextCheck = 60;

class Experiment {
  _canvasElement;
  _animationFrameHandle = 0;
  _def;
  _freeFlyController;
  _renderer;
  _running;
  _errorGraphicContext;
  _currFrameMsecTime = Date.now();
  _frameProfiler = new exports_system.metrics.FrameProfiler;
  _continuousSecTime = 0;
  _perfAutoScalingEnabled = true;
  _framesUntilNextCheck = k_maxFramesUntilNextCheck;
  _scene = new TestScene2;
  constructor(inDef) {
    this._canvasElement = inDef.canvasElement;
    this._def = inDef;
    this._freeFlyController = new FreeFlyController3({
      coordinates: ["Z", "X", "Y"],
      position: [-10, 13, 15],
      theta: Math.PI * 0.85,
      phi: -Math.PI * 0.15,
      mouseSensibility: 6,
      keyboardSensibility: Math.PI * 0.55,
      touchSensibility: 8,
      movingSpeed: 16
    });
    {
      GlobalKeyboardManager2.activate();
      GlobalTouchManager2.activate(this._canvasElement);
      GlobalVisibilityManager2.activate();
      GlobalVisibilityManager2.addVisibilityChange((isVisible) => {
        if (isVisible === false) {
          this._def.logger.log("document visibility changed: hidden");
          this.stop();
        } else {
          this._def.logger.log("document visibility changed: visible");
          this.start();
        }
      });
      GlobalPointerLockManager2.allowPointerLockedOnClickEvent(this._canvasElement);
      GlobalPointerLockManager2.addOnLockChange(() => {
        const isLocked = GlobalPointerLockManager2.isPointerLocked(this._canvasElement);
        if (isLocked) {
          this._def.logger.log("The pointer lock status is now locked");
          GlobalMouseManager2.activate(this._canvasElement);
        } else {
          this._def.logger.log("The pointer lock status is now unlocked");
          GlobalMouseManager2.deactivate(this._canvasElement);
          GlobalPointerLockManager2.allowPointerLockedOnClickEvent(this._canvasElement);
        }
      });
      GlobalPointerLockManager2.addOnLockError((event) => {
        this._def.logger.log(`The pointer lock sent an error, event: "${JSON.stringify(event)}"`);
      });
      this._renderer = new Renderer({ canvasDomElement: this._canvasElement });
      this._renderer.initialize();
    }
    this._running = false;
    this._errorGraphicContext = false;
    this._def.resolution.addEventListener("input", (event) => {
      const newValue = this._def.resolution.value;
      this._setResolution(newValue);
      this._logResolution();
    });
    this._def.anti_aliasing_enabled.addEventListener("click", () => {
      const newValue = this._def.anti_aliasing_enabled.checked === true;
      this._renderer.rayTracerRenderer.setAntiAliasing(newValue);
      this._def.logger.log(`Anti aliasing change: ${newValue === true ? "enabled" : "disabled"}`);
    });
    this._setResolution(this._def.resolution.value);
    this._def.perfAutoScaling.addEventListener("input", () => {
      this._framesUntilNextCheck = k_maxFramesUntilNextCheck;
      this._perfAutoScalingEnabled = this._def.perfAutoScaling.checked === true;
      this._def.logger.log(`Performance auto scaler change: ${this._perfAutoScalingEnabled === true ? "enabled" : "disabled"}`);
    });
  }
  async init() {
    await this._renderer.initialize();
  }
  resize(inWidth, inHeight, inIsFullScreen) {
    let currentWidth = inWidth;
    let currentHeight = inHeight;
    if (inIsFullScreen) {
      this._canvasElement.style.position = "absolute";
      currentWidth = window.innerWidth;
      currentHeight = window.innerHeight;
    } else {
      this._canvasElement.style.position = "relative";
    }
    this._canvasElement.style.left = "0px";
    this._canvasElement.style.top = "0px";
    this._canvasElement.style.width = `${currentWidth}px`;
    this._canvasElement.style.height = `${currentHeight}px`;
    this._canvasElement.width = currentWidth;
    this._canvasElement.height = currentHeight;
    this._renderer.resize(currentWidth, currentHeight);
  }
  start() {
    if (this.isRunning())
      return;
    this._running = true;
    this._tick();
  }
  stop() {
    if (!this.isRunning())
      return;
    this._running = false;
    window.clearTimeout(this._animationFrameHandle);
  }
  isRunning() {
    return this._running && !this._errorGraphicContext;
  }
  _tick() {
    const tick = () => {
      if (!this._running || this._errorGraphicContext) {
        return;
      }
      this._animationFrameHandle = window.setTimeout(tick, 16.666666666666668);
      this._mainLoop();
    };
    tick();
  }
  _mainLoop() {
    const currentMsecTime = Date.now();
    const deltaMsecTime = currentMsecTime - this._currFrameMsecTime;
    this._currFrameMsecTime = currentMsecTime;
    this._frameProfiler.pushDelta(deltaMsecTime);
    this._handlePerformanceAutoScaling(deltaMsecTime);
    const elapsedSecTime = deltaMsecTime / 1000;
    this._continuousSecTime += elapsedSecTime;
    this._freeFlyController.update(elapsedSecTime);
    GlobalMouseManager2.resetDeltas();
    GlobalTouchManager2.resetDeltas();
    this._continuousSecTime += elapsedSecTime;
    this._scene.run(this._renderer, elapsedSecTime);
    this._renderScene();
    this._renderHud();
  }
  _renderHud() {
    const gl = WebGLContext16.getContext();
    gl.viewport(0, 0, this._canvasElement.width, this._canvasElement.height);
    gl.clear(gl.DEPTH_BUFFER_BIT);
    gl.enable(gl.DEPTH_TEST);
    gl.depthFunc(gl.LESS);
    {
      const keyEventsPos = [27, 165];
      const touchEventsPos = [27, 260];
      const boardPos = [7, 35];
      exports_graphics.renderers.widgets.addKeyStrokesWidgets(keyEventsPos, this._renderer.stackRenderers, this._renderer.textRenderer);
      exports_graphics.renderers.widgets.addArrowStrokesWidgets(touchEventsPos, this._renderer.stackRenderers, this._renderer.textRenderer);
      exports_graphics.renderers.widgets.addKeysTouchesWidgets(this._canvasElement, boardPos, this._renderer.stackRenderers, this._renderer.textRenderer);
    }
    exports_graphics.renderers.widgets.renderFpsMeter([10, this._canvasElement.height - 60, 0], [100, 50], this._frameProfiler, this._renderer.stackRenderers, this._renderer.textRenderer, true);
    this._renderer.flushHudWireFrame();
    this._renderer.flushHudText();
    this._renderer.rayTracerRenderer.reset();
  }
  _renderScene() {
    {
      const gl = WebGLContext16.getContext();
      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      gl.disable(gl.DEPTH_TEST);
    }
    this._renderer.rayTracerRenderer.lookAt(this._freeFlyController.getPosition(), this._freeFlyController.getTarget(), this._freeFlyController.getUpAxis());
    this._renderer.rayTracerRenderer.render();
    const showDebug = this._def.debug_mode_enabled.checked === true;
    if (showDebug) {
      this._renderer.stackRenderers.clear();
      this._renderer.safeSceneWireFrame(() => {
        this._renderer.setupDebugRenderer();
        const axisOrigin = [0, 0, 0];
        const axisX = [100, 0, 0];
        const axisY = [0, 100, 0];
        const axisZ = [0, 0, 100];
        this._renderer.stackRenderers.pushLine(axisOrigin, axisX, [1, 0, 0]);
        this._renderer.stackRenderers.pushLine(axisOrigin, axisY, [0, 1, 0]);
        this._renderer.stackRenderers.pushLine(axisOrigin, axisZ, [0, 0, 1]);
      });
    }
  }
  _setResolution(inValue) {
    const safeValue = _clamp(inValue, 0, 9);
    const newValue = 10 - safeValue;
    const newCoef = 1 / newValue;
    this._renderer.rayTracerRenderer.setResolutionCoef(newCoef);
  }
  _logResolution() {
    const rayTracerRenderer = this._renderer.rayTracerRenderer;
    const newCoef = rayTracerRenderer.getResolutionCoef();
    const newSize = rayTracerRenderer.getCurrentSize();
    const totalPixels = newSize[0] * newSize[1];
    this._def.logger.log(`resolution changed (1/${Math.ceil(1 / newCoef)}) => ${newSize[0]}x${newSize[1]} (${totalPixels}px)`);
  }
  _handlePerformanceAutoScaling(inDeltaMsecTime) {
    if (this._perfAutoScalingEnabled !== true) {
      return;
    }
    if (inDeltaMsecTime <= 20) {
      this._framesUntilNextCheck = k_maxFramesUntilNextCheck;
      return;
    }
    --this._framesUntilNextCheck;
    if (this._framesUntilNextCheck > 0) {
      return;
    }
    this._def.logger.log(`performance auto scaling: slow framerate, scaling down resolution`);
    const currValue = this._def.resolution.value;
    const newValue = currValue - 1;
    if (newValue >= 0 && newValue <= 9) {
      this._setResolution(newValue);
      this._logResolution();
      this._def.resolution.value = newValue;
    }
    this._framesUntilNextCheck = k_maxFramesUntilNextCheck;
  }
}

// src/webgl-ray-tracer/src/utilities/setupOutdatedPage.ts
var setupOutdatedPage = (maxDuration, onTimeout) => {
  if (!exports_system.browser.GlobalVisibilityManager.isSupported()) {
    return;
  }
  let timeoutHandle = -1;
  exports_system.browser.GlobalVisibilityManager.addVisibilityChange((isVisible) => {
    if (isVisible) {
      if (timeoutHandle >= 0) {
        clearTimeout(timeoutHandle);
        timeoutHandle = -1;
      }
    } else {
      timeoutHandle = window.setTimeout(onTimeout, maxDuration);
    }
  });
  exports_system.browser.GlobalVisibilityManager.activate();
};
// src/webgl-ray-tracer/src/main.ts
var logger = null;
var mainDemo = null;
var _queryDomElement = (inName) => {
  const newElement = document.querySelector(inName);
  if (!newElement) {
    throw new Error(`html element "${inName}" not found`);
  }
  return newElement;
};
var onPageLoad = async () => {
  logger = new Logger("loggerOutput");
  logger.log("[SETUP] page loaded");
  const canvasElement = _queryDomElement("#rendering-canvas");
  const perfAutoScaling = _queryDomElement("#auto-scaling-enabled");
  const resolution = _queryDomElement("#resolution");
  const anti_aliasing_enabled = _queryDomElement("#anti-aliasing-enabled");
  const debug_mode_enabled = _queryDomElement("#debug-mode-enabled");
  const errorText = _queryDomElement("#error-text");
  const _onPageError = (err) => {
    if (!mainDemo) {
      return;
    }
    console.log("onPageError", err);
    try {
      mainDemo.stop();
    } catch (err2) {
    }
    mainDemo = null;
    exports_system.browser.GlobalKeyboardManager.deactivate();
    exports_system.browser.GlobalMouseManager.deactivate(canvasElement);
    exports_system.browser.GlobalTouchManager.deactivate(canvasElement);
    exports_system.browser.GlobalFullScreenManager.removeAllCallbacks();
    exports_system.browser.GlobalPointerLockManager.removeAllCallbacks();
    exports_system.browser.GlobalVisibilityManager.removeAllCallbacks();
    exports_system.browser.GlobalVisibilityManager.deactivate();
    errorText.style.width = "800px";
    errorText.style.height = "600px";
    errorText.innerHTML = err.message;
    canvasElement.style.display = "none";
    errorText.style.display = "block";
    perfAutoScaling.disabled = true;
    resolution.min = resolution.max = resolution.value = 0;
    anti_aliasing_enabled.disabled = true;
    debug_mode_enabled.disabled = true;
    document.title += " (ERR)";
  };
  window.addEventListener("error", _onPageError);
  if (!exports_system.browser.isWebGL2Supported()) {
    throw new Error("missing WebGL2 feature (unsupported)");
  }
  mainDemo = new Experiment({
    canvasElement,
    logger,
    perfAutoScaling,
    resolution,
    anti_aliasing_enabled,
    debug_mode_enabled
  });
  logger.log("[SETUP] Demo: initializing");
  await mainDemo.init();
  logger.log("[SETUP] Demo: initialized");
  mainDemo.start();
  logger.log("[SETUP] Demo: running");
  const pageMaxTimeInvisible = 60000;
  setupOutdatedPage(pageMaxTimeInvisible, () => {
    throw new Error("<br/><br/><br/>The page was inactive for too long<br/><br/>please reload");
  });
};
window.addEventListener("load", onPageLoad, false);

//# debugId=85D796FFE5383DD264756e2164756e21
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL2xvY2FsLWZyYW1ld29yay9zeXN0ZW0vYnJvd3Nlci9GdWxsU2NyZWVuTWFuYWdlci50cyIsICJzcmMvbG9jYWwtZnJhbWV3b3JrL3N5c3RlbS9icm93c2VyL0tleUNvZGVzLnRzIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvc3lzdGVtL2Jyb3dzZXIvS2V5Ym9hcmRNYW5hZ2VyLnRzIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvc3lzdGVtL2Jyb3dzZXIvTW91c2VNYW5hZ2VyLnRzIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvc3lzdGVtL2Jyb3dzZXIvUG9pbnRlckxvY2tNYW5hZ2VyLnRzIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvc3lzdGVtL2Jyb3dzZXIvVG91Y2hNYW5hZ2VyLnRzIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvc3lzdGVtL2Jyb3dzZXIvVmlzaWJpbGl0eU1hbmFnZXIudHMiLCAic3JjL2xvY2FsLWZyYW1ld29yay9zeXN0ZW0vYnJvd3Nlci9pc1dlYldvcmtlclN1cHBvcnRlZC50cyIsICJzcmMvbG9jYWwtZnJhbWV3b3JrL3N5c3RlbS9icm93c2VyL2lzV2ViR0wyU3VwcG9ydGVkLnRzIiwgIm5vZGVfbW9kdWxlcy9nbC1tYXRyaXgvZXNtL2NvbW1vbi5qcyIsICJub2RlX21vZHVsZXMvZ2wtbWF0cml4L2VzbS9tYXQ0LmpzIiwgIm5vZGVfbW9kdWxlcy9nbC1tYXRyaXgvZXNtL3ZlYzMuanMiLCAibm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9lc20vdmVjNC5qcyIsICJub2RlX21vZHVsZXMvZ2wtbWF0cml4L2VzbS92ZWMyLmpzIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvc3lzdGVtL21hdGgvYW5nbGVzLnRzIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvc3lzdGVtL2NvbnRyb2xsZXJzL0ZyZWVGbHlDb250cm9sbGVyLnRzIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvc3lzdGVtL21hdGgvY2xhbXAudHMiLCAic3JjL2xvY2FsLWZyYW1ld29yay9zeXN0ZW0vbWF0aC9jb2xsaXNpb25zLnRzIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvc3lzdGVtL21hdGgvZWFzaW5nLnRzIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvc3lzdGVtL21hdGgvbGVycC50cyIsICJzcmMvbG9jYWwtZnJhbWV3b3JrL3N5c3RlbS9tYXRoL3BvbGFyQ29vcmRzLnRzIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvc3lzdGVtL21hdGgvcmF5Q2FzdGVyLnRzIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvc3lzdGVtL21ldHJpY3MvRnJhbWVQcm9maWxlci50cyIsICJzcmMvbG9jYWwtZnJhbWV3b3JrL3N5c3RlbS91dGlsaXRpZXMvRmV0Y2hIZWxwZXJzLnRzIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvc3lzdGVtL3V0aWxpdGllcy9Bc3luY0hlbHBlcnMudHMiLCAic3JjL2xvY2FsLWZyYW1ld29yay9zeXN0ZW0vcm5nL0RldGVybWluaXN0aWNSbmcudHMiLCAic3JjL2xvY2FsLWZyYW1ld29yay9ncmFwaGljcy9jYW1lcmEvQ2FtZXJhLnRzIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvZ3JhcGhpY3MvY2FtZXJhL0ZydXN0dW1DdWxsaW5nLnRzIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvZ3JhcGhpY3MvY2FtZXJhL3NjZW5lVG9TY3JlZW5Db29yZGluYXRlcy50cyIsICJzcmMvbG9jYWwtZnJhbWV3b3JrL2dyYXBoaWNzL2NhbWVyYS9zY3JlZW5Ub1NjZW5lQ29vcmRpbmF0ZXMudHMiLCAic3JjL2xvY2FsLWZyYW1ld29yay9ncmFwaGljcy93ZWJnbDIvV2ViR0xDb250ZXh0LnRzIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvZ3JhcGhpY3Mvd2ViZ2wyL0N1YmVNYXAudHMiLCAic3JjL2xvY2FsLWZyYW1ld29yay9ncmFwaGljcy93ZWJnbDIvRGF0YVRleHR1cmUudHMiLCAic3JjL2xvY2FsLWZyYW1ld29yay9ncmFwaGljcy93ZWJnbDIvRGF0YVRleHR1cmVWZWM0LnRzIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvZ3JhcGhpY3Mvd2ViZ2wyL0Vycm9yLnRzIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvZ3JhcGhpY3Mvd2ViZ2wyL0ZlbmNlLnRzIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvZ3JhcGhpY3Mvd2ViZ2wyL0ZyYW1lQnVmZmVyLnRzIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvZ3JhcGhpY3Mvd2ViZ2wyL0dlb21ldHJ5V3JhcHBlci50cyIsICJzcmMvbG9jYWwtZnJhbWV3b3JrL2dyYXBoaWNzL3dlYmdsMi9SZW5kZXJCdWZmZXIudHMiLCAic3JjL2xvY2FsLWZyYW1ld29yay9ncmFwaGljcy93ZWJnbDIvU2hhZGVyUHJvZ3JhbS50cyIsICJzcmMvbG9jYWwtZnJhbWV3b3JrL2dyYXBoaWNzL3dlYmdsMi9UZXh0dXJlLnRzIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvZ3JhcGhpY3Mvd2ViZ2wyL1RleHR1cmVBcnJheS50cyIsICJzcmMvbG9jYWwtZnJhbWV3b3JrL2dyYXBoaWNzL3JlbmRlcmVycy9nZW9tZXRyeS1yZW5kZXJlci9zaGFkZXJzL2dlb21ldHJ5LXJlbmRlcmVyLmdsc2wudmVydCIsICJzcmMvbG9jYWwtZnJhbWV3b3JrL2dyYXBoaWNzL3JlbmRlcmVycy9nZW9tZXRyeS1yZW5kZXJlci9zaGFkZXJzL2dlb21ldHJ5LXJlbmRlcmVyLmdsc2wuZnJhZyIsICJzcmMvbG9jYWwtZnJhbWV3b3JrL2dyYXBoaWNzL3JlbmRlcmVycy9nZW9tZXRyeS1yZW5kZXJlci9HZW9tZXRyeVJlbmRlcmVyLnRzIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvZ3JhcGhpY3MvcmVuZGVyZXJzL2dlb21ldHJ5LXJlbmRlcmVyLWZsYXQvc2hhZGVycy9nZW9tZXRyeS1yZW5kZXJlci1mbGF0Lmdsc2wudmVydCIsICJzcmMvbG9jYWwtZnJhbWV3b3JrL2dyYXBoaWNzL3JlbmRlcmVycy9nZW9tZXRyeS1yZW5kZXJlci1mbGF0L3NoYWRlcnMvZ2VvbWV0cnktcmVuZGVyZXItZmxhdC5nbHNsLmZyYWciLCAic3JjL2xvY2FsLWZyYW1ld29yay9ncmFwaGljcy9yZW5kZXJlcnMvZ2VvbWV0cnktcmVuZGVyZXItZmxhdC9HZW9tZXRyeVJlbmRlcmVyRmxhdC50cyIsICJzcmMvbG9jYWwtZnJhbWV3b3JrL2dyYXBoaWNzL3JlbmRlcmVycy9tdWx0aS1idWZmZXJzLXJlbmRlcmluZy9pbnRlcm5hbHMvU2NlbmVDYXB0dXJlci50cyIsICJzcmMvbG9jYWwtZnJhbWV3b3JrL2dyYXBoaWNzL3JlbmRlcmVycy9tdWx0aS1idWZmZXJzLXJlbmRlcmluZy9pbnRlcm5hbHMvc2hhZGVycy9odWQtdGV4dHVyZS1yZW5kZXJlci5nbHNsLnZlcnQiLCAic3JjL2xvY2FsLWZyYW1ld29yay9ncmFwaGljcy9yZW5kZXJlcnMvbXVsdGktYnVmZmVycy1yZW5kZXJpbmcvaW50ZXJuYWxzL3NoYWRlcnMvaHVkLXRleHR1cmUtcmVuZGVyZXIuZ2xzbC5mcmFnIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvZ3JhcGhpY3MvcmVuZGVyZXJzL211bHRpLWJ1ZmZlcnMtcmVuZGVyaW5nL2ludGVybmFscy9SZW5kZXJIdWRUZXh0dXJlLnRzIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvZ3JhcGhpY3MvcmVuZGVyZXJzL211bHRpLWJ1ZmZlcnMtcmVuZGVyaW5nL011bHRpQnVmZmVyc1JlbmRlcmluZy50cyIsICJzcmMvbG9jYWwtZnJhbWV3b3JrL2dyYXBoaWNzL3JlbmRlcmVycy9zdGFjay1yZW5kZXJlcnMvc2hhZGVycy9zdGFjay1yZW5kZXJlci5nbHNsLnZlcnQiLCAic3JjL2xvY2FsLWZyYW1ld29yay9ncmFwaGljcy9yZW5kZXJlcnMvc3RhY2stcmVuZGVyZXJzL3NoYWRlcnMvc3RhY2stcmVuZGVyZXIuZ2xzbC5mcmFnIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvZ3JhcGhpY3MvcmVuZGVyZXJzL3N0YWNrLXJlbmRlcmVycy9pbnRlcm5hbHMvV2lyZUZyYW1lc1N0YWNrUmVuZGVyZXIudHMiLCAic3JjL2xvY2FsLWZyYW1ld29yay9ncmFwaGljcy9yZW5kZXJlcnMvc3RhY2stcmVuZGVyZXJzL2ludGVybmFscy9UcmlhbmdsZXNTdGFja1JlbmRlcmVyLnRzIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvZ3JhcGhpY3MvcmVuZGVyZXJzL3N0YWNrLXJlbmRlcmVycy9TdGFja1JlbmRlcmVycy50cyIsICJzcmMvbG9jYWwtZnJhbWV3b3JrL2dyYXBoaWNzL3JlbmRlcmVycy90ZXh0LXJlbmRlcmVyL3NoYWRlcnMvdGV4dC1yZW5kZXJlci5nbHNsLnZlcnQiLCAic3JjL2xvY2FsLWZyYW1ld29yay9ncmFwaGljcy9yZW5kZXJlcnMvdGV4dC1yZW5kZXJlci9zaGFkZXJzL3RleHQtcmVuZGVyZXIuZ2xzbC5mcmFnIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvZ3JhcGhpY3MvcmVuZGVyZXJzL3RleHQtcmVuZGVyZXIvaW50ZXJuYWxzL2FzY2lpVGV4dHVyZUhleC50cyIsICJzcmMvbG9jYWwtZnJhbWV3b3JrL2dyYXBoaWNzL3JlbmRlcmVycy90ZXh0LXJlbmRlcmVyL1RleHRSZW5kZXJlci50cyIsICJzcmMvbG9jYWwtZnJhbWV3b3JrL2dyYXBoaWNzL3JlbmRlcmVycy93aWRnZXRzL3JlbmRlckNvbnRyb2xzLnRzIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvZ3JhcGhpY3MvcmVuZGVyZXJzL3dpZGdldHMvcmVuZGVyRnBzTWV0ZXIudHMiLCAic3JjL2xvY2FsLWZyYW1ld29yay9ncmFwaGljcy9pbWFnZXMvZ2V0SW1hZ2VGcm9tVXJsLnRzIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvZ3JhcGhpY3MvZ2VvbWV0cmllcy9tYWtlQm94LnRzIiwgInNyYy9sb2NhbC1mcmFtZXdvcmsvZ3JhcGhpY3MvZ2VvbWV0cmllcy9tYWtlU3BoZXJlLnRzIiwgInNyYy93ZWJnbC1yYXktdHJhY2VyL3NyYy9leHBlcmltZW50L3V0aWxpdGllcy9Mb2dnZXIudHMiLCAic3JjL3dlYmdsLXJheS10cmFjZXIvc3JjL2V4cGVyaW1lbnQvZ3JhcGhpY3MvcmVuZGVyZXJzL3JheS10cmFjZXItcmVuZGVyZXIvc2hhZGVycy9yYXktdHJhY2VyLmdsc2wudmVydCIsICJzcmMvd2ViZ2wtcmF5LXRyYWNlci9zcmMvZXhwZXJpbWVudC9ncmFwaGljcy9yZW5kZXJlcnMvcmF5LXRyYWNlci1yZW5kZXJlci9zaGFkZXJzL3JheS10cmFjZXIuZ2xzbC5mcmFnIiwgInNyYy93ZWJnbC1yYXktdHJhY2VyL3NyYy9leHBlcmltZW50L2dyYXBoaWNzL3JlbmRlcmVycy9yYXktdHJhY2VyLXJlbmRlcmVyL3NoYWRlcnMvdGV4dHVyZS5nbHNsLnZlcnQiLCAic3JjL3dlYmdsLXJheS10cmFjZXIvc3JjL2V4cGVyaW1lbnQvZ3JhcGhpY3MvcmVuZGVyZXJzL3JheS10cmFjZXItcmVuZGVyZXIvc2hhZGVycy90ZXh0dXJlLmdsc2wuZnJhZyIsICJzcmMvd2ViZ2wtcmF5LXRyYWNlci9zcmMvZXhwZXJpbWVudC9ncmFwaGljcy9yZW5kZXJlcnMvcmF5LXRyYWNlci1yZW5kZXJlci9SYXlUcmFjZXJSZW5kZXJlci50cyIsICJzcmMvd2ViZ2wtcmF5LXRyYWNlci9zcmMvZXhwZXJpbWVudC9ncmFwaGljcy9SZW5kZXJlci50cyIsICJzcmMvd2ViZ2wtcmF5LXRyYWNlci9zcmMvZXhwZXJpbWVudC9zY2VuZXMvVGVzdFNjZW5lMi50cyIsICJzcmMvd2ViZ2wtcmF5LXRyYWNlci9zcmMvZXhwZXJpbWVudC9FeHBlcmltZW50LnRzIiwgInNyYy93ZWJnbC1yYXktdHJhY2VyL3NyYy91dGlsaXRpZXMvc2V0dXBPdXRkYXRlZFBhZ2UudHMiLCAic3JjL3dlYmdsLXJheS10cmFjZXIvc3JjL21haW4udHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbCiAgICAiY29uc3QgYWxsUmVxdWVzdEV2ZW50czogc3RyaW5nW10gPSBbXG4gICdyZXF1ZXN0RnVsbHNjcmVlbicsXG4gICd3ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbicsXG4gICdtb3pSZXF1ZXN0RnVsbFNjcmVlbicsXG4gICdtc1JlcXVlc3RGdWxsc2NyZWVuJ1xuXTtcblxuY29uc3QgYWxsQ2hhbmdlRXZlbnRzOiBzdHJpbmdbXSA9IFtcbiAgJ2Z1bGxzY3JlZW5jaGFuZ2UnLFxuICAnd2Via2l0ZnVsbHNjcmVlbmNoYW5nZScsXG4gICdtb3pmdWxsc2NyZWVuY2hhbmdlJyxcbiAgJ21zZnVsbHNjcmVlbmNoYW5nZSdcbl07XG5cbnR5cGUgT25DaGFuZ2VDYWxsYmFjayA9ICgpID0+IHZvaWQ7XG5cbmludGVyZmFjZSBJUmVzdWx0IHtcbiAgc3VjY2VzczogYm9vbGVhbjtcbiAgbWVzc2FnZTogc3RyaW5nO1xufVxuXG5jbGFzcyBGdWxsU2NyZWVuTWFuYWdlciB7XG4gIHByaXZhdGUgX29uRnVsbFNjcmVlbkNoYW5nZUNhbGxiYWNrczogT25DaGFuZ2VDYWxsYmFja1tdID0gW107XG5cbiAgcHJpdmF0ZSBfaXNJbml0aWFsaXplZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHByaXZhdGUgX2luaXRpYWxpemUoKSB7XG4gICAgaWYgKHRoaXMuX2lzSW5pdGlhbGl6ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5faXNJbml0aWFsaXplZCA9IHRydWU7XG5cbiAgICBjb25zdCBvbkxvY2tDaGFuZ2UgPSAoKSA9PiB7XG4gICAgICB0aGlzLl9vbkZ1bGxTY3JlZW5DaGFuZ2VDYWxsYmFja3MuZm9yRWFjaCgoY2FsbGJhY2spID0+IGNhbGxiYWNrKCkpO1xuICAgIH07XG5cbiAgICBmb3IgKGNvbnN0IGN1cnJFdmVudCBvZiBhbGxDaGFuZ2VFdmVudHMpXG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGN1cnJFdmVudCwgb25Mb2NrQ2hhbmdlLCBmYWxzZSk7XG4gIH1cblxuICAvL1xuXG4gIGlzQ29tcGF0aWJsZShpblRhcmdldEVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgZm9yIChjb25zdCBjdXJyRXZlbnQgb2YgYWxsUmVxdWVzdEV2ZW50cykge1xuICAgICAgaWYgKGN1cnJFdmVudCBpbiBpblRhcmdldEVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vXG5cbiAgaXNGdWxsU2NyZWVuKGluVGFyZ2V0RWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZnVsbHNjcmVlbkVsZW1lbnQgPT09IGluVGFyZ2V0RWxlbWVudDtcbiAgfVxuXG4gIC8vXG5cbiAgYXN5bmMgcmVxdWVzdEZ1bGxTY3JlZW4oaW5UYXJnZXRFbGVtZW50OiBIVE1MRWxlbWVudCk6IFByb21pc2U8SVJlc3VsdD4ge1xuICAgIGlmICh0aGlzLmlzRnVsbFNjcmVlbihpblRhcmdldEVsZW1lbnQpKSB7XG4gICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogJ2VsZW1lbnQgYWxyZWFkeSBpbiBmdWxsIHNjcmVlbicgfTtcbiAgICB9XG5cbiAgICB0aGlzLl9pbml0aWFsaXplKCk7XG5cbiAgICBmb3IgKGNvbnN0IGN1cnJFdmVudCBvZiBhbGxSZXF1ZXN0RXZlbnRzKSB7XG4gICAgICBpZiAoY3VyckV2ZW50IGluIGluVGFyZ2V0RWxlbWVudCkge1xuICAgICAgICAoaW5UYXJnZXRFbGVtZW50IGFzIGFueSlbY3VyckV2ZW50XSgpO1xuXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIG1lc3NhZ2U6ICdyZXF1ZXN0IGZvciBmdWxsIHNjcmVlbiBkb25lJyB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiAndW5zdXBwb3J0ZWQgcmVxdWVzdCBmb3IgZnVsbCBzY3JlZW4nIH07XG4gIH1cblxuICAvL1xuXG4gIGFkZE9uRnVsbFNjcmVlbkNoYW5nZShpbkNhbGxiYWNrOiBPbkNoYW5nZUNhbGxiYWNrKSB7XG4gICAgdGhpcy5fb25GdWxsU2NyZWVuQ2hhbmdlQ2FsbGJhY2tzLnB1c2goaW5DYWxsYmFjayk7XG4gIH1cbiAgcmVtb3ZlT25GdWxsU2NyZWVuQ2hhbmdlKGluQ2FsbGJhY2s6IE9uQ2hhbmdlQ2FsbGJhY2spIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuX29uRnVsbFNjcmVlbkNoYW5nZUNhbGxiYWNrcy5pbmRleE9mKGluQ2FsbGJhY2spO1xuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fb25GdWxsU2NyZWVuQ2hhbmdlQ2FsbGJhY2tzLnNwbGljZShpbmRleCwgMSk7XG4gIH1cbiAgcmVtb3ZlQWxsQ2FsbGJhY2tzKCkge1xuICAgIHRoaXMuX29uRnVsbFNjcmVlbkNoYW5nZUNhbGxiYWNrcy5sZW5ndGggPSAwO1xuICB9XG59XG5cbmNvbnN0IEdsb2JhbEZ1bGxTY3JlZW5NYW5hZ2VyID0gbmV3IEZ1bGxTY3JlZW5NYW5hZ2VyKCk7XG5cbmV4cG9ydCB7IEdsb2JhbEZ1bGxTY3JlZW5NYW5hZ2VyIH07XG4iLAogICJleHBvcnQgY29uc3QgQWxsS2V5Q29kZXMgPSB7XG4gIC8vIE51bWJlcnMgYW5kIGxldHRlcnNcbiAgTnVtMDogNDgsXG4gIE51bTE6IDQ5LFxuICBOdW0yOiA1MCxcbiAgTnVtMzogNTEsXG4gIE51bTQ6IDUyLFxuICBOdW01OiA1MyxcbiAgTnVtNjogNTQsXG4gIE51bTc6IDU1LFxuICBOdW04OiA1NixcbiAgTnVtOTogNTcsXG4gIEE6IDY1LFxuICBCOiA2NixcbiAgQzogNjcsXG4gIEQ6IDY4LFxuICBFOiA2OSxcbiAgRjogNzAsXG4gIEc6IDcxLFxuICBIOiA3MixcbiAgSTogNzMsXG4gIEo6IDc0LFxuICBLOiA3NSxcbiAgTDogNzYsXG4gIE06IDc3LFxuICBOOiA3OCxcbiAgTzogNzksXG4gIFA6IDgwLFxuICBROiA4MSxcbiAgUjogODIsXG4gIFM6IDgzLFxuICBUOiA4NCxcbiAgVTogODUsXG4gIFY6IDg2LFxuICBXOiA4NyxcbiAgWDogODgsXG4gIFk6IDg5LFxuICBaOiA5MCxcblxuICAvLyBQdW5jdHVhdGlvbnMga2V5cyBpbiBVUyBsYXlvdXRcbiAgU2VtaWNvbG9uOiAxODYsXG4gIEVxdWFsOiAxODcsXG4gIENvbW1hOiAxODgsXG4gIE1pbnVzOiAxODksXG4gIFBlcmlvZDogMTkwLFxuICBCYWNrUXVvdGU6IDE5MixcbiAgQnJhY2tldExlZnQ6IDIxOSxcbiAgQmFja3NsYXNoOiAyMjAsXG4gIEJyYWNrZXRSaWdodDogMjIxLFxuICBRdW90ZTogMjIyLFxuXG4gIC8vIE1vZGlmaWVyIGtleXNcbiAgU2hpZnQ6IDE2LFxuICBDdHJsOiAxNyxcbiAgQWx0OiAxOCxcbiAgQ2Fwc0xvY2s6IDIwLFxuXG4gIC8vIENvbnRyb2wga2V5c1xuICBUYWI6IDksXG4gIEVudGVyOiAxMyxcbiAgUGF1c2U6IDE5LFxuICBFc2NhcGU6IDI3LFxuICBTcGFjZTogMzIsXG4gIFBhZ2VVcDogMzMsXG4gIFBhZ2VEb3duOiAzNCxcbiAgRW5kOiAzNSxcbiAgSG9tZTogMzYsXG4gIEFycm93TGVmdDogMzcsXG4gIEFycm93VXA6IDM4LFxuICBBcnJvd1JpZ2h0OiAzOSxcbiAgQXJyb3dEb3duOiA0MCxcbiAgUHJpbnRTY3JlZW46IDQ0LFxuICBJbnNlcnQ6IDQ1LFxuICBEZWxldGU6IDQ2LFxuICBDb250ZXh0TWVudTogOTMsXG4gIFNjcm9sbExvY2s6IDE0NSxcblxuICAvLyBGdW5jdGlvbiBrZXlzXG4gIEYxOiAxMTIsXG4gIEYyOiAxMTMsXG4gIEYzOiAxMTQsXG4gIEY0OiAxMTUsXG4gIEY1OiAxMTYsXG4gIEY2OiAxMTcsXG4gIEY3OiAxMTgsXG4gIEY4OiAxMTksXG4gIEY5OiAxMjAsXG4gIEYxMDogMTIxLFxuICBGMTE6IDEyMixcbiAgRjEyOiAxMjMsXG4gIEYxMzogMTI0LFxuICBGMTQ6IDEyNSxcbiAgRjE1OiAxMjYsXG4gIEYxNjogMTI3LFxuICBGMTc6IDEyOCxcbiAgRjE4OiAxMjksXG4gIEYxOTogMTMwLFxuICBGMjA6IDEzMSxcbiAgRjIxOiAxMzIsXG4gIEYyMjogMTMzLFxuICBGMjM6IDEzNCxcbiAgRjI0OiAxMzUsXG5cbiAgLy8gTnVtcGFkIGtleXNcbiAgTnVtUGFkMDogOTYsXG4gIE51bVBhZDE6IDk3LFxuICBOdW1QYWQyOiA5OCxcbiAgTnVtUGFkMzogOTksXG4gIE51bVBhZDQ6IDEwMCxcbiAgTnVtUGFkNTogMTAxLFxuICBOdW1QYWQ2OiAxMDIsXG4gIE51bVBhZDc6IDEwMyxcbiAgTnVtUGFkODogMTA0LFxuICBOdW1QYWQ5OiAxMDUsXG4gIE51bVBhZE11bHRpcGx5OiAxMDYsXG4gIE51bVBhZEFkZDogMTA3LFxuICBOdW1QYWRTdWJ0cmFjdDogMTA5LFxuICBOdW1QYWREZWNpbWFsOiAxMTAsXG4gIE51bVBhZERpdmlkZTogMTExLFxuICBOdW1Mb2NrOiAxNDQsXG4gIE51bVBhZENvbW1hOiAxOTQsXG4gIE51bVBhZEVxdWFsOiAxMlxufTtcblxuZXhwb3J0IGNvbnN0IGlzTGV0dGVyID0gKGtleTogbnVtYmVyKSA9PiB7XG4gIHJldHVybiBrZXkgPj0gQWxsS2V5Q29kZXMuQSAmJiBrZXkgPD0gQWxsS2V5Q29kZXMuWjtcbn07XG5cbmV4cG9ydCBjb25zdCBpc051bWJlciA9IChrZXk6IG51bWJlcikgPT4ge1xuICByZXR1cm4gKFxuICAgIChrZXkgPj0gQWxsS2V5Q29kZXMuTnVtMCAmJiBrZXkgPD0gQWxsS2V5Q29kZXMuTnVtOSkgfHxcbiAgICAoa2V5ID49IEFsbEtleUNvZGVzLk51bVBhZDAgJiYga2V5IDw9IEFsbEtleUNvZGVzLk51bVBhZDkpXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgaXNBbHBoYW51bWVyaWMgPSAoa2V5OiBudW1iZXIpID0+IHtcbiAgcmV0dXJuIGlzTnVtYmVyKGtleSkgfHwgaXNMZXR0ZXIoa2V5KTtcbn07XG4iLAogICJpbXBvcnQgeyBBbGxLZXlDb2RlcyB9IGZyb20gJy4vS2V5Q29kZXMnO1xuXG5jbGFzcyBLZXlib2FyZE1hbmFnZXIge1xuICBwcml2YXRlIF9wcmVzc2VkS2V5c1NldCA9IG5ldyBTZXQ8bnVtYmVyPigpO1xuICBwcml2YXRlIF9wcmV2ZW50RGVmYXVsdEtleXNTZXQgPSBuZXcgU2V0PG51bWJlcj4oKTtcbiAgcHJpdmF0ZSBfYWN0aXZhdGVkOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgX2hhbmRsZUtleURvd246IChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4gdm9pZDtcbiAgcHJpdmF0ZSBfaGFuZGxlS2V5VXA6IChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4gdm9pZDtcblxuICBwcml2YXRlIF9vbkV2ZW50OiAoKCkgPT4gdm9pZCkgfCB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgaGFuZGxlS2V5RG93biA9IChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgY29uc3QgeyBrZXlDb2RlIH0gPSBldmVudDtcblxuICAgICAgaWYgKHRoaXMuX29uRXZlbnQpIHtcbiAgICAgICAgdGhpcy5fb25FdmVudCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fcHJldmVudERlZmF1bHRLZXlzU2V0LmhhcyhrZXlDb2RlKSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9wcmVzc2VkS2V5c1NldC5hZGQoa2V5Q29kZSk7XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVLZXlVcCA9IChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgY29uc3QgeyBrZXlDb2RlIH0gPSBldmVudDtcblxuICAgICAgaWYgKHRoaXMuX29uRXZlbnQpIHtcbiAgICAgICAgdGhpcy5fb25FdmVudCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fcHJldmVudERlZmF1bHRLZXlzU2V0LmhhcyhrZXlDb2RlKSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9wcmVzc2VkS2V5c1NldC5kZWxldGUoa2V5Q29kZSk7XG4gICAgfTtcblxuICAgIHRoaXMuX2FjdGl2YXRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2hhbmRsZUtleURvd24gPSBoYW5kbGVLZXlEb3duLmJpbmQodGhpcyk7XG4gICAgdGhpcy5faGFuZGxlS2V5VXAgPSBoYW5kbGVLZXlVcC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgaXNQcmVzc2VkKC4uLmluS2V5czogKGtleW9mIHR5cGVvZiBBbGxLZXlDb2RlcylbXSkge1xuICAgIGZvciAoY29uc3Qga2V5IG9mIGluS2V5cykge1xuICAgICAgaWYgKHRoaXMuX3ByZXNzZWRLZXlzU2V0LmhhcyhBbGxLZXlDb2Rlc1trZXldKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHJldmVudERlZmF1bHQoaW5LZXk6IGtleW9mIHR5cGVvZiBBbGxLZXlDb2Rlcykge1xuICAgIHRoaXMuX3ByZXZlbnREZWZhdWx0S2V5c1NldC5hZGQoQWxsS2V5Q29kZXNbaW5LZXldKTtcbiAgfVxuXG4gIGVuYWJsZURlZmF1bHQoaW5LZXk6IGtleW9mIHR5cGVvZiBBbGxLZXlDb2Rlcykge1xuICAgIHRoaXMuX3ByZXZlbnREZWZhdWx0S2V5c1NldC5kZWxldGUoQWxsS2V5Q29kZXNbaW5LZXldKTtcbiAgfVxuXG4gIGFjdGl2YXRlKCkge1xuICAgIGlmICh0aGlzLl9hY3RpdmF0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9wcmVzc2VkS2V5c1NldC5jbGVhcigpO1xuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2hhbmRsZUtleURvd24pO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5faGFuZGxlS2V5VXApO1xuXG4gICAgdGhpcy5fYWN0aXZhdGVkID0gdHJ1ZTtcbiAgfVxuXG4gIGRlYWN0aXZhdGUoKSB7XG4gICAgaWYgKCF0aGlzLl9hY3RpdmF0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9wcmVzc2VkS2V5c1NldC5jbGVhcigpO1xuXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2hhbmRsZUtleURvd24pO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5faGFuZGxlS2V5VXApO1xuXG4gICAgdGhpcy5fYWN0aXZhdGVkID0gZmFsc2U7XG4gIH1cblxuICBvbkV2ZW50KGNhbGxiYWNrOiAoKCkgPT4gdm9pZCkgfCB1bmRlZmluZWQpIHtcbiAgICB0aGlzLl9vbkV2ZW50ID0gY2FsbGJhY2s7XG4gIH1cbn1cblxuLy9cbi8vXG4vL1xuXG5jb25zdCBHbG9iYWxLZXlib2FyZE1hbmFnZXIgPSBuZXcgS2V5Ym9hcmRNYW5hZ2VyKCk7XG5cbmV4cG9ydCB7IEdsb2JhbEtleWJvYXJkTWFuYWdlciB9O1xuIiwKICAiaW1wb3J0IHsgQWxsS2V5Q29kZXMgfSBmcm9tICcuL0tleUNvZGVzJztcblxuY29uc3QgQWxsTW91c2VCdXR0b25zID0ge1xuICBMZWZ0OiAwLFxuICBNaWRkbGU6IDEsXG4gIFJpZ2h0OiAyXG59O1xuXG5jbGFzcyBNb3VzZU1hbmFnZXIge1xuICBwcml2YXRlIF9wcmVzc2VkQnV0dG9uc1NldCA9IG5ldyBTZXQ8bnVtYmVyPigpO1xuICBwcml2YXRlIF9hY3RpdmF0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfaGFuZGxlTW91c2VEb3duOiAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG4gIHByaXZhdGUgX2hhbmRsZU1vdXNlVXA6IChldmVudDogTW91c2VFdmVudCkgPT4gdm9pZDtcbiAgcHJpdmF0ZSBfaGFuZGxlTW91c2VNb3ZlOiAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG4gIHByaXZhdGUgX2hhbmRsZU1vdXNlV2hlZWw6IChldmVudDogV2hlZWxFdmVudCkgPT4gdm9pZDtcblxuICBwcml2YXRlIF9wb3NpdGlvblggPSAwO1xuICBwcml2YXRlIF9wb3NpdGlvblkgPSAwO1xuICBwcml2YXRlIF9kZWx0YVggPSAwO1xuICBwcml2YXRlIF9kZWx0YVkgPSAwO1xuICBwcml2YXRlIF93aGVlbERlbHRhWSA9IDA7XG5cbiAgcHJpdmF0ZSBfb25FdmVudDogKCgpID0+IHZvaWQpIHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IGhhbmRsZU1vdXNlRG93biA9IChldmVudDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgaWYgKHRoaXMuX29uRXZlbnQpIHtcbiAgICAgICAgdGhpcy5fb25FdmVudCgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9wb3NpdGlvblggPSBldmVudC5wYWdlWDtcbiAgICAgIHRoaXMuX3Bvc2l0aW9uWSA9IGV2ZW50LnBhZ2VZO1xuXG4gICAgICB0aGlzLl9wcmVzc2VkQnV0dG9uc1NldC5hZGQoZXZlbnQuYnV0dG9uKTtcbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZU1vdXNlVXAgPSAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgIGlmICh0aGlzLl9vbkV2ZW50KSB7XG4gICAgICAgIHRoaXMuX29uRXZlbnQoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcG9zaXRpb25YID0gZXZlbnQucGFnZVg7XG4gICAgICB0aGlzLl9wb3NpdGlvblkgPSBldmVudC5wYWdlWTtcblxuICAgICAgdGhpcy5fcHJlc3NlZEJ1dHRvbnNTZXQuZGVsZXRlKGV2ZW50LmJ1dHRvbik7XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVNb3VzZU1vdmUgPSAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgIGlmICh0aGlzLl9vbkV2ZW50KSB7XG4gICAgICAgIHRoaXMuX29uRXZlbnQoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcG9zaXRpb25YID0gZXZlbnQucGFnZVg7XG4gICAgICB0aGlzLl9wb3NpdGlvblkgPSBldmVudC5wYWdlWTtcblxuICAgICAgdGhpcy5fZGVsdGFYICs9XG4gICAgICAgIGV2ZW50Lm1vdmVtZW50WCB8fFxuICAgICAgICAoZXZlbnQgYXMgYW55KS5tb3pNb3ZlbWVudFggfHxcbiAgICAgICAgKGV2ZW50IGFzIGFueSkud2Via2l0TW92ZW1lbnRYIHx8XG4gICAgICAgIDA7XG5cbiAgICAgIHRoaXMuX2RlbHRhWSArPVxuICAgICAgICBldmVudC5tb3ZlbWVudFkgfHxcbiAgICAgICAgKGV2ZW50IGFzIGFueSkubW96TW92ZW1lbnRZIHx8XG4gICAgICAgIChldmVudCBhcyBhbnkpLndlYmtpdE1vdmVtZW50WSB8fFxuICAgICAgICAwO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlV2hlZWxFdmVudCA9IChldmVudDogV2hlZWxFdmVudCkgPT4ge1xuICAgICAgaWYgKHRoaXMuX29uRXZlbnQpIHtcbiAgICAgICAgdGhpcy5fb25FdmVudCgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl93aGVlbERlbHRhWSArPSBldmVudC5kZWx0YVkgfHwgMDtcbiAgICB9O1xuXG4gICAgdGhpcy5fYWN0aXZhdGVkID0gZmFsc2U7XG4gICAgdGhpcy5faGFuZGxlTW91c2VEb3duID0gaGFuZGxlTW91c2VEb3duLmJpbmQodGhpcyk7XG4gICAgdGhpcy5faGFuZGxlTW91c2VVcCA9IGhhbmRsZU1vdXNlVXAuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9oYW5kbGVNb3VzZU1vdmUgPSBoYW5kbGVNb3VzZU1vdmUuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9oYW5kbGVNb3VzZVdoZWVsID0gaGFuZGxlV2hlZWxFdmVudC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgYWN0aXZhdGUoZG9tRWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICBpZiAodGhpcy5fYWN0aXZhdGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fcHJlc3NlZEJ1dHRvbnNTZXQuY2xlYXIoKTtcblxuICAgIGRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5faGFuZGxlTW91c2VEb3duKTtcbiAgICBkb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLl9oYW5kbGVNb3VzZVVwKTtcbiAgICBkb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuX2hhbmRsZU1vdXNlTW92ZSk7XG4gICAgZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsIHRoaXMuX2hhbmRsZU1vdXNlV2hlZWwpO1xuXG4gICAgdGhpcy5fYWN0aXZhdGVkID0gdHJ1ZTtcbiAgfVxuXG4gIGRlYWN0aXZhdGUoZG9tRWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICBpZiAoIXRoaXMuX2FjdGl2YXRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3ByZXNzZWRCdXR0b25zU2V0LmNsZWFyKCk7XG5cbiAgICBkb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuX2hhbmRsZU1vdXNlRG93bik7XG4gICAgZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5faGFuZGxlTW91c2VVcCk7XG4gICAgZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLl9oYW5kbGVNb3VzZU1vdmUpO1xuICAgIGRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzLl9oYW5kbGVNb3VzZVdoZWVsKTtcblxuICAgIHRoaXMuX2FjdGl2YXRlZCA9IGZhbHNlO1xuICB9XG5cbiAgaXNCdXR0b25QcmVzc2VkKGluS2V5OiBrZXlvZiB0eXBlb2YgQWxsTW91c2VCdXR0b25zKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ByZXNzZWRCdXR0b25zU2V0LmhhcyhBbGxNb3VzZUJ1dHRvbnNbaW5LZXldKTtcbiAgfVxuXG4gIGdldCBwb3NpdGlvblgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fcG9zaXRpb25YO1xuICB9XG4gIGdldCBwb3NpdGlvblkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fcG9zaXRpb25ZO1xuICB9XG4gIGRlbHRhWCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9kZWx0YVg7XG4gIH1cbiAgZGVsdGFZKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2RlbHRhWTtcbiAgfVxuICB3aGVlbERlbHRhWSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl93aGVlbERlbHRhWTtcbiAgfVxuICByZXNldERlbHRhcygpIHtcbiAgICB0aGlzLl9kZWx0YVggPSAwO1xuICAgIHRoaXMuX2RlbHRhWSA9IDA7XG4gICAgdGhpcy5fd2hlZWxEZWx0YVkgPSAwO1xuICB9XG5cbiAgb25FdmVudChjYWxsYmFjazogKCgpID0+IHZvaWQpIHwgdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5fb25FdmVudCA9IGNhbGxiYWNrO1xuICB9XG59XG5cbi8vXG4vL1xuLy9cblxuY29uc3QgR2xvYmFsTW91c2VNYW5hZ2VyID0gbmV3IE1vdXNlTWFuYWdlcigpO1xuXG5leHBvcnQgeyBHbG9iYWxNb3VzZU1hbmFnZXIgfTtcbiIsCiAgImNvbnN0IGFsbFJlcXVlc3RFdmVudHM6IHN0cmluZ1tdID0gW1xuICAncmVxdWVzdFBvaW50ZXJMb2NrJyxcbiAgJ21velJlcXVlc3RQb2ludGVyTG9jaycsXG4gICd3ZWJraXRSZXF1ZXN0UG9pbnRlckxvY2snXG5dO1xuXG5jb25zdCBhbGxFeGl0RXZlbnRzOiBzdHJpbmdbXSA9IFtcbiAgJ2V4aXRQb2ludGVyTG9jaycsXG4gICdtb3pFeGl0UG9pbnRlckxvY2snLFxuICAnd2Via2l0RXhpdFBvaW50ZXJMb2NrJ1xuXTtcblxuY29uc3QgYWxsU3RhdGVFdmVudHM6IHN0cmluZ1tdID0gW1xuICAncG9pbnRlckxvY2tFbGVtZW50JyxcbiAgJ21velBvaW50ZXJMb2NrRWxlbWVudCcsXG4gICd3ZWJraXRQb2ludGVyTG9ja0VsZW1lbnQnXG5dO1xuXG5jb25zdCBhbGxDaGFuZ2VFdmVudHM6IHsgbWV0aG9kTmFtZTogc3RyaW5nOyBwcm9wZXJ0eU5hbWU6IHN0cmluZyB9W10gPSBbXG4gIHsgbWV0aG9kTmFtZTogJ29ucG9pbnRlcmxvY2tjaGFuZ2UnLCBwcm9wZXJ0eU5hbWU6ICdwb2ludGVybG9ja2NoYW5nZScgfSxcbiAge1xuICAgIG1ldGhvZE5hbWU6ICdvbm1venBvaW50ZXJsb2NrY2hhbmdlJyxcbiAgICBwcm9wZXJ0eU5hbWU6ICdtb3pwb2ludGVybG9ja2NoYW5nZSdcbiAgfSxcbiAge1xuICAgIG1ldGhvZE5hbWU6ICdvbndlYmtpdHBvaW50ZXJsb2NrY2hhbmdlJyxcbiAgICBwcm9wZXJ0eU5hbWU6ICd3ZWJraXRwb2ludGVybG9ja2NoYW5nZSdcbiAgfVxuXTtcblxuY29uc3QgYWxsRXJyb3JFdmVudHM6IHsgbWV0aG9kTmFtZTogc3RyaW5nOyBwcm9wZXJ0eU5hbWU6IHN0cmluZyB9W10gPSBbXG4gIHsgbWV0aG9kTmFtZTogJ29ucG9pbnRlcmxvY2tlcnJvcicsIHByb3BlcnR5TmFtZTogJ3BvaW50ZXJsb2NrZXJyb3InIH0sXG4gIHsgbWV0aG9kTmFtZTogJ29ubW96cG9pbnRlcmxvY2tlcnJvcicsIHByb3BlcnR5TmFtZTogJ21venBvaW50ZXJsb2NrZXJyb3InIH0sXG4gIHtcbiAgICBtZXRob2ROYW1lOiAnb253ZWJraXRwb2ludGVybG9ja2Vycm9yJyxcbiAgICBwcm9wZXJ0eU5hbWU6ICd3ZWJraXRwb2ludGVybG9ja2Vycm9yJ1xuICB9XG5dO1xuXG50eXBlIE9uQ2hhbmdlQ2FsbGJhY2sgPSAoKSA9PiB2b2lkO1xudHlwZSBPbkVycm9yQ2FsbGJhY2sgPSAoZXZlbnQ6IEV2ZW50KSA9PiB2b2lkO1xuXG5pbnRlcmZhY2UgSVJlc3VsdCB7XG4gIHN1Y2Nlc3M6IGJvb2xlYW47XG4gIG1lc3NhZ2U6IHN0cmluZztcbn1cblxuY2xhc3MgUG9pbnRlckxvY2tNYW5hZ2VyIHtcbiAgcHJpdmF0ZSBfb25Mb2NrQ2hhbmdlQ2FsbGJhY2tzOiBPbkNoYW5nZUNhbGxiYWNrW10gPSBbXTtcbiAgcHJpdmF0ZSBfb25Mb2NrRXJyb3JDYWxsYmFja3M6IE9uRXJyb3JDYWxsYmFja1tdID0gW107XG4gIHByaXZhdGUgX3RpbWVTaW5jZUxhc3RMb2NrQ2hhbmdlID0gMDtcblxuICBwcml2YXRlIF9sYXRlc3RSZXF1ZXN0SHRtbEVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkO1xuXG4gIHByaXZhdGUgX2lzSW5pdGlhbGl6ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvLyBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgcHJpdmF0ZSBfaW5pdGlhbGl6ZSgpIHtcbiAgICBpZiAodGhpcy5faXNJbml0aWFsaXplZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9pc0luaXRpYWxpemVkID0gdHJ1ZTtcblxuICAgIGNvbnN0IG9uTG9ja0NoYW5nZSA9ICgpID0+IHtcbiAgICAgIHRoaXMuX3RpbWVTaW5jZUxhc3RMb2NrQ2hhbmdlID0gRGF0ZS5ub3coKTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKFwidGltZXIgcmVzZXRcIik7XG5cbiAgICAgIHRoaXMuX29uTG9ja0NoYW5nZUNhbGxiYWNrcy5mb3JFYWNoKChjYWxsYmFjaykgPT4gY2FsbGJhY2soKSk7XG4gICAgfTtcblxuICAgIGNvbnN0IG9uTG9ja0Vycm9yID0gKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgICAgdGhpcy5fdGltZVNpbmNlTGFzdExvY2tDaGFuZ2UgPSBEYXRlLm5vdygpO1xuICAgICAgLy8gY29uc29sZS5sb2coXCJ0aW1lciByZXNldFwiKTtcblxuICAgICAgdGhpcy5fb25Mb2NrRXJyb3JDYWxsYmFja3MuZm9yRWFjaCgoY2FsbGJhY2spID0+IGNhbGxiYWNrKGV2ZW50KSk7XG4gICAgfTtcblxuICAgIGZvciAoY29uc3QgY3VyckV2ZW50IG9mIGFsbENoYW5nZUV2ZW50cykge1xuICAgICAgaWYgKGN1cnJFdmVudC5tZXRob2ROYW1lIGluIGRvY3VtZW50KSB7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoY3VyckV2ZW50LnByb3BlcnR5TmFtZSwgb25Mb2NrQ2hhbmdlLCBmYWxzZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoY29uc3QgY3VyckV2ZW50IG9mIGFsbEVycm9yRXZlbnRzKSB7XG4gICAgICBpZiAoY3VyckV2ZW50Lm1ldGhvZE5hbWUgaW4gZG9jdW1lbnQpIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihjdXJyRXZlbnQucHJvcGVydHlOYW1lLCBvbkxvY2tFcnJvciwgZmFsc2UpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvL1xuXG4gIGNhbkJlUG9pbnRlckxvY2tlZChpblRhcmdldEVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgZm9yIChjb25zdCBjdXJyRXZlbnQgb2YgYWxsUmVxdWVzdEV2ZW50cykge1xuICAgICAgaWYgKGN1cnJFdmVudCBpbiBpblRhcmdldEVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vXG5cbiAgaXNQb2ludGVyTG9ja2VkKGluVGFyZ2V0RWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICBmb3IgKGNvbnN0IGN1cnJFdmVudCBvZiBhbGxTdGF0ZUV2ZW50cykge1xuICAgICAgaWYgKGN1cnJFdmVudCBpbiBkb2N1bWVudCkge1xuICAgICAgICByZXR1cm4gKGRvY3VtZW50IGFzIGFueSlbY3VyckV2ZW50XSA9PT0gaW5UYXJnZXRFbGVtZW50O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvL1xuXG4gIGFzeW5jIHJlcXVlc3RQb2ludGVyTG9jayhpblRhcmdldEVsZW1lbnQ6IEhUTUxFbGVtZW50KTogUHJvbWlzZTxJUmVzdWx0PiB7XG4gICAgaWYgKHRoaXMuaXNQb2ludGVyTG9ja2VkKGluVGFyZ2V0RWxlbWVudCkpIHtcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiAnZWxlbWVudCBhbHJlYWR5IGxvY2tlZCcgfTtcbiAgICB9XG5cbiAgICB0aGlzLl9pbml0aWFsaXplKCk7XG5cbiAgICBpZiAodGhpcy5fdGltZVNpbmNlTGFzdExvY2tDaGFuZ2UgPiAwKSB7XG4gICAgICBjb25zdCBlbGFwc2VkU2VjVGltZSA9XG4gICAgICAgIChEYXRlLm5vdygpIC0gdGhpcy5fdGltZVNpbmNlTGFzdExvY2tDaGFuZ2UpIC8gMTAwMDtcblxuICAgICAgLy8gY29uc29sZS5sb2coXCJlbGFwc2VkU2VjVGltZSAxXCIsIGVsYXBzZWRTZWNUaW1lKTtcblxuICAgICAgaWYgKGVsYXBzZWRTZWNUaW1lIDwgMS4xKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgbWVzc2FnZTogYHJlcXVlc3QgZm9yIGxvY2sgd2FzIHRvbyBlYXJseSwgdGltZSB0byB3YWl0OiAke2VsYXBzZWRTZWNUaW1lLnRvRml4ZWQoXG4gICAgICAgICAgICAyXG4gICAgICAgICAgKX1zZWNgXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX3RpbWVTaW5jZUxhc3RMb2NrQ2hhbmdlID0gRGF0ZS5ub3coKTtcblxuICAgIGZvciAoY29uc3QgY3VyckV2ZW50IG9mIGFsbFJlcXVlc3RFdmVudHMpIHtcbiAgICAgIGlmIChjdXJyRXZlbnQgaW4gaW5UYXJnZXRFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgLy8gbW9yZSBhY2N1cmF0ZSBieSBkaXNhYmxpbmcgT1MtbGV2ZWwgYWRqdXN0ZWQgbW91c2UgbW92ZW1lbnRzXG4gICAgICAgICAgdW5hZGp1c3RlZE1vdmVtZW50OiBmYWxzZVxuICAgICAgICB9O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coXCJhY3R1YWwgcmVxdWVzdFwiKTtcblxuICAgICAgICAgIGF3YWl0IChpblRhcmdldEVsZW1lbnQgYXMgYW55KVtjdXJyRXZlbnRdKG9wdGlvbnMpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIkVSUlwiLCBlcnIpO1xuXG4gICAgICAgICAgY29uc3QgZWxhcHNlZFNlY1RpbWUgPVxuICAgICAgICAgICAgKERhdGUubm93KCkgLSB0aGlzLl90aW1lU2luY2VMYXN0TG9ja0NoYW5nZSkgLyAxMDAwO1xuXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coXCJlbGFwc2VkU2VjVGltZSAyXCIsIGVsYXBzZWRTZWNUaW1lKTtcblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGByZXF1ZXN0IGZvciBsb2NrIHdhcyB0b28gZWFybHksIHRpbWUgdG8gd2FpdDogJHtlbGFwc2VkU2VjVGltZS50b0ZpeGVkKFxuICAgICAgICAgICAgICAyXG4gICAgICAgICAgICApfXNlY2BcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdGltZVNpbmNlTGFzdExvY2tDaGFuZ2UgPSBEYXRlLm5vdygpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcInRpbWVyIHJlc2V0XCIpO1xuXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIG1lc3NhZ2U6ICdyZXF1ZXN0IGZvciBsb2NrIGRvbmUnIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6ICd1bnN1cHBvcnRlZCByZXF1ZXN0IGZvciBsb2NrJyB9O1xuICB9XG5cbiAgLy9cblxuICBhbGxvd1BvaW50ZXJMb2NrZWRPbkNsaWNrRXZlbnQoaW5UYXJnZXRFbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgIGlmIChpblRhcmdldEVsZW1lbnQgPT09IHRoaXMuX2xhdGVzdFJlcXVlc3RIdG1sRWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2xhdGVzdFJlcXVlc3RIdG1sRWxlbWVudCA9IGluVGFyZ2V0RWxlbWVudDtcblxuICAgIGNvbnN0IG9uQ2xpY2sgPSBhc3luYyAoKSA9PiB7XG4gICAgICBpblRhcmdldEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsaWNrKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5yZXF1ZXN0UG9pbnRlckxvY2soaW5UYXJnZXRFbGVtZW50KTtcblxuICAgICAgdGhpcy5fbGF0ZXN0UmVxdWVzdEh0bWxFbGVtZW50ID0gdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoIXJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICAgIHRoaXMuYWxsb3dQb2ludGVyTG9ja2VkT25DbGlja0V2ZW50KGluVGFyZ2V0RWxlbWVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGluVGFyZ2V0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQ2xpY2spO1xuICB9XG5cbiAgLy9cblxuICBleGl0UG9pbnRlckxvY2soKSB7XG4gICAgZm9yIChjb25zdCBjdXJyRXZlbnQgb2YgYWxsRXhpdEV2ZW50cykge1xuICAgICAgaWYgKGN1cnJFdmVudCBpbiBkb2N1bWVudCkge1xuICAgICAgICAoZG9jdW1lbnQgYXMgYW55KVtjdXJyRXZlbnRdKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vXG5cbiAgYWRkT25Mb2NrQ2hhbmdlKGluQ2FsbGJhY2s6IE9uQ2hhbmdlQ2FsbGJhY2spIHtcbiAgICB0aGlzLl9vbkxvY2tDaGFuZ2VDYWxsYmFja3MucHVzaChpbkNhbGxiYWNrKTtcbiAgfVxuICByZW1vdmVPbkxvY2tDaGFuZ2UoaW5DYWxsYmFjazogT25DaGFuZ2VDYWxsYmFjaykge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fb25Mb2NrQ2hhbmdlQ2FsbGJhY2tzLmluZGV4T2YoaW5DYWxsYmFjayk7XG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9vbkxvY2tDaGFuZ2VDYWxsYmFja3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuXG4gIC8vXG5cbiAgYWRkT25Mb2NrRXJyb3IoaW5DYWxsYmFjazogT25FcnJvckNhbGxiYWNrKSB7XG4gICAgdGhpcy5fb25Mb2NrRXJyb3JDYWxsYmFja3MucHVzaChpbkNhbGxiYWNrKTtcbiAgfVxuICByZW1vdmVPbkxvY2tFcnJvcihpbkNhbGxiYWNrOiBPbkVycm9yQ2FsbGJhY2spIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuX29uTG9ja0Vycm9yQ2FsbGJhY2tzLmluZGV4T2YoaW5DYWxsYmFjayk7XG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9vbkxvY2tFcnJvckNhbGxiYWNrcy5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG5cbiAgLy9cblxuICByZW1vdmVBbGxDYWxsYmFja3MoKSB7XG4gICAgdGhpcy5fb25Mb2NrQ2hhbmdlQ2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5fb25Mb2NrRXJyb3JDYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgfVxufVxuXG5jb25zdCBHbG9iYWxQb2ludGVyTG9ja01hbmFnZXIgPSBuZXcgUG9pbnRlckxvY2tNYW5hZ2VyKCk7XG5cbmV4cG9ydCB7IEdsb2JhbFBvaW50ZXJMb2NrTWFuYWdlciB9O1xuIiwKICAiY2xhc3MgVG91Y2hEYXRhIHtcbiAgcHVibGljIGlkOiBudW1iZXI7XG4gIHB1YmxpYyBjcmVhdGVkQXQgPSBEYXRlLm5vdygpO1xuICBwdWJsaWMgcG9zaXRpb25YOiBudW1iZXI7XG4gIHB1YmxpYyBwb3NpdGlvblk6IG51bWJlcjtcbiAgcHVibGljIGRlbHRhWDogbnVtYmVyID0gMDtcbiAgcHVibGljIGRlbHRhWTogbnVtYmVyID0gMDtcblxuICBjb25zdHJ1Y3RvcihpZDogbnVtYmVyLCBwb3NpdGlvblg6IG51bWJlciwgcG9zaXRpb25ZOiBudW1iZXIpIHtcbiAgICB0aGlzLmlkID0gaWQ7XG4gICAgdGhpcy5wb3NpdGlvblggPSBwb3NpdGlvblg7XG4gICAgdGhpcy5wb3NpdGlvblkgPSBwb3NpdGlvblk7XG4gIH1cblxuICByZXNldERlbHRhKCkge1xuICAgIHRoaXMuZGVsdGFYID0gMDtcbiAgICB0aGlzLmRlbHRhWSA9IDA7XG4gIH1cbn1cblxuY2xhc3MgVG91Y2hNYW5hZ2VyIHtcbiAgcHJpdmF0ZSBfYWN0aXZhdGVkOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgX2FsbFRvdWNoRGF0YU1hcCA9IG5ldyBNYXA8c3RyaW5nLCBUb3VjaERhdGE+KCk7XG4gIHByaXZhdGUgX2FsbENhY2hlZFRvdWNoRGF0YUFycmF5OiBUb3VjaERhdGFbXSA9IFtdO1xuXG4gIHByaXZhdGUgX2hhbmRsZVRvdWNoU3RhcnQ6IChldmVudDogVG91Y2hFdmVudCkgPT4gdm9pZDtcbiAgcHJpdmF0ZSBfaGFuZGxlVG91Y2hFbmQ6IChldmVudDogVG91Y2hFdmVudCkgPT4gdm9pZDtcbiAgcHJpdmF0ZSBfaGFuZGxlVG91Y2hNb3ZlOiAoZXZlbnQ6IFRvdWNoRXZlbnQpID0+IHZvaWQ7XG5cbiAgcHJpdmF0ZSBfb25FdmVudDogKCgpID0+IHZvaWQpIHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IGhhbmRsZVRvdWNoU3RhcnQgPSAoZXZlbnQ6IFRvdWNoRXZlbnQpID0+IHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGlmICh0aGlzLl9vbkV2ZW50KSB7XG4gICAgICAgIHRoaXMuX29uRXZlbnQoKTtcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgaWkgPSAwOyBpaSA8IGV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aDsgKytpaSkge1xuICAgICAgICBjb25zdCB7IGlkZW50aWZpZXIsIHBhZ2VYLCBwYWdlWSB9ID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbaWldO1xuICAgICAgICBjb25zdCBuZXdEYXRhID0gbmV3IFRvdWNoRGF0YShpZGVudGlmaWVyLCBwYWdlWCwgcGFnZVkpO1xuXG4gICAgICAgIHRoaXMuX2FsbFRvdWNoRGF0YU1hcC5zZXQoYCR7aWRlbnRpZmllcn1gLCBuZXdEYXRhKTtcbiAgICAgICAgdGhpcy5fYWxsQ2FjaGVkVG91Y2hEYXRhQXJyYXkubGVuZ3RoID0gMDtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZVRvdWNoRW5kID0gKGV2ZW50OiBUb3VjaEV2ZW50KSA9PiB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBpZiAodGhpcy5fb25FdmVudCkge1xuICAgICAgICB0aGlzLl9vbkV2ZW50KCk7XG4gICAgICB9XG5cbiAgICAgIGZvciAobGV0IGlpID0gMDsgaWkgPCBldmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGg7ICsraWkpIHtcbiAgICAgICAgY29uc3QgeyBpZGVudGlmaWVyIH0gPSBldmVudC5jaGFuZ2VkVG91Y2hlc1tpaV07XG5cbiAgICAgICAgdGhpcy5fYWxsVG91Y2hEYXRhTWFwLmRlbGV0ZShgJHtpZGVudGlmaWVyfWApO1xuICAgICAgICB0aGlzLl9hbGxDYWNoZWRUb3VjaERhdGFBcnJheS5sZW5ndGggPSAwO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgaGFuZGxlVG91Y2hNb3ZlID0gKGV2ZW50OiBUb3VjaEV2ZW50KSA9PiB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBpZiAodGhpcy5fb25FdmVudCkge1xuICAgICAgICB0aGlzLl9vbkV2ZW50KCk7XG4gICAgICB9XG5cbiAgICAgIGZvciAobGV0IGlpID0gMDsgaWkgPCBldmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGg7ICsraWkpIHtcbiAgICAgICAgY29uc3QgeyBpZGVudGlmaWVyLCBwYWdlWCwgcGFnZVkgfSA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzW2lpXTtcblxuICAgICAgICBjb25zdCBjdXJyRGF0YSA9IHRoaXMuX2FsbFRvdWNoRGF0YU1hcC5nZXQoYCR7aWRlbnRpZmllcn1gKTtcbiAgICAgICAgaWYgKCFjdXJyRGF0YSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGVsdGFYID0gcGFnZVggLSBjdXJyRGF0YS5wb3NpdGlvblg7XG4gICAgICAgIGNvbnN0IGRlbHRhWSA9IHBhZ2VZIC0gY3VyckRhdGEucG9zaXRpb25ZO1xuXG4gICAgICAgIGN1cnJEYXRhLmRlbHRhWCArPSBkZWx0YVg7XG4gICAgICAgIGN1cnJEYXRhLmRlbHRhWSArPSBkZWx0YVk7XG4gICAgICAgIGN1cnJEYXRhLnBvc2l0aW9uWCA9IHBhZ2VYO1xuICAgICAgICBjdXJyRGF0YS5wb3NpdGlvblkgPSBwYWdlWTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5fYWN0aXZhdGVkID0gZmFsc2U7XG4gICAgdGhpcy5faGFuZGxlVG91Y2hTdGFydCA9IGhhbmRsZVRvdWNoU3RhcnQuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9oYW5kbGVUb3VjaEVuZCA9IGhhbmRsZVRvdWNoRW5kLmJpbmQodGhpcyk7XG4gICAgdGhpcy5faGFuZGxlVG91Y2hNb3ZlID0gaGFuZGxlVG91Y2hNb3ZlLmJpbmQodGhpcyk7XG4gIH1cblxuICBpc1N1cHBvcnRlZChpblRhcmdldEVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gICAgcmV0dXJuICdvbnRvdWNoc3RhcnQnIGluIGluVGFyZ2V0RWxlbWVudDtcbiAgfVxuXG4gIGFjdGl2YXRlKGluVGFyZ2V0RWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICBpZiAoIXRoaXMuaXNTdXBwb3J0ZWQoaW5UYXJnZXRFbGVtZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5fYWN0aXZhdGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fYWxsVG91Y2hEYXRhTWFwLmNsZWFyKCk7XG4gICAgdGhpcy5fYWxsQ2FjaGVkVG91Y2hEYXRhQXJyYXkubGVuZ3RoID0gMDtcblxuICAgIGluVGFyZ2V0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5faGFuZGxlVG91Y2hTdGFydCk7XG4gICAgaW5UYXJnZXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5faGFuZGxlVG91Y2hFbmQpO1xuICAgIGluVGFyZ2V0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGNhbmNlbCcsIHRoaXMuX2hhbmRsZVRvdWNoRW5kKTtcbiAgICBpblRhcmdldEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5faGFuZGxlVG91Y2hNb3ZlLCB7XG4gICAgICBwYXNzaXZlOiBmYWxzZVxuICAgIH0pO1xuXG4gICAgdGhpcy5fYWN0aXZhdGVkID0gdHJ1ZTtcbiAgfVxuXG4gIGRlYWN0aXZhdGUoaW5UYXJnZXRFbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgIGlmICghdGhpcy5fYWN0aXZhdGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fYWxsVG91Y2hEYXRhTWFwLmNsZWFyKCk7XG4gICAgdGhpcy5fYWxsQ2FjaGVkVG91Y2hEYXRhQXJyYXkubGVuZ3RoID0gMDtcblxuICAgIGluVGFyZ2V0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5faGFuZGxlVG91Y2hTdGFydCk7XG4gICAgaW5UYXJnZXRFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5faGFuZGxlVG91Y2hFbmQpO1xuICAgIGluVGFyZ2V0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGNhbmNlbCcsIHRoaXMuX2hhbmRsZVRvdWNoRW5kKTtcbiAgICBpblRhcmdldEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5faGFuZGxlVG91Y2hNb3ZlKTtcblxuICAgIHRoaXMuX2FjdGl2YXRlZCA9IGZhbHNlO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVmcmVzaENhY2hlKCkge1xuICAgIGlmICh0aGlzLl9hbGxDYWNoZWRUb3VjaERhdGFBcnJheS5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuX2FsbENhY2hlZFRvdWNoRGF0YUFycmF5ID0gWy4uLnRoaXMuX2FsbFRvdWNoRGF0YU1hcC52YWx1ZXMoKV07XG4gICAgfVxuICB9XG5cbiAgZ2V0VG91Y2hEYXRhKCk6IFJlYWRvbmx5QXJyYXk8VG91Y2hEYXRhPiB7XG4gICAgdGhpcy5fcmVmcmVzaENhY2hlKCk7XG4gICAgcmV0dXJuIHRoaXMuX2FsbENhY2hlZFRvdWNoRGF0YUFycmF5O1xuICB9XG5cbiAgcmVzZXREZWx0YXMoKSB7XG4gICAgdGhpcy5fcmVmcmVzaENhY2hlKCk7XG4gICAgdGhpcy5fYWxsQ2FjaGVkVG91Y2hEYXRhQXJyYXkuZm9yRWFjaCgoaXRlbSkgPT4gaXRlbS5yZXNldERlbHRhKCkpO1xuICB9XG5cbiAgb25FdmVudChjYWxsYmFjazogKCgpID0+IHZvaWQpIHwgdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5fb25FdmVudCA9IGNhbGxiYWNrO1xuICB9XG59XG5cbi8vXG4vL1xuLy9cblxuY29uc3QgR2xvYmFsVG91Y2hNYW5hZ2VyID0gbmV3IFRvdWNoTWFuYWdlcigpO1xuXG5leHBvcnQgeyBHbG9iYWxUb3VjaE1hbmFnZXIgfTtcbiIsCiAgInR5cGUgT25DaGFuZ2VDYWxsYmFjayA9IChpc1Zpc2libGU6IGJvb2xlYW4pID0+IHZvaWQ7XG5cbmNsYXNzIFZpc2liaWxpdHlNYW5hZ2VyIHtcbiAgcHJpdmF0ZSBfYWN0aXZhdGVkOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgX29uVmlzaWJpbGl0eUNoYW5nZUNhbGxiYWNrczogT25DaGFuZ2VDYWxsYmFja1tdID0gW107XG5cbiAgcHJpdmF0ZSBfaGFuZGxlVmlzaWJpbGl0eUNoYW5nZTogKCkgPT4gdm9pZDtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zdCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlID0gKCkgPT4ge1xuICAgICAgY29uc3QgaXNWaXNpYmxlID0gdGhpcy5pc1Zpc2libGUoKTtcbiAgICAgIHRoaXMuX29uVmlzaWJpbGl0eUNoYW5nZUNhbGxiYWNrcy5mb3JFYWNoKChjYWxsYmFjaykgPT5cbiAgICAgICAgY2FsbGJhY2soaXNWaXNpYmxlKVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgdGhpcy5faGFuZGxlVmlzaWJpbGl0eUNoYW5nZSA9IGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGFjdGl2YXRlKCkge1xuICAgIGlmICghdGhpcy5pc1N1cHBvcnRlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLl9hY3RpdmF0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgJ3Zpc2liaWxpdHljaGFuZ2UnLFxuICAgICAgdGhpcy5faGFuZGxlVmlzaWJpbGl0eUNoYW5nZSxcbiAgICAgIGZhbHNlXG4gICAgKTtcblxuICAgIHRoaXMuX2FjdGl2YXRlZCA9IHRydWU7XG4gIH1cblxuICBkZWFjdGl2YXRlKCkge1xuICAgIGlmICghdGhpcy5fYWN0aXZhdGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICd2aXNpYmlsaXR5Y2hhbmdlJyxcbiAgICAgIHRoaXMuX2hhbmRsZVZpc2liaWxpdHlDaGFuZ2UsXG4gICAgICBmYWxzZVxuICAgICk7XG5cbiAgICB0aGlzLl9hY3RpdmF0ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIC8vXG5cbiAgaXNTdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuICdvbnZpc2liaWxpdHljaGFuZ2UnIGluIGRvY3VtZW50O1xuICB9XG5cbiAgLy9cblxuICBpc1Zpc2libGUoKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gJ3Zpc2libGUnO1xuICB9XG5cbiAgLy9cblxuICBhZGRWaXNpYmlsaXR5Q2hhbmdlKGluQ2FsbGJhY2s6IE9uQ2hhbmdlQ2FsbGJhY2spIHtcbiAgICB0aGlzLl9vblZpc2liaWxpdHlDaGFuZ2VDYWxsYmFja3MucHVzaChpbkNhbGxiYWNrKTtcbiAgfVxuICByZW1vdmVWaXNpYmlsaXR5Q2hhbmdlKGluQ2FsbGJhY2s6IE9uQ2hhbmdlQ2FsbGJhY2spIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuX29uVmlzaWJpbGl0eUNoYW5nZUNhbGxiYWNrcy5pbmRleE9mKGluQ2FsbGJhY2spO1xuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fb25WaXNpYmlsaXR5Q2hhbmdlQ2FsbGJhY2tzLnNwbGljZShpbmRleCwgMSk7XG4gIH1cblxuICAvL1xuXG4gIHJlbW92ZUFsbENhbGxiYWNrcygpIHtcbiAgICB0aGlzLl9vblZpc2liaWxpdHlDaGFuZ2VDYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgfVxufVxuXG5jb25zdCBHbG9iYWxWaXNpYmlsaXR5TWFuYWdlciA9IG5ldyBWaXNpYmlsaXR5TWFuYWdlcigpO1xuXG5leHBvcnQgeyBHbG9iYWxWaXNpYmlsaXR5TWFuYWdlciB9O1xuIiwKICAiZXhwb3J0IGNvbnN0IGlzV2ViV29ya2VyU3VwcG9ydGVkID0gKCk6IGJvb2xlYW4gPT4ge1xuICByZXR1cm4gISF3aW5kb3cuV29ya2VyO1xufTtcbiIsCiAgImV4cG9ydCBjb25zdCBpc1dlYkdMMlN1cHBvcnRlZCA9ICgpOiBib29sZWFuID0+IHtcbiAgcmV0dXJuICEhd2luZG93LldlYkdMMlJlbmRlcmluZ0NvbnRleHQ7XG59O1xuIiwKICAiLyoqXG4gKiBDb21tb24gdXRpbGl0aWVzXG4gKiBAbW9kdWxlIGdsTWF0cml4XG4gKi9cbi8vIENvbmZpZ3VyYXRpb24gQ29uc3RhbnRzXG5leHBvcnQgdmFyIEVQU0lMT04gPSAwLjAwMDAwMTtcbmV4cG9ydCB2YXIgQVJSQVlfVFlQRSA9IHR5cGVvZiBGbG9hdDMyQXJyYXkgIT09ICd1bmRlZmluZWQnID8gRmxvYXQzMkFycmF5IDogQXJyYXk7XG5leHBvcnQgdmFyIFJBTkRPTSA9IE1hdGgucmFuZG9tO1xuLyoqXG4gKiBTZXRzIHRoZSB0eXBlIG9mIGFycmF5IHVzZWQgd2hlbiBjcmVhdGluZyBuZXcgdmVjdG9ycyBhbmQgbWF0cmljZXNcbiAqXG4gKiBAcGFyYW0ge0Zsb2F0MzJBcnJheUNvbnN0cnVjdG9yIHwgQXJyYXlDb25zdHJ1Y3Rvcn0gdHlwZSBBcnJheSB0eXBlLCBzdWNoIGFzIEZsb2F0MzJBcnJheSBvciBBcnJheVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRNYXRyaXhBcnJheVR5cGUodHlwZSkge1xuICBBUlJBWV9UWVBFID0gdHlwZTtcbn1cbnZhciBkZWdyZWUgPSBNYXRoLlBJIC8gMTgwO1xuLyoqXG4gKiBDb252ZXJ0IERlZ3JlZSBUbyBSYWRpYW5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gYSBBbmdsZSBpbiBEZWdyZWVzXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRvUmFkaWFuKGEpIHtcbiAgcmV0dXJuIGEgKiBkZWdyZWU7XG59XG4vKipcbiAqIFRlc3RzIHdoZXRoZXIgb3Igbm90IHRoZSBhcmd1bWVudHMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIHZhbHVlLCB3aXRoaW4gYW4gYWJzb2x1dGVcbiAqIG9yIHJlbGF0aXZlIHRvbGVyYW5jZSBvZiBnbE1hdHJpeC5FUFNJTE9OIChhbiBhYnNvbHV0ZSB0b2xlcmFuY2UgaXMgdXNlZCBmb3IgdmFsdWVzIGxlc3NcbiAqIHRoYW4gb3IgZXF1YWwgdG8gMS4wLCBhbmQgYSByZWxhdGl2ZSB0b2xlcmFuY2UgaXMgdXNlZCBmb3IgbGFyZ2VyIHZhbHVlcylcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gYSBUaGUgZmlyc3QgbnVtYmVyIHRvIHRlc3QuXG4gKiBAcGFyYW0ge051bWJlcn0gYiBUaGUgc2Vjb25kIG51bWJlciB0byB0ZXN0LlxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG51bWJlcnMgYXJlIGFwcHJveGltYXRlbHkgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcbiAgcmV0dXJuIE1hdGguYWJzKGEgLSBiKSA8PSBFUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhKSwgTWF0aC5hYnMoYikpO1xufVxuaWYgKCFNYXRoLmh5cG90KSBNYXRoLmh5cG90ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgeSA9IDAsXG4gICAgICBpID0gYXJndW1lbnRzLmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgeSArPSBhcmd1bWVudHNbaV0gKiBhcmd1bWVudHNbaV07XG4gIH1cblxuICByZXR1cm4gTWF0aC5zcXJ0KHkpO1xufTsiLAogICJpbXBvcnQgKiBhcyBnbE1hdHJpeCBmcm9tIFwiLi9jb21tb24uanNcIjtcbi8qKlxuICogNHg0IE1hdHJpeDxicj5Gb3JtYXQ6IGNvbHVtbi1tYWpvciwgd2hlbiB0eXBlZCBvdXQgaXQgbG9va3MgbGlrZSByb3ctbWFqb3I8YnI+VGhlIG1hdHJpY2VzIGFyZSBiZWluZyBwb3N0IG11bHRpcGxpZWQuXG4gKiBAbW9kdWxlIG1hdDRcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgaWRlbnRpdHkgbWF0NFxuICpcbiAqIEByZXR1cm5zIHttYXQ0fSBhIG5ldyA0eDQgbWF0cml4XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDE2KTtcblxuICBpZiAoZ2xNYXRyaXguQVJSQVlfVFlQRSAhPSBGbG9hdDMyQXJyYXkpIHtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gICAgb3V0WzNdID0gMDtcbiAgICBvdXRbNF0gPSAwO1xuICAgIG91dFs2XSA9IDA7XG4gICAgb3V0WzddID0gMDtcbiAgICBvdXRbOF0gPSAwO1xuICAgIG91dFs5XSA9IDA7XG4gICAgb3V0WzExXSA9IDA7XG4gICAgb3V0WzEyXSA9IDA7XG4gICAgb3V0WzEzXSA9IDA7XG4gICAgb3V0WzE0XSA9IDA7XG4gIH1cblxuICBvdXRbMF0gPSAxO1xuICBvdXRbNV0gPSAxO1xuICBvdXRbMTBdID0gMTtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgbWF0NCBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIG1hdHJpeFxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIG1hdHJpeCB0byBjbG9uZVxuICogQHJldHVybnMge21hdDR9IGEgbmV3IDR4NCBtYXRyaXhcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmUoYSkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMTYpO1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICBvdXRbM10gPSBhWzNdO1xuICBvdXRbNF0gPSBhWzRdO1xuICBvdXRbNV0gPSBhWzVdO1xuICBvdXRbNl0gPSBhWzZdO1xuICBvdXRbN10gPSBhWzddO1xuICBvdXRbOF0gPSBhWzhdO1xuICBvdXRbOV0gPSBhWzldO1xuICBvdXRbMTBdID0gYVsxMF07XG4gIG91dFsxMV0gPSBhWzExXTtcbiAgb3V0WzEyXSA9IGFbMTJdO1xuICBvdXRbMTNdID0gYVsxM107XG4gIG91dFsxNF0gPSBhWzE0XTtcbiAgb3V0WzE1XSA9IGFbMTVdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgbWF0NCB0byBhbm90aGVyXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIG91dFszXSA9IGFbM107XG4gIG91dFs0XSA9IGFbNF07XG4gIG91dFs1XSA9IGFbNV07XG4gIG91dFs2XSA9IGFbNl07XG4gIG91dFs3XSA9IGFbN107XG4gIG91dFs4XSA9IGFbOF07XG4gIG91dFs5XSA9IGFbOV07XG4gIG91dFsxMF0gPSBhWzEwXTtcbiAgb3V0WzExXSA9IGFbMTFdO1xuICBvdXRbMTJdID0gYVsxMl07XG4gIG91dFsxM10gPSBhWzEzXTtcbiAgb3V0WzE0XSA9IGFbMTRdO1xuICBvdXRbMTVdID0gYVsxNV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBtYXQ0IHdpdGggdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDAgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDIgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMilcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDMgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggMylcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTAgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggNClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTEgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggNSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTIgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggNilcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTMgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggNylcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjAgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggOClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjEgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggOSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjIgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMTApXG4gKiBAcGFyYW0ge051bWJlcn0gbTIzIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDMgcG9zaXRpb24gKGluZGV4IDExKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMCBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAxMilcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMzEgQ29tcG9uZW50IGluIGNvbHVtbiAzLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMTMpXG4gKiBAcGFyYW0ge051bWJlcn0gbTMyIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDIgcG9zaXRpb24gKGluZGV4IDE0KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMyBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAzIHBvc2l0aW9uIChpbmRleCAxNSlcbiAqIEByZXR1cm5zIHttYXQ0fSBBIG5ldyBtYXQ0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZXMobTAwLCBtMDEsIG0wMiwgbTAzLCBtMTAsIG0xMSwgbTEyLCBtMTMsIG0yMCwgbTIxLCBtMjIsIG0yMywgbTMwLCBtMzEsIG0zMiwgbTMzKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgxNik7XG4gIG91dFswXSA9IG0wMDtcbiAgb3V0WzFdID0gbTAxO1xuICBvdXRbMl0gPSBtMDI7XG4gIG91dFszXSA9IG0wMztcbiAgb3V0WzRdID0gbTEwO1xuICBvdXRbNV0gPSBtMTE7XG4gIG91dFs2XSA9IG0xMjtcbiAgb3V0WzddID0gbTEzO1xuICBvdXRbOF0gPSBtMjA7XG4gIG91dFs5XSA9IG0yMTtcbiAgb3V0WzEwXSA9IG0yMjtcbiAgb3V0WzExXSA9IG0yMztcbiAgb3V0WzEyXSA9IG0zMDtcbiAgb3V0WzEzXSA9IG0zMTtcbiAgb3V0WzE0XSA9IG0zMjtcbiAgb3V0WzE1XSA9IG0zMztcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgbWF0NCB0byB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDAgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDIgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMilcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDMgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggMylcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTAgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggNClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTEgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggNSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTIgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggNilcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTMgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggNylcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjAgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggOClcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjEgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggOSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjIgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMTApXG4gKiBAcGFyYW0ge051bWJlcn0gbTIzIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDMgcG9zaXRpb24gKGluZGV4IDExKVxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMCBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAxMilcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMzEgQ29tcG9uZW50IGluIGNvbHVtbiAzLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMTMpXG4gKiBAcGFyYW0ge051bWJlcn0gbTMyIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDIgcG9zaXRpb24gKGluZGV4IDE0KVxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMyBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAzIHBvc2l0aW9uIChpbmRleCAxNSlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgbTAwLCBtMDEsIG0wMiwgbTAzLCBtMTAsIG0xMSwgbTEyLCBtMTMsIG0yMCwgbTIxLCBtMjIsIG0yMywgbTMwLCBtMzEsIG0zMiwgbTMzKSB7XG4gIG91dFswXSA9IG0wMDtcbiAgb3V0WzFdID0gbTAxO1xuICBvdXRbMl0gPSBtMDI7XG4gIG91dFszXSA9IG0wMztcbiAgb3V0WzRdID0gbTEwO1xuICBvdXRbNV0gPSBtMTE7XG4gIG91dFs2XSA9IG0xMjtcbiAgb3V0WzddID0gbTEzO1xuICBvdXRbOF0gPSBtMjA7XG4gIG91dFs5XSA9IG0yMTtcbiAgb3V0WzEwXSA9IG0yMjtcbiAgb3V0WzExXSA9IG0yMztcbiAgb3V0WzEyXSA9IG0zMDtcbiAgb3V0WzEzXSA9IG0zMTtcbiAgb3V0WzE0XSA9IG0zMjtcbiAgb3V0WzE1XSA9IG0zMztcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogU2V0IGEgbWF0NCB0byB0aGUgaWRlbnRpdHkgbWF0cml4XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkob3V0KSB7XG4gIG91dFswXSA9IDE7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IDE7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDA7XG4gIG91dFs5XSA9IDA7XG4gIG91dFsxMF0gPSAxO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IDA7XG4gIG91dFsxM10gPSAwO1xuICBvdXRbMTRdID0gMDtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFRyYW5zcG9zZSB0aGUgdmFsdWVzIG9mIGEgbWF0NFxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc3Bvc2Uob3V0LCBhKSB7XG4gIC8vIElmIHdlIGFyZSB0cmFuc3Bvc2luZyBvdXJzZWx2ZXMgd2UgY2FuIHNraXAgYSBmZXcgc3RlcHMgYnV0IGhhdmUgdG8gY2FjaGUgc29tZSB2YWx1ZXNcbiAgaWYgKG91dCA9PT0gYSkge1xuICAgIHZhciBhMDEgPSBhWzFdLFxuICAgICAgICBhMDIgPSBhWzJdLFxuICAgICAgICBhMDMgPSBhWzNdO1xuICAgIHZhciBhMTIgPSBhWzZdLFxuICAgICAgICBhMTMgPSBhWzddO1xuICAgIHZhciBhMjMgPSBhWzExXTtcbiAgICBvdXRbMV0gPSBhWzRdO1xuICAgIG91dFsyXSA9IGFbOF07XG4gICAgb3V0WzNdID0gYVsxMl07XG4gICAgb3V0WzRdID0gYTAxO1xuICAgIG91dFs2XSA9IGFbOV07XG4gICAgb3V0WzddID0gYVsxM107XG4gICAgb3V0WzhdID0gYTAyO1xuICAgIG91dFs5XSA9IGExMjtcbiAgICBvdXRbMTFdID0gYVsxNF07XG4gICAgb3V0WzEyXSA9IGEwMztcbiAgICBvdXRbMTNdID0gYTEzO1xuICAgIG91dFsxNF0gPSBhMjM7XG4gIH0gZWxzZSB7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzRdO1xuICAgIG91dFsyXSA9IGFbOF07XG4gICAgb3V0WzNdID0gYVsxMl07XG4gICAgb3V0WzRdID0gYVsxXTtcbiAgICBvdXRbNV0gPSBhWzVdO1xuICAgIG91dFs2XSA9IGFbOV07XG4gICAgb3V0WzddID0gYVsxM107XG4gICAgb3V0WzhdID0gYVsyXTtcbiAgICBvdXRbOV0gPSBhWzZdO1xuICAgIG91dFsxMF0gPSBhWzEwXTtcbiAgICBvdXRbMTFdID0gYVsxNF07XG4gICAgb3V0WzEyXSA9IGFbM107XG4gICAgb3V0WzEzXSA9IGFbN107XG4gICAgb3V0WzE0XSA9IGFbMTFdO1xuICAgIG91dFsxNV0gPSBhWzE1XTtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEludmVydHMgYSBtYXQ0XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBzb3VyY2UgbWF0cml4XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGludmVydChvdXQsIGEpIHtcbiAgdmFyIGEwMCA9IGFbMF0sXG4gICAgICBhMDEgPSBhWzFdLFxuICAgICAgYTAyID0gYVsyXSxcbiAgICAgIGEwMyA9IGFbM107XG4gIHZhciBhMTAgPSBhWzRdLFxuICAgICAgYTExID0gYVs1XSxcbiAgICAgIGExMiA9IGFbNl0sXG4gICAgICBhMTMgPSBhWzddO1xuICB2YXIgYTIwID0gYVs4XSxcbiAgICAgIGEyMSA9IGFbOV0sXG4gICAgICBhMjIgPSBhWzEwXSxcbiAgICAgIGEyMyA9IGFbMTFdO1xuICB2YXIgYTMwID0gYVsxMl0sXG4gICAgICBhMzEgPSBhWzEzXSxcbiAgICAgIGEzMiA9IGFbMTRdLFxuICAgICAgYTMzID0gYVsxNV07XG4gIHZhciBiMDAgPSBhMDAgKiBhMTEgLSBhMDEgKiBhMTA7XG4gIHZhciBiMDEgPSBhMDAgKiBhMTIgLSBhMDIgKiBhMTA7XG4gIHZhciBiMDIgPSBhMDAgKiBhMTMgLSBhMDMgKiBhMTA7XG4gIHZhciBiMDMgPSBhMDEgKiBhMTIgLSBhMDIgKiBhMTE7XG4gIHZhciBiMDQgPSBhMDEgKiBhMTMgLSBhMDMgKiBhMTE7XG4gIHZhciBiMDUgPSBhMDIgKiBhMTMgLSBhMDMgKiBhMTI7XG4gIHZhciBiMDYgPSBhMjAgKiBhMzEgLSBhMjEgKiBhMzA7XG4gIHZhciBiMDcgPSBhMjAgKiBhMzIgLSBhMjIgKiBhMzA7XG4gIHZhciBiMDggPSBhMjAgKiBhMzMgLSBhMjMgKiBhMzA7XG4gIHZhciBiMDkgPSBhMjEgKiBhMzIgLSBhMjIgKiBhMzE7XG4gIHZhciBiMTAgPSBhMjEgKiBhMzMgLSBhMjMgKiBhMzE7XG4gIHZhciBiMTEgPSBhMjIgKiBhMzMgLSBhMjMgKiBhMzI7IC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcblxuICB2YXIgZGV0ID0gYjAwICogYjExIC0gYjAxICogYjEwICsgYjAyICogYjA5ICsgYjAzICogYjA4IC0gYjA0ICogYjA3ICsgYjA1ICogYjA2O1xuXG4gIGlmICghZGV0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBkZXQgPSAxLjAgLyBkZXQ7XG4gIG91dFswXSA9IChhMTEgKiBiMTEgLSBhMTIgKiBiMTAgKyBhMTMgKiBiMDkpICogZGV0O1xuICBvdXRbMV0gPSAoYTAyICogYjEwIC0gYTAxICogYjExIC0gYTAzICogYjA5KSAqIGRldDtcbiAgb3V0WzJdID0gKGEzMSAqIGIwNSAtIGEzMiAqIGIwNCArIGEzMyAqIGIwMykgKiBkZXQ7XG4gIG91dFszXSA9IChhMjIgKiBiMDQgLSBhMjEgKiBiMDUgLSBhMjMgKiBiMDMpICogZGV0O1xuICBvdXRbNF0gPSAoYTEyICogYjA4IC0gYTEwICogYjExIC0gYTEzICogYjA3KSAqIGRldDtcbiAgb3V0WzVdID0gKGEwMCAqIGIxMSAtIGEwMiAqIGIwOCArIGEwMyAqIGIwNykgKiBkZXQ7XG4gIG91dFs2XSA9IChhMzIgKiBiMDIgLSBhMzAgKiBiMDUgLSBhMzMgKiBiMDEpICogZGV0O1xuICBvdXRbN10gPSAoYTIwICogYjA1IC0gYTIyICogYjAyICsgYTIzICogYjAxKSAqIGRldDtcbiAgb3V0WzhdID0gKGExMCAqIGIxMCAtIGExMSAqIGIwOCArIGExMyAqIGIwNikgKiBkZXQ7XG4gIG91dFs5XSA9IChhMDEgKiBiMDggLSBhMDAgKiBiMTAgLSBhMDMgKiBiMDYpICogZGV0O1xuICBvdXRbMTBdID0gKGEzMCAqIGIwNCAtIGEzMSAqIGIwMiArIGEzMyAqIGIwMCkgKiBkZXQ7XG4gIG91dFsxMV0gPSAoYTIxICogYjAyIC0gYTIwICogYjA0IC0gYTIzICogYjAwKSAqIGRldDtcbiAgb3V0WzEyXSA9IChhMTEgKiBiMDcgLSBhMTAgKiBiMDkgLSBhMTIgKiBiMDYpICogZGV0O1xuICBvdXRbMTNdID0gKGEwMCAqIGIwOSAtIGEwMSAqIGIwNyArIGEwMiAqIGIwNikgKiBkZXQ7XG4gIG91dFsxNF0gPSAoYTMxICogYjAxIC0gYTMwICogYjAzIC0gYTMyICogYjAwKSAqIGRldDtcbiAgb3V0WzE1XSA9IChhMjAgKiBiMDMgLSBhMjEgKiBiMDEgKyBhMjIgKiBiMDApICogZGV0O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBhZGp1Z2F0ZSBvZiBhIG1hdDRcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYWRqb2ludChvdXQsIGEpIHtcbiAgdmFyIGEwMCA9IGFbMF0sXG4gICAgICBhMDEgPSBhWzFdLFxuICAgICAgYTAyID0gYVsyXSxcbiAgICAgIGEwMyA9IGFbM107XG4gIHZhciBhMTAgPSBhWzRdLFxuICAgICAgYTExID0gYVs1XSxcbiAgICAgIGExMiA9IGFbNl0sXG4gICAgICBhMTMgPSBhWzddO1xuICB2YXIgYTIwID0gYVs4XSxcbiAgICAgIGEyMSA9IGFbOV0sXG4gICAgICBhMjIgPSBhWzEwXSxcbiAgICAgIGEyMyA9IGFbMTFdO1xuICB2YXIgYTMwID0gYVsxMl0sXG4gICAgICBhMzEgPSBhWzEzXSxcbiAgICAgIGEzMiA9IGFbMTRdLFxuICAgICAgYTMzID0gYVsxNV07XG4gIG91dFswXSA9IGExMSAqIChhMjIgKiBhMzMgLSBhMjMgKiBhMzIpIC0gYTIxICogKGExMiAqIGEzMyAtIGExMyAqIGEzMikgKyBhMzEgKiAoYTEyICogYTIzIC0gYTEzICogYTIyKTtcbiAgb3V0WzFdID0gLShhMDEgKiAoYTIyICogYTMzIC0gYTIzICogYTMyKSAtIGEyMSAqIChhMDIgKiBhMzMgLSBhMDMgKiBhMzIpICsgYTMxICogKGEwMiAqIGEyMyAtIGEwMyAqIGEyMikpO1xuICBvdXRbMl0gPSBhMDEgKiAoYTEyICogYTMzIC0gYTEzICogYTMyKSAtIGExMSAqIChhMDIgKiBhMzMgLSBhMDMgKiBhMzIpICsgYTMxICogKGEwMiAqIGExMyAtIGEwMyAqIGExMik7XG4gIG91dFszXSA9IC0oYTAxICogKGExMiAqIGEyMyAtIGExMyAqIGEyMikgLSBhMTEgKiAoYTAyICogYTIzIC0gYTAzICogYTIyKSArIGEyMSAqIChhMDIgKiBhMTMgLSBhMDMgKiBhMTIpKTtcbiAgb3V0WzRdID0gLShhMTAgKiAoYTIyICogYTMzIC0gYTIzICogYTMyKSAtIGEyMCAqIChhMTIgKiBhMzMgLSBhMTMgKiBhMzIpICsgYTMwICogKGExMiAqIGEyMyAtIGExMyAqIGEyMikpO1xuICBvdXRbNV0gPSBhMDAgKiAoYTIyICogYTMzIC0gYTIzICogYTMyKSAtIGEyMCAqIChhMDIgKiBhMzMgLSBhMDMgKiBhMzIpICsgYTMwICogKGEwMiAqIGEyMyAtIGEwMyAqIGEyMik7XG4gIG91dFs2XSA9IC0oYTAwICogKGExMiAqIGEzMyAtIGExMyAqIGEzMikgLSBhMTAgKiAoYTAyICogYTMzIC0gYTAzICogYTMyKSArIGEzMCAqIChhMDIgKiBhMTMgLSBhMDMgKiBhMTIpKTtcbiAgb3V0WzddID0gYTAwICogKGExMiAqIGEyMyAtIGExMyAqIGEyMikgLSBhMTAgKiAoYTAyICogYTIzIC0gYTAzICogYTIyKSArIGEyMCAqIChhMDIgKiBhMTMgLSBhMDMgKiBhMTIpO1xuICBvdXRbOF0gPSBhMTAgKiAoYTIxICogYTMzIC0gYTIzICogYTMxKSAtIGEyMCAqIChhMTEgKiBhMzMgLSBhMTMgKiBhMzEpICsgYTMwICogKGExMSAqIGEyMyAtIGExMyAqIGEyMSk7XG4gIG91dFs5XSA9IC0oYTAwICogKGEyMSAqIGEzMyAtIGEyMyAqIGEzMSkgLSBhMjAgKiAoYTAxICogYTMzIC0gYTAzICogYTMxKSArIGEzMCAqIChhMDEgKiBhMjMgLSBhMDMgKiBhMjEpKTtcbiAgb3V0WzEwXSA9IGEwMCAqIChhMTEgKiBhMzMgLSBhMTMgKiBhMzEpIC0gYTEwICogKGEwMSAqIGEzMyAtIGEwMyAqIGEzMSkgKyBhMzAgKiAoYTAxICogYTEzIC0gYTAzICogYTExKTtcbiAgb3V0WzExXSA9IC0oYTAwICogKGExMSAqIGEyMyAtIGExMyAqIGEyMSkgLSBhMTAgKiAoYTAxICogYTIzIC0gYTAzICogYTIxKSArIGEyMCAqIChhMDEgKiBhMTMgLSBhMDMgKiBhMTEpKTtcbiAgb3V0WzEyXSA9IC0oYTEwICogKGEyMSAqIGEzMiAtIGEyMiAqIGEzMSkgLSBhMjAgKiAoYTExICogYTMyIC0gYTEyICogYTMxKSArIGEzMCAqIChhMTEgKiBhMjIgLSBhMTIgKiBhMjEpKTtcbiAgb3V0WzEzXSA9IGEwMCAqIChhMjEgKiBhMzIgLSBhMjIgKiBhMzEpIC0gYTIwICogKGEwMSAqIGEzMiAtIGEwMiAqIGEzMSkgKyBhMzAgKiAoYTAxICogYTIyIC0gYTAyICogYTIxKTtcbiAgb3V0WzE0XSA9IC0oYTAwICogKGExMSAqIGEzMiAtIGExMiAqIGEzMSkgLSBhMTAgKiAoYTAxICogYTMyIC0gYTAyICogYTMxKSArIGEzMCAqIChhMDEgKiBhMTIgLSBhMDIgKiBhMTEpKTtcbiAgb3V0WzE1XSA9IGEwMCAqIChhMTEgKiBhMjIgLSBhMTIgKiBhMjEpIC0gYTEwICogKGEwMSAqIGEyMiAtIGEwMiAqIGEyMSkgKyBhMjAgKiAoYTAxICogYTEyIC0gYTAyICogYTExKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZGV0ZXJtaW5hbnQgb2YgYSBtYXQ0XG4gKlxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRldGVybWluYW50IG9mIGFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGV0ZXJtaW5hbnQoYSkge1xuICB2YXIgYTAwID0gYVswXSxcbiAgICAgIGEwMSA9IGFbMV0sXG4gICAgICBhMDIgPSBhWzJdLFxuICAgICAgYTAzID0gYVszXTtcbiAgdmFyIGExMCA9IGFbNF0sXG4gICAgICBhMTEgPSBhWzVdLFxuICAgICAgYTEyID0gYVs2XSxcbiAgICAgIGExMyA9IGFbN107XG4gIHZhciBhMjAgPSBhWzhdLFxuICAgICAgYTIxID0gYVs5XSxcbiAgICAgIGEyMiA9IGFbMTBdLFxuICAgICAgYTIzID0gYVsxMV07XG4gIHZhciBhMzAgPSBhWzEyXSxcbiAgICAgIGEzMSA9IGFbMTNdLFxuICAgICAgYTMyID0gYVsxNF0sXG4gICAgICBhMzMgPSBhWzE1XTtcbiAgdmFyIGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMDtcbiAgdmFyIGIwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMDtcbiAgdmFyIGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMDtcbiAgdmFyIGIwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMTtcbiAgdmFyIGIwNCA9IGEwMSAqIGExMyAtIGEwMyAqIGExMTtcbiAgdmFyIGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMjtcbiAgdmFyIGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMDtcbiAgdmFyIGIwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMDtcbiAgdmFyIGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMDtcbiAgdmFyIGIwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMTtcbiAgdmFyIGIxMCA9IGEyMSAqIGEzMyAtIGEyMyAqIGEzMTtcbiAgdmFyIGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMjsgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxuXG4gIHJldHVybiBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XG59XG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIG1hdDRzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gIHZhciBhMDAgPSBhWzBdLFxuICAgICAgYTAxID0gYVsxXSxcbiAgICAgIGEwMiA9IGFbMl0sXG4gICAgICBhMDMgPSBhWzNdO1xuICB2YXIgYTEwID0gYVs0XSxcbiAgICAgIGExMSA9IGFbNV0sXG4gICAgICBhMTIgPSBhWzZdLFxuICAgICAgYTEzID0gYVs3XTtcbiAgdmFyIGEyMCA9IGFbOF0sXG4gICAgICBhMjEgPSBhWzldLFxuICAgICAgYTIyID0gYVsxMF0sXG4gICAgICBhMjMgPSBhWzExXTtcbiAgdmFyIGEzMCA9IGFbMTJdLFxuICAgICAgYTMxID0gYVsxM10sXG4gICAgICBhMzIgPSBhWzE0XSxcbiAgICAgIGEzMyA9IGFbMTVdOyAvLyBDYWNoZSBvbmx5IHRoZSBjdXJyZW50IGxpbmUgb2YgdGhlIHNlY29uZCBtYXRyaXhcblxuICB2YXIgYjAgPSBiWzBdLFxuICAgICAgYjEgPSBiWzFdLFxuICAgICAgYjIgPSBiWzJdLFxuICAgICAgYjMgPSBiWzNdO1xuICBvdXRbMF0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcbiAgb3V0WzFdID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XG4gIG91dFsyXSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xuICBvdXRbM10gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcbiAgYjAgPSBiWzRdO1xuICBiMSA9IGJbNV07XG4gIGIyID0gYls2XTtcbiAgYjMgPSBiWzddO1xuICBvdXRbNF0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcbiAgb3V0WzVdID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XG4gIG91dFs2XSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xuICBvdXRbN10gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcbiAgYjAgPSBiWzhdO1xuICBiMSA9IGJbOV07XG4gIGIyID0gYlsxMF07XG4gIGIzID0gYlsxMV07XG4gIG91dFs4XSA9IGIwICogYTAwICsgYjEgKiBhMTAgKyBiMiAqIGEyMCArIGIzICogYTMwO1xuICBvdXRbOV0gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcbiAgb3V0WzEwXSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xuICBvdXRbMTFdID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzM7XG4gIGIwID0gYlsxMl07XG4gIGIxID0gYlsxM107XG4gIGIyID0gYlsxNF07XG4gIGIzID0gYlsxNV07XG4gIG91dFsxMl0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcbiAgb3V0WzEzXSA9IGIwICogYTAxICsgYjEgKiBhMTEgKyBiMiAqIGEyMSArIGIzICogYTMxO1xuICBvdXRbMTRdID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzI7XG4gIG91dFsxNV0gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogVHJhbnNsYXRlIGEgbWF0NCBieSB0aGUgZ2l2ZW4gdmVjdG9yXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBtYXRyaXggdG8gdHJhbnNsYXRlXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdiB2ZWN0b3IgdG8gdHJhbnNsYXRlIGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zbGF0ZShvdXQsIGEsIHYpIHtcbiAgdmFyIHggPSB2WzBdLFxuICAgICAgeSA9IHZbMV0sXG4gICAgICB6ID0gdlsyXTtcbiAgdmFyIGEwMCwgYTAxLCBhMDIsIGEwMztcbiAgdmFyIGExMCwgYTExLCBhMTIsIGExMztcbiAgdmFyIGEyMCwgYTIxLCBhMjIsIGEyMztcblxuICBpZiAoYSA9PT0gb3V0KSB7XG4gICAgb3V0WzEyXSA9IGFbMF0gKiB4ICsgYVs0XSAqIHkgKyBhWzhdICogeiArIGFbMTJdO1xuICAgIG91dFsxM10gPSBhWzFdICogeCArIGFbNV0gKiB5ICsgYVs5XSAqIHogKyBhWzEzXTtcbiAgICBvdXRbMTRdID0gYVsyXSAqIHggKyBhWzZdICogeSArIGFbMTBdICogeiArIGFbMTRdO1xuICAgIG91dFsxNV0gPSBhWzNdICogeCArIGFbN10gKiB5ICsgYVsxMV0gKiB6ICsgYVsxNV07XG4gIH0gZWxzZSB7XG4gICAgYTAwID0gYVswXTtcbiAgICBhMDEgPSBhWzFdO1xuICAgIGEwMiA9IGFbMl07XG4gICAgYTAzID0gYVszXTtcbiAgICBhMTAgPSBhWzRdO1xuICAgIGExMSA9IGFbNV07XG4gICAgYTEyID0gYVs2XTtcbiAgICBhMTMgPSBhWzddO1xuICAgIGEyMCA9IGFbOF07XG4gICAgYTIxID0gYVs5XTtcbiAgICBhMjIgPSBhWzEwXTtcbiAgICBhMjMgPSBhWzExXTtcbiAgICBvdXRbMF0gPSBhMDA7XG4gICAgb3V0WzFdID0gYTAxO1xuICAgIG91dFsyXSA9IGEwMjtcbiAgICBvdXRbM10gPSBhMDM7XG4gICAgb3V0WzRdID0gYTEwO1xuICAgIG91dFs1XSA9IGExMTtcbiAgICBvdXRbNl0gPSBhMTI7XG4gICAgb3V0WzddID0gYTEzO1xuICAgIG91dFs4XSA9IGEyMDtcbiAgICBvdXRbOV0gPSBhMjE7XG4gICAgb3V0WzEwXSA9IGEyMjtcbiAgICBvdXRbMTFdID0gYTIzO1xuICAgIG91dFsxMl0gPSBhMDAgKiB4ICsgYTEwICogeSArIGEyMCAqIHogKyBhWzEyXTtcbiAgICBvdXRbMTNdID0gYTAxICogeCArIGExMSAqIHkgKyBhMjEgKiB6ICsgYVsxM107XG4gICAgb3V0WzE0XSA9IGEwMiAqIHggKyBhMTIgKiB5ICsgYTIyICogeiArIGFbMTRdO1xuICAgIG91dFsxNV0gPSBhMDMgKiB4ICsgYTEzICogeSArIGEyMyAqIHogKyBhWzE1XTtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFNjYWxlcyB0aGUgbWF0NCBieSB0aGUgZGltZW5zaW9ucyBpbiB0aGUgZ2l2ZW4gdmVjMyBub3QgdXNpbmcgdmVjdG9yaXphdGlvblxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgbWF0cml4IHRvIHNjYWxlXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdiB0aGUgdmVjMyB0byBzY2FsZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKiovXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIHYpIHtcbiAgdmFyIHggPSB2WzBdLFxuICAgICAgeSA9IHZbMV0sXG4gICAgICB6ID0gdlsyXTtcbiAgb3V0WzBdID0gYVswXSAqIHg7XG4gIG91dFsxXSA9IGFbMV0gKiB4O1xuICBvdXRbMl0gPSBhWzJdICogeDtcbiAgb3V0WzNdID0gYVszXSAqIHg7XG4gIG91dFs0XSA9IGFbNF0gKiB5O1xuICBvdXRbNV0gPSBhWzVdICogeTtcbiAgb3V0WzZdID0gYVs2XSAqIHk7XG4gIG91dFs3XSA9IGFbN10gKiB5O1xuICBvdXRbOF0gPSBhWzhdICogejtcbiAgb3V0WzldID0gYVs5XSAqIHo7XG4gIG91dFsxMF0gPSBhWzEwXSAqIHo7XG4gIG91dFsxMV0gPSBhWzExXSAqIHo7XG4gIG91dFsxMl0gPSBhWzEyXTtcbiAgb3V0WzEzXSA9IGFbMTNdO1xuICBvdXRbMTRdID0gYVsxNF07XG4gIG91dFsxNV0gPSBhWzE1XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUm90YXRlcyBhIG1hdDQgYnkgdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgZ2l2ZW4gYXhpc1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBheGlzIHRoZSBheGlzIHRvIHJvdGF0ZSBhcm91bmRcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlKG91dCwgYSwgcmFkLCBheGlzKSB7XG4gIHZhciB4ID0gYXhpc1swXSxcbiAgICAgIHkgPSBheGlzWzFdLFxuICAgICAgeiA9IGF4aXNbMl07XG4gIHZhciBsZW4gPSBNYXRoLmh5cG90KHgsIHksIHopO1xuICB2YXIgcywgYywgdDtcbiAgdmFyIGEwMCwgYTAxLCBhMDIsIGEwMztcbiAgdmFyIGExMCwgYTExLCBhMTIsIGExMztcbiAgdmFyIGEyMCwgYTIxLCBhMjIsIGEyMztcbiAgdmFyIGIwMCwgYjAxLCBiMDI7XG4gIHZhciBiMTAsIGIxMSwgYjEyO1xuICB2YXIgYjIwLCBiMjEsIGIyMjtcblxuICBpZiAobGVuIDwgZ2xNYXRyaXguRVBTSUxPTikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbGVuID0gMSAvIGxlbjtcbiAgeCAqPSBsZW47XG4gIHkgKj0gbGVuO1xuICB6ICo9IGxlbjtcbiAgcyA9IE1hdGguc2luKHJhZCk7XG4gIGMgPSBNYXRoLmNvcyhyYWQpO1xuICB0ID0gMSAtIGM7XG4gIGEwMCA9IGFbMF07XG4gIGEwMSA9IGFbMV07XG4gIGEwMiA9IGFbMl07XG4gIGEwMyA9IGFbM107XG4gIGExMCA9IGFbNF07XG4gIGExMSA9IGFbNV07XG4gIGExMiA9IGFbNl07XG4gIGExMyA9IGFbN107XG4gIGEyMCA9IGFbOF07XG4gIGEyMSA9IGFbOV07XG4gIGEyMiA9IGFbMTBdO1xuICBhMjMgPSBhWzExXTsgLy8gQ29uc3RydWN0IHRoZSBlbGVtZW50cyBvZiB0aGUgcm90YXRpb24gbWF0cml4XG5cbiAgYjAwID0geCAqIHggKiB0ICsgYztcbiAgYjAxID0geSAqIHggKiB0ICsgeiAqIHM7XG4gIGIwMiA9IHogKiB4ICogdCAtIHkgKiBzO1xuICBiMTAgPSB4ICogeSAqIHQgLSB6ICogcztcbiAgYjExID0geSAqIHkgKiB0ICsgYztcbiAgYjEyID0geiAqIHkgKiB0ICsgeCAqIHM7XG4gIGIyMCA9IHggKiB6ICogdCArIHkgKiBzO1xuICBiMjEgPSB5ICogeiAqIHQgLSB4ICogcztcbiAgYjIyID0geiAqIHogKiB0ICsgYzsgLy8gUGVyZm9ybSByb3RhdGlvbi1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cblxuICBvdXRbMF0gPSBhMDAgKiBiMDAgKyBhMTAgKiBiMDEgKyBhMjAgKiBiMDI7XG4gIG91dFsxXSA9IGEwMSAqIGIwMCArIGExMSAqIGIwMSArIGEyMSAqIGIwMjtcbiAgb3V0WzJdID0gYTAyICogYjAwICsgYTEyICogYjAxICsgYTIyICogYjAyO1xuICBvdXRbM10gPSBhMDMgKiBiMDAgKyBhMTMgKiBiMDEgKyBhMjMgKiBiMDI7XG4gIG91dFs0XSA9IGEwMCAqIGIxMCArIGExMCAqIGIxMSArIGEyMCAqIGIxMjtcbiAgb3V0WzVdID0gYTAxICogYjEwICsgYTExICogYjExICsgYTIxICogYjEyO1xuICBvdXRbNl0gPSBhMDIgKiBiMTAgKyBhMTIgKiBiMTEgKyBhMjIgKiBiMTI7XG4gIG91dFs3XSA9IGEwMyAqIGIxMCArIGExMyAqIGIxMSArIGEyMyAqIGIxMjtcbiAgb3V0WzhdID0gYTAwICogYjIwICsgYTEwICogYjIxICsgYTIwICogYjIyO1xuICBvdXRbOV0gPSBhMDEgKiBiMjAgKyBhMTEgKiBiMjEgKyBhMjEgKiBiMjI7XG4gIG91dFsxMF0gPSBhMDIgKiBiMjAgKyBhMTIgKiBiMjEgKyBhMjIgKiBiMjI7XG4gIG91dFsxMV0gPSBhMDMgKiBiMjAgKyBhMTMgKiBiMjEgKyBhMjMgKiBiMjI7XG5cbiAgaWYgKGEgIT09IG91dCkge1xuICAgIC8vIElmIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGRpZmZlciwgY29weSB0aGUgdW5jaGFuZ2VkIGxhc3Qgcm93XG4gICAgb3V0WzEyXSA9IGFbMTJdO1xuICAgIG91dFsxM10gPSBhWzEzXTtcbiAgICBvdXRbMTRdID0gYVsxNF07XG4gICAgb3V0WzE1XSA9IGFbMTVdO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUm90YXRlcyBhIG1hdHJpeCBieSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBYIGF4aXNcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVgob3V0LCBhLCByYWQpIHtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xuICB2YXIgYyA9IE1hdGguY29zKHJhZCk7XG4gIHZhciBhMTAgPSBhWzRdO1xuICB2YXIgYTExID0gYVs1XTtcbiAgdmFyIGExMiA9IGFbNl07XG4gIHZhciBhMTMgPSBhWzddO1xuICB2YXIgYTIwID0gYVs4XTtcbiAgdmFyIGEyMSA9IGFbOV07XG4gIHZhciBhMjIgPSBhWzEwXTtcbiAgdmFyIGEyMyA9IGFbMTFdO1xuXG4gIGlmIChhICE9PSBvdXQpIHtcbiAgICAvLyBJZiB0aGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBkaWZmZXIsIGNvcHkgdGhlIHVuY2hhbmdlZCByb3dzXG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIG91dFsyXSA9IGFbMl07XG4gICAgb3V0WzNdID0gYVszXTtcbiAgICBvdXRbMTJdID0gYVsxMl07XG4gICAgb3V0WzEzXSA9IGFbMTNdO1xuICAgIG91dFsxNF0gPSBhWzE0XTtcbiAgICBvdXRbMTVdID0gYVsxNV07XG4gIH0gLy8gUGVyZm9ybSBheGlzLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuXG5cbiAgb3V0WzRdID0gYTEwICogYyArIGEyMCAqIHM7XG4gIG91dFs1XSA9IGExMSAqIGMgKyBhMjEgKiBzO1xuICBvdXRbNl0gPSBhMTIgKiBjICsgYTIyICogcztcbiAgb3V0WzddID0gYTEzICogYyArIGEyMyAqIHM7XG4gIG91dFs4XSA9IGEyMCAqIGMgLSBhMTAgKiBzO1xuICBvdXRbOV0gPSBhMjEgKiBjIC0gYTExICogcztcbiAgb3V0WzEwXSA9IGEyMiAqIGMgLSBhMTIgKiBzO1xuICBvdXRbMTFdID0gYTIzICogYyAtIGExMyAqIHM7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJvdGF0ZXMgYSBtYXRyaXggYnkgdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWSBheGlzXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVZKG91dCwgYSwgcmFkKSB7XG4gIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcbiAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpO1xuICB2YXIgYTAwID0gYVswXTtcbiAgdmFyIGEwMSA9IGFbMV07XG4gIHZhciBhMDIgPSBhWzJdO1xuICB2YXIgYTAzID0gYVszXTtcbiAgdmFyIGEyMCA9IGFbOF07XG4gIHZhciBhMjEgPSBhWzldO1xuICB2YXIgYTIyID0gYVsxMF07XG4gIHZhciBhMjMgPSBhWzExXTtcblxuICBpZiAoYSAhPT0gb3V0KSB7XG4gICAgLy8gSWYgdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gZGlmZmVyLCBjb3B5IHRoZSB1bmNoYW5nZWQgcm93c1xuICAgIG91dFs0XSA9IGFbNF07XG4gICAgb3V0WzVdID0gYVs1XTtcbiAgICBvdXRbNl0gPSBhWzZdO1xuICAgIG91dFs3XSA9IGFbN107XG4gICAgb3V0WzEyXSA9IGFbMTJdO1xuICAgIG91dFsxM10gPSBhWzEzXTtcbiAgICBvdXRbMTRdID0gYVsxNF07XG4gICAgb3V0WzE1XSA9IGFbMTVdO1xuICB9IC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cblxuXG4gIG91dFswXSA9IGEwMCAqIGMgLSBhMjAgKiBzO1xuICBvdXRbMV0gPSBhMDEgKiBjIC0gYTIxICogcztcbiAgb3V0WzJdID0gYTAyICogYyAtIGEyMiAqIHM7XG4gIG91dFszXSA9IGEwMyAqIGMgLSBhMjMgKiBzO1xuICBvdXRbOF0gPSBhMDAgKiBzICsgYTIwICogYztcbiAgb3V0WzldID0gYTAxICogcyArIGEyMSAqIGM7XG4gIG91dFsxMF0gPSBhMDIgKiBzICsgYTIyICogYztcbiAgb3V0WzExXSA9IGEwMyAqIHMgKyBhMjMgKiBjO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSb3RhdGVzIGEgbWF0cml4IGJ5IHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIFogYXhpc1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWihvdXQsIGEsIHJhZCkge1xuICB2YXIgcyA9IE1hdGguc2luKHJhZCk7XG4gIHZhciBjID0gTWF0aC5jb3MocmFkKTtcbiAgdmFyIGEwMCA9IGFbMF07XG4gIHZhciBhMDEgPSBhWzFdO1xuICB2YXIgYTAyID0gYVsyXTtcbiAgdmFyIGEwMyA9IGFbM107XG4gIHZhciBhMTAgPSBhWzRdO1xuICB2YXIgYTExID0gYVs1XTtcbiAgdmFyIGExMiA9IGFbNl07XG4gIHZhciBhMTMgPSBhWzddO1xuXG4gIGlmIChhICE9PSBvdXQpIHtcbiAgICAvLyBJZiB0aGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBkaWZmZXIsIGNvcHkgdGhlIHVuY2hhbmdlZCBsYXN0IHJvd1xuICAgIG91dFs4XSA9IGFbOF07XG4gICAgb3V0WzldID0gYVs5XTtcbiAgICBvdXRbMTBdID0gYVsxMF07XG4gICAgb3V0WzExXSA9IGFbMTFdO1xuICAgIG91dFsxMl0gPSBhWzEyXTtcbiAgICBvdXRbMTNdID0gYVsxM107XG4gICAgb3V0WzE0XSA9IGFbMTRdO1xuICAgIG91dFsxNV0gPSBhWzE1XTtcbiAgfSAvLyBQZXJmb3JtIGF4aXMtc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXG5cblxuICBvdXRbMF0gPSBhMDAgKiBjICsgYTEwICogcztcbiAgb3V0WzFdID0gYTAxICogYyArIGExMSAqIHM7XG4gIG91dFsyXSA9IGEwMiAqIGMgKyBhMTIgKiBzO1xuICBvdXRbM10gPSBhMDMgKiBjICsgYTEzICogcztcbiAgb3V0WzRdID0gYTEwICogYyAtIGEwMCAqIHM7XG4gIG91dFs1XSA9IGExMSAqIGMgLSBhMDEgKiBzO1xuICBvdXRbNl0gPSBhMTIgKiBjIC0gYTAyICogcztcbiAgb3V0WzddID0gYTEzICogYyAtIGEwMyAqIHM7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHZlY3RvciB0cmFuc2xhdGlvblxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgZGVzdCwgdmVjKTtcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdiBUcmFuc2xhdGlvbiB2ZWN0b3JcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVRyYW5zbGF0aW9uKG91dCwgdikge1xuICBvdXRbMF0gPSAxO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSAxO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAwO1xuICBvdXRbOV0gPSAwO1xuICBvdXRbMTBdID0gMTtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSB2WzBdO1xuICBvdXRbMTNdID0gdlsxXTtcbiAgb3V0WzE0XSA9IHZbMl07XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSB2ZWN0b3Igc2NhbGluZ1xuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0NC5zY2FsZShkZXN0LCBkZXN0LCB2ZWMpO1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSB2IFNjYWxpbmcgdmVjdG9yXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21TY2FsaW5nKG91dCwgdikge1xuICBvdXRbMF0gPSB2WzBdO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSB2WzFdO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAwO1xuICBvdXRbOV0gPSAwO1xuICBvdXRbMTBdID0gdlsyXTtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE0XSA9IDA7XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSBnaXZlbiBhbmdsZSBhcm91bmQgYSBnaXZlbiBheGlzXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQ0LnJvdGF0ZShkZXN0LCBkZXN0LCByYWQsIGF4aXMpO1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYXhpcyB0aGUgYXhpcyB0byByb3RhdGUgYXJvdW5kXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Sb3RhdGlvbihvdXQsIHJhZCwgYXhpcykge1xuICB2YXIgeCA9IGF4aXNbMF0sXG4gICAgICB5ID0gYXhpc1sxXSxcbiAgICAgIHogPSBheGlzWzJdO1xuICB2YXIgbGVuID0gTWF0aC5oeXBvdCh4LCB5LCB6KTtcbiAgdmFyIHMsIGMsIHQ7XG5cbiAgaWYgKGxlbiA8IGdsTWF0cml4LkVQU0lMT04pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGxlbiA9IDEgLyBsZW47XG4gIHggKj0gbGVuO1xuICB5ICo9IGxlbjtcbiAgeiAqPSBsZW47XG4gIHMgPSBNYXRoLnNpbihyYWQpO1xuICBjID0gTWF0aC5jb3MocmFkKTtcbiAgdCA9IDEgLSBjOyAvLyBQZXJmb3JtIHJvdGF0aW9uLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuXG4gIG91dFswXSA9IHggKiB4ICogdCArIGM7XG4gIG91dFsxXSA9IHkgKiB4ICogdCArIHogKiBzO1xuICBvdXRbMl0gPSB6ICogeCAqIHQgLSB5ICogcztcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0geCAqIHkgKiB0IC0geiAqIHM7XG4gIG91dFs1XSA9IHkgKiB5ICogdCArIGM7XG4gIG91dFs2XSA9IHogKiB5ICogdCArIHggKiBzO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSB4ICogeiAqIHQgKyB5ICogcztcbiAgb3V0WzldID0geSAqIHogKiB0IC0geCAqIHM7XG4gIG91dFsxMF0gPSB6ICogeiAqIHQgKyBjO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IDA7XG4gIG91dFsxM10gPSAwO1xuICBvdXRbMTRdID0gMDtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBYIGF4aXNcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICpcbiAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xuICogICAgIG1hdDQucm90YXRlWChkZXN0LCBkZXN0LCByYWQpO1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21YUm90YXRpb24ob3V0LCByYWQpIHtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xuICB2YXIgYyA9IE1hdGguY29zKHJhZCk7IC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cblxuICBvdXRbMF0gPSAxO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSBjO1xuICBvdXRbNl0gPSBzO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAwO1xuICBvdXRbOV0gPSAtcztcbiAgb3V0WzEwXSA9IGM7XG4gIG91dFsxMV0gPSAwO1xuICBvdXRbMTJdID0gMDtcbiAgb3V0WzEzXSA9IDA7XG4gIG91dFsxNF0gPSAwO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIFkgYXhpc1xuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0NC5yb3RhdGVZKGRlc3QsIGRlc3QsIHJhZCk7XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVlSb3RhdGlvbihvdXQsIHJhZCkge1xuICB2YXIgcyA9IE1hdGguc2luKHJhZCk7XG4gIHZhciBjID0gTWF0aC5jb3MocmFkKTsgLy8gUGVyZm9ybSBheGlzLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuXG4gIG91dFswXSA9IGM7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IC1zO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSAxO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSBzO1xuICBvdXRbOV0gPSAwO1xuICBvdXRbMTBdID0gYztcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE0XSA9IDA7XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWiBheGlzXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQ0LnJvdGF0ZVooZGVzdCwgZGVzdCwgcmFkKTtcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tWlJvdGF0aW9uKG91dCwgcmFkKSB7XG4gIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcbiAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpOyAvLyBQZXJmb3JtIGF4aXMtc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXG5cbiAgb3V0WzBdID0gYztcbiAgb3V0WzFdID0gcztcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gLXM7XG4gIG91dFs1XSA9IGM7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDA7XG4gIG91dFs5XSA9IDA7XG4gIG91dFsxMF0gPSAxO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IDA7XG4gIG91dFsxM10gPSAwO1xuICBvdXRbMTRdID0gMDtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHF1YXRlcm5pb24gcm90YXRpb24gYW5kIHZlY3RvciB0cmFuc2xhdGlvblxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgdmVjKTtcbiAqICAgICBsZXQgcXVhdE1hdCA9IG1hdDQuY3JlYXRlKCk7XG4gKiAgICAgcXVhdDQudG9NYXQ0KHF1YXQsIHF1YXRNYXQpO1xuICogICAgIG1hdDQubXVsdGlwbHkoZGVzdCwgcXVhdE1hdCk7XG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICogQHBhcmFtIHtxdWF0NH0gcSBSb3RhdGlvbiBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdiBUcmFuc2xhdGlvbiB2ZWN0b3JcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24ob3V0LCBxLCB2KSB7XG4gIC8vIFF1YXRlcm5pb24gbWF0aFxuICB2YXIgeCA9IHFbMF0sXG4gICAgICB5ID0gcVsxXSxcbiAgICAgIHogPSBxWzJdLFxuICAgICAgdyA9IHFbM107XG4gIHZhciB4MiA9IHggKyB4O1xuICB2YXIgeTIgPSB5ICsgeTtcbiAgdmFyIHoyID0geiArIHo7XG4gIHZhciB4eCA9IHggKiB4MjtcbiAgdmFyIHh5ID0geCAqIHkyO1xuICB2YXIgeHogPSB4ICogejI7XG4gIHZhciB5eSA9IHkgKiB5MjtcbiAgdmFyIHl6ID0geSAqIHoyO1xuICB2YXIgenogPSB6ICogejI7XG4gIHZhciB3eCA9IHcgKiB4MjtcbiAgdmFyIHd5ID0gdyAqIHkyO1xuICB2YXIgd3ogPSB3ICogejI7XG4gIG91dFswXSA9IDEgLSAoeXkgKyB6eik7XG4gIG91dFsxXSA9IHh5ICsgd3o7XG4gIG91dFsyXSA9IHh6IC0gd3k7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IHh5IC0gd3o7XG4gIG91dFs1XSA9IDEgLSAoeHggKyB6eik7XG4gIG91dFs2XSA9IHl6ICsgd3g7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IHh6ICsgd3k7XG4gIG91dFs5XSA9IHl6IC0gd3g7XG4gIG91dFsxMF0gPSAxIC0gKHh4ICsgeXkpO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IHZbMF07XG4gIG91dFsxM10gPSB2WzFdO1xuICBvdXRbMTRdID0gdlsyXTtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgbWF0NCBmcm9tIGEgZHVhbCBxdWF0LlxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IE1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBhIER1YWwgUXVhdGVybmlvblxuICogQHJldHVybnMge21hdDR9IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVF1YXQyKG91dCwgYSkge1xuICB2YXIgdHJhbnNsYXRpb24gPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgzKTtcbiAgdmFyIGJ4ID0gLWFbMF0sXG4gICAgICBieSA9IC1hWzFdLFxuICAgICAgYnogPSAtYVsyXSxcbiAgICAgIGJ3ID0gYVszXSxcbiAgICAgIGF4ID0gYVs0XSxcbiAgICAgIGF5ID0gYVs1XSxcbiAgICAgIGF6ID0gYVs2XSxcbiAgICAgIGF3ID0gYVs3XTtcbiAgdmFyIG1hZ25pdHVkZSA9IGJ4ICogYnggKyBieSAqIGJ5ICsgYnogKiBieiArIGJ3ICogYnc7IC8vT25seSBzY2FsZSBpZiBpdCBtYWtlcyBzZW5zZVxuXG4gIGlmIChtYWduaXR1ZGUgPiAwKSB7XG4gICAgdHJhbnNsYXRpb25bMF0gPSAoYXggKiBidyArIGF3ICogYnggKyBheSAqIGJ6IC0gYXogKiBieSkgKiAyIC8gbWFnbml0dWRlO1xuICAgIHRyYW5zbGF0aW9uWzFdID0gKGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYnopICogMiAvIG1hZ25pdHVkZTtcbiAgICB0cmFuc2xhdGlvblsyXSA9IChheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4KSAqIDIgLyBtYWduaXR1ZGU7XG4gIH0gZWxzZSB7XG4gICAgdHJhbnNsYXRpb25bMF0gPSAoYXggKiBidyArIGF3ICogYnggKyBheSAqIGJ6IC0gYXogKiBieSkgKiAyO1xuICAgIHRyYW5zbGF0aW9uWzFdID0gKGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYnopICogMjtcbiAgICB0cmFuc2xhdGlvblsyXSA9IChheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4KSAqIDI7XG4gIH1cblxuICBmcm9tUm90YXRpb25UcmFuc2xhdGlvbihvdXQsIGEsIHRyYW5zbGF0aW9uKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgdHJhbnNsYXRpb24gdmVjdG9yIGNvbXBvbmVudCBvZiBhIHRyYW5zZm9ybWF0aW9uXG4gKiAgbWF0cml4LiBJZiBhIG1hdHJpeCBpcyBidWlsdCB3aXRoIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uLFxuICogIHRoZSByZXR1cm5lZCB2ZWN0b3Igd2lsbCBiZSB0aGUgc2FtZSBhcyB0aGUgdHJhbnNsYXRpb24gdmVjdG9yXG4gKiAgb3JpZ2luYWxseSBzdXBwbGllZC5cbiAqIEBwYXJhbSAge3ZlYzN9IG91dCBWZWN0b3IgdG8gcmVjZWl2ZSB0cmFuc2xhdGlvbiBjb21wb25lbnRcbiAqIEBwYXJhbSAge1JlYWRvbmx5TWF0NH0gbWF0IE1hdHJpeCB0byBiZSBkZWNvbXBvc2VkIChpbnB1dClcbiAqIEByZXR1cm4ge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2xhdGlvbihvdXQsIG1hdCkge1xuICBvdXRbMF0gPSBtYXRbMTJdO1xuICBvdXRbMV0gPSBtYXRbMTNdO1xuICBvdXRbMl0gPSBtYXRbMTRdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzY2FsaW5nIGZhY3RvciBjb21wb25lbnQgb2YgYSB0cmFuc2Zvcm1hdGlvblxuICogIG1hdHJpeC4gSWYgYSBtYXRyaXggaXMgYnVpbHQgd2l0aCBmcm9tUm90YXRpb25UcmFuc2xhdGlvblNjYWxlXG4gKiAgd2l0aCBhIG5vcm1hbGl6ZWQgUXVhdGVybmlvbiBwYXJhbXRlciwgdGhlIHJldHVybmVkIHZlY3RvciB3aWxsIGJlXG4gKiAgdGhlIHNhbWUgYXMgdGhlIHNjYWxpbmcgdmVjdG9yXG4gKiAgb3JpZ2luYWxseSBzdXBwbGllZC5cbiAqIEBwYXJhbSAge3ZlYzN9IG91dCBWZWN0b3IgdG8gcmVjZWl2ZSBzY2FsaW5nIGZhY3RvciBjb21wb25lbnRcbiAqIEBwYXJhbSAge1JlYWRvbmx5TWF0NH0gbWF0IE1hdHJpeCB0byBiZSBkZWNvbXBvc2VkIChpbnB1dClcbiAqIEByZXR1cm4ge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY2FsaW5nKG91dCwgbWF0KSB7XG4gIHZhciBtMTEgPSBtYXRbMF07XG4gIHZhciBtMTIgPSBtYXRbMV07XG4gIHZhciBtMTMgPSBtYXRbMl07XG4gIHZhciBtMjEgPSBtYXRbNF07XG4gIHZhciBtMjIgPSBtYXRbNV07XG4gIHZhciBtMjMgPSBtYXRbNl07XG4gIHZhciBtMzEgPSBtYXRbOF07XG4gIHZhciBtMzIgPSBtYXRbOV07XG4gIHZhciBtMzMgPSBtYXRbMTBdO1xuICBvdXRbMF0gPSBNYXRoLmh5cG90KG0xMSwgbTEyLCBtMTMpO1xuICBvdXRbMV0gPSBNYXRoLmh5cG90KG0yMSwgbTIyLCBtMjMpO1xuICBvdXRbMl0gPSBNYXRoLmh5cG90KG0zMSwgbTMyLCBtMzMpO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgcXVhdGVybmlvbiByZXByZXNlbnRpbmcgdGhlIHJvdGF0aW9uYWwgY29tcG9uZW50XG4gKiAgb2YgYSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguIElmIGEgbWF0cml4IGlzIGJ1aWx0IHdpdGhcbiAqICBmcm9tUm90YXRpb25UcmFuc2xhdGlvbiwgdGhlIHJldHVybmVkIHF1YXRlcm5pb24gd2lsbCBiZSB0aGVcbiAqICBzYW1lIGFzIHRoZSBxdWF0ZXJuaW9uIG9yaWdpbmFsbHkgc3VwcGxpZWQuXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBRdWF0ZXJuaW9uIHRvIHJlY2VpdmUgdGhlIHJvdGF0aW9uIGNvbXBvbmVudFxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IG1hdCBNYXRyaXggdG8gYmUgZGVjb21wb3NlZCAoaW5wdXQpXG4gKiBAcmV0dXJuIHtxdWF0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Um90YXRpb24ob3V0LCBtYXQpIHtcbiAgdmFyIHNjYWxpbmcgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgzKTtcbiAgZ2V0U2NhbGluZyhzY2FsaW5nLCBtYXQpO1xuICB2YXIgaXMxID0gMSAvIHNjYWxpbmdbMF07XG4gIHZhciBpczIgPSAxIC8gc2NhbGluZ1sxXTtcbiAgdmFyIGlzMyA9IDEgLyBzY2FsaW5nWzJdO1xuICB2YXIgc20xMSA9IG1hdFswXSAqIGlzMTtcbiAgdmFyIHNtMTIgPSBtYXRbMV0gKiBpczI7XG4gIHZhciBzbTEzID0gbWF0WzJdICogaXMzO1xuICB2YXIgc20yMSA9IG1hdFs0XSAqIGlzMTtcbiAgdmFyIHNtMjIgPSBtYXRbNV0gKiBpczI7XG4gIHZhciBzbTIzID0gbWF0WzZdICogaXMzO1xuICB2YXIgc20zMSA9IG1hdFs4XSAqIGlzMTtcbiAgdmFyIHNtMzIgPSBtYXRbOV0gKiBpczI7XG4gIHZhciBzbTMzID0gbWF0WzEwXSAqIGlzMztcbiAgdmFyIHRyYWNlID0gc20xMSArIHNtMjIgKyBzbTMzO1xuICB2YXIgUyA9IDA7XG5cbiAgaWYgKHRyYWNlID4gMCkge1xuICAgIFMgPSBNYXRoLnNxcnQodHJhY2UgKyAxLjApICogMjtcbiAgICBvdXRbM10gPSAwLjI1ICogUztcbiAgICBvdXRbMF0gPSAoc20yMyAtIHNtMzIpIC8gUztcbiAgICBvdXRbMV0gPSAoc20zMSAtIHNtMTMpIC8gUztcbiAgICBvdXRbMl0gPSAoc20xMiAtIHNtMjEpIC8gUztcbiAgfSBlbHNlIGlmIChzbTExID4gc20yMiAmJiBzbTExID4gc20zMykge1xuICAgIFMgPSBNYXRoLnNxcnQoMS4wICsgc20xMSAtIHNtMjIgLSBzbTMzKSAqIDI7XG4gICAgb3V0WzNdID0gKHNtMjMgLSBzbTMyKSAvIFM7XG4gICAgb3V0WzBdID0gMC4yNSAqIFM7XG4gICAgb3V0WzFdID0gKHNtMTIgKyBzbTIxKSAvIFM7XG4gICAgb3V0WzJdID0gKHNtMzEgKyBzbTEzKSAvIFM7XG4gIH0gZWxzZSBpZiAoc20yMiA+IHNtMzMpIHtcbiAgICBTID0gTWF0aC5zcXJ0KDEuMCArIHNtMjIgLSBzbTExIC0gc20zMykgKiAyO1xuICAgIG91dFszXSA9IChzbTMxIC0gc20xMykgLyBTO1xuICAgIG91dFswXSA9IChzbTEyICsgc20yMSkgLyBTO1xuICAgIG91dFsxXSA9IDAuMjUgKiBTO1xuICAgIG91dFsyXSA9IChzbTIzICsgc20zMikgLyBTO1xuICB9IGVsc2Uge1xuICAgIFMgPSBNYXRoLnNxcnQoMS4wICsgc20zMyAtIHNtMTEgLSBzbTIyKSAqIDI7XG4gICAgb3V0WzNdID0gKHNtMTIgLSBzbTIxKSAvIFM7XG4gICAgb3V0WzBdID0gKHNtMzEgKyBzbTEzKSAvIFM7XG4gICAgb3V0WzFdID0gKHNtMjMgKyBzbTMyKSAvIFM7XG4gICAgb3V0WzJdID0gMC4yNSAqIFM7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSBxdWF0ZXJuaW9uIHJvdGF0aW9uLCB2ZWN0b3IgdHJhbnNsYXRpb24gYW5kIHZlY3RvciBzY2FsZVxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gKlxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XG4gKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgdmVjKTtcbiAqICAgICBsZXQgcXVhdE1hdCA9IG1hdDQuY3JlYXRlKCk7XG4gKiAgICAgcXVhdDQudG9NYXQ0KHF1YXQsIHF1YXRNYXQpO1xuICogICAgIG1hdDQubXVsdGlwbHkoZGVzdCwgcXVhdE1hdCk7XG4gKiAgICAgbWF0NC5zY2FsZShkZXN0LCBzY2FsZSlcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gKiBAcGFyYW0ge3F1YXQ0fSBxIFJvdGF0aW9uIHF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSB2IFRyYW5zbGF0aW9uIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IHMgU2NhbGluZyB2ZWN0b3JcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25TY2FsZShvdXQsIHEsIHYsIHMpIHtcbiAgLy8gUXVhdGVybmlvbiBtYXRoXG4gIHZhciB4ID0gcVswXSxcbiAgICAgIHkgPSBxWzFdLFxuICAgICAgeiA9IHFbMl0sXG4gICAgICB3ID0gcVszXTtcbiAgdmFyIHgyID0geCArIHg7XG4gIHZhciB5MiA9IHkgKyB5O1xuICB2YXIgejIgPSB6ICsgejtcbiAgdmFyIHh4ID0geCAqIHgyO1xuICB2YXIgeHkgPSB4ICogeTI7XG4gIHZhciB4eiA9IHggKiB6MjtcbiAgdmFyIHl5ID0geSAqIHkyO1xuICB2YXIgeXogPSB5ICogejI7XG4gIHZhciB6eiA9IHogKiB6MjtcbiAgdmFyIHd4ID0gdyAqIHgyO1xuICB2YXIgd3kgPSB3ICogeTI7XG4gIHZhciB3eiA9IHcgKiB6MjtcbiAgdmFyIHN4ID0gc1swXTtcbiAgdmFyIHN5ID0gc1sxXTtcbiAgdmFyIHN6ID0gc1syXTtcbiAgb3V0WzBdID0gKDEgLSAoeXkgKyB6eikpICogc3g7XG4gIG91dFsxXSA9ICh4eSArIHd6KSAqIHN4O1xuICBvdXRbMl0gPSAoeHogLSB3eSkgKiBzeDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gKHh5IC0gd3opICogc3k7XG4gIG91dFs1XSA9ICgxIC0gKHh4ICsgenopKSAqIHN5O1xuICBvdXRbNl0gPSAoeXogKyB3eCkgKiBzeTtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gKHh6ICsgd3kpICogc3o7XG4gIG91dFs5XSA9ICh5eiAtIHd4KSAqIHN6O1xuICBvdXRbMTBdID0gKDEgLSAoeHggKyB5eSkpICogc3o7XG4gIG91dFsxMV0gPSAwO1xuICBvdXRbMTJdID0gdlswXTtcbiAgb3V0WzEzXSA9IHZbMV07XG4gIG91dFsxNF0gPSB2WzJdO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgcXVhdGVybmlvbiByb3RhdGlvbiwgdmVjdG9yIHRyYW5zbGF0aW9uIGFuZCB2ZWN0b3Igc2NhbGUsIHJvdGF0aW5nIGFuZCBzY2FsaW5nIGFyb3VuZCB0aGUgZ2l2ZW4gb3JpZ2luXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcbiAqXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcbiAqICAgICBtYXQ0LnRyYW5zbGF0ZShkZXN0LCB2ZWMpO1xuICogICAgIG1hdDQudHJhbnNsYXRlKGRlc3QsIG9yaWdpbik7XG4gKiAgICAgbGV0IHF1YXRNYXQgPSBtYXQ0LmNyZWF0ZSgpO1xuICogICAgIHF1YXQ0LnRvTWF0NChxdWF0LCBxdWF0TWF0KTtcbiAqICAgICBtYXQ0Lm11bHRpcGx5KGRlc3QsIHF1YXRNYXQpO1xuICogICAgIG1hdDQuc2NhbGUoZGVzdCwgc2NhbGUpXG4gKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgbmVnYXRpdmVPcmlnaW4pO1xuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7cXVhdDR9IHEgUm90YXRpb24gcXVhdGVybmlvblxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IHYgVHJhbnNsYXRpb24gdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gcyBTY2FsaW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IG8gVGhlIG9yaWdpbiB2ZWN0b3IgYXJvdW5kIHdoaWNoIHRvIHNjYWxlIGFuZCByb3RhdGVcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25TY2FsZU9yaWdpbihvdXQsIHEsIHYsIHMsIG8pIHtcbiAgLy8gUXVhdGVybmlvbiBtYXRoXG4gIHZhciB4ID0gcVswXSxcbiAgICAgIHkgPSBxWzFdLFxuICAgICAgeiA9IHFbMl0sXG4gICAgICB3ID0gcVszXTtcbiAgdmFyIHgyID0geCArIHg7XG4gIHZhciB5MiA9IHkgKyB5O1xuICB2YXIgejIgPSB6ICsgejtcbiAgdmFyIHh4ID0geCAqIHgyO1xuICB2YXIgeHkgPSB4ICogeTI7XG4gIHZhciB4eiA9IHggKiB6MjtcbiAgdmFyIHl5ID0geSAqIHkyO1xuICB2YXIgeXogPSB5ICogejI7XG4gIHZhciB6eiA9IHogKiB6MjtcbiAgdmFyIHd4ID0gdyAqIHgyO1xuICB2YXIgd3kgPSB3ICogeTI7XG4gIHZhciB3eiA9IHcgKiB6MjtcbiAgdmFyIHN4ID0gc1swXTtcbiAgdmFyIHN5ID0gc1sxXTtcbiAgdmFyIHN6ID0gc1syXTtcbiAgdmFyIG94ID0gb1swXTtcbiAgdmFyIG95ID0gb1sxXTtcbiAgdmFyIG96ID0gb1syXTtcbiAgdmFyIG91dDAgPSAoMSAtICh5eSArIHp6KSkgKiBzeDtcbiAgdmFyIG91dDEgPSAoeHkgKyB3eikgKiBzeDtcbiAgdmFyIG91dDIgPSAoeHogLSB3eSkgKiBzeDtcbiAgdmFyIG91dDQgPSAoeHkgLSB3eikgKiBzeTtcbiAgdmFyIG91dDUgPSAoMSAtICh4eCArIHp6KSkgKiBzeTtcbiAgdmFyIG91dDYgPSAoeXogKyB3eCkgKiBzeTtcbiAgdmFyIG91dDggPSAoeHogKyB3eSkgKiBzejtcbiAgdmFyIG91dDkgPSAoeXogLSB3eCkgKiBzejtcbiAgdmFyIG91dDEwID0gKDEgLSAoeHggKyB5eSkpICogc3o7XG4gIG91dFswXSA9IG91dDA7XG4gIG91dFsxXSA9IG91dDE7XG4gIG91dFsyXSA9IG91dDI7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IG91dDQ7XG4gIG91dFs1XSA9IG91dDU7XG4gIG91dFs2XSA9IG91dDY7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IG91dDg7XG4gIG91dFs5XSA9IG91dDk7XG4gIG91dFsxMF0gPSBvdXQxMDtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSB2WzBdICsgb3ggLSAob3V0MCAqIG94ICsgb3V0NCAqIG95ICsgb3V0OCAqIG96KTtcbiAgb3V0WzEzXSA9IHZbMV0gKyBveSAtIChvdXQxICogb3ggKyBvdXQ1ICogb3kgKyBvdXQ5ICogb3opO1xuICBvdXRbMTRdID0gdlsyXSArIG96IC0gKG91dDIgKiBveCArIG91dDYgKiBveSArIG91dDEwICogb3opO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyBhIDR4NCBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gcXVhdGVybmlvblxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBxIFF1YXRlcm5pb24gdG8gY3JlYXRlIG1hdHJpeCBmcm9tXG4gKlxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUXVhdChvdXQsIHEpIHtcbiAgdmFyIHggPSBxWzBdLFxuICAgICAgeSA9IHFbMV0sXG4gICAgICB6ID0gcVsyXSxcbiAgICAgIHcgPSBxWzNdO1xuICB2YXIgeDIgPSB4ICsgeDtcbiAgdmFyIHkyID0geSArIHk7XG4gIHZhciB6MiA9IHogKyB6O1xuICB2YXIgeHggPSB4ICogeDI7XG4gIHZhciB5eCA9IHkgKiB4MjtcbiAgdmFyIHl5ID0geSAqIHkyO1xuICB2YXIgenggPSB6ICogeDI7XG4gIHZhciB6eSA9IHogKiB5MjtcbiAgdmFyIHp6ID0geiAqIHoyO1xuICB2YXIgd3ggPSB3ICogeDI7XG4gIHZhciB3eSA9IHcgKiB5MjtcbiAgdmFyIHd6ID0gdyAqIHoyO1xuICBvdXRbMF0gPSAxIC0geXkgLSB6ejtcbiAgb3V0WzFdID0geXggKyB3ejtcbiAgb3V0WzJdID0genggLSB3eTtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0geXggLSB3ejtcbiAgb3V0WzVdID0gMSAtIHh4IC0geno7XG4gIG91dFs2XSA9IHp5ICsgd3g7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IHp4ICsgd3k7XG4gIG91dFs5XSA9IHp5IC0gd3g7XG4gIG91dFsxMF0gPSAxIC0geHggLSB5eTtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE0XSA9IDA7XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBmcnVzdHVtIG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBib3VuZHNcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gKiBAcGFyYW0ge051bWJlcn0gbGVmdCBMZWZ0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge051bWJlcn0gcmlnaHQgUmlnaHQgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7TnVtYmVyfSBib3R0b20gQm90dG9tIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge051bWJlcn0gdG9wIFRvcCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtOdW1iZXJ9IG5lYXIgTmVhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtOdW1iZXJ9IGZhciBGYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJ1c3R1bShvdXQsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyKSB7XG4gIHZhciBybCA9IDEgLyAocmlnaHQgLSBsZWZ0KTtcbiAgdmFyIHRiID0gMSAvICh0b3AgLSBib3R0b20pO1xuICB2YXIgbmYgPSAxIC8gKG5lYXIgLSBmYXIpO1xuICBvdXRbMF0gPSBuZWFyICogMiAqIHJsO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSBuZWFyICogMiAqIHRiO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAocmlnaHQgKyBsZWZ0KSAqIHJsO1xuICBvdXRbOV0gPSAodG9wICsgYm90dG9tKSAqIHRiO1xuICBvdXRbMTBdID0gKGZhciArIG5lYXIpICogbmY7XG4gIG91dFsxMV0gPSAtMTtcbiAgb3V0WzEyXSA9IDA7XG4gIG91dFsxM10gPSAwO1xuICBvdXRbMTRdID0gZmFyICogbmVhciAqIDIgKiBuZjtcbiAgb3V0WzE1XSA9IDA7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gbWF0cml4IHdpdGggdGhlIGdpdmVuIGJvdW5kcy5cbiAqIFRoZSBuZWFyL2ZhciBjbGlwIHBsYW5lcyBjb3JyZXNwb25kIHRvIGEgbm9ybWFsaXplZCBkZXZpY2UgY29vcmRpbmF0ZSBaIHJhbmdlIG9mIFstMSwgMV0sXG4gKiB3aGljaCBtYXRjaGVzIFdlYkdML09wZW5HTCdzIGNsaXAgdm9sdW1lLlxuICogUGFzc2luZyBudWxsL3VuZGVmaW5lZC9ubyB2YWx1ZSBmb3IgZmFyIHdpbGwgZ2VuZXJhdGUgaW5maW5pdGUgcHJvamVjdGlvbiBtYXRyaXguXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHtudW1iZXJ9IGZvdnkgVmVydGljYWwgZmllbGQgb2YgdmlldyBpbiByYWRpYW5zXG4gKiBAcGFyYW0ge251bWJlcn0gYXNwZWN0IEFzcGVjdCByYXRpby4gdHlwaWNhbGx5IHZpZXdwb3J0IHdpZHRoL2hlaWdodFxuICogQHBhcmFtIHtudW1iZXJ9IG5lYXIgTmVhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IGZhciBGYXIgYm91bmQgb2YgdGhlIGZydXN0dW0sIGNhbiBiZSBudWxsIG9yIEluZmluaXR5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHBlcnNwZWN0aXZlTk8ob3V0LCBmb3Z5LCBhc3BlY3QsIG5lYXIsIGZhcikge1xuICB2YXIgZiA9IDEuMCAvIE1hdGgudGFuKGZvdnkgLyAyKSxcbiAgICAgIG5mO1xuICBvdXRbMF0gPSBmIC8gYXNwZWN0O1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSBmO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAwO1xuICBvdXRbOV0gPSAwO1xuICBvdXRbMTFdID0gLTE7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE1XSA9IDA7XG5cbiAgaWYgKGZhciAhPSBudWxsICYmIGZhciAhPT0gSW5maW5pdHkpIHtcbiAgICBuZiA9IDEgLyAobmVhciAtIGZhcik7XG4gICAgb3V0WzEwXSA9IChmYXIgKyBuZWFyKSAqIG5mO1xuICAgIG91dFsxNF0gPSAyICogZmFyICogbmVhciAqIG5mO1xuICB9IGVsc2Uge1xuICAgIG91dFsxMF0gPSAtMTtcbiAgICBvdXRbMTRdID0gLTIgKiBuZWFyO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayBtYXQ0LnBlcnNwZWN0aXZlTk99XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIHBlcnNwZWN0aXZlID0gcGVyc3BlY3RpdmVOTztcbi8qKlxuICogR2VuZXJhdGVzIGEgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXggc3VpdGFibGUgZm9yIFdlYkdQVSB3aXRoIHRoZSBnaXZlbiBib3VuZHMuXG4gKiBUaGUgbmVhci9mYXIgY2xpcCBwbGFuZXMgY29ycmVzcG9uZCB0byBhIG5vcm1hbGl6ZWQgZGV2aWNlIGNvb3JkaW5hdGUgWiByYW5nZSBvZiBbMCwgMV0sXG4gKiB3aGljaCBtYXRjaGVzIFdlYkdQVS9WdWxrYW4vRGlyZWN0WC9NZXRhbCdzIGNsaXAgdm9sdW1lLlxuICogUGFzc2luZyBudWxsL3VuZGVmaW5lZC9ubyB2YWx1ZSBmb3IgZmFyIHdpbGwgZ2VuZXJhdGUgaW5maW5pdGUgcHJvamVjdGlvbiBtYXRyaXguXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHtudW1iZXJ9IGZvdnkgVmVydGljYWwgZmllbGQgb2YgdmlldyBpbiByYWRpYW5zXG4gKiBAcGFyYW0ge251bWJlcn0gYXNwZWN0IEFzcGVjdCByYXRpby4gdHlwaWNhbGx5IHZpZXdwb3J0IHdpZHRoL2hlaWdodFxuICogQHBhcmFtIHtudW1iZXJ9IG5lYXIgTmVhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IGZhciBGYXIgYm91bmQgb2YgdGhlIGZydXN0dW0sIGNhbiBiZSBudWxsIG9yIEluZmluaXR5XG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHBlcnNwZWN0aXZlWk8ob3V0LCBmb3Z5LCBhc3BlY3QsIG5lYXIsIGZhcikge1xuICB2YXIgZiA9IDEuMCAvIE1hdGgudGFuKGZvdnkgLyAyKSxcbiAgICAgIG5mO1xuICBvdXRbMF0gPSBmIC8gYXNwZWN0O1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSBmO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAwO1xuICBvdXRbOV0gPSAwO1xuICBvdXRbMTFdID0gLTE7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE1XSA9IDA7XG5cbiAgaWYgKGZhciAhPSBudWxsICYmIGZhciAhPT0gSW5maW5pdHkpIHtcbiAgICBuZiA9IDEgLyAobmVhciAtIGZhcik7XG4gICAgb3V0WzEwXSA9IGZhciAqIG5mO1xuICAgIG91dFsxNF0gPSBmYXIgKiBuZWFyICogbmY7XG4gIH0gZWxzZSB7XG4gICAgb3V0WzEwXSA9IC0xO1xuICAgIG91dFsxNF0gPSAtbmVhcjtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gbWF0cml4IHdpdGggdGhlIGdpdmVuIGZpZWxkIG9mIHZpZXcuXG4gKiBUaGlzIGlzIHByaW1hcmlseSB1c2VmdWwgZm9yIGdlbmVyYXRpbmcgcHJvamVjdGlvbiBtYXRyaWNlcyB0byBiZSB1c2VkXG4gKiB3aXRoIHRoZSBzdGlsbCBleHBlcmllbWVudGFsIFdlYlZSIEFQSS5cbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gKiBAcGFyYW0ge09iamVjdH0gZm92IE9iamVjdCBjb250YWluaW5nIHRoZSBmb2xsb3dpbmcgdmFsdWVzOiB1cERlZ3JlZXMsIGRvd25EZWdyZWVzLCBsZWZ0RGVncmVlcywgcmlnaHREZWdyZWVzXG4gKiBAcGFyYW0ge251bWJlcn0gbmVhciBOZWFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gZmFyIEZhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBwZXJzcGVjdGl2ZUZyb21GaWVsZE9mVmlldyhvdXQsIGZvdiwgbmVhciwgZmFyKSB7XG4gIHZhciB1cFRhbiA9IE1hdGgudGFuKGZvdi51cERlZ3JlZXMgKiBNYXRoLlBJIC8gMTgwLjApO1xuICB2YXIgZG93blRhbiA9IE1hdGgudGFuKGZvdi5kb3duRGVncmVlcyAqIE1hdGguUEkgLyAxODAuMCk7XG4gIHZhciBsZWZ0VGFuID0gTWF0aC50YW4oZm92LmxlZnREZWdyZWVzICogTWF0aC5QSSAvIDE4MC4wKTtcbiAgdmFyIHJpZ2h0VGFuID0gTWF0aC50YW4oZm92LnJpZ2h0RGVncmVlcyAqIE1hdGguUEkgLyAxODAuMCk7XG4gIHZhciB4U2NhbGUgPSAyLjAgLyAobGVmdFRhbiArIHJpZ2h0VGFuKTtcbiAgdmFyIHlTY2FsZSA9IDIuMCAvICh1cFRhbiArIGRvd25UYW4pO1xuICBvdXRbMF0gPSB4U2NhbGU7XG4gIG91dFsxXSA9IDAuMDtcbiAgb3V0WzJdID0gMC4wO1xuICBvdXRbM10gPSAwLjA7XG4gIG91dFs0XSA9IDAuMDtcbiAgb3V0WzVdID0geVNjYWxlO1xuICBvdXRbNl0gPSAwLjA7XG4gIG91dFs3XSA9IDAuMDtcbiAgb3V0WzhdID0gLSgobGVmdFRhbiAtIHJpZ2h0VGFuKSAqIHhTY2FsZSAqIDAuNSk7XG4gIG91dFs5XSA9ICh1cFRhbiAtIGRvd25UYW4pICogeVNjYWxlICogMC41O1xuICBvdXRbMTBdID0gZmFyIC8gKG5lYXIgLSBmYXIpO1xuICBvdXRbMTFdID0gLTEuMDtcbiAgb3V0WzEyXSA9IDAuMDtcbiAgb3V0WzEzXSA9IDAuMDtcbiAgb3V0WzE0XSA9IGZhciAqIG5lYXIgLyAobmVhciAtIGZhcik7XG4gIG91dFsxNV0gPSAwLjA7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIG9ydGhvZ29uYWwgcHJvamVjdGlvbiBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gYm91bmRzLlxuICogVGhlIG5lYXIvZmFyIGNsaXAgcGxhbmVzIGNvcnJlc3BvbmQgdG8gYSBub3JtYWxpemVkIGRldmljZSBjb29yZGluYXRlIFogcmFuZ2Ugb2YgWy0xLCAxXSxcbiAqIHdoaWNoIG1hdGNoZXMgV2ViR0wvT3BlbkdMJ3MgY2xpcCB2b2x1bWUuXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHtudW1iZXJ9IGxlZnQgTGVmdCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IHJpZ2h0IFJpZ2h0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gYm90dG9tIEJvdHRvbSBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IHRvcCBUb3AgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSBuZWFyIE5lYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSBmYXIgRmFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG9ydGhvTk8ob3V0LCBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhcikge1xuICB2YXIgbHIgPSAxIC8gKGxlZnQgLSByaWdodCk7XG4gIHZhciBidCA9IDEgLyAoYm90dG9tIC0gdG9wKTtcbiAgdmFyIG5mID0gMSAvIChuZWFyIC0gZmFyKTtcbiAgb3V0WzBdID0gLTIgKiBscjtcbiAgb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gMDtcbiAgb3V0WzVdID0gLTIgKiBidDtcbiAgb3V0WzZdID0gMDtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gMDtcbiAgb3V0WzldID0gMDtcbiAgb3V0WzEwXSA9IDIgKiBuZjtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAobGVmdCArIHJpZ2h0KSAqIGxyO1xuICBvdXRbMTNdID0gKHRvcCArIGJvdHRvbSkgKiBidDtcbiAgb3V0WzE0XSA9IChmYXIgKyBuZWFyKSAqIG5mO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayBtYXQ0Lm9ydGhvTk99XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIG9ydGhvID0gb3J0aG9OTztcbi8qKlxuICogR2VuZXJhdGVzIGEgb3J0aG9nb25hbCBwcm9qZWN0aW9uIG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBib3VuZHMuXG4gKiBUaGUgbmVhci9mYXIgY2xpcCBwbGFuZXMgY29ycmVzcG9uZCB0byBhIG5vcm1hbGl6ZWQgZGV2aWNlIGNvb3JkaW5hdGUgWiByYW5nZSBvZiBbMCwgMV0sXG4gKiB3aGljaCBtYXRjaGVzIFdlYkdQVS9WdWxrYW4vRGlyZWN0WC9NZXRhbCdzIGNsaXAgdm9sdW1lLlxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cbiAqIEBwYXJhbSB7bnVtYmVyfSBsZWZ0IExlZnQgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSByaWdodCBSaWdodCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHBhcmFtIHtudW1iZXJ9IGJvdHRvbSBCb3R0b20gYm91bmQgb2YgdGhlIGZydXN0dW1cbiAqIEBwYXJhbSB7bnVtYmVyfSB0b3AgVG9wIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gbmVhciBOZWFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gKiBAcGFyYW0ge251bWJlcn0gZmFyIEZhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBvcnRob1pPKG91dCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCBmYXIpIHtcbiAgdmFyIGxyID0gMSAvIChsZWZ0IC0gcmlnaHQpO1xuICB2YXIgYnQgPSAxIC8gKGJvdHRvbSAtIHRvcCk7XG4gIHZhciBuZiA9IDEgLyAobmVhciAtIGZhcik7XG4gIG91dFswXSA9IC0yICogbHI7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IC0yICogYnQ7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDA7XG4gIG91dFs5XSA9IDA7XG4gIG91dFsxMF0gPSBuZjtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAobGVmdCArIHJpZ2h0KSAqIGxyO1xuICBvdXRbMTNdID0gKHRvcCArIGJvdHRvbSkgKiBidDtcbiAgb3V0WzE0XSA9IG5lYXIgKiBuZjtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIGxvb2stYXQgbWF0cml4IHdpdGggdGhlIGdpdmVuIGV5ZSBwb3NpdGlvbiwgZm9jYWwgcG9pbnQsIGFuZCB1cCBheGlzLlxuICogSWYgeW91IHdhbnQgYSBtYXRyaXggdGhhdCBhY3R1YWxseSBtYWtlcyBhbiBvYmplY3QgbG9vayBhdCBhbm90aGVyIG9iamVjdCwgeW91IHNob3VsZCB1c2UgdGFyZ2V0VG8gaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gZXllIFBvc2l0aW9uIG9mIHRoZSB2aWV3ZXJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBjZW50ZXIgUG9pbnQgdGhlIHZpZXdlciBpcyBsb29raW5nIGF0XG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdXAgdmVjMyBwb2ludGluZyB1cFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBsb29rQXQob3V0LCBleWUsIGNlbnRlciwgdXApIHtcbiAgdmFyIHgwLCB4MSwgeDIsIHkwLCB5MSwgeTIsIHowLCB6MSwgejIsIGxlbjtcbiAgdmFyIGV5ZXggPSBleWVbMF07XG4gIHZhciBleWV5ID0gZXllWzFdO1xuICB2YXIgZXlleiA9IGV5ZVsyXTtcbiAgdmFyIHVweCA9IHVwWzBdO1xuICB2YXIgdXB5ID0gdXBbMV07XG4gIHZhciB1cHogPSB1cFsyXTtcbiAgdmFyIGNlbnRlcnggPSBjZW50ZXJbMF07XG4gIHZhciBjZW50ZXJ5ID0gY2VudGVyWzFdO1xuICB2YXIgY2VudGVyeiA9IGNlbnRlclsyXTtcblxuICBpZiAoTWF0aC5hYnMoZXlleCAtIGNlbnRlcngpIDwgZ2xNYXRyaXguRVBTSUxPTiAmJiBNYXRoLmFicyhleWV5IC0gY2VudGVyeSkgPCBnbE1hdHJpeC5FUFNJTE9OICYmIE1hdGguYWJzKGV5ZXogLSBjZW50ZXJ6KSA8IGdsTWF0cml4LkVQU0lMT04pIHtcbiAgICByZXR1cm4gaWRlbnRpdHkob3V0KTtcbiAgfVxuXG4gIHowID0gZXlleCAtIGNlbnRlcng7XG4gIHoxID0gZXlleSAtIGNlbnRlcnk7XG4gIHoyID0gZXlleiAtIGNlbnRlcno7XG4gIGxlbiA9IDEgLyBNYXRoLmh5cG90KHowLCB6MSwgejIpO1xuICB6MCAqPSBsZW47XG4gIHoxICo9IGxlbjtcbiAgejIgKj0gbGVuO1xuICB4MCA9IHVweSAqIHoyIC0gdXB6ICogejE7XG4gIHgxID0gdXB6ICogejAgLSB1cHggKiB6MjtcbiAgeDIgPSB1cHggKiB6MSAtIHVweSAqIHowO1xuICBsZW4gPSBNYXRoLmh5cG90KHgwLCB4MSwgeDIpO1xuXG4gIGlmICghbGVuKSB7XG4gICAgeDAgPSAwO1xuICAgIHgxID0gMDtcbiAgICB4MiA9IDA7XG4gIH0gZWxzZSB7XG4gICAgbGVuID0gMSAvIGxlbjtcbiAgICB4MCAqPSBsZW47XG4gICAgeDEgKj0gbGVuO1xuICAgIHgyICo9IGxlbjtcbiAgfVxuXG4gIHkwID0gejEgKiB4MiAtIHoyICogeDE7XG4gIHkxID0gejIgKiB4MCAtIHowICogeDI7XG4gIHkyID0gejAgKiB4MSAtIHoxICogeDA7XG4gIGxlbiA9IE1hdGguaHlwb3QoeTAsIHkxLCB5Mik7XG5cbiAgaWYgKCFsZW4pIHtcbiAgICB5MCA9IDA7XG4gICAgeTEgPSAwO1xuICAgIHkyID0gMDtcbiAgfSBlbHNlIHtcbiAgICBsZW4gPSAxIC8gbGVuO1xuICAgIHkwICo9IGxlbjtcbiAgICB5MSAqPSBsZW47XG4gICAgeTIgKj0gbGVuO1xuICB9XG5cbiAgb3V0WzBdID0geDA7XG4gIG91dFsxXSA9IHkwO1xuICBvdXRbMl0gPSB6MDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0geDE7XG4gIG91dFs1XSA9IHkxO1xuICBvdXRbNl0gPSB6MTtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0geDI7XG4gIG91dFs5XSA9IHkyO1xuICBvdXRbMTBdID0gejI7XG4gIG91dFsxMV0gPSAwO1xuICBvdXRbMTJdID0gLSh4MCAqIGV5ZXggKyB4MSAqIGV5ZXkgKyB4MiAqIGV5ZXopO1xuICBvdXRbMTNdID0gLSh5MCAqIGV5ZXggKyB5MSAqIGV5ZXkgKyB5MiAqIGV5ZXopO1xuICBvdXRbMTRdID0gLSh6MCAqIGV5ZXggKyB6MSAqIGV5ZXkgKyB6MiAqIGV5ZXopO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogR2VuZXJhdGVzIGEgbWF0cml4IHRoYXQgbWFrZXMgc29tZXRoaW5nIGxvb2sgYXQgc29tZXRoaW5nIGVsc2UuXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGV5ZSBQb3NpdGlvbiBvZiB0aGUgdmlld2VyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gY2VudGVyIFBvaW50IHRoZSB2aWV3ZXIgaXMgbG9va2luZyBhdFxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IHVwIHZlYzMgcG9pbnRpbmcgdXBcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdGFyZ2V0VG8ob3V0LCBleWUsIHRhcmdldCwgdXApIHtcbiAgdmFyIGV5ZXggPSBleWVbMF0sXG4gICAgICBleWV5ID0gZXllWzFdLFxuICAgICAgZXlleiA9IGV5ZVsyXSxcbiAgICAgIHVweCA9IHVwWzBdLFxuICAgICAgdXB5ID0gdXBbMV0sXG4gICAgICB1cHogPSB1cFsyXTtcbiAgdmFyIHowID0gZXlleCAtIHRhcmdldFswXSxcbiAgICAgIHoxID0gZXlleSAtIHRhcmdldFsxXSxcbiAgICAgIHoyID0gZXlleiAtIHRhcmdldFsyXTtcbiAgdmFyIGxlbiA9IHowICogejAgKyB6MSAqIHoxICsgejIgKiB6MjtcblxuICBpZiAobGVuID4gMCkge1xuICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgICB6MCAqPSBsZW47XG4gICAgejEgKj0gbGVuO1xuICAgIHoyICo9IGxlbjtcbiAgfVxuXG4gIHZhciB4MCA9IHVweSAqIHoyIC0gdXB6ICogejEsXG4gICAgICB4MSA9IHVweiAqIHowIC0gdXB4ICogejIsXG4gICAgICB4MiA9IHVweCAqIHoxIC0gdXB5ICogejA7XG4gIGxlbiA9IHgwICogeDAgKyB4MSAqIHgxICsgeDIgKiB4MjtcblxuICBpZiAobGVuID4gMCkge1xuICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgICB4MCAqPSBsZW47XG4gICAgeDEgKj0gbGVuO1xuICAgIHgyICo9IGxlbjtcbiAgfVxuXG4gIG91dFswXSA9IHgwO1xuICBvdXRbMV0gPSB4MTtcbiAgb3V0WzJdID0geDI7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IHoxICogeDIgLSB6MiAqIHgxO1xuICBvdXRbNV0gPSB6MiAqIHgwIC0gejAgKiB4MjtcbiAgb3V0WzZdID0gejAgKiB4MSAtIHoxICogeDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IHowO1xuICBvdXRbOV0gPSB6MTtcbiAgb3V0WzEwXSA9IHoyO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IGV5ZXg7XG4gIG91dFsxM10gPSBleWV5O1xuICBvdXRbMTRdID0gZXllejtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBtYXQ0XG4gKlxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgbWF0cml4IHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xuICogQHJldHVybnMge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtYXRyaXhcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyKGEpIHtcbiAgcmV0dXJuIFwibWF0NChcIiArIGFbMF0gKyBcIiwgXCIgKyBhWzFdICsgXCIsIFwiICsgYVsyXSArIFwiLCBcIiArIGFbM10gKyBcIiwgXCIgKyBhWzRdICsgXCIsIFwiICsgYVs1XSArIFwiLCBcIiArIGFbNl0gKyBcIiwgXCIgKyBhWzddICsgXCIsIFwiICsgYVs4XSArIFwiLCBcIiArIGFbOV0gKyBcIiwgXCIgKyBhWzEwXSArIFwiLCBcIiArIGFbMTFdICsgXCIsIFwiICsgYVsxMl0gKyBcIiwgXCIgKyBhWzEzXSArIFwiLCBcIiArIGFbMTRdICsgXCIsIFwiICsgYVsxNV0gKyBcIilcIjtcbn1cbi8qKlxuICogUmV0dXJucyBGcm9iZW5pdXMgbm9ybSBvZiBhIG1hdDRcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgbWF0cml4IHRvIGNhbGN1bGF0ZSBGcm9iZW5pdXMgbm9ybSBvZlxuICogQHJldHVybnMge051bWJlcn0gRnJvYmVuaXVzIG5vcm1cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvYihhKSB7XG4gIHJldHVybiBNYXRoLmh5cG90KGFbMF0sIGFbMV0sIGFbMl0sIGFbM10sIGFbNF0sIGFbNV0sIGFbNl0sIGFbN10sIGFbOF0sIGFbOV0sIGFbMTBdLCBhWzExXSwgYVsxMl0sIGFbMTNdLCBhWzE0XSwgYVsxNV0pO1xufVxuLyoqXG4gKiBBZGRzIHR3byBtYXQ0J3NcbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge21hdDR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdO1xuICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcbiAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gIG91dFszXSA9IGFbM10gKyBiWzNdO1xuICBvdXRbNF0gPSBhWzRdICsgYls0XTtcbiAgb3V0WzVdID0gYVs1XSArIGJbNV07XG4gIG91dFs2XSA9IGFbNl0gKyBiWzZdO1xuICBvdXRbN10gPSBhWzddICsgYls3XTtcbiAgb3V0WzhdID0gYVs4XSArIGJbOF07XG4gIG91dFs5XSA9IGFbOV0gKyBiWzldO1xuICBvdXRbMTBdID0gYVsxMF0gKyBiWzEwXTtcbiAgb3V0WzExXSA9IGFbMTFdICsgYlsxMV07XG4gIG91dFsxMl0gPSBhWzEyXSArIGJbMTJdO1xuICBvdXRbMTNdID0gYVsxM10gKyBiWzEzXTtcbiAgb3V0WzE0XSA9IGFbMTRdICsgYlsxNF07XG4gIG91dFsxNV0gPSBhWzE1XSArIGJbMTVdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTdWJ0cmFjdHMgbWF0cml4IGIgZnJvbSBtYXRyaXggYVxuICpcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgb3V0WzFdID0gYVsxXSAtIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xuICBvdXRbM10gPSBhWzNdIC0gYlszXTtcbiAgb3V0WzRdID0gYVs0XSAtIGJbNF07XG4gIG91dFs1XSA9IGFbNV0gLSBiWzVdO1xuICBvdXRbNl0gPSBhWzZdIC0gYls2XTtcbiAgb3V0WzddID0gYVs3XSAtIGJbN107XG4gIG91dFs4XSA9IGFbOF0gLSBiWzhdO1xuICBvdXRbOV0gPSBhWzldIC0gYls5XTtcbiAgb3V0WzEwXSA9IGFbMTBdIC0gYlsxMF07XG4gIG91dFsxMV0gPSBhWzExXSAtIGJbMTFdO1xuICBvdXRbMTJdID0gYVsxMl0gLSBiWzEyXTtcbiAgb3V0WzEzXSA9IGFbMTNdIC0gYlsxM107XG4gIG91dFsxNF0gPSBhWzE0XSAtIGJbMTRdO1xuICBvdXRbMTVdID0gYVsxNV0gLSBiWzE1XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogTXVsdGlwbHkgZWFjaCBlbGVtZW50IG9mIHRoZSBtYXRyaXggYnkgYSBzY2FsYXIuXG4gKlxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBtYXRyaXggdG8gc2NhbGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgbWF0cml4J3MgZWxlbWVudHMgYnlcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXIob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKiBiO1xuICBvdXRbMV0gPSBhWzFdICogYjtcbiAgb3V0WzJdID0gYVsyXSAqIGI7XG4gIG91dFszXSA9IGFbM10gKiBiO1xuICBvdXRbNF0gPSBhWzRdICogYjtcbiAgb3V0WzVdID0gYVs1XSAqIGI7XG4gIG91dFs2XSA9IGFbNl0gKiBiO1xuICBvdXRbN10gPSBhWzddICogYjtcbiAgb3V0WzhdID0gYVs4XSAqIGI7XG4gIG91dFs5XSA9IGFbOV0gKiBiO1xuICBvdXRbMTBdID0gYVsxMF0gKiBiO1xuICBvdXRbMTFdID0gYVsxMV0gKiBiO1xuICBvdXRbMTJdID0gYVsxMl0gKiBiO1xuICBvdXRbMTNdID0gYVsxM10gKiBiO1xuICBvdXRbMTRdID0gYVsxNF0gKiBiO1xuICBvdXRbMTVdID0gYVsxNV0gKiBiO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBBZGRzIHR3byBtYXQ0J3MgYWZ0ZXIgbXVsdGlwbHlpbmcgZWFjaCBlbGVtZW50IG9mIHRoZSBzZWNvbmQgb3BlcmFuZCBieSBhIHNjYWxhciB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYidzIGVsZW1lbnRzIGJ5IGJlZm9yZSBhZGRpbmdcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXJBbmRBZGQob3V0LCBhLCBiLCBzY2FsZSkge1xuICBvdXRbMF0gPSBhWzBdICsgYlswXSAqIHNjYWxlO1xuICBvdXRbMV0gPSBhWzFdICsgYlsxXSAqIHNjYWxlO1xuICBvdXRbMl0gPSBhWzJdICsgYlsyXSAqIHNjYWxlO1xuICBvdXRbM10gPSBhWzNdICsgYlszXSAqIHNjYWxlO1xuICBvdXRbNF0gPSBhWzRdICsgYls0XSAqIHNjYWxlO1xuICBvdXRbNV0gPSBhWzVdICsgYls1XSAqIHNjYWxlO1xuICBvdXRbNl0gPSBhWzZdICsgYls2XSAqIHNjYWxlO1xuICBvdXRbN10gPSBhWzddICsgYls3XSAqIHNjYWxlO1xuICBvdXRbOF0gPSBhWzhdICsgYls4XSAqIHNjYWxlO1xuICBvdXRbOV0gPSBhWzldICsgYls5XSAqIHNjYWxlO1xuICBvdXRbMTBdID0gYVsxMF0gKyBiWzEwXSAqIHNjYWxlO1xuICBvdXRbMTFdID0gYVsxMV0gKyBiWzExXSAqIHNjYWxlO1xuICBvdXRbMTJdID0gYVsxMl0gKyBiWzEyXSAqIHNjYWxlO1xuICBvdXRbMTNdID0gYVsxM10gKyBiWzEzXSAqIHNjYWxlO1xuICBvdXRbMTRdID0gYVsxNF0gKyBiWzE0XSAqIHNjYWxlO1xuICBvdXRbMTVdID0gYVsxNV0gKyBiWzE1XSAqIHNjYWxlO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXG4gKlxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgVGhlIGZpcnN0IG1hdHJpeC5cbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBiIFRoZSBzZWNvbmQgbWF0cml4LlxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBleGFjdEVxdWFscyhhLCBiKSB7XG4gIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXSAmJiBhWzNdID09PSBiWzNdICYmIGFbNF0gPT09IGJbNF0gJiYgYVs1XSA9PT0gYls1XSAmJiBhWzZdID09PSBiWzZdICYmIGFbN10gPT09IGJbN10gJiYgYVs4XSA9PT0gYls4XSAmJiBhWzldID09PSBiWzldICYmIGFbMTBdID09PSBiWzEwXSAmJiBhWzExXSA9PT0gYlsxMV0gJiYgYVsxMl0gPT09IGJbMTJdICYmIGFbMTNdID09PSBiWzEzXSAmJiBhWzE0XSA9PT0gYlsxNF0gJiYgYVsxNV0gPT09IGJbMTVdO1xufVxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24uXG4gKlxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgVGhlIGZpcnN0IG1hdHJpeC5cbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBiIFRoZSBzZWNvbmQgbWF0cml4LlxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICB2YXIgYTAgPSBhWzBdLFxuICAgICAgYTEgPSBhWzFdLFxuICAgICAgYTIgPSBhWzJdLFxuICAgICAgYTMgPSBhWzNdO1xuICB2YXIgYTQgPSBhWzRdLFxuICAgICAgYTUgPSBhWzVdLFxuICAgICAgYTYgPSBhWzZdLFxuICAgICAgYTcgPSBhWzddO1xuICB2YXIgYTggPSBhWzhdLFxuICAgICAgYTkgPSBhWzldLFxuICAgICAgYTEwID0gYVsxMF0sXG4gICAgICBhMTEgPSBhWzExXTtcbiAgdmFyIGExMiA9IGFbMTJdLFxuICAgICAgYTEzID0gYVsxM10sXG4gICAgICBhMTQgPSBhWzE0XSxcbiAgICAgIGExNSA9IGFbMTVdO1xuICB2YXIgYjAgPSBiWzBdLFxuICAgICAgYjEgPSBiWzFdLFxuICAgICAgYjIgPSBiWzJdLFxuICAgICAgYjMgPSBiWzNdO1xuICB2YXIgYjQgPSBiWzRdLFxuICAgICAgYjUgPSBiWzVdLFxuICAgICAgYjYgPSBiWzZdLFxuICAgICAgYjcgPSBiWzddO1xuICB2YXIgYjggPSBiWzhdLFxuICAgICAgYjkgPSBiWzldLFxuICAgICAgYjEwID0gYlsxMF0sXG4gICAgICBiMTEgPSBiWzExXTtcbiAgdmFyIGIxMiA9IGJbMTJdLFxuICAgICAgYjEzID0gYlsxM10sXG4gICAgICBiMTQgPSBiWzE0XSxcbiAgICAgIGIxNSA9IGJbMTVdO1xuICByZXR1cm4gTWF0aC5hYnMoYTAgLSBiMCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTApLCBNYXRoLmFicyhiMCkpICYmIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExKSwgTWF0aC5hYnMoYjEpKSAmJiBNYXRoLmFicyhhMiAtIGIyKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMiksIE1hdGguYWJzKGIyKSkgJiYgTWF0aC5hYnMoYTMgLSBiMykgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTMpLCBNYXRoLmFicyhiMykpICYmIE1hdGguYWJzKGE0IC0gYjQpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE0KSwgTWF0aC5hYnMoYjQpKSAmJiBNYXRoLmFicyhhNSAtIGI1KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNSksIE1hdGguYWJzKGI1KSkgJiYgTWF0aC5hYnMoYTYgLSBiNikgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTYpLCBNYXRoLmFicyhiNikpICYmIE1hdGguYWJzKGE3IC0gYjcpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE3KSwgTWF0aC5hYnMoYjcpKSAmJiBNYXRoLmFicyhhOCAtIGI4KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhOCksIE1hdGguYWJzKGI4KSkgJiYgTWF0aC5hYnMoYTkgLSBiOSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTkpLCBNYXRoLmFicyhiOSkpICYmIE1hdGguYWJzKGExMCAtIGIxMCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEwKSwgTWF0aC5hYnMoYjEwKSkgJiYgTWF0aC5hYnMoYTExIC0gYjExKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMTEpLCBNYXRoLmFicyhiMTEpKSAmJiBNYXRoLmFicyhhMTIgLSBiMTIpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExMiksIE1hdGguYWJzKGIxMikpICYmIE1hdGguYWJzKGExMyAtIGIxMykgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEzKSwgTWF0aC5hYnMoYjEzKSkgJiYgTWF0aC5hYnMoYTE0IC0gYjE0KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMTQpLCBNYXRoLmFicyhiMTQpKSAmJiBNYXRoLmFicyhhMTUgLSBiMTUpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExNSksIE1hdGguYWJzKGIxNSkpO1xufVxuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDQubXVsdGlwbHl9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIG11bCA9IG11bHRpcGx5O1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDQuc3VidHJhY3R9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIHN1YiA9IHN1YnRyYWN0OyIsCiAgImltcG9ydCAqIGFzIGdsTWF0cml4IGZyb20gXCIuL2NvbW1vbi5qc1wiO1xuLyoqXG4gKiAzIERpbWVuc2lvbmFsIFZlY3RvclxuICogQG1vZHVsZSB2ZWMzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3LCBlbXB0eSB2ZWMzXG4gKlxuICogQHJldHVybnMge3ZlYzN9IGEgbmV3IDNEIHZlY3RvclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgzKTtcblxuICBpZiAoZ2xNYXRyaXguQVJSQVlfVFlQRSAhPSBGbG9hdDMyQXJyYXkpIHtcbiAgICBvdXRbMF0gPSAwO1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdmVjMyBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIHZlY3RvclxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHZlY3RvciB0byBjbG9uZVxuICogQHJldHVybnMge3ZlYzN9IGEgbmV3IDNEIHZlY3RvclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZShhKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgzKTtcbiAgb3V0WzBdID0gYVswXTtcbiAgb3V0WzFdID0gYVsxXTtcbiAgb3V0WzJdID0gYVsyXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgdmVjM1xuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHZlY3RvciB0byBjYWxjdWxhdGUgbGVuZ3RoIG9mXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBsZW5ndGggb2YgYVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBsZW5ndGgoYSkge1xuICB2YXIgeCA9IGFbMF07XG4gIHZhciB5ID0gYVsxXTtcbiAgdmFyIHogPSBhWzJdO1xuICByZXR1cm4gTWF0aC5oeXBvdCh4LCB5LCB6KTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB2ZWMzIGluaXRpYWxpemVkIHdpdGggdGhlIGdpdmVuIHZhbHVlc1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHogWiBjb21wb25lbnRcbiAqIEByZXR1cm5zIHt2ZWMzfSBhIG5ldyAzRCB2ZWN0b3JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVZhbHVlcyh4LCB5LCB6KSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgzKTtcbiAgb3V0WzBdID0geDtcbiAgb3V0WzFdID0geTtcbiAgb3V0WzJdID0gejtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIHZlYzMgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgc291cmNlIHZlY3RvclxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KG91dCwgYSkge1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzIHRvIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCB4LCB5LCB6KSB7XG4gIG91dFswXSA9IHg7XG4gIG91dFsxXSA9IHk7XG4gIG91dFsyXSA9IHo7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEFkZHMgdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogU3VidHJhY3RzIHZlY3RvciBiIGZyb20gdmVjdG9yIGFcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzdWJ0cmFjdChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAtIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gLSBiWzFdO1xuICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogTXVsdGlwbGllcyB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKiBiWzBdO1xuICBvdXRbMV0gPSBhWzFdICogYlsxXTtcbiAgb3V0WzJdID0gYVsyXSAqIGJbMl07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIERpdmlkZXMgdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRpdmlkZShvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAvIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gLyBiWzFdO1xuICBvdXRbMl0gPSBhWzJdIC8gYlsyXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogTWF0aC5jZWlsIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjM1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB2ZWN0b3IgdG8gY2VpbFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjZWlsKG91dCwgYSkge1xuICBvdXRbMF0gPSBNYXRoLmNlaWwoYVswXSk7XG4gIG91dFsxXSA9IE1hdGguY2VpbChhWzFdKTtcbiAgb3V0WzJdID0gTWF0aC5jZWlsKGFbMl0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBNYXRoLmZsb29yIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjM1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB2ZWN0b3IgdG8gZmxvb3JcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZmxvb3Iob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGguZmxvb3IoYVswXSk7XG4gIG91dFsxXSA9IE1hdGguZmxvb3IoYVsxXSk7XG4gIG91dFsyXSA9IE1hdGguZmxvb3IoYVsyXSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIG1pbmltdW0gb2YgdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG1pbihvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gTWF0aC5taW4oYVswXSwgYlswXSk7XG4gIG91dFsxXSA9IE1hdGgubWluKGFbMV0sIGJbMV0pO1xuICBvdXRbMl0gPSBNYXRoLm1pbihhWzJdLCBiWzJdKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbWF4aW11bSBvZiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbWF4KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBNYXRoLm1heChhWzBdLCBiWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5tYXgoYVsxXSwgYlsxXSk7XG4gIG91dFsyXSA9IE1hdGgubWF4KGFbMl0sIGJbMl0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBNYXRoLnJvdW5kIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjM1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB2ZWN0b3IgdG8gcm91bmRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm91bmQob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGgucm91bmQoYVswXSk7XG4gIG91dFsxXSA9IE1hdGgucm91bmQoYVsxXSk7XG4gIG91dFsyXSA9IE1hdGgucm91bmQoYVsyXSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFNjYWxlcyBhIHZlYzMgYnkgYSBzY2FsYXIgbnVtYmVyXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSB2ZWN0b3IgdG8gc2NhbGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgdmVjdG9yIGJ5XG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdICogYjtcbiAgb3V0WzFdID0gYVsxXSAqIGI7XG4gIG91dFsyXSA9IGFbMl0gKiBiO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBBZGRzIHR3byB2ZWMzJ3MgYWZ0ZXIgc2NhbGluZyB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWVcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYiBieSBiZWZvcmUgYWRkaW5nXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlQW5kQWRkKG91dCwgYSwgYiwgc2NhbGUpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF0gKiBzY2FsZTtcbiAgb3V0WzFdID0gYVsxXSArIGJbMV0gKiBzY2FsZTtcbiAgb3V0WzJdID0gYVsyXSArIGJbMl0gKiBzY2FsZTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkaXN0YW5jZShhLCBiKSB7XG4gIHZhciB4ID0gYlswXSAtIGFbMF07XG4gIHZhciB5ID0gYlsxXSAtIGFbMV07XG4gIHZhciB6ID0gYlsyXSAtIGFbMl07XG4gIHJldHVybiBNYXRoLmh5cG90KHgsIHksIHopO1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmVkRGlzdGFuY2UoYSwgYikge1xuICB2YXIgeCA9IGJbMF0gLSBhWzBdO1xuICB2YXIgeSA9IGJbMV0gLSBhWzFdO1xuICB2YXIgeiA9IGJbMl0gLSBhWzJdO1xuICByZXR1cm4geCAqIHggKyB5ICogeSArIHogKiB6O1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGxlbmd0aCBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIHNxdWFyZWQgbGVuZ3RoIG9mXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGxlbmd0aCBvZiBhXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNxdWFyZWRMZW5ndGgoYSkge1xuICB2YXIgeCA9IGFbMF07XG4gIHZhciB5ID0gYVsxXTtcbiAgdmFyIHogPSBhWzJdO1xuICByZXR1cm4geCAqIHggKyB5ICogeSArIHogKiB6O1xufVxuLyoqXG4gKiBOZWdhdGVzIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjM1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB2ZWN0b3IgdG8gbmVnYXRlXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG5lZ2F0ZShvdXQsIGEpIHtcbiAgb3V0WzBdID0gLWFbMF07XG4gIG91dFsxXSA9IC1hWzFdO1xuICBvdXRbMl0gPSAtYVsyXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgaW52ZXJzZSBvZiB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdmVjdG9yIHRvIGludmVydFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKG91dCwgYSkge1xuICBvdXRbMF0gPSAxLjAgLyBhWzBdO1xuICBvdXRbMV0gPSAxLjAgLyBhWzFdO1xuICBvdXRbMl0gPSAxLjAgLyBhWzJdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBOb3JtYWxpemUgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHZlY3RvciB0byBub3JtYWxpemVcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKG91dCwgYSkge1xuICB2YXIgeCA9IGFbMF07XG4gIHZhciB5ID0gYVsxXTtcbiAgdmFyIHogPSBhWzJdO1xuICB2YXIgbGVuID0geCAqIHggKyB5ICogeSArIHogKiB6O1xuXG4gIGlmIChsZW4gPiAwKSB7XG4gICAgLy9UT0RPOiBldmFsdWF0ZSB1c2Ugb2YgZ2xtX2ludnNxcnQgaGVyZT9cbiAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbik7XG4gIH1cblxuICBvdXRbMF0gPSBhWzBdICogbGVuO1xuICBvdXRbMV0gPSBhWzFdICogbGVuO1xuICBvdXRbMl0gPSBhWzJdICogbGVuO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkb3QoYSwgYikge1xuICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXSArIGFbMl0gKiBiWzJdO1xufVxuLyoqXG4gKiBDb21wdXRlcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3Jvc3Mob3V0LCBhLCBiKSB7XG4gIHZhciBheCA9IGFbMF0sXG4gICAgICBheSA9IGFbMV0sXG4gICAgICBheiA9IGFbMl07XG4gIHZhciBieCA9IGJbMF0sXG4gICAgICBieSA9IGJbMV0sXG4gICAgICBieiA9IGJbMl07XG4gIG91dFswXSA9IGF5ICogYnogLSBheiAqIGJ5O1xuICBvdXRbMV0gPSBheiAqIGJ4IC0gYXggKiBiejtcbiAgb3V0WzJdID0gYXggKiBieSAtIGF5ICogYng7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50LCBpbiB0aGUgcmFuZ2UgWzAtMV0sIGJldHdlZW4gdGhlIHR3byBpbnB1dHNcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbGVycChvdXQsIGEsIGIsIHQpIHtcbiAgdmFyIGF4ID0gYVswXTtcbiAgdmFyIGF5ID0gYVsxXTtcbiAgdmFyIGF6ID0gYVsyXTtcbiAgb3V0WzBdID0gYXggKyB0ICogKGJbMF0gLSBheCk7XG4gIG91dFsxXSA9IGF5ICsgdCAqIChiWzFdIC0gYXkpO1xuICBvdXRbMl0gPSBheiArIHQgKiAoYlsyXSAtIGF6KTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUGVyZm9ybXMgYSBoZXJtaXRlIGludGVycG9sYXRpb24gd2l0aCB0d28gY29udHJvbCBwb2ludHNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGMgdGhlIHRoaXJkIG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBkIHRoZSBmb3VydGggb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQsIGluIHRoZSByYW5nZSBbMC0xXSwgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBoZXJtaXRlKG91dCwgYSwgYiwgYywgZCwgdCkge1xuICB2YXIgZmFjdG9yVGltZXMyID0gdCAqIHQ7XG4gIHZhciBmYWN0b3IxID0gZmFjdG9yVGltZXMyICogKDIgKiB0IC0gMykgKyAxO1xuICB2YXIgZmFjdG9yMiA9IGZhY3RvclRpbWVzMiAqICh0IC0gMikgKyB0O1xuICB2YXIgZmFjdG9yMyA9IGZhY3RvclRpbWVzMiAqICh0IC0gMSk7XG4gIHZhciBmYWN0b3I0ID0gZmFjdG9yVGltZXMyICogKDMgLSAyICogdCk7XG4gIG91dFswXSA9IGFbMF0gKiBmYWN0b3IxICsgYlswXSAqIGZhY3RvcjIgKyBjWzBdICogZmFjdG9yMyArIGRbMF0gKiBmYWN0b3I0O1xuICBvdXRbMV0gPSBhWzFdICogZmFjdG9yMSArIGJbMV0gKiBmYWN0b3IyICsgY1sxXSAqIGZhY3RvcjMgKyBkWzFdICogZmFjdG9yNDtcbiAgb3V0WzJdID0gYVsyXSAqIGZhY3RvcjEgKyBiWzJdICogZmFjdG9yMiArIGNbMl0gKiBmYWN0b3IzICsgZFsyXSAqIGZhY3RvcjQ7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFBlcmZvcm1zIGEgYmV6aWVyIGludGVycG9sYXRpb24gd2l0aCB0d28gY29udHJvbCBwb2ludHNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGMgdGhlIHRoaXJkIG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBkIHRoZSBmb3VydGggb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQsIGluIHRoZSByYW5nZSBbMC0xXSwgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBiZXppZXIob3V0LCBhLCBiLCBjLCBkLCB0KSB7XG4gIHZhciBpbnZlcnNlRmFjdG9yID0gMSAtIHQ7XG4gIHZhciBpbnZlcnNlRmFjdG9yVGltZXNUd28gPSBpbnZlcnNlRmFjdG9yICogaW52ZXJzZUZhY3RvcjtcbiAgdmFyIGZhY3RvclRpbWVzMiA9IHQgKiB0O1xuICB2YXIgZmFjdG9yMSA9IGludmVyc2VGYWN0b3JUaW1lc1R3byAqIGludmVyc2VGYWN0b3I7XG4gIHZhciBmYWN0b3IyID0gMyAqIHQgKiBpbnZlcnNlRmFjdG9yVGltZXNUd287XG4gIHZhciBmYWN0b3IzID0gMyAqIGZhY3RvclRpbWVzMiAqIGludmVyc2VGYWN0b3I7XG4gIHZhciBmYWN0b3I0ID0gZmFjdG9yVGltZXMyICogdDtcbiAgb3V0WzBdID0gYVswXSAqIGZhY3RvcjEgKyBiWzBdICogZmFjdG9yMiArIGNbMF0gKiBmYWN0b3IzICsgZFswXSAqIGZhY3RvcjQ7XG4gIG91dFsxXSA9IGFbMV0gKiBmYWN0b3IxICsgYlsxXSAqIGZhY3RvcjIgKyBjWzFdICogZmFjdG9yMyArIGRbMV0gKiBmYWN0b3I0O1xuICBvdXRbMl0gPSBhWzJdICogZmFjdG9yMSArIGJbMl0gKiBmYWN0b3IyICsgY1syXSAqIGZhY3RvcjMgKyBkWzJdICogZmFjdG9yNDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogR2VuZXJhdGVzIGEgcmFuZG9tIHZlY3RvciB3aXRoIHRoZSBnaXZlbiBzY2FsZVxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlXSBMZW5ndGggb2YgdGhlIHJlc3VsdGluZyB2ZWN0b3IuIElmIG9tbWl0dGVkLCBhIHVuaXQgdmVjdG9yIHdpbGwgYmUgcmV0dXJuZWRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tKG91dCwgc2NhbGUpIHtcbiAgc2NhbGUgPSBzY2FsZSB8fCAxLjA7XG4gIHZhciByID0gZ2xNYXRyaXguUkFORE9NKCkgKiAyLjAgKiBNYXRoLlBJO1xuICB2YXIgeiA9IGdsTWF0cml4LlJBTkRPTSgpICogMi4wIC0gMS4wO1xuICB2YXIgelNjYWxlID0gTWF0aC5zcXJ0KDEuMCAtIHogKiB6KSAqIHNjYWxlO1xuICBvdXRbMF0gPSBNYXRoLmNvcyhyKSAqIHpTY2FsZTtcbiAgb3V0WzFdID0gTWF0aC5zaW4ocikgKiB6U2NhbGU7XG4gIG91dFsyXSA9IHogKiBzY2FsZTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogVHJhbnNmb3JtcyB0aGUgdmVjMyB3aXRoIGEgbWF0NC5cbiAqIDR0aCB2ZWN0b3IgY29tcG9uZW50IGlzIGltcGxpY2l0bHkgJzEnXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gbSBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtTWF0NChvdXQsIGEsIG0pIHtcbiAgdmFyIHggPSBhWzBdLFxuICAgICAgeSA9IGFbMV0sXG4gICAgICB6ID0gYVsyXTtcbiAgdmFyIHcgPSBtWzNdICogeCArIG1bN10gKiB5ICsgbVsxMV0gKiB6ICsgbVsxNV07XG4gIHcgPSB3IHx8IDEuMDtcbiAgb3V0WzBdID0gKG1bMF0gKiB4ICsgbVs0XSAqIHkgKyBtWzhdICogeiArIG1bMTJdKSAvIHc7XG4gIG91dFsxXSA9IChtWzFdICogeCArIG1bNV0gKiB5ICsgbVs5XSAqIHogKyBtWzEzXSkgLyB3O1xuICBvdXRbMl0gPSAobVsyXSAqIHggKyBtWzZdICogeSArIG1bMTBdICogeiArIG1bMTRdKSAvIHc7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzMgd2l0aCBhIG1hdDMuXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gbSB0aGUgM3gzIG1hdHJpeCB0byB0cmFuc2Zvcm0gd2l0aFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQzKG91dCwgYSwgbSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXSxcbiAgICAgIHogPSBhWzJdO1xuICBvdXRbMF0gPSB4ICogbVswXSArIHkgKiBtWzNdICsgeiAqIG1bNl07XG4gIG91dFsxXSA9IHggKiBtWzFdICsgeSAqIG1bNF0gKyB6ICogbVs3XTtcbiAgb3V0WzJdID0geCAqIG1bMl0gKyB5ICogbVs1XSArIHogKiBtWzhdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMzIHdpdGggYSBxdWF0XG4gKiBDYW4gYWxzbyBiZSB1c2VkIGZvciBkdWFsIHF1YXRlcm5pb25zLiAoTXVsdGlwbHkgaXQgd2l0aCB0aGUgcmVhbCBwYXJ0KVxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IHEgcXVhdGVybmlvbiB0byB0cmFuc2Zvcm0gd2l0aFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1RdWF0KG91dCwgYSwgcSkge1xuICAvLyBiZW5jaG1hcmtzOiBodHRwczovL2pzcGVyZi5jb20vcXVhdGVybmlvbi10cmFuc2Zvcm0tdmVjMy1pbXBsZW1lbnRhdGlvbnMtZml4ZWRcbiAgdmFyIHF4ID0gcVswXSxcbiAgICAgIHF5ID0gcVsxXSxcbiAgICAgIHF6ID0gcVsyXSxcbiAgICAgIHF3ID0gcVszXTtcbiAgdmFyIHggPSBhWzBdLFxuICAgICAgeSA9IGFbMV0sXG4gICAgICB6ID0gYVsyXTsgLy8gdmFyIHF2ZWMgPSBbcXgsIHF5LCBxel07XG4gIC8vIHZhciB1diA9IHZlYzMuY3Jvc3MoW10sIHF2ZWMsIGEpO1xuXG4gIHZhciB1dnggPSBxeSAqIHogLSBxeiAqIHksXG4gICAgICB1dnkgPSBxeiAqIHggLSBxeCAqIHosXG4gICAgICB1dnogPSBxeCAqIHkgLSBxeSAqIHg7IC8vIHZhciB1dXYgPSB2ZWMzLmNyb3NzKFtdLCBxdmVjLCB1dik7XG5cbiAgdmFyIHV1dnggPSBxeSAqIHV2eiAtIHF6ICogdXZ5LFxuICAgICAgdXV2eSA9IHF6ICogdXZ4IC0gcXggKiB1dnosXG4gICAgICB1dXZ6ID0gcXggKiB1dnkgLSBxeSAqIHV2eDsgLy8gdmVjMy5zY2FsZSh1diwgdXYsIDIgKiB3KTtcblxuICB2YXIgdzIgPSBxdyAqIDI7XG4gIHV2eCAqPSB3MjtcbiAgdXZ5ICo9IHcyO1xuICB1dnogKj0gdzI7IC8vIHZlYzMuc2NhbGUodXV2LCB1dXYsIDIpO1xuXG4gIHV1dnggKj0gMjtcbiAgdXV2eSAqPSAyO1xuICB1dXZ6ICo9IDI7IC8vIHJldHVybiB2ZWMzLmFkZChvdXQsIGEsIHZlYzMuYWRkKG91dCwgdXYsIHV1dikpO1xuXG4gIG91dFswXSA9IHggKyB1dnggKyB1dXZ4O1xuICBvdXRbMV0gPSB5ICsgdXZ5ICsgdXV2eTtcbiAgb3V0WzJdID0geiArIHV2eiArIHV1dno7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJvdGF0ZSBhIDNEIHZlY3RvciBhcm91bmQgdGhlIHgtYXhpc1xuICogQHBhcmFtIHt2ZWMzfSBvdXQgVGhlIHJlY2VpdmluZyB2ZWMzXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSBUaGUgdmVjMyBwb2ludCB0byByb3RhdGVcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIFRoZSBvcmlnaW4gb2YgdGhlIHJvdGF0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIFRoZSBhbmdsZSBvZiByb3RhdGlvbiBpbiByYWRpYW5zXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVgob3V0LCBhLCBiLCByYWQpIHtcbiAgdmFyIHAgPSBbXSxcbiAgICAgIHIgPSBbXTsgLy9UcmFuc2xhdGUgcG9pbnQgdG8gdGhlIG9yaWdpblxuXG4gIHBbMF0gPSBhWzBdIC0gYlswXTtcbiAgcFsxXSA9IGFbMV0gLSBiWzFdO1xuICBwWzJdID0gYVsyXSAtIGJbMl07IC8vcGVyZm9ybSByb3RhdGlvblxuXG4gIHJbMF0gPSBwWzBdO1xuICByWzFdID0gcFsxXSAqIE1hdGguY29zKHJhZCkgLSBwWzJdICogTWF0aC5zaW4ocmFkKTtcbiAgclsyXSA9IHBbMV0gKiBNYXRoLnNpbihyYWQpICsgcFsyXSAqIE1hdGguY29zKHJhZCk7IC8vdHJhbnNsYXRlIHRvIGNvcnJlY3QgcG9zaXRpb25cblxuICBvdXRbMF0gPSByWzBdICsgYlswXTtcbiAgb3V0WzFdID0gclsxXSArIGJbMV07XG4gIG91dFsyXSA9IHJbMl0gKyBiWzJdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSb3RhdGUgYSAzRCB2ZWN0b3IgYXJvdW5kIHRoZSB5LWF4aXNcbiAqIEBwYXJhbSB7dmVjM30gb3V0IFRoZSByZWNlaXZpbmcgdmVjM1xuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgVGhlIHZlYzMgcG9pbnQgdG8gcm90YXRlXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiBUaGUgb3JpZ2luIG9mIHRoZSByb3RhdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCBUaGUgYW5nbGUgb2Ygcm90YXRpb24gaW4gcmFkaWFuc1xuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVZKG91dCwgYSwgYiwgcmFkKSB7XG4gIHZhciBwID0gW10sXG4gICAgICByID0gW107IC8vVHJhbnNsYXRlIHBvaW50IHRvIHRoZSBvcmlnaW5cblxuICBwWzBdID0gYVswXSAtIGJbMF07XG4gIHBbMV0gPSBhWzFdIC0gYlsxXTtcbiAgcFsyXSA9IGFbMl0gLSBiWzJdOyAvL3BlcmZvcm0gcm90YXRpb25cblxuICByWzBdID0gcFsyXSAqIE1hdGguc2luKHJhZCkgKyBwWzBdICogTWF0aC5jb3MocmFkKTtcbiAgclsxXSA9IHBbMV07XG4gIHJbMl0gPSBwWzJdICogTWF0aC5jb3MocmFkKSAtIHBbMF0gKiBNYXRoLnNpbihyYWQpOyAvL3RyYW5zbGF0ZSB0byBjb3JyZWN0IHBvc2l0aW9uXG5cbiAgb3V0WzBdID0gclswXSArIGJbMF07XG4gIG91dFsxXSA9IHJbMV0gKyBiWzFdO1xuICBvdXRbMl0gPSByWzJdICsgYlsyXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUm90YXRlIGEgM0QgdmVjdG9yIGFyb3VuZCB0aGUgei1heGlzXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCBUaGUgcmVjZWl2aW5nIHZlYzNcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIFRoZSB2ZWMzIHBvaW50IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgVGhlIG9yaWdpbiBvZiB0aGUgcm90YXRpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgVGhlIGFuZ2xlIG9mIHJvdGF0aW9uIGluIHJhZGlhbnNcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWihvdXQsIGEsIGIsIHJhZCkge1xuICB2YXIgcCA9IFtdLFxuICAgICAgciA9IFtdOyAvL1RyYW5zbGF0ZSBwb2ludCB0byB0aGUgb3JpZ2luXG5cbiAgcFswXSA9IGFbMF0gLSBiWzBdO1xuICBwWzFdID0gYVsxXSAtIGJbMV07XG4gIHBbMl0gPSBhWzJdIC0gYlsyXTsgLy9wZXJmb3JtIHJvdGF0aW9uXG5cbiAgclswXSA9IHBbMF0gKiBNYXRoLmNvcyhyYWQpIC0gcFsxXSAqIE1hdGguc2luKHJhZCk7XG4gIHJbMV0gPSBwWzBdICogTWF0aC5zaW4ocmFkKSArIHBbMV0gKiBNYXRoLmNvcyhyYWQpO1xuICByWzJdID0gcFsyXTsgLy90cmFuc2xhdGUgdG8gY29ycmVjdCBwb3NpdGlvblxuXG4gIG91dFswXSA9IHJbMF0gKyBiWzBdO1xuICBvdXRbMV0gPSByWzFdICsgYlsxXTtcbiAgb3V0WzJdID0gclsyXSArIGJbMl07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEdldCB0aGUgYW5nbGUgYmV0d2VlbiB0d28gM0QgdmVjdG9yc1xuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgVGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIFRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gVGhlIGFuZ2xlIGluIHJhZGlhbnNcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYW5nbGUoYSwgYikge1xuICB2YXIgYXggPSBhWzBdLFxuICAgICAgYXkgPSBhWzFdLFxuICAgICAgYXogPSBhWzJdLFxuICAgICAgYnggPSBiWzBdLFxuICAgICAgYnkgPSBiWzFdLFxuICAgICAgYnogPSBiWzJdLFxuICAgICAgbWFnMSA9IE1hdGguc3FydChheCAqIGF4ICsgYXkgKiBheSArIGF6ICogYXopLFxuICAgICAgbWFnMiA9IE1hdGguc3FydChieCAqIGJ4ICsgYnkgKiBieSArIGJ6ICogYnopLFxuICAgICAgbWFnID0gbWFnMSAqIG1hZzIsXG4gICAgICBjb3NpbmUgPSBtYWcgJiYgZG90KGEsIGIpIC8gbWFnO1xuICByZXR1cm4gTWF0aC5hY29zKE1hdGgubWluKE1hdGgubWF4KGNvc2luZSwgLTEpLCAxKSk7XG59XG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzMgdG8gemVyb1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHplcm8ob3V0KSB7XG4gIG91dFswXSA9IDAuMDtcbiAgb3V0WzFdID0gMC4wO1xuICBvdXRbMl0gPSAwLjA7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSB2ZWN0b3JcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB2ZWN0b3IgdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZlY3RvclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzdHIoYSkge1xuICByZXR1cm4gXCJ2ZWMzKFwiICsgYVswXSArIFwiLCBcIiArIGFbMV0gKyBcIiwgXCIgKyBhWzJdICsgXCIpXCI7XG59XG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHZlY3RvcnMgaGF2ZSBleGFjdGx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIFRoZSBmaXJzdCB2ZWN0b3IuXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiBUaGUgc2Vjb25kIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBleGFjdEVxdWFscyhhLCBiKSB7XG4gIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXTtcbn1cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgdmVjdG9ycyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24uXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgVGhlIGZpcnN0IHZlY3Rvci5cbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIFRoZSBzZWNvbmQgdmVjdG9yLlxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIHZlY3RvcnMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XG4gIHZhciBhMCA9IGFbMF0sXG4gICAgICBhMSA9IGFbMV0sXG4gICAgICBhMiA9IGFbMl07XG4gIHZhciBiMCA9IGJbMF0sXG4gICAgICBiMSA9IGJbMV0sXG4gICAgICBiMiA9IGJbMl07XG4gIHJldHVybiBNYXRoLmFicyhhMCAtIGIwKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMCksIE1hdGguYWJzKGIwKSkgJiYgTWF0aC5hYnMoYTEgLSBiMSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEpLCBNYXRoLmFicyhiMSkpICYmIE1hdGguYWJzKGEyIC0gYjIpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEyKSwgTWF0aC5hYnMoYjIpKTtcbn1cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLnN1YnRyYWN0fVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBzdWIgPSBzdWJ0cmFjdDtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLm11bHRpcGx5fVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBtdWwgPSBtdWx0aXBseTtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLmRpdmlkZX1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgZGl2ID0gZGl2aWRlO1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzMuZGlzdGFuY2V9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIGRpc3QgPSBkaXN0YW5jZTtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLnNxdWFyZWREaXN0YW5jZX1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgc3FyRGlzdCA9IHNxdWFyZWREaXN0YW5jZTtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLmxlbmd0aH1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgbGVuID0gbGVuZ3RoO1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzMuc3F1YXJlZExlbmd0aH1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgc3FyTGVuID0gc3F1YXJlZExlbmd0aDtcbi8qKlxuICogUGVyZm9ybSBzb21lIG9wZXJhdGlvbiBvdmVyIGFuIGFycmF5IG9mIHZlYzNzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGEgdGhlIGFycmF5IG9mIHZlY3RvcnMgdG8gaXRlcmF0ZSBvdmVyXG4gKiBAcGFyYW0ge051bWJlcn0gc3RyaWRlIE51bWJlciBvZiBlbGVtZW50cyBiZXR3ZWVuIHRoZSBzdGFydCBvZiBlYWNoIHZlYzMuIElmIDAgYXNzdW1lcyB0aWdodGx5IHBhY2tlZFxuICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldCBOdW1iZXIgb2YgZWxlbWVudHMgdG8gc2tpcCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBhcnJheVxuICogQHBhcmFtIHtOdW1iZXJ9IGNvdW50IE51bWJlciBvZiB2ZWMzcyB0byBpdGVyYXRlIG92ZXIuIElmIDAgaXRlcmF0ZXMgb3ZlciBlbnRpcmUgYXJyYXlcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIEZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggdmVjdG9yIGluIHRoZSBhcnJheVxuICogQHBhcmFtIHtPYmplY3R9IFthcmddIGFkZGl0aW9uYWwgYXJndW1lbnQgdG8gcGFzcyB0byBmblxuICogQHJldHVybnMge0FycmF5fSBhXG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIGZvckVhY2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB2ZWMgPSBjcmVhdGUoKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhLCBzdHJpZGUsIG9mZnNldCwgY291bnQsIGZuLCBhcmcpIHtcbiAgICB2YXIgaSwgbDtcblxuICAgIGlmICghc3RyaWRlKSB7XG4gICAgICBzdHJpZGUgPSAzO1xuICAgIH1cblxuICAgIGlmICghb2Zmc2V0KSB7XG4gICAgICBvZmZzZXQgPSAwO1xuICAgIH1cblxuICAgIGlmIChjb3VudCkge1xuICAgICAgbCA9IE1hdGgubWluKGNvdW50ICogc3RyaWRlICsgb2Zmc2V0LCBhLmxlbmd0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGwgPSBhLmxlbmd0aDtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSBvZmZzZXQ7IGkgPCBsOyBpICs9IHN0cmlkZSkge1xuICAgICAgdmVjWzBdID0gYVtpXTtcbiAgICAgIHZlY1sxXSA9IGFbaSArIDFdO1xuICAgICAgdmVjWzJdID0gYVtpICsgMl07XG4gICAgICBmbih2ZWMsIHZlYywgYXJnKTtcbiAgICAgIGFbaV0gPSB2ZWNbMF07XG4gICAgICBhW2kgKyAxXSA9IHZlY1sxXTtcbiAgICAgIGFbaSArIDJdID0gdmVjWzJdO1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9O1xufSgpOyIsCiAgImltcG9ydCAqIGFzIGdsTWF0cml4IGZyb20gXCIuL2NvbW1vbi5qc1wiO1xuLyoqXG4gKiA0IERpbWVuc2lvbmFsIFZlY3RvclxuICogQG1vZHVsZSB2ZWM0XG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3LCBlbXB0eSB2ZWM0XG4gKlxuICogQHJldHVybnMge3ZlYzR9IGEgbmV3IDREIHZlY3RvclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg0KTtcblxuICBpZiAoZ2xNYXRyaXguQVJSQVlfVFlQRSAhPSBGbG9hdDMyQXJyYXkpIHtcbiAgICBvdXRbMF0gPSAwO1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICBvdXRbM10gPSAwO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB2ZWM0IGluaXRpYWxpemVkIHdpdGggdmFsdWVzIGZyb20gYW4gZXhpc3RpbmcgdmVjdG9yXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdmVjdG9yIHRvIGNsb25lXG4gKiBAcmV0dXJucyB7dmVjNH0gYSBuZXcgNEQgdmVjdG9yXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lKGEpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDQpO1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICBvdXRbM10gPSBhWzNdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHZlYzQgaW5pdGlhbGl6ZWQgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHcgVyBjb21wb25lbnRcbiAqIEByZXR1cm5zIHt2ZWM0fSBhIG5ldyA0RCB2ZWN0b3JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVZhbHVlcyh4LCB5LCB6LCB3KSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg0KTtcbiAgb3V0WzBdID0geDtcbiAgb3V0WzFdID0geTtcbiAgb3V0WzJdID0gejtcbiAgb3V0WzNdID0gdztcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIHZlYzQgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB0aGUgc291cmNlIHZlY3RvclxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KG91dCwgYSkge1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICBvdXRbM10gPSBhWzNdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWM0IHRvIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxuICogQHBhcmFtIHtOdW1iZXJ9IHcgVyBjb21wb25lbnRcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgeCwgeSwgeiwgdykge1xuICBvdXRbMF0gPSB4O1xuICBvdXRbMV0gPSB5O1xuICBvdXRbMl0gPSB6O1xuICBvdXRbM10gPSB3O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBBZGRzIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdO1xuICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcbiAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gIG91dFszXSA9IGFbM10gKyBiWzNdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTdWJ0cmFjdHMgdmVjdG9yIGIgZnJvbSB2ZWN0b3IgYVxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgb3V0WzFdID0gYVsxXSAtIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xuICBvdXRbM10gPSBhWzNdIC0gYlszXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogTXVsdGlwbGllcyB0d28gdmVjNCdzXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKiBiWzBdO1xuICBvdXRbMV0gPSBhWzFdICogYlsxXTtcbiAgb3V0WzJdID0gYVsyXSAqIGJbMl07XG4gIG91dFszXSA9IGFbM10gKiBiWzNdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBEaXZpZGVzIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkaXZpZGUob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gLyBiWzBdO1xuICBvdXRbMV0gPSBhWzFdIC8gYlsxXTtcbiAgb3V0WzJdID0gYVsyXSAvIGJbMl07XG4gIG91dFszXSA9IGFbM10gLyBiWzNdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBNYXRoLmNlaWwgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWM0XG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHZlY3RvciB0byBjZWlsXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNlaWwob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGguY2VpbChhWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5jZWlsKGFbMV0pO1xuICBvdXRbMl0gPSBNYXRoLmNlaWwoYVsyXSk7XG4gIG91dFszXSA9IE1hdGguY2VpbChhWzNdKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogTWF0aC5mbG9vciB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzRcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdmVjdG9yIHRvIGZsb29yXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZsb29yKG91dCwgYSkge1xuICBvdXRbMF0gPSBNYXRoLmZsb29yKGFbMF0pO1xuICBvdXRbMV0gPSBNYXRoLmZsb29yKGFbMV0pO1xuICBvdXRbMl0gPSBNYXRoLmZsb29yKGFbMl0pO1xuICBvdXRbM10gPSBNYXRoLmZsb29yKGFbM10pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtaW5pbXVtIG9mIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtaW4ob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IE1hdGgubWluKGFbMF0sIGJbMF0pO1xuICBvdXRbMV0gPSBNYXRoLm1pbihhWzFdLCBiWzFdKTtcbiAgb3V0WzJdID0gTWF0aC5taW4oYVsyXSwgYlsyXSk7XG4gIG91dFszXSA9IE1hdGgubWluKGFbM10sIGJbM10pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtYXhpbXVtIG9mIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtYXgob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IE1hdGgubWF4KGFbMF0sIGJbMF0pO1xuICBvdXRbMV0gPSBNYXRoLm1heChhWzFdLCBiWzFdKTtcbiAgb3V0WzJdID0gTWF0aC5tYXgoYVsyXSwgYlsyXSk7XG4gIG91dFszXSA9IE1hdGgubWF4KGFbM10sIGJbM10pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBNYXRoLnJvdW5kIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjNFxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB2ZWN0b3IgdG8gcm91bmRcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm91bmQob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGgucm91bmQoYVswXSk7XG4gIG91dFsxXSA9IE1hdGgucm91bmQoYVsxXSk7XG4gIG91dFsyXSA9IE1hdGgucm91bmQoYVsyXSk7XG4gIG91dFszXSA9IE1hdGgucm91bmQoYVszXSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFNjYWxlcyBhIHZlYzQgYnkgYSBzY2FsYXIgbnVtYmVyXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHRoZSB2ZWN0b3IgdG8gc2NhbGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgdmVjdG9yIGJ5XG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdICogYjtcbiAgb3V0WzFdID0gYVsxXSAqIGI7XG4gIG91dFsyXSA9IGFbMl0gKiBiO1xuICBvdXRbM10gPSBhWzNdICogYjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQWRkcyB0d28gdmVjNCdzIGFmdGVyIHNjYWxpbmcgdGhlIHNlY29uZCBvcGVyYW5kIGJ5IGEgc2NhbGFyIHZhbHVlXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSB0aGUgYW1vdW50IHRvIHNjYWxlIGIgYnkgYmVmb3JlIGFkZGluZ1xuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZUFuZEFkZChvdXQsIGEsIGIsIHNjYWxlKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdICogc2NhbGU7XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdICogc2NhbGU7XG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdICogc2NhbGU7XG4gIG91dFszXSA9IGFbM10gKyBiWzNdICogc2NhbGU7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWM0J3NcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGlzdGFuY2UoYSwgYikge1xuICB2YXIgeCA9IGJbMF0gLSBhWzBdO1xuICB2YXIgeSA9IGJbMV0gLSBhWzFdO1xuICB2YXIgeiA9IGJbMl0gLSBhWzJdO1xuICB2YXIgdyA9IGJbM10gLSBhWzNdO1xuICByZXR1cm4gTWF0aC5oeXBvdCh4LCB5LCB6LCB3KTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBldWNsaWRpYW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gdmVjNCdzXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJlZERpc3RhbmNlKGEsIGIpIHtcbiAgdmFyIHggPSBiWzBdIC0gYVswXTtcbiAgdmFyIHkgPSBiWzFdIC0gYVsxXTtcbiAgdmFyIHogPSBiWzJdIC0gYVsyXTtcbiAgdmFyIHcgPSBiWzNdIC0gYVszXTtcbiAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3O1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgYSB2ZWM0XG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGxlbmd0aCBvZiBhXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxlbmd0aChhKSB7XG4gIHZhciB4ID0gYVswXTtcbiAgdmFyIHkgPSBhWzFdO1xuICB2YXIgeiA9IGFbMl07XG4gIHZhciB3ID0gYVszXTtcbiAgcmV0dXJuIE1hdGguaHlwb3QoeCwgeSwgeiwgdyk7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgbGVuZ3RoIG9mIGEgdmVjNFxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHZlY3RvciB0byBjYWxjdWxhdGUgc3F1YXJlZCBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgbGVuZ3RoIG9mIGFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJlZExlbmd0aChhKSB7XG4gIHZhciB4ID0gYVswXTtcbiAgdmFyIHkgPSBhWzFdO1xuICB2YXIgeiA9IGFbMl07XG4gIHZhciB3ID0gYVszXTtcbiAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3O1xufVxuLyoqXG4gKiBOZWdhdGVzIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjNFxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB2ZWN0b3IgdG8gbmVnYXRlXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG5lZ2F0ZShvdXQsIGEpIHtcbiAgb3V0WzBdID0gLWFbMF07XG4gIG91dFsxXSA9IC1hWzFdO1xuICBvdXRbMl0gPSAtYVsyXTtcbiAgb3V0WzNdID0gLWFbM107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGludmVyc2Ugb2YgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWM0XG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHZlY3RvciB0byBpbnZlcnRcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZShvdXQsIGEpIHtcbiAgb3V0WzBdID0gMS4wIC8gYVswXTtcbiAgb3V0WzFdID0gMS4wIC8gYVsxXTtcbiAgb3V0WzJdID0gMS4wIC8gYVsyXTtcbiAgb3V0WzNdID0gMS4wIC8gYVszXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogTm9ybWFsaXplIGEgdmVjNFxuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB2ZWN0b3IgdG8gbm9ybWFsaXplXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZShvdXQsIGEpIHtcbiAgdmFyIHggPSBhWzBdO1xuICB2YXIgeSA9IGFbMV07XG4gIHZhciB6ID0gYVsyXTtcbiAgdmFyIHcgPSBhWzNdO1xuICB2YXIgbGVuID0geCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHc7XG5cbiAgaWYgKGxlbiA+IDApIHtcbiAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbik7XG4gIH1cblxuICBvdXRbMF0gPSB4ICogbGVuO1xuICBvdXRbMV0gPSB5ICogbGVuO1xuICBvdXRbMl0gPSB6ICogbGVuO1xuICBvdXRbM10gPSB3ICogbGVuO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0d28gdmVjNCdzXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkb3QoYSwgYikge1xuICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXSArIGFbMl0gKiBiWzJdICsgYVszXSAqIGJbM107XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGNyb3NzLXByb2R1Y3Qgb2YgdGhyZWUgdmVjdG9ycyBpbiBhIDQtZGltZW5zaW9uYWwgc3BhY2VcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gcmVzdWx0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gVSB0aGUgZmlyc3QgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gViB0aGUgc2Vjb25kIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IFcgdGhlIHRoaXJkIHZlY3RvclxuICogQHJldHVybnMge3ZlYzR9IHJlc3VsdFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcm9zcyhvdXQsIHUsIHYsIHcpIHtcbiAgdmFyIEEgPSB2WzBdICogd1sxXSAtIHZbMV0gKiB3WzBdLFxuICAgICAgQiA9IHZbMF0gKiB3WzJdIC0gdlsyXSAqIHdbMF0sXG4gICAgICBDID0gdlswXSAqIHdbM10gLSB2WzNdICogd1swXSxcbiAgICAgIEQgPSB2WzFdICogd1syXSAtIHZbMl0gKiB3WzFdLFxuICAgICAgRSA9IHZbMV0gKiB3WzNdIC0gdlszXSAqIHdbMV0sXG4gICAgICBGID0gdlsyXSAqIHdbM10gLSB2WzNdICogd1syXTtcbiAgdmFyIEcgPSB1WzBdO1xuICB2YXIgSCA9IHVbMV07XG4gIHZhciBJID0gdVsyXTtcbiAgdmFyIEogPSB1WzNdO1xuICBvdXRbMF0gPSBIICogRiAtIEkgKiBFICsgSiAqIEQ7XG4gIG91dFsxXSA9IC0oRyAqIEYpICsgSSAqIEMgLSBKICogQjtcbiAgb3V0WzJdID0gRyAqIEUgLSBIICogQyArIEogKiBBO1xuICBvdXRbM10gPSAtKEcgKiBEKSArIEggKiBCIC0gSSAqIEE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gdmVjNCdzXG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50LCBpbiB0aGUgcmFuZ2UgWzAtMV0sIGJldHdlZW4gdGhlIHR3byBpbnB1dHNcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbGVycChvdXQsIGEsIGIsIHQpIHtcbiAgdmFyIGF4ID0gYVswXTtcbiAgdmFyIGF5ID0gYVsxXTtcbiAgdmFyIGF6ID0gYVsyXTtcbiAgdmFyIGF3ID0gYVszXTtcbiAgb3V0WzBdID0gYXggKyB0ICogKGJbMF0gLSBheCk7XG4gIG91dFsxXSA9IGF5ICsgdCAqIChiWzFdIC0gYXkpO1xuICBvdXRbMl0gPSBheiArIHQgKiAoYlsyXSAtIGF6KTtcbiAgb3V0WzNdID0gYXcgKyB0ICogKGJbM10gLSBhdyk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEdlbmVyYXRlcyBhIHJhbmRvbSB2ZWN0b3Igd2l0aCB0aGUgZ2l2ZW4gc2NhbGVcbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtOdW1iZXJ9IFtzY2FsZV0gTGVuZ3RoIG9mIHRoZSByZXN1bHRpbmcgdmVjdG9yLiBJZiBvbW1pdHRlZCwgYSB1bml0IHZlY3RvciB3aWxsIGJlIHJldHVybmVkXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbShvdXQsIHNjYWxlKSB7XG4gIHNjYWxlID0gc2NhbGUgfHwgMS4wOyAvLyBNYXJzYWdsaWEsIEdlb3JnZS4gQ2hvb3NpbmcgYSBQb2ludCBmcm9tIHRoZSBTdXJmYWNlIG9mIGFcbiAgLy8gU3BoZXJlLiBBbm4uIE1hdGguIFN0YXRpc3QuIDQzICgxOTcyKSwgbm8uIDIsIDY0NS0tNjQ2LlxuICAvLyBodHRwOi8vcHJvamVjdGV1Y2xpZC5vcmcvZXVjbGlkLmFvbXMvMTE3NzY5MjY0NDtcblxuICB2YXIgdjEsIHYyLCB2MywgdjQ7XG4gIHZhciBzMSwgczI7XG5cbiAgZG8ge1xuICAgIHYxID0gZ2xNYXRyaXguUkFORE9NKCkgKiAyIC0gMTtcbiAgICB2MiA9IGdsTWF0cml4LlJBTkRPTSgpICogMiAtIDE7XG4gICAgczEgPSB2MSAqIHYxICsgdjIgKiB2MjtcbiAgfSB3aGlsZSAoczEgPj0gMSk7XG5cbiAgZG8ge1xuICAgIHYzID0gZ2xNYXRyaXguUkFORE9NKCkgKiAyIC0gMTtcbiAgICB2NCA9IGdsTWF0cml4LlJBTkRPTSgpICogMiAtIDE7XG4gICAgczIgPSB2MyAqIHYzICsgdjQgKiB2NDtcbiAgfSB3aGlsZSAoczIgPj0gMSk7XG5cbiAgdmFyIGQgPSBNYXRoLnNxcnQoKDEgLSBzMSkgLyBzMik7XG4gIG91dFswXSA9IHNjYWxlICogdjE7XG4gIG91dFsxXSA9IHNjYWxlICogdjI7XG4gIG91dFsyXSA9IHNjYWxlICogdjMgKiBkO1xuICBvdXRbM10gPSBzY2FsZSAqIHY0ICogZDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogVHJhbnNmb3JtcyB0aGUgdmVjNCB3aXRoIGEgbWF0NC5cbiAqXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBtIG1hdHJpeCB0byB0cmFuc2Zvcm0gd2l0aFxuICogQHJldHVybnMge3ZlYzR9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQ0KG91dCwgYSwgbSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXSxcbiAgICAgIHogPSBhWzJdLFxuICAgICAgdyA9IGFbM107XG4gIG91dFswXSA9IG1bMF0gKiB4ICsgbVs0XSAqIHkgKyBtWzhdICogeiArIG1bMTJdICogdztcbiAgb3V0WzFdID0gbVsxXSAqIHggKyBtWzVdICogeSArIG1bOV0gKiB6ICsgbVsxM10gKiB3O1xuICBvdXRbMl0gPSBtWzJdICogeCArIG1bNl0gKiB5ICsgbVsxMF0gKiB6ICsgbVsxNF0gKiB3O1xuICBvdXRbM10gPSBtWzNdICogeCArIG1bN10gKiB5ICsgbVsxMV0gKiB6ICsgbVsxNV0gKiB3O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWM0IHdpdGggYSBxdWF0XG4gKlxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gcSBxdWF0ZXJuaW9uIHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybVF1YXQob3V0LCBhLCBxKSB7XG4gIHZhciB4ID0gYVswXSxcbiAgICAgIHkgPSBhWzFdLFxuICAgICAgeiA9IGFbMl07XG4gIHZhciBxeCA9IHFbMF0sXG4gICAgICBxeSA9IHFbMV0sXG4gICAgICBxeiA9IHFbMl0sXG4gICAgICBxdyA9IHFbM107IC8vIGNhbGN1bGF0ZSBxdWF0ICogdmVjXG5cbiAgdmFyIGl4ID0gcXcgKiB4ICsgcXkgKiB6IC0gcXogKiB5O1xuICB2YXIgaXkgPSBxdyAqIHkgKyBxeiAqIHggLSBxeCAqIHo7XG4gIHZhciBpeiA9IHF3ICogeiArIHF4ICogeSAtIHF5ICogeDtcbiAgdmFyIGl3ID0gLXF4ICogeCAtIHF5ICogeSAtIHF6ICogejsgLy8gY2FsY3VsYXRlIHJlc3VsdCAqIGludmVyc2UgcXVhdFxuXG4gIG91dFswXSA9IGl4ICogcXcgKyBpdyAqIC1xeCArIGl5ICogLXF6IC0gaXogKiAtcXk7XG4gIG91dFsxXSA9IGl5ICogcXcgKyBpdyAqIC1xeSArIGl6ICogLXF4IC0gaXggKiAtcXo7XG4gIG91dFsyXSA9IGl6ICogcXcgKyBpdyAqIC1xeiArIGl4ICogLXF5IC0gaXkgKiAtcXg7XG4gIG91dFszXSA9IGFbM107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzQgdG8gemVyb1xuICpcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHplcm8ob3V0KSB7XG4gIG91dFswXSA9IDAuMDtcbiAgb3V0WzFdID0gMC4wO1xuICBvdXRbMl0gPSAwLjA7XG4gIG91dFszXSA9IDAuMDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHZlY3RvclxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHZlY3RvciB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdmVjdG9yXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cihhKSB7XG4gIHJldHVybiBcInZlYzQoXCIgKyBhWzBdICsgXCIsIFwiICsgYVsxXSArIFwiLCBcIiArIGFbMl0gKyBcIiwgXCIgKyBhWzNdICsgXCIpXCI7XG59XG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHZlY3RvcnMgaGF2ZSBleGFjdGx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIFRoZSBmaXJzdCB2ZWN0b3IuXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBleGFjdEVxdWFscyhhLCBiKSB7XG4gIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXSAmJiBhWzNdID09PSBiWzNdO1xufVxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB2ZWN0b3JzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSBUaGUgZmlyc3QgdmVjdG9yLlxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGIgVGhlIHNlY29uZCB2ZWN0b3IuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcbiAgdmFyIGEwID0gYVswXSxcbiAgICAgIGExID0gYVsxXSxcbiAgICAgIGEyID0gYVsyXSxcbiAgICAgIGEzID0gYVszXTtcbiAgdmFyIGIwID0gYlswXSxcbiAgICAgIGIxID0gYlsxXSxcbiAgICAgIGIyID0gYlsyXSxcbiAgICAgIGIzID0gYlszXTtcbiAgcmV0dXJuIE1hdGguYWJzKGEwIC0gYjApIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEwKSwgTWF0aC5hYnMoYjApKSAmJiBNYXRoLmFicyhhMSAtIGIxKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMSksIE1hdGguYWJzKGIxKSkgJiYgTWF0aC5hYnMoYTIgLSBiMikgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTIpLCBNYXRoLmFicyhiMikpICYmIE1hdGguYWJzKGEzIC0gYjMpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEzKSwgTWF0aC5hYnMoYjMpKTtcbn1cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWM0LnN1YnRyYWN0fVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBzdWIgPSBzdWJ0cmFjdDtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWM0Lm11bHRpcGx5fVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBtdWwgPSBtdWx0aXBseTtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWM0LmRpdmlkZX1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgZGl2ID0gZGl2aWRlO1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQuZGlzdGFuY2V9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIGRpc3QgPSBkaXN0YW5jZTtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWM0LnNxdWFyZWREaXN0YW5jZX1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgc3FyRGlzdCA9IHNxdWFyZWREaXN0YW5jZTtcbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWM0Lmxlbmd0aH1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgbGVuID0gbGVuZ3RoO1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQuc3F1YXJlZExlbmd0aH1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgc3FyTGVuID0gc3F1YXJlZExlbmd0aDtcbi8qKlxuICogUGVyZm9ybSBzb21lIG9wZXJhdGlvbiBvdmVyIGFuIGFycmF5IG9mIHZlYzRzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGEgdGhlIGFycmF5IG9mIHZlY3RvcnMgdG8gaXRlcmF0ZSBvdmVyXG4gKiBAcGFyYW0ge051bWJlcn0gc3RyaWRlIE51bWJlciBvZiBlbGVtZW50cyBiZXR3ZWVuIHRoZSBzdGFydCBvZiBlYWNoIHZlYzQuIElmIDAgYXNzdW1lcyB0aWdodGx5IHBhY2tlZFxuICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldCBOdW1iZXIgb2YgZWxlbWVudHMgdG8gc2tpcCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBhcnJheVxuICogQHBhcmFtIHtOdW1iZXJ9IGNvdW50IE51bWJlciBvZiB2ZWM0cyB0byBpdGVyYXRlIG92ZXIuIElmIDAgaXRlcmF0ZXMgb3ZlciBlbnRpcmUgYXJyYXlcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIEZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggdmVjdG9yIGluIHRoZSBhcnJheVxuICogQHBhcmFtIHtPYmplY3R9IFthcmddIGFkZGl0aW9uYWwgYXJndW1lbnQgdG8gcGFzcyB0byBmblxuICogQHJldHVybnMge0FycmF5fSBhXG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIGZvckVhY2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB2ZWMgPSBjcmVhdGUoKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhLCBzdHJpZGUsIG9mZnNldCwgY291bnQsIGZuLCBhcmcpIHtcbiAgICB2YXIgaSwgbDtcblxuICAgIGlmICghc3RyaWRlKSB7XG4gICAgICBzdHJpZGUgPSA0O1xuICAgIH1cblxuICAgIGlmICghb2Zmc2V0KSB7XG4gICAgICBvZmZzZXQgPSAwO1xuICAgIH1cblxuICAgIGlmIChjb3VudCkge1xuICAgICAgbCA9IE1hdGgubWluKGNvdW50ICogc3RyaWRlICsgb2Zmc2V0LCBhLmxlbmd0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGwgPSBhLmxlbmd0aDtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSBvZmZzZXQ7IGkgPCBsOyBpICs9IHN0cmlkZSkge1xuICAgICAgdmVjWzBdID0gYVtpXTtcbiAgICAgIHZlY1sxXSA9IGFbaSArIDFdO1xuICAgICAgdmVjWzJdID0gYVtpICsgMl07XG4gICAgICB2ZWNbM10gPSBhW2kgKyAzXTtcbiAgICAgIGZuKHZlYywgdmVjLCBhcmcpO1xuICAgICAgYVtpXSA9IHZlY1swXTtcbiAgICAgIGFbaSArIDFdID0gdmVjWzFdO1xuICAgICAgYVtpICsgMl0gPSB2ZWNbMl07XG4gICAgICBhW2kgKyAzXSA9IHZlY1szXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfTtcbn0oKTsiLAogICJpbXBvcnQgKiBhcyBnbE1hdHJpeCBmcm9tIFwiLi9jb21tb24uanNcIjtcbi8qKlxuICogMiBEaW1lbnNpb25hbCBWZWN0b3JcbiAqIEBtb2R1bGUgdmVjMlxuICovXG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldywgZW1wdHkgdmVjMlxuICpcbiAqIEByZXR1cm5zIHt2ZWMyfSBhIG5ldyAyRCB2ZWN0b3JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMik7XG5cbiAgaWYgKGdsTWF0cml4LkFSUkFZX1RZUEUgIT0gRmxvYXQzMkFycmF5KSB7XG4gICAgb3V0WzBdID0gMDtcbiAgICBvdXRbMV0gPSAwO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB2ZWMyIGluaXRpYWxpemVkIHdpdGggdmFsdWVzIGZyb20gYW4gZXhpc3RpbmcgdmVjdG9yXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdmVjdG9yIHRvIGNsb25lXG4gKiBAcmV0dXJucyB7dmVjMn0gYSBuZXcgMkQgdmVjdG9yXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lKGEpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDIpO1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHZlYzIgaW5pdGlhbGl6ZWQgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XG4gKiBAcmV0dXJucyB7dmVjMn0gYSBuZXcgMkQgdmVjdG9yXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZXMoeCwgeSkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMik7XG4gIG91dFswXSA9IHg7XG4gIG91dFsxXSA9IHk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSB2ZWMyIHRvIGFub3RoZXJcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIHNvdXJjZSB2ZWN0b3JcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcbiAgb3V0WzBdID0gYVswXTtcbiAgb3V0WzFdID0gYVsxXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMiB0byB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCB4LCB5KSB7XG4gIG91dFswXSA9IHg7XG4gIG91dFsxXSA9IHk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEFkZHMgdHdvIHZlYzInc1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTdWJ0cmFjdHMgdmVjdG9yIGIgZnJvbSB2ZWN0b3IgYVxuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgb3V0WzFdID0gYVsxXSAtIGJbMV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIHZlYzInc1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdICogYlswXTtcbiAgb3V0WzFdID0gYVsxXSAqIGJbMV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIERpdmlkZXMgdHdvIHZlYzInc1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRpdmlkZShvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAvIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gLyBiWzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBNYXRoLmNlaWwgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMyXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHZlY3RvciB0byBjZWlsXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNlaWwob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGguY2VpbChhWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5jZWlsKGFbMV0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBNYXRoLmZsb29yIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMlxuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB2ZWN0b3IgdG8gZmxvb3JcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZmxvb3Iob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGguZmxvb3IoYVswXSk7XG4gIG91dFsxXSA9IE1hdGguZmxvb3IoYVsxXSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIG1pbmltdW0gb2YgdHdvIHZlYzInc1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG1pbihvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gTWF0aC5taW4oYVswXSwgYlswXSk7XG4gIG91dFsxXSA9IE1hdGgubWluKGFbMV0sIGJbMV0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtYXhpbXVtIG9mIHR3byB2ZWMyJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtYXgob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IE1hdGgubWF4KGFbMF0sIGJbMF0pO1xuICBvdXRbMV0gPSBNYXRoLm1heChhWzFdLCBiWzFdKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogTWF0aC5yb3VuZCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzJcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdmVjdG9yIHRvIHJvdW5kXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdW5kKG91dCwgYSkge1xuICBvdXRbMF0gPSBNYXRoLnJvdW5kKGFbMF0pO1xuICBvdXRbMV0gPSBNYXRoLnJvdW5kKGFbMV0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBTY2FsZXMgYSB2ZWMyIGJ5IGEgc2NhbGFyIG51bWJlclxuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgdmVjdG9yIHRvIHNjYWxlXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIHZlY3RvciBieVxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAqIGI7XG4gIG91dFsxXSA9IGFbMV0gKiBiO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBBZGRzIHR3byB2ZWMyJ3MgYWZ0ZXIgc2NhbGluZyB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWVcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYiBieSBiZWZvcmUgYWRkaW5nXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlQW5kQWRkKG91dCwgYSwgYiwgc2NhbGUpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF0gKiBzY2FsZTtcbiAgb3V0WzFdID0gYVsxXSArIGJbMV0gKiBzY2FsZTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzInc1xuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkaXN0YW5jZShhLCBiKSB7XG4gIHZhciB4ID0gYlswXSAtIGFbMF0sXG4gICAgICB5ID0gYlsxXSAtIGFbMV07XG4gIHJldHVybiBNYXRoLmh5cG90KHgsIHkpO1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWMyJ3NcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmVkRGlzdGFuY2UoYSwgYikge1xuICB2YXIgeCA9IGJbMF0gLSBhWzBdLFxuICAgICAgeSA9IGJbMV0gLSBhWzFdO1xuICByZXR1cm4geCAqIHggKyB5ICogeTtcbn1cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgdmVjMlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHZlY3RvciB0byBjYWxjdWxhdGUgbGVuZ3RoIG9mXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBsZW5ndGggb2YgYVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBsZW5ndGgoYSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXTtcbiAgcmV0dXJuIE1hdGguaHlwb3QoeCwgeSk7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgbGVuZ3RoIG9mIGEgdmVjMlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHZlY3RvciB0byBjYWxjdWxhdGUgc3F1YXJlZCBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgbGVuZ3RoIG9mIGFcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJlZExlbmd0aChhKSB7XG4gIHZhciB4ID0gYVswXSxcbiAgICAgIHkgPSBhWzFdO1xuICByZXR1cm4geCAqIHggKyB5ICogeTtcbn1cbi8qKlxuICogTmVnYXRlcyB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzJcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdmVjdG9yIHRvIG5lZ2F0ZVxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBuZWdhdGUob3V0LCBhKSB7XG4gIG91dFswXSA9IC1hWzBdO1xuICBvdXRbMV0gPSAtYVsxXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgaW52ZXJzZSBvZiB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzJcbiAqXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdmVjdG9yIHRvIGludmVydFxuICogQHJldHVybnMge3ZlYzJ9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKG91dCwgYSkge1xuICBvdXRbMF0gPSAxLjAgLyBhWzBdO1xuICBvdXRbMV0gPSAxLjAgLyBhWzFdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBOb3JtYWxpemUgYSB2ZWMyXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHZlY3RvciB0byBub3JtYWxpemVcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKG91dCwgYSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXTtcbiAgdmFyIGxlbiA9IHggKiB4ICsgeSAqIHk7XG5cbiAgaWYgKGxlbiA+IDApIHtcbiAgICAvL1RPRE86IGV2YWx1YXRlIHVzZSBvZiBnbG1faW52c3FydCBoZXJlP1xuICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcbiAgfVxuXG4gIG91dFswXSA9IGFbMF0gKiBsZW47XG4gIG91dFsxXSA9IGFbMV0gKiBsZW47XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byB2ZWMyJ3NcbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkb3QgcHJvZHVjdCBvZiBhIGFuZCBiXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRvdChhLCBiKSB7XG4gIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdO1xufVxuLyoqXG4gKiBDb21wdXRlcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0d28gdmVjMidzXG4gKiBOb3RlIHRoYXQgdGhlIGNyb3NzIHByb2R1Y3QgbXVzdCBieSBkZWZpbml0aW9uIHByb2R1Y2UgYSAzRCB2ZWN0b3JcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcm9zcyhvdXQsIGEsIGIpIHtcbiAgdmFyIHogPSBhWzBdICogYlsxXSAtIGFbMV0gKiBiWzBdO1xuICBvdXRbMF0gPSBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSB6O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHZlYzInc1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCwgaW4gdGhlIHJhbmdlIFswLTFdLCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxlcnAob3V0LCBhLCBiLCB0KSB7XG4gIHZhciBheCA9IGFbMF0sXG4gICAgICBheSA9IGFbMV07XG4gIG91dFswXSA9IGF4ICsgdCAqIChiWzBdIC0gYXgpO1xuICBvdXRbMV0gPSBheSArIHQgKiAoYlsxXSAtIGF5KTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogR2VuZXJhdGVzIGEgcmFuZG9tIHZlY3RvciB3aXRoIHRoZSBnaXZlbiBzY2FsZVxuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlXSBMZW5ndGggb2YgdGhlIHJlc3VsdGluZyB2ZWN0b3IuIElmIG9tbWl0dGVkLCBhIHVuaXQgdmVjdG9yIHdpbGwgYmUgcmV0dXJuZWRcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tKG91dCwgc2NhbGUpIHtcbiAgc2NhbGUgPSBzY2FsZSB8fCAxLjA7XG4gIHZhciByID0gZ2xNYXRyaXguUkFORE9NKCkgKiAyLjAgKiBNYXRoLlBJO1xuICBvdXRbMF0gPSBNYXRoLmNvcyhyKSAqIHNjYWxlO1xuICBvdXRbMV0gPSBNYXRoLnNpbihyKSAqIHNjYWxlO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMyIHdpdGggYSBtYXQyXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0Mn0gbSBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtTWF0MihvdXQsIGEsIG0pIHtcbiAgdmFyIHggPSBhWzBdLFxuICAgICAgeSA9IGFbMV07XG4gIG91dFswXSA9IG1bMF0gKiB4ICsgbVsyXSAqIHk7XG4gIG91dFsxXSA9IG1bMV0gKiB4ICsgbVszXSAqIHk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzIgd2l0aCBhIG1hdDJkXG4gKlxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0MmR9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDJkKG91dCwgYSwgbSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXTtcbiAgb3V0WzBdID0gbVswXSAqIHggKyBtWzJdICogeSArIG1bNF07XG4gIG91dFsxXSA9IG1bMV0gKiB4ICsgbVszXSAqIHkgKyBtWzVdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMyIHdpdGggYSBtYXQzXG4gKiAzcmQgdmVjdG9yIGNvbXBvbmVudCBpcyBpbXBsaWNpdGx5ICcxJ1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDMob3V0LCBhLCBtKSB7XG4gIHZhciB4ID0gYVswXSxcbiAgICAgIHkgPSBhWzFdO1xuICBvdXRbMF0gPSBtWzBdICogeCArIG1bM10gKiB5ICsgbVs2XTtcbiAgb3V0WzFdID0gbVsxXSAqIHggKyBtWzRdICogeSArIG1bN107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzIgd2l0aCBhIG1hdDRcbiAqIDNyZCB2ZWN0b3IgY29tcG9uZW50IGlzIGltcGxpY2l0bHkgJzAnXG4gKiA0dGggdmVjdG9yIGNvbXBvbmVudCBpcyBpbXBsaWNpdGx5ICcxJ1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDQob3V0LCBhLCBtKSB7XG4gIHZhciB4ID0gYVswXTtcbiAgdmFyIHkgPSBhWzFdO1xuICBvdXRbMF0gPSBtWzBdICogeCArIG1bNF0gKiB5ICsgbVsxMl07XG4gIG91dFsxXSA9IG1bMV0gKiB4ICsgbVs1XSAqIHkgKyBtWzEzXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxuICogUm90YXRlIGEgMkQgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCBUaGUgcmVjZWl2aW5nIHZlYzJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIFRoZSB2ZWMyIHBvaW50IHRvIHJvdGF0ZVxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGIgVGhlIG9yaWdpbiBvZiB0aGUgcm90YXRpb25cbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgVGhlIGFuZ2xlIG9mIHJvdGF0aW9uIGluIHJhZGlhbnNcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlKG91dCwgYSwgYiwgcmFkKSB7XG4gIC8vVHJhbnNsYXRlIHBvaW50IHRvIHRoZSBvcmlnaW5cbiAgdmFyIHAwID0gYVswXSAtIGJbMF0sXG4gICAgICBwMSA9IGFbMV0gLSBiWzFdLFxuICAgICAgc2luQyA9IE1hdGguc2luKHJhZCksXG4gICAgICBjb3NDID0gTWF0aC5jb3MocmFkKTsgLy9wZXJmb3JtIHJvdGF0aW9uIGFuZCB0cmFuc2xhdGUgdG8gY29ycmVjdCBwb3NpdGlvblxuXG4gIG91dFswXSA9IHAwICogY29zQyAtIHAxICogc2luQyArIGJbMF07XG4gIG91dFsxXSA9IHAwICogc2luQyArIHAxICogY29zQyArIGJbMV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcbiAqIEdldCB0aGUgYW5nbGUgYmV0d2VlbiB0d28gMkQgdmVjdG9yc1xuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgVGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBiIFRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gVGhlIGFuZ2xlIGluIHJhZGlhbnNcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYW5nbGUoYSwgYikge1xuICB2YXIgeDEgPSBhWzBdLFxuICAgICAgeTEgPSBhWzFdLFxuICAgICAgeDIgPSBiWzBdLFxuICAgICAgeTIgPSBiWzFdLFxuICAgICAgLy8gbWFnIGlzIHRoZSBwcm9kdWN0IG9mIHRoZSBtYWduaXR1ZGVzIG9mIGEgYW5kIGJcbiAgbWFnID0gTWF0aC5zcXJ0KHgxICogeDEgKyB5MSAqIHkxKSAqIE1hdGguc3FydCh4MiAqIHgyICsgeTIgKiB5MiksXG4gICAgICAvLyBtYWcgJiYuLiBzaG9ydCBjaXJjdWl0cyBpZiBtYWcgPT0gMFxuICBjb3NpbmUgPSBtYWcgJiYgKHgxICogeDIgKyB5MSAqIHkyKSAvIG1hZzsgLy8gTWF0aC5taW4oTWF0aC5tYXgoY29zaW5lLCAtMSksIDEpIGNsYW1wcyB0aGUgY29zaW5lIGJldHdlZW4gLTEgYW5kIDFcblxuICByZXR1cm4gTWF0aC5hY29zKE1hdGgubWluKE1hdGgubWF4KGNvc2luZSwgLTEpLCAxKSk7XG59XG4vKipcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzIgdG8gemVyb1xuICpcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHplcm8ob3V0KSB7XG4gIG91dFswXSA9IDAuMDtcbiAgb3V0WzFdID0gMC4wO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgdmVjdG9yXG4gKlxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IGEgdmVjdG9yIHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xuICogQHJldHVybnMge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB2ZWN0b3JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyKGEpIHtcbiAgcmV0dXJuIFwidmVjMihcIiArIGFbMF0gKyBcIiwgXCIgKyBhWzFdICsgXCIpXCI7XG59XG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHZlY3RvcnMgZXhhY3RseSBoYXZlIHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIFRoZSBmaXJzdCB2ZWN0b3IuXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBleGFjdEVxdWFscyhhLCBiKSB7XG4gIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV07XG59XG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHZlY3RvcnMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMyfSBhIFRoZSBmaXJzdCB2ZWN0b3IuXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICB2YXIgYTAgPSBhWzBdLFxuICAgICAgYTEgPSBhWzFdO1xuICB2YXIgYjAgPSBiWzBdLFxuICAgICAgYjEgPSBiWzFdO1xuICByZXR1cm4gTWF0aC5hYnMoYTAgLSBiMCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTApLCBNYXRoLmFicyhiMCkpICYmIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExKSwgTWF0aC5hYnMoYjEpKTtcbn1cbi8qKlxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMyLmxlbmd0aH1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgbGVuID0gbGVuZ3RoO1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuc3VidHJhY3R9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIHN1YiA9IHN1YnRyYWN0O1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIubXVsdGlwbHl9XG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIG11bCA9IG11bHRpcGx5O1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuZGl2aWRlfVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBkaXYgPSBkaXZpZGU7XG4vKipcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMi5kaXN0YW5jZX1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgZGlzdCA9IGRpc3RhbmNlO1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuc3F1YXJlZERpc3RhbmNlfVxuICogQGZ1bmN0aW9uXG4gKi9cblxuZXhwb3J0IHZhciBzcXJEaXN0ID0gc3F1YXJlZERpc3RhbmNlO1xuLyoqXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuc3F1YXJlZExlbmd0aH1cbiAqIEBmdW5jdGlvblxuICovXG5cbmV4cG9ydCB2YXIgc3FyTGVuID0gc3F1YXJlZExlbmd0aDtcbi8qKlxuICogUGVyZm9ybSBzb21lIG9wZXJhdGlvbiBvdmVyIGFuIGFycmF5IG9mIHZlYzJzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGEgdGhlIGFycmF5IG9mIHZlY3RvcnMgdG8gaXRlcmF0ZSBvdmVyXG4gKiBAcGFyYW0ge051bWJlcn0gc3RyaWRlIE51bWJlciBvZiBlbGVtZW50cyBiZXR3ZWVuIHRoZSBzdGFydCBvZiBlYWNoIHZlYzIuIElmIDAgYXNzdW1lcyB0aWdodGx5IHBhY2tlZFxuICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldCBOdW1iZXIgb2YgZWxlbWVudHMgdG8gc2tpcCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBhcnJheVxuICogQHBhcmFtIHtOdW1iZXJ9IGNvdW50IE51bWJlciBvZiB2ZWMycyB0byBpdGVyYXRlIG92ZXIuIElmIDAgaXRlcmF0ZXMgb3ZlciBlbnRpcmUgYXJyYXlcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIEZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggdmVjdG9yIGluIHRoZSBhcnJheVxuICogQHBhcmFtIHtPYmplY3R9IFthcmddIGFkZGl0aW9uYWwgYXJndW1lbnQgdG8gcGFzcyB0byBmblxuICogQHJldHVybnMge0FycmF5fSBhXG4gKiBAZnVuY3Rpb25cbiAqL1xuXG5leHBvcnQgdmFyIGZvckVhY2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB2ZWMgPSBjcmVhdGUoKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhLCBzdHJpZGUsIG9mZnNldCwgY291bnQsIGZuLCBhcmcpIHtcbiAgICB2YXIgaSwgbDtcblxuICAgIGlmICghc3RyaWRlKSB7XG4gICAgICBzdHJpZGUgPSAyO1xuICAgIH1cblxuICAgIGlmICghb2Zmc2V0KSB7XG4gICAgICBvZmZzZXQgPSAwO1xuICAgIH1cblxuICAgIGlmIChjb3VudCkge1xuICAgICAgbCA9IE1hdGgubWluKGNvdW50ICogc3RyaWRlICsgb2Zmc2V0LCBhLmxlbmd0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGwgPSBhLmxlbmd0aDtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSBvZmZzZXQ7IGkgPCBsOyBpICs9IHN0cmlkZSkge1xuICAgICAgdmVjWzBdID0gYVtpXTtcbiAgICAgIHZlY1sxXSA9IGFbaSArIDFdO1xuICAgICAgZm4odmVjLCB2ZWMsIGFyZyk7XG4gICAgICBhW2ldID0gdmVjWzBdO1xuICAgICAgYVtpICsgMV0gPSB2ZWNbMV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH07XG59KCk7IiwKICAiaW1wb3J0ICogYXMgZ2xtIGZyb20gJ2dsLW1hdHJpeCc7XG5cbmV4cG9ydCBjb25zdCByYWQyRGVnID0gKHJhZDogbnVtYmVyKSA9PiAocmFkIC8gTWF0aC5QSSkgKiAxODA7XG5leHBvcnQgY29uc3QgZGVnMlJhZCA9IChkZWc6IG51bWJlcikgPT4gKGRlZyAqIE1hdGguUEkpIC8gMTgwO1xuXG5leHBvcnQgY29uc3QgZ2V0RXVsZXIgPSAodmVjdG9yMzogZ2xtLlJlYWRvbmx5VmVjMyk6IFtudW1iZXIsIG51bWJlcl0gPT4ge1xuICBjb25zdCB0aGV0YSA9IE1hdGguYXRhbjIodmVjdG9yM1sxXSwgdmVjdG9yM1swXSk7XG4gIGNvbnN0IG1hZ25pdHVkZSA9IGdsbS52ZWMyLmxlbmd0aChbdmVjdG9yM1swXSwgdmVjdG9yM1sxXV0pO1xuICBjb25zdCBwaGkgPSBNYXRoLmF0YW4yKHZlY3RvcjNbMl0sIG1hZ25pdHVkZSk7XG4gIHJldHVybiBbdGhldGEsIHBoaV07XG59O1xuIiwKICAiaW1wb3J0IHtcbiAgR2xvYmFsS2V5Ym9hcmRNYW5hZ2VyLFxuICBHbG9iYWxNb3VzZU1hbmFnZXIsXG4gIEdsb2JhbFRvdWNoTWFuYWdlclxufSBmcm9tICcuLi9icm93c2VyJztcblxuaW1wb3J0IHsgZGVnMlJhZCB9IGZyb20gJy4uL21hdGgvYW5nbGVzJztcblxuaW1wb3J0ICogYXMgZ2xtIGZyb20gJ2dsLW1hdHJpeCc7XG5cbmNvbnN0IEFsbEF4aXNlcyA9IHtcbiAgWDogMCxcbiAgWTogMSxcbiAgWjogMlxufTtcbnR5cGUgQXhpc1R5cGUgPSBrZXlvZiB0eXBlb2YgQWxsQXhpc2VzO1xudHlwZSBDb29yZGluYXRlcyA9IFtBeGlzVHlwZSwgQXhpc1R5cGUsIEF4aXNUeXBlXTtcblxuaW50ZXJmYWNlIElGcmVlRmx5Q29udHJvbGxlckRlZiB7XG4gIHBvc2l0aW9uOiBnbG0udmVjMztcbiAgY29vcmRpbmF0ZXM/OiBDb29yZGluYXRlcztcbiAgdGhldGE6IG51bWJlcjtcbiAgcGhpOiBudW1iZXI7XG4gIG1vdXNlU2Vuc2liaWxpdHk6IG51bWJlcjtcbiAga2V5Ym9hcmRTZW5zaWJpbGl0eTogbnVtYmVyO1xuICB0b3VjaFNlbnNpYmlsaXR5OiBudW1iZXI7XG4gIG1vdmluZ1NwZWVkOiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBGcmVlRmx5Q29udHJvbGxlciB7XG4gIHByaXZhdGUgX2lzQWN0aXZhdGVkOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgX3RoZXRhOiBudW1iZXIgPSAwO1xuICBwcml2YXRlIF9waGk6IG51bWJlciA9IDA7XG5cbiAgcHJpdmF0ZSBfbW91c2VTZW5zaWJpbGl0eTogbnVtYmVyO1xuICBwcml2YXRlIF9rZXlib2FyZFNlbnNpYmlsaXR5OiBudW1iZXI7XG4gIHByaXZhdGUgX3RvdWNoU2Vuc2liaWxpdHk6IG51bWJlcjtcbiAgcHJpdmF0ZSBfbW92aW5nU3BlZWQ6IG51bWJlcjtcblxuICBwcml2YXRlIF90b3VjaFdhc0FjdGl2ZTogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIF90b3VjaFN0YXJ0VGltZTogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfdG91Y2hNb3ZlRm9yd2FyZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHByaXZhdGUgX2F4aXNJbmRpY2VzOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl07XG5cbiAgcHJpdmF0ZSBfcG9zaXRpb24gPSBnbG0udmVjMy5mcm9tVmFsdWVzKDAsIDAsIDApO1xuICBwcml2YXRlIF90YXJnZXQgPSBnbG0udmVjMy5mcm9tVmFsdWVzKDAsIDAsIDApO1xuICBwcml2YXRlIF9mb3J3YXJkQXhpcyA9IGdsbS52ZWMzLmZyb21WYWx1ZXMoMSwgMCwgMCk7XG4gIHByaXZhdGUgX2xlZnRBeGlzID0gZ2xtLnZlYzMuZnJvbVZhbHVlcygwLCAwLCAxKTtcbiAgcHJpdmF0ZSBfdXBBeGlzID0gZ2xtLnZlYzMuZnJvbVZhbHVlcygwLCAxLCAwKTtcblxuICBwcml2YXRlIF9tb3ZlX2ZvcndhcmRBeGlzID0gZ2xtLnZlYzMuZnJvbVZhbHVlcygxLCAwLCAwKTtcbiAgcHJpdmF0ZSBfbW92ZV9sZWZ0QXhpcyA9IGdsbS52ZWMzLmZyb21WYWx1ZXMoMCwgMCwgMSk7XG4gIHByaXZhdGUgX21vdmVfdXBBeGlzID0gZ2xtLnZlYzMuZnJvbVZhbHVlcygwLCAxLCAwKTtcblxuICBjb25zdHJ1Y3RvcihkZWY6IElGcmVlRmx5Q29udHJvbGxlckRlZikge1xuICAgIHRoaXMuX21vdXNlU2Vuc2liaWxpdHkgPSBkZWYubW91c2VTZW5zaWJpbGl0eTtcbiAgICB0aGlzLl9rZXlib2FyZFNlbnNpYmlsaXR5ID0gZGVmLmtleWJvYXJkU2Vuc2liaWxpdHk7XG4gICAgdGhpcy5fdG91Y2hTZW5zaWJpbGl0eSA9IGRlZi50b3VjaFNlbnNpYmlsaXR5O1xuICAgIHRoaXMuX21vdmluZ1NwZWVkID0gZGVmLm1vdmluZ1NwZWVkO1xuICAgIGdsbS52ZWMzLmNvcHkodGhpcy5fcG9zaXRpb24sIGRlZi5wb3NpdGlvbik7XG5cbiAgICB0aGlzLl9heGlzSW5kaWNlcyA9IFtcbiAgICAgIGRlZi5jb29yZGluYXRlcyA/IEFsbEF4aXNlc1tkZWYuY29vcmRpbmF0ZXNbMF1dIDogQWxsQXhpc2VzLlgsXG4gICAgICBkZWYuY29vcmRpbmF0ZXMgPyBBbGxBeGlzZXNbZGVmLmNvb3JkaW5hdGVzWzFdXSA6IEFsbEF4aXNlcy5ZLFxuICAgICAgZGVmLmNvb3JkaW5hdGVzID8gQWxsQXhpc2VzW2RlZi5jb29yZGluYXRlc1syXV0gOiBBbGxBeGlzZXMuWlxuICAgIF07XG5cbiAgICB0aGlzLl90aGV0YSA9IGRlZi50aGV0YTtcbiAgICB0aGlzLl9waGkgPSBkZWYucGhpO1xuICB9XG5cbiAgaXNBY3RpdmF0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzQWN0aXZhdGVkO1xuICB9XG5cbiAgYWN0aXZhdGUoKSB7XG4gICAgdGhpcy5faXNBY3RpdmF0ZWQgPSB0cnVlO1xuXG4gICAgR2xvYmFsS2V5Ym9hcmRNYW5hZ2VyLnByZXZlbnREZWZhdWx0KCdaJyk7XG4gICAgR2xvYmFsS2V5Ym9hcmRNYW5hZ2VyLnByZXZlbnREZWZhdWx0KCdXJyk7XG4gICAgR2xvYmFsS2V5Ym9hcmRNYW5hZ2VyLnByZXZlbnREZWZhdWx0KCdTJyk7XG4gICAgR2xvYmFsS2V5Ym9hcmRNYW5hZ2VyLnByZXZlbnREZWZhdWx0KCdBJyk7XG4gICAgR2xvYmFsS2V5Ym9hcmRNYW5hZ2VyLnByZXZlbnREZWZhdWx0KCdRJyk7XG4gICAgR2xvYmFsS2V5Ym9hcmRNYW5hZ2VyLnByZXZlbnREZWZhdWx0KCdEJyk7XG5cbiAgICBHbG9iYWxLZXlib2FyZE1hbmFnZXIucHJldmVudERlZmF1bHQoJ1NoaWZ0Jyk7XG4gICAgR2xvYmFsS2V5Ym9hcmRNYW5hZ2VyLnByZXZlbnREZWZhdWx0KCdDJyk7XG4gICAgR2xvYmFsS2V5Ym9hcmRNYW5hZ2VyLnByZXZlbnREZWZhdWx0KCdTcGFjZScpO1xuXG4gICAgR2xvYmFsS2V5Ym9hcmRNYW5hZ2VyLnByZXZlbnREZWZhdWx0KCdBcnJvd1VwJyk7XG4gICAgR2xvYmFsS2V5Ym9hcmRNYW5hZ2VyLnByZXZlbnREZWZhdWx0KCdBcnJvd0Rvd24nKTtcbiAgICBHbG9iYWxLZXlib2FyZE1hbmFnZXIucHJldmVudERlZmF1bHQoJ0Fycm93TGVmdCcpO1xuICAgIEdsb2JhbEtleWJvYXJkTWFuYWdlci5wcmV2ZW50RGVmYXVsdCgnQXJyb3dSaWdodCcpO1xuICB9XG5cbiAgZGVhY3RpdmF0ZSgpIHtcbiAgICB0aGlzLl9pc0FjdGl2YXRlZCA9IGZhbHNlO1xuXG4gICAgR2xvYmFsS2V5Ym9hcmRNYW5hZ2VyLmVuYWJsZURlZmF1bHQoJ1onKTtcbiAgICBHbG9iYWxLZXlib2FyZE1hbmFnZXIuZW5hYmxlRGVmYXVsdCgnVycpO1xuICAgIEdsb2JhbEtleWJvYXJkTWFuYWdlci5lbmFibGVEZWZhdWx0KCdTJyk7XG4gICAgR2xvYmFsS2V5Ym9hcmRNYW5hZ2VyLmVuYWJsZURlZmF1bHQoJ0EnKTtcbiAgICBHbG9iYWxLZXlib2FyZE1hbmFnZXIuZW5hYmxlRGVmYXVsdCgnUScpO1xuICAgIEdsb2JhbEtleWJvYXJkTWFuYWdlci5lbmFibGVEZWZhdWx0KCdEJyk7XG5cbiAgICBHbG9iYWxLZXlib2FyZE1hbmFnZXIuZW5hYmxlRGVmYXVsdCgnU2hpZnQnKTtcbiAgICBHbG9iYWxLZXlib2FyZE1hbmFnZXIuZW5hYmxlRGVmYXVsdCgnQycpO1xuICAgIEdsb2JhbEtleWJvYXJkTWFuYWdlci5lbmFibGVEZWZhdWx0KCdTcGFjZScpO1xuXG4gICAgR2xvYmFsS2V5Ym9hcmRNYW5hZ2VyLmVuYWJsZURlZmF1bHQoJ0Fycm93VXAnKTtcbiAgICBHbG9iYWxLZXlib2FyZE1hbmFnZXIuZW5hYmxlRGVmYXVsdCgnQXJyb3dEb3duJyk7XG4gICAgR2xvYmFsS2V5Ym9hcmRNYW5hZ2VyLmVuYWJsZURlZmF1bHQoJ0Fycm93TGVmdCcpO1xuICAgIEdsb2JhbEtleWJvYXJkTWFuYWdlci5lbmFibGVEZWZhdWx0KCdBcnJvd1JpZ2h0Jyk7XG4gIH1cblxuICBpc0ludGVyYWN0ZWRXaXRoKCkge1xuICAgIHJldHVybiAoXG4gICAgICBHbG9iYWxLZXlib2FyZE1hbmFnZXIuaXNQcmVzc2VkKCdaJywgJ1cnLCAnUycsICdBJywgJ1EnLCAnRCcpIHx8XG4gICAgICBHbG9iYWxLZXlib2FyZE1hbmFnZXIuaXNQcmVzc2VkKCdTaGlmdCcsICdDJywgJ1NwYWNlJykgfHxcbiAgICAgIEdsb2JhbEtleWJvYXJkTWFuYWdlci5pc1ByZXNzZWQoXG4gICAgICAgICdBcnJvd1VwJyxcbiAgICAgICAgJ0Fycm93RG93bicsXG4gICAgICAgICdBcnJvd0xlZnQnLFxuICAgICAgICAnQXJyb3dSaWdodCdcbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgdXBkYXRlKGRlbHRhTXNUaW1lOiBudW1iZXIsIGZwc0NvbnRyb2xzOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICBsZXQgbW92ZUZvcndhcmQgPSBmYWxzZTtcbiAgICBsZXQgbW92ZUJhY2t3YXJkID0gZmFsc2U7XG4gICAgbGV0IHN0cmFmZUxlZnQgPSBmYWxzZTtcbiAgICBsZXQgc3RyYWZlUmlnaHQgPSBmYWxzZTtcbiAgICBsZXQgaXNSdW5uaW5nID0gZmFsc2U7XG4gICAgbGV0IGlzRGl2aW5nID0gZmFsc2U7XG4gICAgbGV0IGlzUmlzaW5nID0gZmFsc2U7XG4gICAgbGV0IGxvb2tEZWx0YVggPSAwO1xuICAgIGxldCBsb29rRGVsdGFZID0gMDtcblxuICAgIC8vXG4gICAgLy8gbW91c2VcbiAgICAvL1xuXG4gICAge1xuICAgICAgY29uc3QgZGVsdGFYID0gR2xvYmFsTW91c2VNYW5hZ2VyLmRlbHRhWCgpICogdGhpcy5fbW91c2VTZW5zaWJpbGl0eTtcbiAgICAgIGNvbnN0IGRlbHRhWSA9IEdsb2JhbE1vdXNlTWFuYWdlci5kZWx0YVkoKSAqIHRoaXMuX21vdXNlU2Vuc2liaWxpdHk7XG5cbiAgICAgIGxvb2tEZWx0YVggLT0gZGVnMlJhZChkZWx0YVgpICogZGVsdGFNc1RpbWU7XG4gICAgICBsb29rRGVsdGFZIC09IGRlZzJSYWQoZGVsdGFZKSAqIGRlbHRhTXNUaW1lO1xuICAgIH1cblxuICAgIC8vXG4gICAgLy8gbW91c2VcbiAgICAvL1xuXG4gICAgLy9cbiAgICAvLyB0b3VjaFxuICAgIC8vXG5cbiAgICBjb25zdCBpc1RvdWNoZWQgPSBHbG9iYWxUb3VjaE1hbmFnZXIuZ2V0VG91Y2hEYXRhKCkubGVuZ3RoID4gMDtcblxuICAgIGlmIChpc1RvdWNoZWQpIHtcbiAgICAgIGlmICghdGhpcy5fdG91Y2hXYXNBY3RpdmUpIHtcbiAgICAgICAgY29uc3QgY3VyclRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICBjb25zdCBlbGFwc2VkID0gKGN1cnJUaW1lIC0gdGhpcy5fdG91Y2hTdGFydFRpbWUpIC8gMTAwMDtcbiAgICAgICAgaWYgKGVsYXBzZWQgPCAwLjI1KSB7XG4gICAgICAgICAgdGhpcy5fdG91Y2hNb3ZlRm9yd2FyZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fdG91Y2hTdGFydFRpbWUgPSBjdXJyVGltZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBmaXJzdFRvdWNoID0gR2xvYmFsVG91Y2hNYW5hZ2VyLmdldFRvdWNoRGF0YSgpWzBdO1xuXG4gICAgICBjb25zdCBkZWx0YVggPSBmaXJzdFRvdWNoLmRlbHRhWCAqIHRoaXMuX3RvdWNoU2Vuc2liaWxpdHk7XG4gICAgICBjb25zdCBkZWx0YVkgPSBmaXJzdFRvdWNoLmRlbHRhWSAqIHRoaXMuX3RvdWNoU2Vuc2liaWxpdHk7XG5cbiAgICAgIGxvb2tEZWx0YVggLT0gZGVnMlJhZChkZWx0YVgpICogZGVsdGFNc1RpbWU7XG4gICAgICBsb29rRGVsdGFZIC09IGRlZzJSYWQoZGVsdGFZKSAqIGRlbHRhTXNUaW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl90b3VjaE1vdmVGb3J3YXJkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5fdG91Y2hXYXNBY3RpdmUgPSBpc1RvdWNoZWQ7XG5cbiAgICBpZiAodGhpcy5fdG91Y2hNb3ZlRm9yd2FyZCkge1xuICAgICAgbW92ZUZvcndhcmQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vXG4gICAgLy8gdG91Y2hcbiAgICAvL1xuXG4gICAgLy9cbiAgICAvLyBrZXlib2FyZFxuICAgIC8vXG5cbiAgICAvLyBmb3J3YXJkXG4gICAgaWYgKEdsb2JhbEtleWJvYXJkTWFuYWdlci5pc1ByZXNzZWQoJ1onLCAnVycpKSB7XG4gICAgICBtb3ZlRm9yd2FyZCA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmRcbiAgICBpZiAoR2xvYmFsS2V5Ym9hcmRNYW5hZ2VyLmlzUHJlc3NlZCgnUycpKSB7XG4gICAgICBtb3ZlQmFja3dhcmQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIHN0cmFmZSBsZWZ0XG4gICAgaWYgKEdsb2JhbEtleWJvYXJkTWFuYWdlci5pc1ByZXNzZWQoJ0EnLCAnUScpKSB7XG4gICAgICBzdHJhZmVMZWZ0ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBzdHJhZmUgcmlnaHRcbiAgICBpZiAoR2xvYmFsS2V5Ym9hcmRNYW5hZ2VyLmlzUHJlc3NlZCgnRCcpKSB7XG4gICAgICBzdHJhZmVSaWdodCA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gcnVuXG4gICAgaWYgKEdsb2JhbEtleWJvYXJkTWFuYWdlci5pc1ByZXNzZWQoJ1NoaWZ0JykpIHtcbiAgICAgIGlzUnVubmluZyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKCFmcHNDb250cm9scykge1xuICAgICAgLy8gZGl2ZVxuICAgICAgaWYgKEdsb2JhbEtleWJvYXJkTWFuYWdlci5pc1ByZXNzZWQoJ0MnKSkge1xuICAgICAgICBpc0RpdmluZyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8vIHJpc2VcbiAgICAgIGlmIChHbG9iYWxLZXlib2FyZE1hbmFnZXIuaXNQcmVzc2VkKCdTcGFjZScpKSB7XG4gICAgICAgIGlzUmlzaW5nID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBjdXJyZW50TGluZWFyU3BlZWQgPVxuICAgICAgdGhpcy5fbW92aW5nU3BlZWQgKiAoaXNSdW5uaW5nID8gNCA6IDEpICogZGVsdGFNc1RpbWU7XG5cbiAgICAvL1xuICAgIC8vXG5cbiAgICBjb25zdCBjdXJyZW50QW5ndWxhclNwZWVkID0gdGhpcy5fa2V5Ym9hcmRTZW5zaWJpbGl0eSAqIGRlbHRhTXNUaW1lO1xuXG4gICAgaWYgKEdsb2JhbEtleWJvYXJkTWFuYWdlci5pc1ByZXNzZWQoJ0Fycm93VXAnKSkge1xuICAgICAgbG9va0RlbHRhWSArPSBjdXJyZW50QW5ndWxhclNwZWVkO1xuICAgIH0gZWxzZSBpZiAoR2xvYmFsS2V5Ym9hcmRNYW5hZ2VyLmlzUHJlc3NlZCgnQXJyb3dEb3duJykpIHtcbiAgICAgIGxvb2tEZWx0YVkgLT0gY3VycmVudEFuZ3VsYXJTcGVlZDtcbiAgICB9XG5cbiAgICBpZiAoR2xvYmFsS2V5Ym9hcmRNYW5hZ2VyLmlzUHJlc3NlZCgnQXJyb3dMZWZ0JykpIHtcbiAgICAgIGxvb2tEZWx0YVggKz0gY3VycmVudEFuZ3VsYXJTcGVlZDtcbiAgICB9IGVsc2UgaWYgKEdsb2JhbEtleWJvYXJkTWFuYWdlci5pc1ByZXNzZWQoJ0Fycm93UmlnaHQnKSkge1xuICAgICAgbG9va0RlbHRhWCAtPSBjdXJyZW50QW5ndWxhclNwZWVkO1xuICAgIH1cblxuICAgIC8vXG4gICAgLy8ga2V5Ym9hcmRcbiAgICAvL1xuXG4gICAgLy9cbiAgICAvLyBpbnRlcm5hbHNcbiAgICAvL1xuXG4gICAgdGhpcy5fdGhldGEgKz0gbG9va0RlbHRhWDtcbiAgICB0aGlzLl9waGkgKz0gbG9va0RlbHRhWTtcblxuICAgIGNvbnN0IGhQaSA9IE1hdGguUEkgKiAwLjU7XG4gICAgY29uc3QgdmVydGljYWxMaW1pdCA9IGhQaSAqIDAuOTU7XG5cbiAgICB0aGlzLl9waGkgPSBNYXRoLm1pbihNYXRoLm1heCh0aGlzLl9waGksIC12ZXJ0aWNhbExpbWl0KSwgK3ZlcnRpY2FsTGltaXQpO1xuXG4gICAgY29uc3QgY29zVGhldGEgPSBNYXRoLmNvcyh0aGlzLl90aGV0YSk7XG4gICAgY29uc3Qgc2luVGhldGEgPSBNYXRoLnNpbih0aGlzLl90aGV0YSk7XG5cbiAgICBjb25zdCBbYXhpc1gsIGF4aXNZLCBheGlzWl0gPSB0aGlzLl9heGlzSW5kaWNlcztcblxuICAgIGNvbnN0IHVwUmFkaXVzID0gTWF0aC5jb3ModGhpcy5fcGhpICsgaFBpKTtcbiAgICB0aGlzLl91cEF4aXNbYXhpc1hdID0gdXBSYWRpdXMgKiBjb3NUaGV0YTtcbiAgICB0aGlzLl91cEF4aXNbYXhpc1ldID0gdXBSYWRpdXMgKiBzaW5UaGV0YTtcbiAgICB0aGlzLl91cEF4aXNbYXhpc1pdID0gTWF0aC5zaW4odGhpcy5fcGhpICsgaFBpKTtcblxuICAgIGNvbnN0IGZvcndhcmRSYWRpdXMgPSBNYXRoLmNvcyh0aGlzLl9waGkpO1xuICAgIHRoaXMuX2ZvcndhcmRBeGlzW2F4aXNYXSA9IGZvcndhcmRSYWRpdXMgKiBjb3NUaGV0YTtcbiAgICB0aGlzLl9mb3J3YXJkQXhpc1theGlzWV0gPSBmb3J3YXJkUmFkaXVzICogc2luVGhldGE7XG4gICAgdGhpcy5fZm9yd2FyZEF4aXNbYXhpc1pdID0gTWF0aC5zaW4odGhpcy5fcGhpKTtcblxuICAgIGdsbS52ZWMzLmNyb3NzKHRoaXMuX2xlZnRBeGlzLCB0aGlzLl91cEF4aXMsIHRoaXMuX2ZvcndhcmRBeGlzKTtcblxuICAgIGlmIChmcHNDb250cm9scykge1xuICAgICAgdGhpcy5fbW92ZV9mb3J3YXJkQXhpc1theGlzWF0gPSBjb3NUaGV0YTtcbiAgICAgIHRoaXMuX21vdmVfZm9yd2FyZEF4aXNbYXhpc1ldID0gc2luVGhldGE7XG4gICAgICB0aGlzLl9tb3ZlX2ZvcndhcmRBeGlzW2F4aXNaXSA9IDA7XG5cbiAgICAgIHRoaXMuX21vdmVfbGVmdEF4aXNbYXhpc1hdID0gLXNpblRoZXRhO1xuICAgICAgdGhpcy5fbW92ZV9sZWZ0QXhpc1theGlzWV0gPSBjb3NUaGV0YTtcbiAgICAgIHRoaXMuX21vdmVfbGVmdEF4aXNbYXhpc1pdID0gMDtcblxuICAgICAgdGhpcy5fbW92ZV91cEF4aXNbYXhpc1hdID0gMDtcbiAgICAgIHRoaXMuX21vdmVfdXBBeGlzW2F4aXNZXSA9IDA7XG4gICAgICB0aGlzLl9tb3ZlX3VwQXhpc1theGlzWl0gPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBnbG0udmVjMy5jb3B5KHRoaXMuX21vdmVfZm9yd2FyZEF4aXMsIHRoaXMuX2ZvcndhcmRBeGlzKTtcbiAgICAgIGdsbS52ZWMzLmNvcHkodGhpcy5fbW92ZV9sZWZ0QXhpcywgdGhpcy5fbGVmdEF4aXMpO1xuICAgICAgZ2xtLnZlYzMuY29weSh0aGlzLl9tb3ZlX3VwQXhpcywgdGhpcy5fdXBBeGlzKTtcbiAgICB9XG5cbiAgICAvL1xuICAgIC8vXG4gICAgLy9cblxuICAgIGNvbnN0IHNjYWxlZEZvcndhcmQgPSBnbG0udmVjMy5mcm9tVmFsdWVzKDAsIDAsIDApO1xuICAgIGdsbS52ZWMzLnNjYWxlKHNjYWxlZEZvcndhcmQsIHRoaXMuX21vdmVfZm9yd2FyZEF4aXMsIGN1cnJlbnRMaW5lYXJTcGVlZCk7XG4gICAgY29uc3Qgc2NhbGVkTGVmdCA9IGdsbS52ZWMzLmZyb21WYWx1ZXMoMCwgMCwgMCk7XG4gICAgZ2xtLnZlYzMuc2NhbGUoc2NhbGVkTGVmdCwgdGhpcy5fbW92ZV9sZWZ0QXhpcywgY3VycmVudExpbmVhclNwZWVkKTtcbiAgICBjb25zdCBzY2FsZWRVcCA9IGdsbS52ZWMzLmZyb21WYWx1ZXMoMCwgMCwgMCk7XG4gICAgZ2xtLnZlYzMuc2NhbGUoc2NhbGVkVXAsIHRoaXMuX21vdmVfdXBBeGlzLCBjdXJyZW50TGluZWFyU3BlZWQpO1xuXG4gICAgLy9cbiAgICAvL1xuICAgIC8vXG5cbiAgICBpZiAobW92ZUZvcndhcmQpIHtcbiAgICAgIGdsbS52ZWMzLmFkZCh0aGlzLl9wb3NpdGlvbiwgdGhpcy5fcG9zaXRpb24sIHNjYWxlZEZvcndhcmQpO1xuICAgIH0gZWxzZSBpZiAobW92ZUJhY2t3YXJkKSB7XG4gICAgICBnbG0udmVjMy5zdWIodGhpcy5fcG9zaXRpb24sIHRoaXMuX3Bvc2l0aW9uLCBzY2FsZWRGb3J3YXJkKTtcbiAgICB9XG5cbiAgICBpZiAoc3RyYWZlTGVmdCkge1xuICAgICAgZ2xtLnZlYzMuYWRkKHRoaXMuX3Bvc2l0aW9uLCB0aGlzLl9wb3NpdGlvbiwgc2NhbGVkTGVmdCk7XG4gICAgfSBlbHNlIGlmIChzdHJhZmVSaWdodCkge1xuICAgICAgZ2xtLnZlYzMuc3ViKHRoaXMuX3Bvc2l0aW9uLCB0aGlzLl9wb3NpdGlvbiwgc2NhbGVkTGVmdCk7XG4gICAgfVxuXG4gICAgaWYgKGlzUmlzaW5nKSB7XG4gICAgICBnbG0udmVjMy5hZGQodGhpcy5fcG9zaXRpb24sIHRoaXMuX3Bvc2l0aW9uLCBzY2FsZWRVcCk7XG4gICAgfSBlbHNlIGlmIChpc0RpdmluZykge1xuICAgICAgZ2xtLnZlYzMuc3ViKHRoaXMuX3Bvc2l0aW9uLCB0aGlzLl9wb3NpdGlvbiwgc2NhbGVkVXApO1xuICAgIH1cblxuICAgIGdsbS52ZWMzLmFkZCh0aGlzLl90YXJnZXQsIHRoaXMuX3Bvc2l0aW9uLCB0aGlzLl9mb3J3YXJkQXhpcyk7XG5cbiAgICAvL1xuICAgIC8vIGludGVybmFsc1xuICAgIC8vXG4gIH1cblxuICBnZXRQb3NpdGlvbigpOiBnbG0uUmVhZG9ubHlWZWMzIHtcbiAgICByZXR1cm4gdGhpcy5fcG9zaXRpb247XG4gIH1cblxuICBzZXRQb3NpdGlvbihpblBvczogZ2xtLlJlYWRvbmx5VmVjMykge1xuICAgIGdsbS52ZWMzLmNvcHkodGhpcy5fcG9zaXRpb24sIGluUG9zKTtcbiAgICBnbG0udmVjMy5hZGQodGhpcy5fdGFyZ2V0LCB0aGlzLl9wb3NpdGlvbiwgdGhpcy5fZm9yd2FyZEF4aXMpO1xuICB9XG5cbiAgZ2V0VGFyZ2V0KCk6IGdsbS5SZWFkb25seVZlYzMge1xuICAgIHJldHVybiB0aGlzLl90YXJnZXQ7XG4gIH1cblxuICBnZXRVcEF4aXMoKTogZ2xtLlJlYWRvbmx5VmVjMyB7XG4gICAgcmV0dXJuIHRoaXMuX3VwQXhpcztcbiAgfVxuXG4gIGdldFRoZXRhKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3RoZXRhO1xuICB9XG5cbiAgZ2V0UGhpKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3BoaTtcbiAgfVxuXG4gIGdldFRvdWNoTW92ZUZvcndhcmQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3RvdWNoTW92ZUZvcndhcmQ7XG4gIH1cbn1cbiIsCiAgImV4cG9ydCBjb25zdCBjbGFtcCA9IChjdXJyVmFsOiBudW1iZXIsIG1pblZhbDogbnVtYmVyLCBtYXhWYWw6IG51bWJlcikgPT5cbiAgTWF0aC5taW4oTWF0aC5tYXgoY3VyclZhbCwgbWluVmFsKSwgbWF4VmFsKTtcbiIsCiAgImltcG9ydCAqIGFzIGdsbSBmcm9tICdnbC1tYXRyaXgnO1xuXG5leHBvcnQgY29uc3QgaW50ZXJzZWN0U2VnbWVudCA9IChcbiAgQTogZ2xtLlJlYWRvbmx5VmVjMixcbiAgQjogZ2xtLlJlYWRvbmx5VmVjMixcbiAgSTogZ2xtLlJlYWRvbmx5VmVjMixcbiAgUDogZ2xtLlJlYWRvbmx5VmVjMlxuKTogbnVtYmVyID0+IHtcbiAgY29uc3QgRCA9IGdsbS52ZWMyLmZyb21WYWx1ZXMoMCwgMCk7XG4gIGNvbnN0IEUgPSBnbG0udmVjMi5mcm9tVmFsdWVzKDAsIDApO1xuICBEWzBdID0gQlswXSAtIEFbMF07XG4gIERbMV0gPSBCWzFdIC0gQVsxXTtcbiAgRVswXSA9IFBbMF0gLSBJWzBdO1xuICBFWzFdID0gUFsxXSAtIElbMV07XG4gIGNvbnN0IGRlbm9tID0gRFswXSAqIEVbMV0gLSBEWzFdICogRVswXTtcbiAgaWYgKGRlbm9tID09IDApIHtcbiAgICByZXR1cm4gLTE7IC8vIGVycmV1ciwgY2FzIGxpbWl0ZVxuICB9XG4gIGNvbnN0IHQgPSAtKEFbMF0gKiBFWzFdIC0gSVswXSAqIEVbMV0gLSBFWzBdICogQVsxXSArIEVbMF0gKiBJWzFdKSAvIGRlbm9tO1xuICBpZiAodCA8IDAgfHwgdCA+PSAxKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgY29uc3QgdSA9IC0oLURbMF0gKiBBWzFdICsgRFswXSAqIElbMV0gKyBEWzFdICogQVswXSAtIERbMV0gKiBJWzBdKSAvIGRlbm9tO1xuICBpZiAodSA8IDAgfHwgdSA+PSAxKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgcmV0dXJuIDE7XG59O1xuXG5leHBvcnQgY29uc3QgY29sbGlzaW9uTGluZXNTdHJpcCA9IChcbiAgdGFiOiBSZWFkb25seUFycmF5PGdsbS5SZWFkb25seVZlYzI+LFxuICBQOiBnbG0udmVjMlxuKTogYm9vbGVhbiA9PiB7XG4gIGNvbnN0IEkgPSBnbG0udmVjMi5mcm9tVmFsdWVzKDAsIDApO1xuICBJWzBdID0gMTAwMDAgKyBNYXRoLnJhbmRvbSgpICogMTAwOyAvLyAxMDAwMCArIHVuIG5vbWJyZSBhbMOpYXRvaXJlIGVudHJlIDAgZXQgOTlcbiAgSVsxXSA9IDEwMDAwICsgTWF0aC5yYW5kb20oKSAqIDEwMDtcbiAgbGV0IG5iSW50ZXJzZWN0aW9ucyA9IDA7XG4gIGZvciAobGV0IGlpID0gMDsgaWkgPCB0YWIubGVuZ3RoOyArK2lpKSB7XG4gICAgbGV0IGpqID0gKGlpICsgMSkgJSB0YWIubGVuZ3RoO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gaW50ZXJzZWN0U2VnbWVudCh0YWJbaWldLCB0YWJbampdLCBJLCBQKTtcbiAgICBpZiAocmVzdWx0ID09IC0xKSB7XG4gICAgICByZXR1cm4gY29sbGlzaW9uTGluZXNTdHJpcCh0YWIsIFApOyAvLyBjYXMgbGltaXRlLCBvbiByZWxhbmNlIGxhIGZvbmN0aW9uLlxuICAgIH1cbiAgICBuYkludGVyc2VjdGlvbnMgKz0gcmVzdWx0O1xuICB9XG4gIGlmIChuYkludGVyc2VjdGlvbnMgJSAyID09IDEpIHtcbiAgICAvLyBuYkludGVyc2VjdGlvbnMgZXN0LWlsIGltcGFpciA/XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcbiIsCiAgImV4cG9ydCBjb25zdCBlYXNlQ2xhbXAgPSAodDogbnVtYmVyKSA9PiB7XG4gIGlmICh0ID4gMSkge1xuICAgIHJldHVybiB0IC0gTWF0aC5mbG9vcih0KTtcbiAgfVxuICByZXR1cm4gdDtcbn07XG5cbmV4cG9ydCBjb25zdCBlYXNlUGluUG9uZyA9ICh0OiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICB0ICo9IDIuMDtcbiAgaWYgKHQgPCAxLjApIHJldHVybiB0O1xuICB0IC09IDEuMDtcbiAgcmV0dXJuIDEuMCAtIHQ7XG59O1xuXG5leHBvcnQgY29uc3QgZWFzZUluU2luZSA9ICh0OiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICByZXR1cm4gTWF0aC5zaW4oMS41NzA3OTYzICogdCk7XG59O1xuXG5leHBvcnQgY29uc3QgZWFzZU91dFNpbmUgPSAodDogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgcmV0dXJuIDEuMCArIE1hdGguc2luKDEuNTcwNzk2MyAqICh0IC0gMS4wKSk7XG59O1xuXG5leHBvcnQgY29uc3QgZWFzZUluT3V0U2luZSA9ICh0OiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICByZXR1cm4gMC41ICogKDEuMCArIE1hdGguc2luKDMuMTQxNTkyNiAqICh0IC0gMC41KSkpO1xufTtcblxuZXhwb3J0IGNvbnN0IGVhc2VJblF1YWQgPSAodDogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgcmV0dXJuIHQgKiB0O1xufTtcblxuZXhwb3J0IGNvbnN0IGVhc2VPdXRRdWFkID0gKHQ6IG51bWJlcik6IG51bWJlciA9PiB7XG4gIHJldHVybiB0ICogKDIuMCAtIHQpO1xufTtcblxuZXhwb3J0IGNvbnN0IGVhc2VJbk91dFF1YWQgPSAodDogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgcmV0dXJuIHQgPCAwLjUgPyAyLjAgKiB0ICogdCA6IHQgKiAoNC4wIC0gMi4wICogdCkgLSAxLjA7XG59O1xuXG5leHBvcnQgY29uc3QgZWFzZUluQ3ViaWMgPSAodDogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgcmV0dXJuIHQgKiB0ICogdDtcbn07XG5cbmV4cG9ydCBjb25zdCBlYXNlT3V0Q3ViaWMgPSAodDogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgY29uc3QgdDIgPSB0IC0gMTtcbiAgcmV0dXJuIDEuMCArIHQyICogdDIgKiB0Mjtcbn07XG5cbmV4cG9ydCBjb25zdCBlYXNlSW5PdXRDdWJpYyA9ICh0OiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICBjb25zdCB0MiA9IHQgLSAxLjA7XG4gIGNvbnN0IHQzID0gdDIgLSAxLjA7XG4gIHJldHVybiB0IDwgMC41ID8gNC4wICogdCAqIHQgKiB0IDogMS4wICsgdDIgKiAoMi4wICogdDMpICogKDIuMCAqIHQzKTtcbn07XG5cbmV4cG9ydCBjb25zdCBlYXNlSW5RdWFydCA9ICh0OiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICB0ICo9IHQ7XG4gIHJldHVybiB0ICogdDtcbn07XG5cbmV4cG9ydCBjb25zdCBlYXNlT3V0UXVhcnQgPSAodDogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgY29uc3QgdDIgPSB0IC0gMS4wO1xuICB0ID0gdDIgKiB0MjtcbiAgcmV0dXJuIDEuMCAtIHQgKiB0O1xufTtcblxuZXhwb3J0IGNvbnN0IGVhc2VJbk91dFF1YXJ0ID0gKHQ6IG51bWJlcik6IG51bWJlciA9PiB7XG4gIGlmICh0IDwgMC41KSB7XG4gICAgdCAqPSB0O1xuICAgIHJldHVybiA4LjAgKiB0ICogdDtcbiAgfVxuICBjb25zdCB0MiA9IHQgLSAxO1xuICB0ID0gdDIgKiB0MjtcbiAgcmV0dXJuIDEuMCAtIDguMCAqIHQgKiB0O1xufTtcblxuZXhwb3J0IGNvbnN0IGVhc2VJblF1aW50ID0gKHQ6IG51bWJlcik6IG51bWJlciA9PiB7XG4gIGNvbnN0IHQyID0gdCAqIHQ7XG4gIHJldHVybiB0ICogdDIgKiB0Mjtcbn07XG5cbmV4cG9ydCBjb25zdCBlYXNlT3V0UXVpbnQgPSAodDogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgY29uc3QgdHggPSB0IC0gMTtcbiAgY29uc3QgdDIgPSB0eCAqIHR4O1xuICByZXR1cm4gMS4wICsgdHggKiB0MiAqIHQyO1xufTtcblxuZXhwb3J0IGNvbnN0IGVhc2VJbk91dFF1aW50ID0gKHQ6IG51bWJlcik6IG51bWJlciA9PiB7XG4gIGxldCB0MjtcbiAgaWYgKHQgPCAwLjUpIHtcbiAgICB0MiA9IHQgKiB0O1xuICAgIHJldHVybiAxNi4wICogdCAqIHQyICogdDI7XG4gIH1cblxuICBjb25zdCB0eCA9IHQgLSAxLjA7XG4gIHQyID0gdHggKiB0eDtcbiAgcmV0dXJuIDEuMCArIDE2LjAgKiB0eCAqIHQyICogdDI7XG59O1xuXG5leHBvcnQgY29uc3QgZWFzZUluRXhwbyA9ICh0OiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICByZXR1cm4gKE1hdGgucG93KDIuMCwgOC4wICogdCkgLSAxKSAvIDI1NS4wO1xufTtcblxuZXhwb3J0IGNvbnN0IGVhc2VPdXRFeHBvID0gKHQ6IG51bWJlcik6IG51bWJlciA9PiB7XG4gIHJldHVybiAxLjAgLSBNYXRoLnBvdygyLjAsIC04LjAgKiB0KTtcbn07XG5cbmV4cG9ydCBjb25zdCBlYXNlSW5PdXRFeHBvID0gKHQ6IG51bWJlcik6IG51bWJlciA9PiB7XG4gIGlmICh0IDwgMC41KSByZXR1cm4gKE1hdGgucG93KDIuMCwgMTYuMCAqIHQpIC0gMSkgLyA1MTAuMDtcbiAgcmV0dXJuIDEuMCAtIDAuNSAqIE1hdGgucG93KDIuMCwgLTE2LjAgKiAodCAtIDAuNSkpO1xufTtcblxuZXhwb3J0IGNvbnN0IGVhc2VJbkNpcmMgPSAodDogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgcmV0dXJuIDEuMCAtIE1hdGguc3FydCgxLjAgLSB0KTtcbn07XG5cbmV4cG9ydCBjb25zdCBlYXNlT3V0Q2lyYyA9ICh0OiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICByZXR1cm4gTWF0aC5zcXJ0KHQpO1xufTtcblxuZXhwb3J0IGNvbnN0IGVhc2VJbk91dENpcmMgPSAodDogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgaWYgKHQgPCAwLjUpIHJldHVybiAoMS4wIC0gTWF0aC5zcXJ0KDEuMCAtIDIuMCAqIHQpKSAqIDAuNTtcbiAgcmV0dXJuICgxLjAgKyBNYXRoLnNxcnQoMi4wICogdCAtIDEuMCkpICogMC41O1xufTtcblxuZXhwb3J0IGNvbnN0IGVhc2VJbkJhY2sgPSAodDogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgcmV0dXJuIHQgKiB0ICogKDIuNzAxNTggKiB0IC0gMS43MDE1OCk7XG59O1xuXG5leHBvcnQgY29uc3QgZWFzZU91dEJhY2sgPSAodDogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgY29uc3QgdHggPSB0IC0gMTtcbiAgcmV0dXJuIDEuMCArIHR4ICogdHggKiAoMi43MDE1OCAqIHR4ICsgMS43MDE1OCk7XG59O1xuXG5leHBvcnQgY29uc3QgZWFzZUluT3V0QmFjayA9ICh0OiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICBpZiAodCA8IDAuNSkgcmV0dXJuIHQgKiB0ICogKDcuMCAqIHQgLSAyLjUpICogMi4wO1xuICBjb25zdCB0eCA9IHQgLSAxLjA7XG4gIHJldHVybiAxLjAgKyB0eCAqIHR4ICogMi4wICogKDcuMCAqIHR4ICsgMi41KTtcbn07XG5cbmV4cG9ydCBjb25zdCBlYXNlSW5FbGFzdGljID0gKHQ6IG51bWJlcik6IG51bWJlciA9PiB7XG4gIGNvbnN0IHQyID0gdCAqIHQ7XG4gIHJldHVybiB0MiAqIHQyICogTWF0aC5zaW4odCAqIE1hdGguUEkgKiA0LjUpO1xufTtcblxuZXhwb3J0IGNvbnN0IGVhc2VPdXRFbGFzdGljID0gKHQ6IG51bWJlcik6IG51bWJlciA9PiB7XG4gIGNvbnN0IHQyID0gKHQgLSAxLjApICogKHQgLSAxLjApO1xuICByZXR1cm4gMS4wIC0gdDIgKiB0MiAqIE1hdGguY29zKHQgKiBNYXRoLlBJICogNC41KTtcbn07XG5cbmV4cG9ydCBjb25zdCBlYXNlSW5PdXRFbGFzdGljID0gKHQ6IG51bWJlcik6IG51bWJlciA9PiB7XG4gIGxldCB0MjtcbiAgaWYgKHQgPCAwLjQ1KSB7XG4gICAgdDIgPSB0ICogdDtcbiAgICByZXR1cm4gOC4wICogdDIgKiB0MiAqIE1hdGguc2luKHQgKiBNYXRoLlBJICogOS4wKTtcbiAgfVxuICBpZiAodCA8IDAuNTUpIHJldHVybiAwLjUgKyAwLjc1ICogTWF0aC5zaW4odCAqIE1hdGguUEkgKiA0LjApO1xuXG4gIHQyID0gKHQgLSAxLjApICogKHQgLSAxLjApO1xuICByZXR1cm4gMS4wIC0gOC4wICogdDIgKiB0MiAqIE1hdGguc2luKHQgKiBNYXRoLlBJICogOS4wKTtcbn07XG5cbmV4cG9ydCBjb25zdCBlYXNlSW5Cb3VuY2UgPSAodDogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgcmV0dXJuIE1hdGgucG93KDIuMCwgNi4wICogKHQgLSAxLjApKSAqIE1hdGguYWJzKE1hdGguc2luKHQgKiBNYXRoLlBJICogMy41KSk7XG59O1xuXG5leHBvcnQgY29uc3QgZWFzZU91dEJvdW5jZSA9ICh0OiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICByZXR1cm4gMS4wIC0gTWF0aC5wb3coMi4wLCAtNi4wICogdCkgKiBNYXRoLmFicyhNYXRoLmNvcyh0ICogTWF0aC5QSSAqIDMuNSkpO1xufTtcblxuZXhwb3J0IGNvbnN0IGVhc2VJbk91dEJvdW5jZSA9ICh0OiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICBpZiAodCA8IDAuNSlcbiAgICByZXR1cm4gKFxuICAgICAgOC4wICpcbiAgICAgIE1hdGgucG93KDIuMCwgOC4wICogKHQgLSAxLjApKSAqXG4gICAgICBNYXRoLmFicyhNYXRoLnNpbih0ICogTWF0aC5QSSAqIDcuMCkpXG4gICAgKTtcbiAgcmV0dXJuIChcbiAgICAxLjAgLSA4LjAgKiBNYXRoLnBvdygyLjAsIC04LjAgKiB0KSAqIE1hdGguYWJzKE1hdGguc2luKHQgKiBNYXRoLlBJICogNy4wKSlcbiAgKTtcbn07XG4iLAogICJleHBvcnQgY29uc3QgbGVycCA9IChyYXRpbzogbnVtYmVyLCBtaW5WYWw6IG51bWJlciwgbWF4VmFsOiBudW1iZXIpOiBudW1iZXIgPT5cbiAgbWluVmFsICsgKG1heFZhbCAtIG1pblZhbCkgKiByYXRpbztcbiIsCiAgImltcG9ydCAqIGFzIGdsbSBmcm9tICdnbC1tYXRyaXgnO1xuXG5leHBvcnQgY29uc3QgcG9sYXIyQ2FydGVzaWFuID0gKFxuICBsYXQ6IG51bWJlcixcbiAgbG5nOiBudW1iZXIsXG4gIHJlbEFsdGl0dWRlID0gMCxcbiAgZ2xvYlJhZGl1cyA9IDEwMFxuKTogZ2xtLnZlYzMgPT4ge1xuICBjb25zdCBwaGkgPSAoKDkwIC0gbGF0KSAqIE1hdGguUEkpIC8gMTgwO1xuICBjb25zdCB0aGV0YSA9ICgoOTAgLSBsbmcpICogTWF0aC5QSSkgLyAxODA7XG4gIGNvbnN0IHIgPSBnbG9iUmFkaXVzICogKDEgKyByZWxBbHRpdHVkZSk7XG4gIHJldHVybiBbXG4gICAgciAqIE1hdGguc2luKHBoaSkgKiBNYXRoLmNvcyh0aGV0YSksXG4gICAgciAqIE1hdGguY29zKHBoaSksXG4gICAgciAqIE1hdGguc2luKHBoaSkgKiBNYXRoLnNpbih0aGV0YSlcbiAgXTtcbn07XG5cbmV4cG9ydCBjb25zdCBjYXJ0ZXNpYW4yUG9sYXIgPSAoXG4gIHg6IG51bWJlcixcbiAgeTogbnVtYmVyLFxuICB6OiBudW1iZXIsXG4gIGdsb2JSYWRpdXMgPSAxMDBcbik6IHtcbiAgbGF0OiBudW1iZXI7XG4gIGxuZzogbnVtYmVyO1xuICBhbHRpdHVkZTogbnVtYmVyO1xufSA9PiB7XG4gIGNvbnN0IHIgPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6KTtcbiAgY29uc3QgcGhpID0gTWF0aC5hY29zKHkgLyByKTtcbiAgY29uc3QgdGhldGEgPSBNYXRoLmF0YW4yKHosIHgpO1xuXG4gIHJldHVybiB7XG4gICAgbGF0OiA5MCAtIChwaGkgKiAxODApIC8gTWF0aC5QSSxcbiAgICBsbmc6IDkwIC0gKHRoZXRhICogMTgwKSAvIE1hdGguUEkgLSAodGhldGEgPCAtTWF0aC5QSSAvIDIgPyAzNjAgOiAwKSwgLy8ga2VlcCB3aXRoaW4gWy0xODAsIDE4MF0gYm91bmRhcmllc1xuICAgIGFsdGl0dWRlOiByIC8gZ2xvYlJhZGl1cyAtIDFcbiAgfTtcbn07XG4iLAogICJpbXBvcnQgKiBhcyBnbG0gZnJvbSAnZ2wtbWF0cml4JztcblxuLy8gSW50ZXJzZWN0cyByYXkgciA9IHAgKyB0ZCwgfGR8ID0gMSwgd2l0aCBzcGhlcmUgcyBhbmQsIGlmIGludGVyc2VjdGluZyxcbi8vIHJldHVybnMgdCB2YWx1ZSBvZiBpbnRlcnNlY3Rpb24gYW5kIGludGVyc2VjdGlvbiBwb2ludCBxXG5leHBvcnQgY29uc3QgaW50ZXJzZWN0UmF5U3BoZXJlID0gKFxuICBwb3M6IGdsbS5SZWFkb25seVZlYzMsXG4gIGRpcjogZ2xtLlJlYWRvbmx5VmVjMyxcbiAgY2VudGVyOiBnbG0uUmVhZG9ubHlWZWMzLFxuICByYWRpdXM6IG51bWJlclxuKTogZ2xtLnZlYzMgfCBudWxsID0+IHtcbiAgLy8gVmVjdG9yIG0gPSBwIC0gcy5jO1xuICBjb25zdCBtID0gZ2xtLnZlYzMuc3ViKGdsbS52ZWMzLmNyZWF0ZSgpLCBwb3MsIGNlbnRlcik7XG4gIC8vIGZsb2F0IGIgPSBEb3QobSwgZCk7XG4gIGNvbnN0IGIgPSBnbG0udmVjMy5kb3QobSwgZGlyKTtcbiAgLy8gZmxvYXQgYyA9IERvdChtLCBtKSAtIHMuciAqIHMucjtcbiAgY29uc3QgYyA9IGdsbS52ZWMzLmRvdChtLCBtKSAtIHJhZGl1cyAqIHJhZGl1cztcblxuICAvLyBFeGl0IGlmIHLigJlzIG9yaWdpbiBvdXRzaWRlIHMgKGMgPiAwKSBhbmQgciBwb2ludGluZyBhd2F5IGZyb20gcyAoYiA+IDApXG4gIGlmIChjID4gMCAmJiBiID4gMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IGRpc2NyID0gYiAqIGIgLSBjO1xuXG4gIC8vIEEgbmVnYXRpdmUgZGlzY3JpbWluYW50IGNvcnJlc3BvbmRzIHRvIHJheSBtaXNzaW5nIHNwaGVyZVxuICBpZiAoZGlzY3IgPCAwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBSYXkgbm93IGZvdW5kIHRvIGludGVyc2VjdCBzcGhlcmUsIGNvbXB1dGUgc21hbGxlc3QgdCB2YWx1ZSBvZiBpbnRlcnNlY3Rpb25cbiAgbGV0IHQgPSAtYiAtIE1hdGguc3FydChkaXNjcik7XG5cbiAgLy8gSWYgdCBpcyBuZWdhdGl2ZSwgcmF5IHN0YXJ0ZWQgaW5zaWRlIHNwaGVyZSBzbyBjbGFtcCB0IHRvIHplcm9cbiAgaWYgKHQgPCAwKSB7XG4gICAgdCA9IDA7XG4gIH1cblxuICByZXR1cm4gZ2xtLnZlYzMuZnJvbVZhbHVlcyhcbiAgICBwb3NbMF0gKyB0ICogZGlyWzBdLFxuICAgIHBvc1sxXSArIHQgKiBkaXJbMV0sXG4gICAgcG9zWzJdICsgdCAqIGRpclsyXVxuICApO1xufTtcbiIsCiAgImV4cG9ydCBpbnRlcmZhY2UgSUZyYW1lUHJvZmlsZXIge1xuICBmcmFtZXNEZWx0YTogUmVhZG9ubHlBcnJheTxudW1iZXI+O1xuICBhdmVyYWdlRGVsdGE6IG51bWJlcjtcbiAgbWluRGVsdGE6IG51bWJlcjtcbiAgbWF4RGVsdGE6IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIEZyYW1lUHJvZmlsZXIgaW1wbGVtZW50cyBJRnJhbWVQcm9maWxlciB7XG4gIHByaXZhdGUgX2ZyYW1lc0RlbHRhOiBudW1iZXJbXSA9IFtdO1xuICBwcml2YXRlIF9hdmVyYWdlRGVsdGE6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgX21pbkRlbHRhOiBudW1iZXIgPSAwO1xuICBwcml2YXRlIF9tYXhEZWx0YTogbnVtYmVyID0gMDtcblxuICBwdXNoRGVsdGEoaW5EZWx0YTogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuX2ZyYW1lc0RlbHRhLmxlbmd0aCA+PSAxMDApIHtcbiAgICAgIHRoaXMuX2ZyYW1lc0RlbHRhLnNoaWZ0KCk7XG4gICAgfVxuXG4gICAgdGhpcy5fZnJhbWVzRGVsdGEucHVzaChpbkRlbHRhKTtcblxuICAgIC8vXG4gICAgLy9cbiAgICAvL1xuXG4gICAgdGhpcy5fbWluRGVsdGEgPSArOTk5OTk5OTk5O1xuICAgIHRoaXMuX21heERlbHRhID0gLTk5OTk5OTk5OTtcbiAgICB0aGlzLl9hdmVyYWdlRGVsdGEgPSAwO1xuXG4gICAgZm9yIChjb25zdCBjdXJyRGVsdGEgb2YgdGhpcy5fZnJhbWVzRGVsdGEpIHtcbiAgICAgIHRoaXMuX21pbkRlbHRhID0gTWF0aC5taW4odGhpcy5fbWluRGVsdGEsIGN1cnJEZWx0YSk7XG4gICAgICB0aGlzLl9tYXhEZWx0YSA9IE1hdGgubWF4KHRoaXMuX21heERlbHRhLCBjdXJyRGVsdGEpO1xuICAgICAgdGhpcy5fYXZlcmFnZURlbHRhICs9IGN1cnJEZWx0YTtcbiAgICB9XG4gICAgdGhpcy5fYXZlcmFnZURlbHRhIC89IHRoaXMuX2ZyYW1lc0RlbHRhLmxlbmd0aDtcbiAgfVxuXG4gIGdldCBmcmFtZXNEZWx0YSgpOiBSZWFkb25seUFycmF5PG51bWJlcj4ge1xuICAgIHJldHVybiB0aGlzLl9mcmFtZXNEZWx0YTtcbiAgfVxuICBnZXQgYXZlcmFnZURlbHRhKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2F2ZXJhZ2VEZWx0YTtcbiAgfVxuICBnZXQgbWluRGVsdGEoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbWluRGVsdGE7XG4gIH1cbiAgZ2V0IG1heERlbHRhKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX21heERlbHRhO1xuICB9XG59XG4iLAogICJleHBvcnQgY29uc3QgcHJvZ3Jlc3NGZXRjaCA9IGFzeW5jIChcbiAgdXJsOiBzdHJpbmcsXG4gIG9uUHJvZ3Jlc3M/OiAodG90YWw6IG51bWJlcikgPT4gdm9pZFxuKTogUHJvbWlzZTxSZXNwb25zZT4gPT4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCk7XG5cbiAgY29uc3QgcmVhZGVyID0gcmVzcG9uc2UuYm9keSEuZ2V0UmVhZGVyKCk7XG5cbiAgbGV0IHRvdGFsUHJvZ3Jlc3MgPSAwO1xuICBjb25zdCBzdHJlYW0gPSBuZXcgUmVhZGFibGVTdHJlYW0oe1xuICAgIHN0YXJ0KGNvbnRyb2xsZXIpIHtcbiAgICAgIHJldHVybiBwdW1wKCk7XG4gICAgICBmdW5jdGlvbiBwdW1wKCk6IGFueSB7XG4gICAgICAgIHJldHVybiByZWFkZXIucmVhZCgpLnRoZW4oKHsgZG9uZSwgdmFsdWUgfSkgPT4ge1xuICAgICAgICAgIC8vIFdoZW4gbm8gbW9yZSBkYXRhIG5lZWRzIHRvIGJlIGNvbnN1bWVkLCBjbG9zZSB0aGUgc3RyZWFtXG4gICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuY2xvc2UoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAob25Qcm9ncmVzcykge1xuICAgICAgICAgICAgdG90YWxQcm9ncmVzcyArPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgICBvblByb2dyZXNzKHRvdGFsUHJvZ3Jlc3MpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEVucXVldWUgdGhlIG5leHQgZGF0YSBjaHVuayBpbnRvIG91ciB0YXJnZXQgc3RyZWFtXG4gICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHZhbHVlKTtcbiAgICAgICAgICByZXR1cm4gcHVtcCgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBhd2FpdCBzdHJlYW07XG4gIHJldHVybiBuZXcgUmVzcG9uc2Uoc3RyZWFtKTtcbn07XG4iLAogICJleHBvcnQgY29uc3Qgc2xlZXAgPSBhc3luYyAoZGVsYXk6IG51bWJlcik6IFByb21pc2U8dm9pZD4gPT4ge1xuICBhd2FpdCBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCBkZWxheSkpO1xufTtcblxuZXhwb3J0IGNvbnN0IGNhbmNlbGxhYmxlU2xlZXAgPSAoXG4gIGRlbGF5OiBudW1iZXJcbik6IHtcbiAgcHJvbWlzZTogUHJvbWlzZTx2b2lkPjtcbiAgY2FuY2VsOiAoKSA9PiB2b2lkO1xufSA9PiB7XG4gIGxldCB0aW1lb3V0SGFuZGxlOiBudW1iZXIgPSAtMTtcbiAgbGV0IHJlc29sdmVDYWxsYmFjazogKCgpID0+IHZvaWQpIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSkgPT4ge1xuICAgIHJlc29sdmVDYWxsYmFjayA9IHJlc29sdmU7XG4gICAgdGltZW91dEhhbmRsZSA9IHdpbmRvdy5zZXRUaW1lb3V0KHJlc29sdmUsIGRlbGF5KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBwcm9taXNlLFxuICAgIGNhbmNlbDogKCkgPT4ge1xuICAgICAgaWYgKHRpbWVvdXRIYW5kbGUgPj0gMCkge1xuICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVvdXRIYW5kbGUpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc29sdmVDYWxsYmFjaykge1xuICAgICAgICByZXNvbHZlQ2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuIiwKICAiY29uc3QgUkFORF9NQVggPSAyMTQ3NDgzNjQ4IHwgMDtcblxuZXhwb3J0IGNsYXNzIERldGVybWluaXN0aWNSbmcge1xuICBwcml2YXRlIF9zZWVkOiBudW1iZXIgPSAxIHwgMDtcblxuICByYW5kb20oKTogbnVtYmVyIHtcbiAgICBpZiAodGhpcy5fc2VlZCA9PSAwKSB7XG4gICAgICB0aGlzLl9zZWVkID0gMTIzNDU5ODc2IHwgMDtcbiAgICB9XG5cbiAgICBjb25zdCBoaSA9ICh0aGlzLl9zZWVkIC8gMTI3NzczKSB8IDA7XG4gICAgY29uc3QgbG8gPSB0aGlzLl9zZWVkICUgMTI3NzczIHwgMDtcbiAgICBsZXQgeCA9ICgxNjgwNyAqIGxvIC0gMjgzNiAqIGhpKSB8IDA7XG5cbiAgICBpZiAoeCA8IDApIHtcbiAgICAgIHggKz0gMHg3ZmZmZmZmZiB8IDA7XG4gICAgfVxuXG4gICAgdGhpcy5fc2VlZCA9IHg7XG5cbiAgICByZXR1cm4gKHggJSAoUkFORF9NQVggKyAxKSkgLyAtUkFORF9NQVg7XG4gIH1cblxuICBzZXRTZWVkKGluU2VlZDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fc2VlZCA9IGluU2VlZCB8IDA7XG4gIH1cbn1cbiIsCiAgImltcG9ydCAqIGFzIGdsbSBmcm9tICdnbC1tYXRyaXgnO1xuXG5pbXBvcnQgeyBkZWcyUmFkIH0gZnJvbSAnLi4vLi4vc3lzdGVtL21hdGgvYW5nbGVzJztcblxuZW51bSBQcm9qZWN0aW9uVHlwZSB7XG4gIHBlcnNwZWN0aXZlID0gMCxcbiAgb3J0aG9nb25hbCA9IDFcbn1cblxuaW50ZXJmYWNlIElQZXJzcGVjdGl2ZURhdGFPcHRzIHtcbiAgZm92eTogbnVtYmVyO1xuICBhc3BlY3RSYXRpbz86IG51bWJlcjtcbiAgbmVhcjogbnVtYmVyO1xuICBmYXI6IG51bWJlcjtcbn1cblxudHlwZSBJUGVyc3BlY3RpdmVEYXRhID0gUmVxdWlyZWQ8SVBlcnNwZWN0aXZlRGF0YU9wdHM+O1xuXG5pbnRlcmZhY2UgSU9ydGhvZ29uYWxEYXRhIHtcbiAgbGVmdDogbnVtYmVyO1xuICByaWdodDogbnVtYmVyO1xuICB0b3A6IG51bWJlcjtcbiAgYm90dG9tOiBudW1iZXI7XG4gIG5lYXI6IG51bWJlcjtcbiAgZmFyOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNhbWVyYSB7XG4gIGdldEV5ZSgpOiBnbG0uUmVhZG9ubHlWZWMzO1xuICBnZXRUYXJnZXQoKTogZ2xtLlJlYWRvbmx5VmVjMztcbiAgZ2V0VXBBeGlzKCk6IGdsbS5SZWFkb25seVZlYzM7XG5cbiAgZ2V0UHJvamVjdGlvbk1hdHJpeCgpOiBnbG0uUmVhZG9ubHlNYXQ0O1xuICBnZXRWaWV3TWF0cml4KCk6IGdsbS5SZWFkb25seU1hdDQ7XG4gIGdldENvbXBvc2VkTWF0cml4KCk6IGdsbS5SZWFkb25seU1hdDQ7XG5cbiAgZ2V0UGVyc3BlY3RpdmVEYXRhKCk6IFJlYWRvbmx5PElQZXJzcGVjdGl2ZURhdGEgfCB1bmRlZmluZWQ+O1xuICBnZXRPcnRob2dvbmFsRGF0YSgpOiBSZWFkb25seTxJT3J0aG9nb25hbERhdGEgfCB1bmRlZmluZWQ+O1xufVxuXG5leHBvcnQgY2xhc3MgQ2FtZXJhIGltcGxlbWVudHMgSUNhbWVyYSB7XG4gIHByaXZhdGUgX3Byb2plY3Rpb25UeXBlID0gUHJvamVjdGlvblR5cGUucGVyc3BlY3RpdmU7XG4gIHByaXZhdGUgX3BlcnNwZWN0aXZlRGF0YT86IElQZXJzcGVjdGl2ZURhdGE7XG4gIHByaXZhdGUgX29ydGhvZ29uYWxEYXRhPzogSU9ydGhvZ29uYWxEYXRhO1xuXG4gIHByaXZhdGUgX3ZpZXdwb3J0UG9zID0gZ2xtLnZlYzIuZnJvbVZhbHVlcygwLCAwKTtcbiAgcHJpdmF0ZSBfdmlld3BvcnRTaXplID0gZ2xtLnZlYzIuZnJvbVZhbHVlcygwLCAwKTtcblxuICBwcml2YXRlIF9wcm9qZWN0aW9uTWF0cml4ID0gZ2xtLm1hdDQuY3JlYXRlKCk7XG4gIHByaXZhdGUgX3ZpZXdNYXRyaXggPSBnbG0ubWF0NC5jcmVhdGUoKTtcbiAgcHJpdmF0ZSBfY29tcG9zZWRNYXRyaXggPSBnbG0ubWF0NC5jcmVhdGUoKTtcblxuICBwcml2YXRlIF9leWUgPSBnbG0udmVjMy5mcm9tVmFsdWVzKDAsIDAsIDApO1xuICBwcml2YXRlIF90YXJnZXQgPSBnbG0udmVjMy5mcm9tVmFsdWVzKDAsIDAsIDApO1xuICBwcml2YXRlIF91cEF4aXMgPSBnbG0udmVjMy5mcm9tVmFsdWVzKDAsIDAsIDApO1xuXG4gIC8vXG5cbiAgc2V0QXNQZXJzcGVjdGl2ZShpbkRhdGE6IElQZXJzcGVjdGl2ZURhdGFPcHRzKSB7XG4gICAgdGhpcy5fcHJvamVjdGlvblR5cGUgPSBQcm9qZWN0aW9uVHlwZS5wZXJzcGVjdGl2ZTtcblxuICAgIGxldCBhc3BlY3RSYXRpbyA9IGluRGF0YS5hc3BlY3RSYXRpbztcbiAgICBpZiAoYXNwZWN0UmF0aW8gPT09IHVuZGVmaW5lZCkge1xuICAgICAgYXNwZWN0UmF0aW8gPSB0aGlzLl92aWV3cG9ydFNpemVbMF0gLyB0aGlzLl92aWV3cG9ydFNpemVbMV07XG4gICAgfVxuXG4gICAgdGhpcy5fcGVyc3BlY3RpdmVEYXRhID0ge1xuICAgICAgZm92eTogaW5EYXRhLmZvdnksXG4gICAgICBhc3BlY3RSYXRpbyxcbiAgICAgIG5lYXI6IGluRGF0YS5uZWFyLFxuICAgICAgZmFyOiBpbkRhdGEuZmFyXG4gICAgfTtcbiAgfVxuXG4gIHNldEFzT3J0aG9nb25hbChpbkRhdGE6IElPcnRob2dvbmFsRGF0YSkge1xuICAgIHRoaXMuX3Byb2plY3Rpb25UeXBlID0gUHJvamVjdGlvblR5cGUub3J0aG9nb25hbDtcbiAgICB0aGlzLl9vcnRob2dvbmFsRGF0YSA9IHsgLi4uaW5EYXRhIH07XG4gIH1cblxuICAvL1xuXG4gIHNldFZpZXdwb3J0UG9zKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG4gICAgdGhpcy5fdmlld3BvcnRQb3NbMF0gPSB3aWR0aDtcbiAgICB0aGlzLl92aWV3cG9ydFBvc1sxXSA9IGhlaWdodDtcbiAgfVxuXG4gIGdldFZpZXdwb3J0UG9zKCk6IGdsbS5SZWFkb25seVZlYzIge1xuICAgIHJldHVybiB0aGlzLl92aWV3cG9ydFBvcztcbiAgfVxuXG4gIC8vXG5cbiAgc2V0Vmlld3BvcnRTaXplKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG4gICAgdGhpcy5fdmlld3BvcnRTaXplWzBdID0gd2lkdGg7XG4gICAgdGhpcy5fdmlld3BvcnRTaXplWzFdID0gaGVpZ2h0O1xuXG4gICAgaWYgKFxuICAgICAgdGhpcy5fcHJvamVjdGlvblR5cGUgIT09IFByb2plY3Rpb25UeXBlLnBlcnNwZWN0aXZlICYmXG4gICAgICB0aGlzLl9wZXJzcGVjdGl2ZURhdGFcbiAgICApIHtcbiAgICAgIHRoaXMuX3BlcnNwZWN0aXZlRGF0YS5hc3BlY3RSYXRpbyA9XG4gICAgICAgIHRoaXMuX3ZpZXdwb3J0U2l6ZVswXSAvIHRoaXMuX3ZpZXdwb3J0U2l6ZVsxXTtcbiAgICB9XG4gIH1cblxuICBnZXRWaWV3cG9ydFNpemUoKTogZ2xtLlJlYWRvbmx5VmVjMiB7XG4gICAgcmV0dXJuIHRoaXMuX3ZpZXdwb3J0U2l6ZTtcbiAgfVxuXG4gIC8vXG5cbiAgbG9va0F0KFxuICAgIGluRXllOiBnbG0uUmVhZG9ubHlWZWMzLFxuICAgIGluVGFyZ2V0OiBnbG0uUmVhZG9ubHlWZWMzLFxuICAgIGluVXBBeGlzOiBnbG0uUmVhZG9ubHlWZWMzXG4gICkge1xuICAgIHRoaXMuc2V0RXllKGluRXllKTtcbiAgICB0aGlzLnNldFRhcmdldChpblRhcmdldCk7XG4gICAgdGhpcy5zZXRVcEF4aXMoaW5VcEF4aXMpO1xuICB9XG5cbiAgLy9cblxuICBzZXRFeWUoaW5FeWU6IGdsbS5SZWFkb25seVZlYzMpIHtcbiAgICBnbG0udmVjMy5jb3B5KHRoaXMuX2V5ZSwgaW5FeWUpO1xuICB9XG4gIHNldFRhcmdldChpblRhcmdldDogZ2xtLlJlYWRvbmx5VmVjMykge1xuICAgIGdsbS52ZWMzLmNvcHkodGhpcy5fdGFyZ2V0LCBpblRhcmdldCk7XG4gIH1cbiAgc2V0VXBBeGlzKGluVXBBeGlzOiBnbG0uUmVhZG9ubHlWZWMzKSB7XG4gICAgZ2xtLnZlYzMuY29weSh0aGlzLl91cEF4aXMsIGluVXBBeGlzKTtcbiAgfVxuXG4gIGdldEV5ZSgpOiBnbG0uUmVhZG9ubHlWZWMzIHtcbiAgICByZXR1cm4gdGhpcy5fZXllO1xuICB9XG4gIGdldFRhcmdldCgpOiBnbG0uUmVhZG9ubHlWZWMzIHtcbiAgICByZXR1cm4gdGhpcy5fdGFyZ2V0O1xuICB9XG4gIGdldFVwQXhpcygpOiBnbG0uUmVhZG9ubHlWZWMzIHtcbiAgICByZXR1cm4gdGhpcy5fdXBBeGlzO1xuICB9XG5cbiAgLy9cblxuICBjb21wdXRlTWF0cmljZXMoKSB7XG4gICAgaWYgKHRoaXMuX3Byb2plY3Rpb25UeXBlID09PSBQcm9qZWN0aW9uVHlwZS5wZXJzcGVjdGl2ZSkge1xuICAgICAgY29uc3QgeyBmb3Z5LCBhc3BlY3RSYXRpbywgbmVhciwgZmFyIH0gPSB0aGlzLl9wZXJzcGVjdGl2ZURhdGEhO1xuICAgICAgZ2xtLm1hdDQucGVyc3BlY3RpdmUoXG4gICAgICAgIHRoaXMuX3Byb2plY3Rpb25NYXRyaXgsXG4gICAgICAgIGRlZzJSYWQoZm92eSksXG4gICAgICAgIGFzcGVjdFJhdGlvISxcbiAgICAgICAgbmVhcixcbiAgICAgICAgZmFyXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fcHJvamVjdGlvblR5cGUgPT09IFByb2plY3Rpb25UeXBlLm9ydGhvZ29uYWwpIHtcbiAgICAgIGNvbnN0IHsgbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBuZWFyLCBmYXIgfSA9IHRoaXMuX29ydGhvZ29uYWxEYXRhITtcbiAgICAgIGdsbS5tYXQ0Lm9ydGhvKFxuICAgICAgICB0aGlzLl9wcm9qZWN0aW9uTWF0cml4LFxuICAgICAgICBsZWZ0LFxuICAgICAgICByaWdodCxcbiAgICAgICAgdG9wLFxuICAgICAgICBib3R0b20sXG4gICAgICAgIG5lYXIsXG4gICAgICAgIGZhclxuICAgICAgKTtcbiAgICB9XG5cbiAgICBnbG0ubWF0NC5sb29rQXQodGhpcy5fdmlld01hdHJpeCwgdGhpcy5fZXllLCB0aGlzLl90YXJnZXQsIHRoaXMuX3VwQXhpcyk7XG5cbiAgICB0aGlzLmNvbXB1dGVDb21wb3NlZE1hdHJpeCgpO1xuICB9XG5cbiAgY29tcHV0ZUNvbXBvc2VkTWF0cml4KCkge1xuICAgIGdsbS5tYXQ0Lm11bHRpcGx5KFxuICAgICAgdGhpcy5fY29tcG9zZWRNYXRyaXgsXG4gICAgICB0aGlzLl9wcm9qZWN0aW9uTWF0cml4LFxuICAgICAgdGhpcy5fdmlld01hdHJpeFxuICAgICk7XG4gIH1cblxuICBzZXRQcm9qZWN0aW9uTWF0cml4KGluTWF0NDogZ2xtLlJlYWRvbmx5TWF0NCkge1xuICAgIGdsbS5tYXQ0LmNvcHkodGhpcy5fcHJvamVjdGlvbk1hdHJpeCwgaW5NYXQ0KTtcbiAgfVxuICBzZXRWaWV3TWF0cml4KGluTWF0NDogZ2xtLlJlYWRvbmx5TWF0NCkge1xuICAgIGdsbS5tYXQ0LmNvcHkodGhpcy5fdmlld01hdHJpeCwgaW5NYXQ0KTtcbiAgfVxuICBzZXRDb21wb3NlZE1hdHJpeChpbk1hdDQ6IGdsbS5SZWFkb25seU1hdDQpIHtcbiAgICBnbG0ubWF0NC5jb3B5KHRoaXMuX2NvbXBvc2VkTWF0cml4LCBpbk1hdDQpO1xuICB9XG5cbiAgZ2V0UHJvamVjdGlvbk1hdHJpeCgpOiBnbG0uUmVhZG9ubHlNYXQ0IHtcbiAgICByZXR1cm4gdGhpcy5fcHJvamVjdGlvbk1hdHJpeDtcbiAgfVxuICBnZXRWaWV3TWF0cml4KCk6IGdsbS5SZWFkb25seU1hdDQge1xuICAgIHJldHVybiB0aGlzLl92aWV3TWF0cml4O1xuICB9XG4gIGdldENvbXBvc2VkTWF0cml4KCk6IGdsbS5SZWFkb25seU1hdDQge1xuICAgIHJldHVybiB0aGlzLl9jb21wb3NlZE1hdHJpeDtcbiAgfVxuXG4gIC8vXG5cbiAgZ2V0UGVyc3BlY3RpdmVEYXRhKCk6IFJlYWRvbmx5PElQZXJzcGVjdGl2ZURhdGEgfCB1bmRlZmluZWQ+IHtcbiAgICBpZiAodGhpcy5fcHJvamVjdGlvblR5cGUgIT09IFByb2plY3Rpb25UeXBlLnBlcnNwZWN0aXZlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBhIHBlcnNwZWN0aXZlIHByb2plY3Rpb24nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3BlcnNwZWN0aXZlRGF0YTtcbiAgfVxuICBnZXRPcnRob2dvbmFsRGF0YSgpOiBSZWFkb25seTxJT3J0aG9nb25hbERhdGEgfCB1bmRlZmluZWQ+IHtcbiAgICBpZiAodGhpcy5fcHJvamVjdGlvblR5cGUgIT09IFByb2plY3Rpb25UeXBlLm9ydGhvZ29uYWwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignbm90IGFuIG9ydGhvZ29uYWwgcHJvamVjdGlvbicpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fb3J0aG9nb25hbERhdGE7XG4gIH1cbn1cbiIsCiAgImltcG9ydCAqIGFzIGdsbSBmcm9tICdnbC1tYXRyaXgnO1xuXG5lbnVtIEZydXN0dW1TaWRlIHtcbiAgUmlnaHQgPSAwLFxuICBMZWZ0ID0gMSxcbiAgQm90dG9tID0gMixcbiAgVG9wID0gMyxcbiAgQmFjayA9IDQsXG4gIEZyb250ID0gNVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElGcnVzdHVtQ3VsbGluZyB7XG4gIGNhbGN1bGF0ZUZydXN0dW0ocHJvajogZ2xtLlJlYWRvbmx5TWF0NCwgdmlldzogZ2xtLlJlYWRvbmx5TWF0NCk6IHZvaWQ7XG4gIHNwaGVyZUluRnJ1c3R1bSh4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyLCByYWRpdXM6IG51bWJlcik6IGJvb2xlYW47XG4gIHBvaW50SW5GcnVzdHVtKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpOiBib29sZWFuO1xuICBjdWJlSW5GcnVzdHVtKGluWDogbnVtYmVyLCBpblk6IG51bWJlciwgaW5aOiBudW1iZXIsIGluU2l6ZTogbnVtYmVyKTogYm9vbGVhbjtcbiAgY3ViZUluRnJ1c3R1bVZlYzMoY2VudGVyOiBnbG0uUmVhZG9ubHlWZWMzLCBpblNpemU6IG51bWJlcik6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBGcnVzdHVtQ3VsbGluZyBpbXBsZW1lbnRzIElGcnVzdHVtQ3VsbGluZyB7XG4gIHByaXZhdGUgX2ZydXN0dW0gPSBuZXcgRmxvYXQzMkFycmF5KDI0KTsgLy8gNiAqIDQgdmFsdWVzXG5cbiAgcHJpdmF0ZSBfc2V0UGxhbmUoXG4gICAgc2lkZTogRnJ1c3R1bVNpZGUsXG4gICAgbGVmdDogZ2xtLlJlYWRvbmx5VmVjNCxcbiAgICByaWdodDogZ2xtLlJlYWRvbmx5VmVjNCxcbiAgICBjb2VmOiBudW1iZXJcbiAgKSB7XG4gICAgY29uc3QgaW5kZXggPSBzaWRlICogNDtcblxuICAgIHRoaXMuX2ZydXN0dW1baW5kZXggKyAwXSA9IGxlZnRbMF0gKyByaWdodFswXSAqIGNvZWY7XG4gICAgdGhpcy5fZnJ1c3R1bVtpbmRleCArIDFdID0gbGVmdFsxXSArIHJpZ2h0WzFdICogY29lZjtcbiAgICB0aGlzLl9mcnVzdHVtW2luZGV4ICsgMl0gPSBsZWZ0WzJdICsgcmlnaHRbMl0gKiBjb2VmO1xuICAgIHRoaXMuX2ZydXN0dW1baW5kZXggKyAzXSA9IGxlZnRbM10gKyByaWdodFszXSAqIGNvZWY7XG5cbiAgICBjb25zdCBtYWduaXR1ZGUgPSBNYXRoLnNxcnQoXG4gICAgICB0aGlzLl9mcnVzdHVtW2luZGV4ICsgMF0gKiB0aGlzLl9mcnVzdHVtW2luZGV4ICsgMF0gK1xuICAgICAgICB0aGlzLl9mcnVzdHVtW2luZGV4ICsgMV0gKiB0aGlzLl9mcnVzdHVtW2luZGV4ICsgMV0gK1xuICAgICAgICB0aGlzLl9mcnVzdHVtW2luZGV4ICsgMl0gKiB0aGlzLl9mcnVzdHVtW2luZGV4ICsgMl1cbiAgICApO1xuXG4gICAgaWYgKG1hZ25pdHVkZSA9PT0gMCkgcmV0dXJuO1xuXG4gICAgdGhpcy5fZnJ1c3R1bVtpbmRleCArIDBdIC89IG1hZ25pdHVkZTtcbiAgICB0aGlzLl9mcnVzdHVtW2luZGV4ICsgMV0gLz0gbWFnbml0dWRlO1xuICAgIHRoaXMuX2ZydXN0dW1baW5kZXggKyAyXSAvPSBtYWduaXR1ZGU7XG4gICAgdGhpcy5fZnJ1c3R1bVtpbmRleCArIDNdIC89IG1hZ25pdHVkZTtcbiAgfVxuXG4gIGNhbGN1bGF0ZUZydXN0dW0ocHJvajogZ2xtLlJlYWRvbmx5TWF0NCwgdmlldzogZ2xtLlJlYWRvbmx5TWF0NCkge1xuICAgIGNvbnN0IGNsaXAgPSBnbG0ubWF0NC5tdWx0aXBseShnbG0ubWF0NC5jcmVhdGUoKSwgcHJvaiwgdmlldyk7XG5cbiAgICAvLy9cblxuICAgIGNvbnN0IHJvdzAgPSBnbG0udmVjNC5mcm9tVmFsdWVzKGNsaXBbMF0sIGNsaXBbNF0sIGNsaXBbOF0sIGNsaXBbMTJdKTtcbiAgICBjb25zdCByb3cxID0gZ2xtLnZlYzQuZnJvbVZhbHVlcyhjbGlwWzFdLCBjbGlwWzVdLCBjbGlwWzldLCBjbGlwWzEzXSk7XG4gICAgY29uc3Qgcm93MiA9IGdsbS52ZWM0LmZyb21WYWx1ZXMoY2xpcFsyXSwgY2xpcFs2XSwgY2xpcFsxMF0sIGNsaXBbMTRdKTtcbiAgICBjb25zdCByb3czID0gZ2xtLnZlYzQuZnJvbVZhbHVlcyhjbGlwWzNdLCBjbGlwWzddLCBjbGlwWzExXSwgY2xpcFsxNV0pO1xuXG4gICAgdGhpcy5fc2V0UGxhbmUoRnJ1c3R1bVNpZGUuUmlnaHQsIHJvdzMsIHJvdzAsIC0xKTtcbiAgICB0aGlzLl9zZXRQbGFuZShGcnVzdHVtU2lkZS5MZWZ0LCByb3czLCByb3cwLCArMSk7XG4gICAgdGhpcy5fc2V0UGxhbmUoRnJ1c3R1bVNpZGUuQm90dG9tLCByb3czLCByb3cxLCArMSk7XG4gICAgdGhpcy5fc2V0UGxhbmUoRnJ1c3R1bVNpZGUuVG9wLCByb3czLCByb3cxLCAtMSk7XG4gICAgdGhpcy5fc2V0UGxhbmUoRnJ1c3R1bVNpZGUuQmFjaywgcm93Mywgcm93MiwgLTEpO1xuICAgIHRoaXMuX3NldFBsYW5lKEZydXN0dW1TaWRlLkZyb250LCByb3czLCByb3cyLCArMSk7XG4gIH1cblxuICBzcGhlcmVJbkZydXN0dW0oeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlciwgcmFkaXVzOiBudW1iZXIpIHtcbiAgICBmb3IgKGxldCBpaSA9IDA7IGlpIDwgNjsgKytpaSkge1xuICAgICAgY29uc3QgaW5kZXggPSBpaSAqIDQ7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuX2ZydXN0dW1baW5kZXggKyAwXSAqIHggK1xuICAgICAgICAgIHRoaXMuX2ZydXN0dW1baW5kZXggKyAxXSAqIHkgK1xuICAgICAgICAgIHRoaXMuX2ZydXN0dW1baW5kZXggKyAyXSAqIHogK1xuICAgICAgICAgIHRoaXMuX2ZydXN0dW1baW5kZXggKyAzXSA8PVxuICAgICAgICAtcmFkaXVzXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcG9pbnRJbkZydXN0dW0oeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlcikge1xuICAgIC8vIHNwaGVyZSBvZiByYWRpdXMgMCA9PiBwb2ludFxuICAgIHJldHVybiB0aGlzLnNwaGVyZUluRnJ1c3R1bSh4LCB5LCB6LCAwKTtcbiAgfVxuXG4gIGN1YmVJbkZydXN0dW1WZWMzKGNlbnRlcjogZ2xtLlJlYWRvbmx5VmVjMywgaW5TaXplOiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5jdWJlSW5GcnVzdHVtKGNlbnRlclswXSwgY2VudGVyWzFdLCBjZW50ZXJbMl0sIGluU2l6ZSk7XG4gIH1cblxuICBjdWJlSW5GcnVzdHVtKGluWDogbnVtYmVyLCBpblk6IG51bWJlciwgaW5aOiBudW1iZXIsIGluU2l6ZTogbnVtYmVyKSB7XG4gICAgY29uc3QgaFNpemUgPSBpblNpemUgKiAwLjU7XG4gICAgY29uc3QgbWluWCA9IGluWCAtIGhTaXplO1xuICAgIGNvbnN0IG1pblkgPSBpblkgLSBoU2l6ZTtcbiAgICBjb25zdCBtaW5aID0gaW5aIC0gaFNpemU7XG4gICAgY29uc3QgbWF4WCA9IGluWCArIGhTaXplO1xuICAgIGNvbnN0IG1heFkgPSBpblkgKyBoU2l6ZTtcbiAgICBjb25zdCBtYXhaID0gaW5aICsgaFNpemU7XG5cbiAgICBmb3IgKGxldCBpaSA9IDA7IGlpIDwgNjsgKytpaSkge1xuICAgICAgY29uc3QgaW5kZXggPSBpaSAqIDQ7XG4gICAgICBjb25zdCBwbGFuQSA9IHRoaXMuX2ZydXN0dW1baW5kZXggKyAwXTtcbiAgICAgIGNvbnN0IHBsYW5CID0gdGhpcy5fZnJ1c3R1bVtpbmRleCArIDFdO1xuICAgICAgY29uc3QgcGxhbkMgPSB0aGlzLl9mcnVzdHVtW2luZGV4ICsgMl07XG4gICAgICBjb25zdCBwbGFuRCA9IHRoaXMuX2ZydXN0dW1baW5kZXggKyAzXTtcblxuICAgICAgaWYgKFxuICAgICAgICBwbGFuQSAqIG1pblggKyBwbGFuQiAqIG1pblkgKyBwbGFuQyAqIG1pblogKyBwbGFuRCA+IDAgfHxcbiAgICAgICAgcGxhbkEgKiBtYXhYICsgcGxhbkIgKiBtaW5ZICsgcGxhbkMgKiBtaW5aICsgcGxhbkQgPiAwIHx8XG4gICAgICAgIHBsYW5BICogbWluWCArIHBsYW5CICogbWF4WSArIHBsYW5DICogbWluWiArIHBsYW5EID4gMCB8fFxuICAgICAgICBwbGFuQSAqIG1heFggKyBwbGFuQiAqIG1heFkgKyBwbGFuQyAqIG1pblogKyBwbGFuRCA+IDAgfHxcbiAgICAgICAgcGxhbkEgKiBtaW5YICsgcGxhbkIgKiBtaW5ZICsgcGxhbkMgKiBtYXhaICsgcGxhbkQgPiAwIHx8XG4gICAgICAgIHBsYW5BICogbWF4WCArIHBsYW5CICogbWluWSArIHBsYW5DICogbWF4WiArIHBsYW5EID4gMCB8fFxuICAgICAgICBwbGFuQSAqIG1pblggKyBwbGFuQiAqIG1heFkgKyBwbGFuQyAqIG1heFogKyBwbGFuRCA+IDAgfHxcbiAgICAgICAgcGxhbkEgKiBtYXhYICsgcGxhbkIgKiBtYXhZICsgcGxhbkMgKiBtYXhaICsgcGxhbkQgPiAwXG4gICAgICApIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuIiwKICAiLy8gaHR0cHM6Ly93d3cub3BlbmdsLm9yZy93aWtpL0dsdVByb2plY3RfYW5kX2dsdVVuUHJvamVjdF9jb2RlXG5cbmltcG9ydCAqIGFzIGdsbSBmcm9tICdnbC1tYXRyaXgnO1xuXG5leHBvcnQgY29uc3Qgc2NlbmVUb1NjcmVlbkNvb3JkaW5hdGVzID0gKFxuICBzY2VuZVBvczogZ2xtLlJlYWRvbmx5VmVjM1tdLFxuICBtb2RlbFZpZXc6IGdsbS5SZWFkb25seU1hdDQsXG4gIHByb2plY3Rpb246IGdsbS5SZWFkb25seU1hdDQsXG4gIHZpZXdwb3J0OiBnbG0uUmVhZG9ubHlWZWM0XG4pOiBnbG0udmVjM1tdID0+IHtcbiAgY29uc3QgY29tcG9zZWRNYXRyaXggPSBnbG0ubWF0NC5jcmVhdGUoKTtcblxuICBnbG0ubWF0NC5tdWx0aXBseShjb21wb3NlZE1hdHJpeCwgcHJvamVjdGlvbiwgbW9kZWxWaWV3KTtcblxuICByZXR1cm4gc2NlbmVUb1NjcmVlbkNvb3Jkc0Zyb21Db21wb3NlZChzY2VuZVBvcywgY29tcG9zZWRNYXRyaXgsIHZpZXdwb3J0KTtcbn07XG5cbmV4cG9ydCBjb25zdCBzY2VuZVRvU2NyZWVuQ29vcmRzRnJvbUNvbXBvc2VkID0gKFxuICBhbGxTY2VuZVBvczogZ2xtLlJlYWRvbmx5VmVjM1tdLFxuICBjb21wb3NlZE1hdHJpeDogZ2xtLlJlYWRvbmx5TWF0NCxcbiAgdmlld3BvcnQ6IGdsbS5SZWFkb25seVZlYzRcbik6IGdsbS52ZWMzW10gPT4ge1xuICBjb25zdCBpbnB1dFZlYzQgPSBnbG0udmVjNC5jcmVhdGUoKTtcblxuICBjb25zdCBtdWx0aXBsaWVkVmVjNCA9IGdsbS52ZWM0LmNyZWF0ZSgpO1xuXG4gIGNvbnN0IHJlc3VsdHM6IGdsbS52ZWMzW10gPSBbXTtcblxuICBhbGxTY2VuZVBvcy5mb3JFYWNoKChzY2VuZVBvcykgPT4ge1xuICAgIGlucHV0VmVjNFswXSA9IHNjZW5lUG9zWzBdO1xuICAgIGlucHV0VmVjNFsxXSA9IHNjZW5lUG9zWzFdO1xuICAgIGlucHV0VmVjNFsyXSA9IHNjZW5lUG9zWzJdO1xuICAgIGlucHV0VmVjNFszXSA9IDE7XG5cbiAgICBnbG0udmVjNC50cmFuc2Zvcm1NYXQ0KG11bHRpcGxpZWRWZWM0LCBpbnB1dFZlYzQsIGNvbXBvc2VkTWF0cml4KTtcblxuICAgIC8vVGhlIHJlc3VsdCBub3JtYWxpemVzIGJldHdlZW4gLTEgYW5kIDFcbiAgICBpZiAobXVsdGlwbGllZFZlYzRbM10gPT09IDApIHtcbiAgICAgIC8vVGhlIHcgdmFsdWVcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIG11bHRpcGxpZWRWZWM0WzNdID0gMSAvIG11bHRpcGxpZWRWZWM0WzNdO1xuICAgIC8vIFBlcnNwZWN0aXZlIGRpdmlzaW9uXG4gICAgbXVsdGlwbGllZFZlYzRbMF0gKj0gbXVsdGlwbGllZFZlYzRbM107XG4gICAgbXVsdGlwbGllZFZlYzRbMV0gKj0gbXVsdGlwbGllZFZlYzRbM107XG4gICAgbXVsdGlwbGllZFZlYzRbMl0gKj0gbXVsdGlwbGllZFZlYzRbM107XG5cbiAgICAvLyBXaW5kb3cgY29vcmRpbmF0ZXNcbiAgICAvLyBNYXAgeCwgeSB0byByYW5nZSAwLTFcbiAgICAobXVsdGlwbGllZFZlYzRbMF0gPVxuICAgICAgKG11bHRpcGxpZWRWZWM0WzBdICogMC41ICsgMC41KSAqIHZpZXdwb3J0WzJdICsgdmlld3BvcnRbMF0pLFxuICAgICAgKG11bHRpcGxpZWRWZWM0WzFdID1cbiAgICAgICAgKG11bHRpcGxpZWRWZWM0WzFdICogMC41ICsgMC41KSAqIHZpZXdwb3J0WzNdICsgdmlld3BvcnRbMV0pO1xuXG4gICAgcmVzdWx0cy5wdXNoKGdsbS52ZWMzLmNvcHkoZ2xtLnZlYzMuY3JlYXRlKCksIG11bHRpcGxpZWRWZWM0IGFzIGdsbS52ZWMzKSk7XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHRzO1xufTtcbiIsCiAgIi8vIGh0dHBzOi8vd3d3Lm9wZW5nbC5vcmcvd2lraS9HbHVQcm9qZWN0X2FuZF9nbHVVblByb2plY3RfY29kZVxuXG5pbXBvcnQgKiBhcyBnbG0gZnJvbSAnZ2wtbWF0cml4JztcblxuZXhwb3J0IGNvbnN0IHNjcmVlblRvU2NlbmVDb29yZGluYXRlcyA9IChcbiAgYWxsU2NyZWVuUG9zOiBnbG0uUmVhZG9ubHlWZWMzW10sXG4gIG1vZGVsVmlldzogZ2xtLlJlYWRvbmx5TWF0NCxcbiAgcHJvamVjdGlvbjogZ2xtLlJlYWRvbmx5TWF0NCxcbiAgdmlld3BvcnQ6IGdsbS5SZWFkb25seVZlYzRcbik6IGdsbS52ZWMzW10gPT4ge1xuICBjb25zdCBjb21wb3NlZE1hdHJpeDogZ2xtLlJlYWRvbmx5TWF0NCA9IGdsbS5tYXQ0Lm11bHRpcGx5KFxuICAgIGdsbS5tYXQ0LmNyZWF0ZSgpLFxuICAgIHByb2plY3Rpb24sXG4gICAgbW9kZWxWaWV3XG4gICk7XG4gIHJldHVybiBzY3JlZW5Ub1NjZW5lQ29vcmRpbmF0ZXNGcm9tQ29tcG9zZWQoXG4gICAgYWxsU2NyZWVuUG9zLFxuICAgIGNvbXBvc2VkTWF0cml4LFxuICAgIHZpZXdwb3J0XG4gICk7XG59O1xuXG5leHBvcnQgY29uc3Qgc2NyZWVuVG9TY2VuZUNvb3JkaW5hdGVzRnJvbUNvbXBvc2VkID0gKFxuICBhbGxTY3JlZW5Qb3M6IGdsbS5SZWFkb25seVZlYzNbXSxcbiAgY29tcG9zZWRNYXRyaXg6IGdsbS5SZWFkb25seU1hdDQsXG4gIHZpZXdwb3J0OiBnbG0uUmVhZG9ubHlWZWM0XG4pOiBnbG0udmVjM1tdID0+IHtcbiAgY29uc3QgaW52ZXJ0ZWRDb21wb3NlZE1hdHJpeDogZ2xtLlJlYWRvbmx5TWF0NCA9IGdsbS5tYXQ0LmludmVydChcbiAgICBnbG0ubWF0NC5jcmVhdGUoKSxcbiAgICBjb21wb3NlZE1hdHJpeFxuICApO1xuXG4gIHJldHVybiBzY3JlZW5Ub1NjZW5lQ29vcmRpbmF0ZXNGcm9tSW52Q29tcG9zZWQoXG4gICAgYWxsU2NyZWVuUG9zLFxuICAgIGludmVydGVkQ29tcG9zZWRNYXRyaXgsXG4gICAgdmlld3BvcnRcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBzY3JlZW5Ub1NjZW5lQ29vcmRpbmF0ZXNGcm9tSW52Q29tcG9zZWQgPSAoXG4gIGFsbFNjcmVlblBvczogZ2xtLlJlYWRvbmx5VmVjM1tdLFxuICBpbnZlcnRlZENvbXBvc2VkTWF0cml4OiBnbG0uUmVhZG9ubHlNYXQ0LFxuICB2aWV3cG9ydDogZ2xtLlJlYWRvbmx5VmVjNFxuKTogZ2xtLnZlYzNbXSA9PiB7XG4gIGNvbnN0IHJlc3VsdHM6IGdsbS52ZWMzW10gPSBbXTtcblxuICBjb25zdCBtdWx0aXBsaWVkVmVjNCA9IGdsbS52ZWM0LmNyZWF0ZSgpO1xuXG4gIGFsbFNjcmVlblBvcy5mb3JFYWNoKChzY3JlZW5Qb3MpID0+IHtcbiAgICBtdWx0aXBsaWVkVmVjNFswXSA9XG4gICAgICAoKHNjcmVlblBvc1swXSAtIHZpZXdwb3J0WzBdKSAvIHZpZXdwb3J0WzJdKSAqIDIuMCAtIDEuMDtcbiAgICBtdWx0aXBsaWVkVmVjNFsxXSA9XG4gICAgICAoKHNjcmVlblBvc1sxXSAtIHZpZXdwb3J0WzFdKSAvIHZpZXdwb3J0WzNdKSAqIDIuMCAtIDEuMDtcbiAgICBtdWx0aXBsaWVkVmVjNFsyXSA9IDIuMCAqIHNjcmVlblBvc1syXSAtIDEuMDtcbiAgICBtdWx0aXBsaWVkVmVjNFszXSA9IDEuMDtcblxuICAgIGdsbS52ZWM0LnRyYW5zZm9ybU1hdDQoXG4gICAgICBtdWx0aXBsaWVkVmVjNCxcbiAgICAgIG11bHRpcGxpZWRWZWM0LFxuICAgICAgaW52ZXJ0ZWRDb21wb3NlZE1hdHJpeFxuICAgICk7XG5cbiAgICAvL1RoZSByZXN1bHQgbm9ybWFsaXplcyBiZXR3ZWVuIC0xIGFuZCAxXG4gICAgaWYgKG11bHRpcGxpZWRWZWM0WzNdID09PSAwKSB7XG4gICAgICAvLyBUaGUgdyB2YWx1ZVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG11bHRpcGxpZWRWZWM0WzNdID0gMSAvIG11bHRpcGxpZWRWZWM0WzNdO1xuICAgIC8vIFBlcnNwZWN0aXZlIGRpdmlzaW9uXG4gICAgbXVsdGlwbGllZFZlYzRbMF0gKj0gbXVsdGlwbGllZFZlYzRbM107XG4gICAgbXVsdGlwbGllZFZlYzRbMV0gKj0gbXVsdGlwbGllZFZlYzRbM107XG4gICAgbXVsdGlwbGllZFZlYzRbMl0gKj0gbXVsdGlwbGllZFZlYzRbM107XG5cbiAgICByZXN1bHRzLnB1c2goZ2xtLnZlYzMuY29weShnbG0udmVjMy5jcmVhdGUoKSwgbXVsdGlwbGllZFZlYzQgYXMgZ2xtLnZlYzMpKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdHM7XG59O1xuIiwKICAiZXhwb3J0IGNsYXNzIFdlYkdMQ29udGV4dCB7XG4gIHByaXZhdGUgc3RhdGljIF9nbDogV2ViR0wyUmVuZGVyaW5nQ29udGV4dCB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIHN0YXRpYyBfZXh0ZW5zaW9uTG9zZUNvbnRleHQ6IFdFQkdMX2xvc2VfY29udGV4dCB8IG51bGwgPSBudWxsO1xuXG4gIHN0YXRpYyBpbml0aWFsaXplKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpIHtcbiAgICBjb25zdCByZW5kZXJpbmdDb250ZXh0QXR0cmliczogV2ViR0xDb250ZXh0QXR0cmlidXRlcyA9IHtcbiAgICAgIC8vIEJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgaWYgdGhlIGNhbnZhcyBjb250YWlucyBhbiBhbHBoYSBidWZmZXIuXG4gICAgICBhbHBoYTogZmFsc2UsXG5cbiAgICAgIC8vIEJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgd2hldGhlciBvciBub3QgdG8gcGVyZm9ybSBhbnRpLWFsaWFzaW5nLlxuICAgICAgYW50aWFsaWFzOiBmYWxzZSxcblxuICAgICAgLy8gQm9vbGVhbiB0aGF0IGluZGljYXRlcyB0aGF0IHRoZSBkcmF3aW5nIGJ1ZmZlciBoYXMgYSBkZXB0aFxuICAgICAgLy8gYnVmZmVyIG9mIGF0IGxlYXN0IDE2IGJpdHMuXG4gICAgICBkZXB0aDogdHJ1ZSxcblxuICAgICAgLy8gQm9vbGVhbiB0aGF0IGluZGljYXRlcyBpZiBhIGNvbnRleHQgd2lsbCBiZSBjcmVhdGVkIGlmIHRoZVxuICAgICAgLy8gc3lzdGVtIHBlcmZvcm1hbmNlIGlzIGxvdy5cbiAgICAgIGZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQ6IGZhbHNlLFxuXG4gICAgICAvLyBBIGhpbnQgdG8gdGhlIHVzZXIgYWdlbnQgaW5kaWNhdGluZyB3aGF0IGNvbmZpZ3VyYXRpb24gb2YgR1BVIGlzXG4gICAgICAvLyBzdWl0YWJsZSBmb3IgdGhlIFdlYkdMIGNvbnRleHQuIFBvc3NpYmxlIHZhbHVlcyBhcmU6XG4gICAgICAvLyBcImRlZmF1bHRcIjpcbiAgICAgIC8vICAgICBMZXQgdGhlIHVzZXIgYWdlbnQgZGVjaWRlIHdoaWNoIEdQVSBjb25maWd1cmF0aW9uIGlzIG1vc3RcbiAgICAgIC8vICAgICBzdWl0YWJsZS4gVGhpcyBpcyB0aGUgZGVmYXVsdCB2YWx1ZS5cbiAgICAgIC8vIFwiaGlnaC1wZXJmb3JtYW5jZVwiOlxuICAgICAgLy8gICAgIFByaW9yaXRpemVzIHJlbmRlcmluZyBwZXJmb3JtYW5jZSBvdmVyIHBvd2VyIGNvbnN1bXB0aW9uLlxuICAgICAgLy8gXCJsb3ctcG93ZXJcIjpcbiAgICAgIC8vICAgICBQcmlvcml0aXplcyBwb3dlciBzYXZpbmcgb3ZlciByZW5kZXJpbmcgcGVyZm9ybWFuY2UuXG4gICAgICBwb3dlclByZWZlcmVuY2U6ICdoaWdoLXBlcmZvcm1hbmNlJyxcblxuICAgICAgLy8gQm9vbGVhbiB0aGF0IGluZGljYXRlcyB0aGF0IHRoZSBwYWdlIGNvbXBvc2l0b3Igd2lsbCBhc3N1bWUgdGhlXG4gICAgICAvLyBkcmF3aW5nIGJ1ZmZlciBjb250YWlucyBjb2xvcnMgd2l0aCBwcmUtbXVsdGlwbGllZCBhbHBoYS5cbiAgICAgIHByZW11bHRpcGxpZWRBbHBoYTogdHJ1ZSwgLy8gc2xvd2VyIGZyYW1lcmF0ZSB3aGVuIGZhbHNlXG5cbiAgICAgIC8vIElmIHRoZSB2YWx1ZSBpcyB0cnVlIHRoZSBidWZmZXJzIHdpbGwgbm90IGJlIGNsZWFyZWQgYW5kIHdpbGxcbiAgICAgIC8vIHByZXNlcnZlIHRoZWlyIHZhbHVlcyB1bnRpbCBjbGVhcmVkIG9yIG92ZXJ3cml0dGVuIGJ5IHRoZSBhdXRob3IuXG4gICAgICBwcmVzZXJ2ZURyYXdpbmdCdWZmZXI6IHRydWUsXG5cbiAgICAgIC8vIEJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgdGhhdCB0aGUgZHJhd2luZyBidWZmZXIgaGFzIGFcbiAgICAgIC8vIHN0ZW5jaWwgYnVmZmVyIG9mIGF0IGxlYXN0IDggYml0cy5cbiAgICAgIHN0ZW5jaWw6IGZhbHNlXG4gICAgfTtcblxuICAgIFdlYkdMQ29udGV4dC5fZ2wgPSBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wyJywgcmVuZGVyaW5nQ29udGV4dEF0dHJpYnMpO1xuXG4gICAgaWYgKCFXZWJHTENvbnRleHQuX2dsKSB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCBjcmVhdGUgd2ViZ2wgY29udGV4dCcpO1xuXG4gICAgV2ViR0xDb250ZXh0Ll9leHRlbnNpb25Mb3NlQ29udGV4dCA9XG4gICAgICBXZWJHTENvbnRleHQuX2dsLmdldEV4dGVuc2lvbignV0VCR0xfbG9zZV9jb250ZXh0Jyk7XG5cbiAgICBXZWJHTENvbnRleHQuX2dsLmdldEV4dGVuc2lvbignRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdCcpO1xuICAgIFdlYkdMQ29udGV4dC5fZ2wuZ2V0RXh0ZW5zaW9uKCdFWFRfZmxvYXRfYmxlbmQnKTtcbiAgfVxuXG4gIC8vXG4gIC8vXG4gIC8vXG5cbiAgc3RhdGljIGdldENvbnRleHQoKSB7XG4gICAgaWYgKCFXZWJHTENvbnRleHQuX2dsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3dlYmdsIGNvbnRleHQgbm90IGluaXRpYWxpemVkJyk7XG4gICAgfVxuICAgIHJldHVybiBXZWJHTENvbnRleHQuX2dsO1xuICB9XG5cbiAgLy9cbiAgLy9cbiAgLy9cblxuICBzdGF0aWMgZ2V0RXh0ZW5zaW9uTG9zZUNvbnRleHQoKSB7XG4gICAgcmV0dXJuIFdlYkdMQ29udGV4dC5fZXh0ZW5zaW9uTG9zZUNvbnRleHQ7XG4gIH1cblxuICBzdGF0aWMgZ2V0RXh0ZW5zaW9uTG9zZUNvbnRleHRTdHJpY3QoKSB7XG4gICAgaWYgKCFXZWJHTENvbnRleHQuX2V4dGVuc2lvbkxvc2VDb250ZXh0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2xvc2UgY29udGV4dCBleHRlbnNpb24gbm90IGF2YWlsYWJsZScpO1xuICAgIH1cblxuICAgIHJldHVybiBXZWJHTENvbnRleHQuX2V4dGVuc2lvbkxvc2VDb250ZXh0O1xuICB9XG59XG4iLAogICJpbXBvcnQgeyBXZWJHTENvbnRleHQgfSBmcm9tICcuL1dlYkdMQ29udGV4dCc7XG5cbmV4cG9ydCBlbnVtIEN1YmVNYXBUeXBlIHtcbiAgcG9zaXRpdmVYLFxuICBuZWdhdGl2ZVgsXG4gIHBvc2l0aXZlWSxcbiAgbmVnYXRpdmVZLFxuICBwb3NpdGl2ZVosXG4gIG5lZ2F0aXZlWlxufVxuXG5leHBvcnQgY29uc3QgZ2V0Q3ViZU1hcFR5cGUgPSAoaW5UeXBlOiBDdWJlTWFwVHlwZSk6IG51bWJlciA9PiB7XG4gIGNvbnN0IGdsID0gV2ViR0xDb250ZXh0LmdldENvbnRleHQoKTtcbiAgc3dpdGNoIChpblR5cGUpIHtcbiAgICBjYXNlIEN1YmVNYXBUeXBlLnBvc2l0aXZlWDpcbiAgICAgIHJldHVybiBnbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1g7XG4gICAgY2FzZSBDdWJlTWFwVHlwZS5uZWdhdGl2ZVg6XG4gICAgICByZXR1cm4gZ2wuVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9YO1xuICAgIGNhc2UgQ3ViZU1hcFR5cGUucG9zaXRpdmVZOlxuICAgICAgcmV0dXJuIGdsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWTtcbiAgICBjYXNlIEN1YmVNYXBUeXBlLm5lZ2F0aXZlWTpcbiAgICAgIHJldHVybiBnbC5URVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1k7XG4gICAgY2FzZSBDdWJlTWFwVHlwZS5wb3NpdGl2ZVo6XG4gICAgICByZXR1cm4gZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9aO1xuICAgIGNhc2UgQ3ViZU1hcFR5cGUubmVnYXRpdmVaOlxuICAgICAgcmV0dXJuIGdsLlRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWjtcbiAgfVxuICAvLyB0aHJvdyBuZXcgRXJyb3IoJ2N1YmUgbWFwOiBpbnZhbGlkIHR5cGUnKTtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVVuYm91bmRDdWJlTWFwIHtcbiAgaW5pdGlhbGl6ZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IHZvaWQ7XG4gIHJhd0JpbmQoKTogdm9pZDtcbiAgYmluZChpbkNhbGxiYWNrOiAoYm91bmQ6IElCb3VuZEN1YmVNYXApID0+IHZvaWQpOiB2b2lkO1xuICBnZXRSYXdPYmplY3QoKTogV2ViR0xUZXh0dXJlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElCb3VuZEN1YmVNYXAge1xuICBhbGxvY2F0ZSgpOiB2b2lkO1xuICBsb2FkRnJvbU1lbW9yeShpblR5cGU6IEN1YmVNYXBUeXBlLCBpblBpeGVsczogVWludDhBcnJheSk6IHZvaWQ7XG4gIGNvbXBsZXRlKCk6IHZvaWQ7XG4gIGdldFJhd09iamVjdCgpOiBXZWJHTFRleHR1cmU7XG59XG5cbmV4cG9ydCBjbGFzcyBDdWJlTWFwIGltcGxlbWVudHMgSVVuYm91bmRDdWJlTWFwLCBJQm91bmRDdWJlTWFwIHtcbiAgcHJpdmF0ZSBfd2lkdGg6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgX2hlaWdodDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfbWluQnVmZmVyU2l6ZTogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfdGV4dHVyZTogV2ViR0xUZXh0dXJlIHwgbnVsbCA9IG51bGw7XG5cbiAgaW5pdGlhbGl6ZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICh3aWR0aCA8IDEpIHRocm93IG5ldyBFcnJvcihgY3ViZSBtYXA6IHdpZHRoIGlzIDwgMSwgaW5wdXQ6ICR7d2lkdGh9YCk7XG4gICAgaWYgKGhlaWdodCA8IDEpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGN1YmUgbWFwOiBoZWlnaHQgaXMgPCAxLCBpbnB1dDogJHtoZWlnaHR9YCk7XG4gICAgY29uc3QgZ2wgPSBXZWJHTENvbnRleHQuZ2V0Q29udGV4dCgpO1xuICAgIHRoaXMuX3RleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG4gICAgdGhpcy5fd2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XG4gICAgdGhpcy5fbWluQnVmZmVyU2l6ZSA9IHRoaXMuX3dpZHRoICogdGhpcy5faGVpZ2h0ICogNDtcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgY29uc3QgZ2wgPSBXZWJHTENvbnRleHQuZ2V0Q29udGV4dCgpO1xuICAgIGdsLmRlbGV0ZVRleHR1cmUodGhpcy5fdGV4dHVyZSk7XG4gIH1cblxuICByYXdCaW5kKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5fdGV4dHVyZSkgdGhyb3cgbmV3IEVycm9yKCdjdWJlIG1hcDogbm90IGluaXRpYWxpemVkJyk7XG4gICAgY29uc3QgZ2wgPSBXZWJHTENvbnRleHQuZ2V0Q29udGV4dCgpO1xuICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfQ1VCRV9NQVAsIHRoaXMuX3RleHR1cmUpO1xuICB9XG5cbiAgYmluZChpbkNhbGxiYWNrOiAoYm91bmQ6IElCb3VuZEN1YmVNYXApID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLnJhd0JpbmQoKTtcblxuICAgIGluQ2FsbGJhY2sodGhpcyk7XG5cbiAgICBDdWJlTWFwLnVuYmluZCgpO1xuICB9XG5cbiAgc3RhdGljIHVuYmluZCgpOiB2b2lkIHtcbiAgICBjb25zdCBnbCA9IFdlYkdMQ29udGV4dC5nZXRDb250ZXh0KCk7XG5cbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFX0NVQkVfTUFQLCBudWxsKTtcbiAgfVxuXG4gIGxvYWRGcm9tTWVtb3J5KGluVHlwZTogQ3ViZU1hcFR5cGUsIGluUGl4ZWxzOiBVaW50OEFycmF5KTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLl90ZXh0dXJlKSB0aHJvdyBuZXcgRXJyb3IoJ2N1YmUgbWFwOiBub3QgaW5pdGlhbGl6ZWQnKTtcbiAgICBpZiAoaW5QaXhlbHMubGVuZ3RoIDwgdGhpcy5fbWluQnVmZmVyU2l6ZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYGN1YmUgbWFwOiBtaXNzLW1hdGNoaW5nIHBpeGVscyBidWZmZXIgc2l6ZSwgaW5wdXQ6ICR7aW5QaXhlbHMubGVuZ3RofWBcbiAgICAgICk7XG5cbiAgICBjb25zdCBnbCA9IFdlYkdMQ29udGV4dC5nZXRDb250ZXh0KCk7XG5cbiAgICBjb25zdCBsZXZlbCA9IDA7XG4gICAgY29uc3QgaW50ZXJuYWxGb3JtYXQgPSBnbC5SR0JBO1xuICAgIGNvbnN0IGJvcmRlciA9IDA7XG4gICAgY29uc3Qgc3JjRm9ybWF0ID0gZ2wuUkdCQTtcbiAgICBjb25zdCBzcmNUeXBlID0gZ2wuVU5TSUdORURfQllURTtcblxuICAgIGdsLnRleEltYWdlMkQoXG4gICAgICBnZXRDdWJlTWFwVHlwZShpblR5cGUpLFxuICAgICAgbGV2ZWwsXG4gICAgICBpbnRlcm5hbEZvcm1hdCxcbiAgICAgIHRoaXMuX3dpZHRoLFxuICAgICAgdGhpcy5faGVpZ2h0LFxuICAgICAgYm9yZGVyLFxuICAgICAgc3JjRm9ybWF0LFxuICAgICAgc3JjVHlwZSxcbiAgICAgIGluUGl4ZWxzXG4gICAgKTtcbiAgfVxuXG4gIGFsbG9jYXRlKCk6IHZvaWQge1xuICAgIGNvbnN0IGdsID0gV2ViR0xDb250ZXh0LmdldENvbnRleHQoKTtcblxuICAgIGNvbnN0IGxldmVsID0gMDtcbiAgICBjb25zdCBpbnRlcm5hbEZvcm1hdCA9IGdsLlJHQkE7XG4gICAgY29uc3QgYm9yZGVyID0gMDtcbiAgICBjb25zdCBzcmNGb3JtYXQgPSBnbC5SR0JBO1xuICAgIGNvbnN0IHNyY1R5cGUgPSBnbC5VTlNJR05FRF9CWVRFO1xuXG4gICAgY29uc3QgcGl4ZWxzID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5fd2lkdGggKiB0aGlzLl9oZWlnaHQgKiA0KTtcblxuICAgIFtcbiAgICAgIEN1YmVNYXBUeXBlLm5lZ2F0aXZlWCxcbiAgICAgIEN1YmVNYXBUeXBlLm5lZ2F0aXZlWSxcbiAgICAgIEN1YmVNYXBUeXBlLm5lZ2F0aXZlWixcbiAgICAgIEN1YmVNYXBUeXBlLnBvc2l0aXZlWCxcbiAgICAgIEN1YmVNYXBUeXBlLnBvc2l0aXZlWSxcbiAgICAgIEN1YmVNYXBUeXBlLnBvc2l0aXZlWlxuICAgIF0uZm9yRWFjaCgodHlwZSkgPT4ge1xuICAgICAgZ2wudGV4SW1hZ2UyRChcbiAgICAgICAgZ2V0Q3ViZU1hcFR5cGUodHlwZSksXG4gICAgICAgIGxldmVsLFxuICAgICAgICBpbnRlcm5hbEZvcm1hdCxcbiAgICAgICAgdGhpcy5fd2lkdGgsXG4gICAgICAgIHRoaXMuX2hlaWdodCxcbiAgICAgICAgYm9yZGVyLFxuICAgICAgICBzcmNGb3JtYXQsXG4gICAgICAgIHNyY1R5cGUsXG4gICAgICAgIHBpeGVsc1xuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIGNvbXBsZXRlKCkge1xuICAgIGNvbnN0IGdsID0gV2ViR0xDb250ZXh0LmdldENvbnRleHQoKTtcblxuICAgIGdsLmdlbmVyYXRlTWlwbWFwKGdsLlRFWFRVUkVfQ1VCRV9NQVApO1xuICAgIGdsLnRleFBhcmFtZXRlcmkoXG4gICAgICBnbC5URVhUVVJFX0NVQkVfTUFQLFxuICAgICAgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLFxuICAgICAgZ2wuTElORUFSX01JUE1BUF9MSU5FQVJcbiAgICApO1xuICB9XG5cbiAgZ2V0V2lkdGgoKTogbnVtYmVyIHtcbiAgICBpZiAoIXRoaXMuX3RleHR1cmUpIHRocm93IG5ldyBFcnJvcignY3ViZSBtYXA6IG5vdCBpbml0aWFsaXplZCcpO1xuXG4gICAgcmV0dXJuIHRoaXMuX3dpZHRoO1xuICB9XG5cbiAgZ2V0SGVpZ2h0KCk6IG51bWJlciB7XG4gICAgaWYgKCF0aGlzLl90ZXh0dXJlKSB0aHJvdyBuZXcgRXJyb3IoJ2N1YmUgbWFwOiBub3QgaW5pdGlhbGl6ZWQnKTtcblxuICAgIHJldHVybiB0aGlzLl9oZWlnaHQ7XG4gIH1cblxuICBnZXRSYXdPYmplY3QoKSB7XG4gICAgaWYgKCF0aGlzLl90ZXh0dXJlKSB0aHJvdyBuZXcgRXJyb3IoJ3RleHR1cmUgbm90IGluaXRpYWxpemVkJyk7XG5cbiAgICAvLyBUT0RPOiB0aGlzIGlzIHVnbHlcbiAgICByZXR1cm4gdGhpcy5fdGV4dHVyZTtcbiAgfVxufVxuIiwKICAiaW1wb3J0IHsgV2ViR0xDb250ZXh0IH0gZnJvbSAnLi9XZWJHTENvbnRleHQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElVbmJvdW5kRGF0YVRleHR1cmUge1xuICBpbml0aWFsaXplKGRhdGE6IG51bWJlcltdIHwgbnVtYmVyKTogdm9pZDtcbiAgcmF3QmluZCgpOiB2b2lkO1xuICBwcmVCaW5kKGluQ2FsbGJhY2s6IChib3VuZDogSUJvdW5kRGF0YVRleHR1cmUpID0+IHZvaWQpOiB2b2lkO1xuICBiaW5kKGluQ2FsbGJhY2s6IChib3VuZDogSUJvdW5kRGF0YVRleHR1cmUpID0+IHZvaWQpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElCb3VuZERhdGFUZXh0dXJlIGV4dGVuZHMgSVVuYm91bmREYXRhVGV4dHVyZSB7XG4gIGFsbG9jYXRlKGRhdGE6IG51bWJlcltdIHwgbnVtYmVyKTogdm9pZDtcbiAgdXBkYXRlKHN0YXJ0OiBudW1iZXIsIGRhdGE6IG51bWJlcltdKTogdm9pZDtcbn1cblxuZXhwb3J0IGNsYXNzIERhdGFUZXh0dXJlIGltcGxlbWVudHMgSUJvdW5kRGF0YVRleHR1cmUge1xuICBwcml2YXRlIF90ZXh0dXJlOiBXZWJHTFRleHR1cmUgfCBudWxsID0gbnVsbDtcblxuICBwcml2YXRlIF9idWZmZXI6IEZsb2F0MzJBcnJheSB8IHVuZGVmaW5lZDtcblxuICAvLyBpbml0aWFsaXplKGRhdGE6IG51bWJlcltdID0gW10sIG51bUNvbXBvbmVudHM6IG51bWJlciA9IDEpIHtcbiAgaW5pdGlhbGl6ZShkYXRhOiBudW1iZXJbXSB8IG51bWJlcikge1xuICAgIGlmICh0aGlzLl90ZXh0dXJlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgdGV4dHVyZSBhbHJlYWR5IGluaXRpYWxpemVkJyk7XG4gICAgfVxuXG4gICAgY29uc3QgZ2wgPSBXZWJHTENvbnRleHQuZ2V0Q29udGV4dCgpO1xuXG4gICAgdGhpcy5fdGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcbiAgICBpZiAoIXRoaXMuX3RleHR1cmUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZGF0YSB0ZXh0dXJlIGZhaWxlZCB0byBiZSBjcmVhdGVkJyk7XG4gICAgfVxuXG4gICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGhpcy5fdGV4dHVyZSk7XG5cbiAgICAvLyB3ZSBkb24ndCB3YW50IGFueSBmaWx0ZXJpbmdcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9ULCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLk5FQVJFU1QpO1xuXG4gICAgLy8gdGhpcy51cGRhdGUoZGF0YSwgbnVtQ29tcG9uZW50cyk7XG4gICAgdGhpcy5hbGxvY2F0ZShkYXRhKTtcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgY29uc3QgZ2wgPSBXZWJHTENvbnRleHQuZ2V0Q29udGV4dCgpO1xuICAgIGdsLmRlbGV0ZVRleHR1cmUodGhpcy5fdGV4dHVyZSk7XG4gIH1cblxuICAvLyB1cGRhdGUoZGF0YTogbnVtYmVyW10sIG51bUNvbXBvbmVudHM6IG51bWJlciA9IDEpIHtcbiAgYWxsb2NhdGUoZGF0YTogbnVtYmVyW10gfCBudW1iZXIpIHtcbiAgICBpZiAoIXRoaXMuX3RleHR1cmUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZGF0YSB0ZXh0dXJlIG5vdCBpbml0aWFsaXplZCcpO1xuICAgIH1cbiAgICBjb25zdCBkYXRhU2l6ZSA9IEFycmF5LmlzQXJyYXkoZGF0YSkgPyBkYXRhLmxlbmd0aCA6IGRhdGE7XG4gICAgaWYgKGRhdGFTaXplIDw9IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigndGV4dHVyZTogd2lkdGggbXVzdCBiZSBwb3NpdGl2ZScpO1xuICAgIH1cbiAgICBpZiAoZGF0YVNpemUgPiAyMDQ4KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGRhdGEgdGV4dHVyZSBtYXggc2l6ZSBpcyAyMDQ4IChpbnB1dCB3YXMgJHtkYXRhU2l6ZX0pYCk7XG4gICAgfVxuXG4gICAgY29uc3QgZ2wgPSBXZWJHTENvbnRleHQuZ2V0Q29udGV4dCgpO1xuXG4gICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGhpcy5fdGV4dHVyZSk7XG5cbiAgICAvLyBkb25lIGZvciB0eXBlIHNhZmV0eSBjb21wbGlhbmNlIHJlYXNvbnNcbiAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgLy8gLT4gbmV3IEZsb2F0MzJBcnJheShudW1iZXJbXSlcbiAgICAgIHRoaXMuX2J1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkoZGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIC0+IG5ldyBGbG9hdDMyQXJyYXkobnVtYmVyKVxuICAgICAgdGhpcy5fYnVmZmVyID0gbmV3IEZsb2F0MzJBcnJheShkYXRhKTtcbiAgICB9XG5cbiAgICAvLyAvLyBleHBhbmQgdGhlIGRhdGEgdG8gNCB2YWx1ZXMgcGVyIHBpeGVsLlxuICAgIC8vIGNvbnN0IG51bUVsZW1lbnRzID0gZGF0YS5sZW5ndGggLyBudW1Db21wb25lbnRzO1xuICAgIC8vIGNvbnN0IGV4cGFuZGVkRGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkobnVtRWxlbWVudHMgKiA0KTtcbiAgICAvLyBmb3IgKGxldCBpaSA9IDA7IGlpIDwgbnVtRWxlbWVudHM7ICsraWkpIHtcbiAgICAvLyAgIGNvbnN0IHNyY09mZnNldCA9IGlpICogbnVtQ29tcG9uZW50cztcbiAgICAvLyAgIGNvbnN0IGRzdE9mZnNldCA9IGlpICogNDtcbiAgICAvLyAgIGZvciAobGV0IGpqID0gMDsgamogPCBudW1Db21wb25lbnRzOyArK2pqKVxuICAgIC8vICAgICBleHBhbmRlZERhdGFbZHN0T2Zmc2V0ICsgampdID0gZGF0YVtzcmNPZmZzZXQgKyBqal07XG4gICAgLy8gfVxuXG4gICAgY29uc3QgbGV2ZWwgPSAwO1xuICAgIGNvbnN0IGludGVybmFsRm9ybWF0ID0gZ2wuUjMyRjtcbiAgICBjb25zdCB3aWR0aCA9IGRhdGFTaXplO1xuICAgIGNvbnN0IGhlaWdodCA9IDE7XG4gICAgY29uc3QgYm9yZGVyID0gMDtcbiAgICBjb25zdCBmb3JtYXQgPSBnbC5SRUQ7XG4gICAgY29uc3QgdHlwZSA9IGdsLkZMT0FUO1xuICAgIGdsLnRleEltYWdlMkQoXG4gICAgICBnbC5URVhUVVJFXzJELFxuICAgICAgbGV2ZWwsXG4gICAgICBpbnRlcm5hbEZvcm1hdCxcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0LFxuICAgICAgYm9yZGVyLFxuICAgICAgZm9ybWF0LFxuICAgICAgdHlwZSxcbiAgICAgIHRoaXMuX2J1ZmZlclxuICAgICk7XG4gIH1cblxuICB1cGRhdGUoc3RhcnQ6IG51bWJlciwgZGF0YTogbnVtYmVyW10pIHtcbiAgICBpZiAoIXRoaXMuX3RleHR1cmUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZGF0YSB0ZXh0dXJlIG5vdCBpbml0aWFsaXplZCcpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuX2J1ZmZlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdkYXRhIHRleHR1cmUgdXBkYXRlIGJ1dCBub3QgcHJldmlvdXNseSBhbGxvY2F0ZWQnKTtcbiAgICB9XG4gICAgaWYgKHN0YXJ0ICsgZGF0YS5sZW5ndGggPiB0aGlzLl9idWZmZXIubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBkYXRhIHRleHR1cmUgdXBkYXRlIGJ1dCBzaXplIGlzIGxhcmdlciAoc3RhcnQ6ICR7c3RhcnR9LCBsZW5ndGg6ICR7ZGF0YS5sZW5ndGh9LCBtYXg6ICR7dGhpcy5fYnVmZmVyLmxlbmd0aH0pYFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBnbCA9IFdlYkdMQ29udGV4dC5nZXRDb250ZXh0KCk7XG5cbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0aGlzLl90ZXh0dXJlKTtcblxuICAgIC8vIHRoaXMuX2J1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkoZGF0YSk7XG5cbiAgICBmb3IgKGxldCBpaSA9IDA7IGlpIDwgZGF0YS5sZW5ndGg7ICsraWkpIHtcbiAgICAgIHRoaXMuX2J1ZmZlcltpaV0gPSBkYXRhW2lpXTtcbiAgICB9XG5cbiAgICBjb25zdCBsZXZlbCA9IDA7XG4gICAgLy8gY29uc3QgaW50ZXJuYWxGb3JtYXQgPSBnbC5SMzJGO1xuICAgIGNvbnN0IHdpZHRoID0gZGF0YS5sZW5ndGg7XG4gICAgY29uc3QgaGVpZ2h0ID0gMTtcbiAgICAvLyBjb25zdCBib3JkZXIgPSAwO1xuICAgIGNvbnN0IGZvcm1hdCA9IGdsLlJFRDtcbiAgICBjb25zdCB0eXBlID0gZ2wuRkxPQVQ7XG5cbiAgICBjb25zdCB4b2Zmc2V0ID0gc3RhcnQ7XG4gICAgY29uc3QgeW9mZnNldCA9IDA7IC8vIG11c3Qgc3RheSAwXG4gICAgY29uc3Qgc3JjT2Zmc2V0ID0gMDtcblxuICAgIGdsLnRleFN1YkltYWdlMkQoXG4gICAgICBnbC5URVhUVVJFXzJELFxuICAgICAgbGV2ZWwsXG4gICAgICB4b2Zmc2V0LFxuICAgICAgeW9mZnNldCxcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0LFxuICAgICAgZm9ybWF0LFxuICAgICAgdHlwZSxcbiAgICAgIHRoaXMuX2J1ZmZlcixcbiAgICAgIHNyY09mZnNldFxuICAgICk7XG4gIH1cblxuICByYXdCaW5kKCkge1xuICAgIGlmICghdGhpcy5fdGV4dHVyZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdkYXRhIHRleHR1cmUgbm90IGluaXRpYWxpemVkJyk7XG4gICAgfVxuXG4gICAgY29uc3QgZ2wgPSBXZWJHTENvbnRleHQuZ2V0Q29udGV4dCgpO1xuXG4gICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGhpcy5fdGV4dHVyZSk7XG4gIH1cblxuICBwcmVCaW5kKGluQ2FsbGJhY2s6IChib3VuZDogSUJvdW5kRGF0YVRleHR1cmUpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLnJhd0JpbmQoKTtcbiAgICBpbkNhbGxiYWNrKHRoaXMpO1xuICB9XG5cbiAgYmluZChpbkNhbGxiYWNrOiAoYm91bmQ6IElCb3VuZERhdGFUZXh0dXJlKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5wcmVCaW5kKGluQ2FsbGJhY2spO1xuICAgIERhdGFUZXh0dXJlLnVuYmluZCgpO1xuICB9XG5cbiAgc3RhdGljIHVuYmluZCgpOiB2b2lkIHtcbiAgICBjb25zdCBnbCA9IFdlYkdMQ29udGV4dC5nZXRDb250ZXh0KCk7XG5cbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBudWxsKTtcbiAgfVxufVxuIiwKICAiaW1wb3J0IHsgV2ViR0xDb250ZXh0IH0gZnJvbSAnLi9XZWJHTENvbnRleHQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElVbmJvdW5kRGF0YVRleHR1cmVWZWM0IHtcbiAgaW5pdGlhbGl6ZShkYXRhOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXVtdKTogdm9pZDtcbiAgcmF3QmluZCgpOiB2b2lkO1xuICBwcmVCaW5kKGluQ2FsbGJhY2s6IChib3VuZDogSUJvdW5kRGF0YVRleHR1cmVWZWM0KSA9PiB2b2lkKTogdm9pZDtcbiAgYmluZChpbkNhbGxiYWNrOiAoYm91bmQ6IElCb3VuZERhdGFUZXh0dXJlVmVjNCkgPT4gdm9pZCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUJvdW5kRGF0YVRleHR1cmVWZWM0IGV4dGVuZHMgSVVuYm91bmREYXRhVGV4dHVyZVZlYzQge1xuICBhbGxvY2F0ZShkYXRhOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXVtdKTogdm9pZDtcbiAgdXBkYXRlKHN0YXJ0OiBudW1iZXIsIGRhdGE6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdW10pOiB2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgRGF0YVRleHR1cmVWZWM0IGltcGxlbWVudHMgSUJvdW5kRGF0YVRleHR1cmVWZWM0IHtcbiAgcHJpdmF0ZSBfdGV4dHVyZTogV2ViR0xUZXh0dXJlIHwgbnVsbCA9IG51bGw7XG5cbiAgcHJpdmF0ZSBfYnVmZmVyOiBVaW50OEFycmF5IHwgdW5kZWZpbmVkO1xuXG4gIC8vIGluaXRpYWxpemUoZGF0YTogbnVtYmVyW10gPSBbXSwgbnVtQ29tcG9uZW50czogbnVtYmVyID0gMSkge1xuICBpbml0aWFsaXplKGRhdGE6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdW10gPSBbXSkge1xuICAgIGlmICh0aGlzLl90ZXh0dXJlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgdGV4dHVyZSBhbHJlYWR5IGluaXRpYWxpemVkJyk7XG4gICAgfVxuXG4gICAgY29uc3QgZ2wgPSBXZWJHTENvbnRleHQuZ2V0Q29udGV4dCgpO1xuXG4gICAgdGhpcy5fdGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcbiAgICBpZiAoIXRoaXMuX3RleHR1cmUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZGF0YSB0ZXh0dXJlIGZhaWxlZCB0byBiZSBjcmVhdGVkJyk7XG4gICAgfVxuXG4gICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGhpcy5fdGV4dHVyZSk7XG5cbiAgICAvLyB3ZSBkb24ndCB3YW50IGFueSBmaWx0ZXJpbmdcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9ULCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLk5FQVJFU1QpO1xuXG4gICAgLy8gdGhpcy51cGRhdGUoZGF0YSwgbnVtQ29tcG9uZW50cyk7XG4gICAgdGhpcy5hbGxvY2F0ZShkYXRhKTtcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgY29uc3QgZ2wgPSBXZWJHTENvbnRleHQuZ2V0Q29udGV4dCgpO1xuICAgIGdsLmRlbGV0ZVRleHR1cmUodGhpcy5fdGV4dHVyZSk7XG4gIH1cblxuICAvLyB1cGRhdGUoZGF0YTogbnVtYmVyW10sIG51bUNvbXBvbmVudHM6IG51bWJlciA9IDEpIHtcbiAgYWxsb2NhdGUoZGF0YTogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl1bXSkge1xuICAgIGlmICghdGhpcy5fdGV4dHVyZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdkYXRhIHRleHR1cmUgbm90IGluaXRpYWxpemVkJyk7XG4gICAgfVxuICAgIGlmIChkYXRhLmxlbmd0aCA8PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3RleHR1cmU6IHdpZHRoIG11c3QgYmUgcG9zaXRpdmUnKTtcbiAgICB9XG5cbiAgICBjb25zdCBnbCA9IFdlYkdMQ29udGV4dC5nZXRDb250ZXh0KCk7XG5cbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0aGlzLl90ZXh0dXJlKTtcblxuICAgIHRoaXMuX2J1ZmZlciA9IG5ldyBVaW50OEFycmF5KGRhdGEuZmxhdCgpKTtcblxuICAgIC8vIC8vIGV4cGFuZCB0aGUgZGF0YSB0byA0IHZhbHVlcyBwZXIgcGl4ZWwuXG4gICAgLy8gY29uc3QgbnVtRWxlbWVudHMgPSBkYXRhLmxlbmd0aCAvIG51bUNvbXBvbmVudHM7XG4gICAgLy8gY29uc3QgZXhwYW5kZWREYXRhID0gbmV3IEZsb2F0MzJBcnJheShudW1FbGVtZW50cyAqIDQpO1xuICAgIC8vIGZvciAobGV0IGlpID0gMDsgaWkgPCBudW1FbGVtZW50czsgKytpaSkge1xuICAgIC8vICAgY29uc3Qgc3JjT2Zmc2V0ID0gaWkgKiBudW1Db21wb25lbnRzO1xuICAgIC8vICAgY29uc3QgZHN0T2Zmc2V0ID0gaWkgKiA0O1xuICAgIC8vICAgZm9yIChsZXQgamogPSAwOyBqaiA8IG51bUNvbXBvbmVudHM7ICsramopXG4gICAgLy8gICAgIGV4cGFuZGVkRGF0YVtkc3RPZmZzZXQgKyBqal0gPSBkYXRhW3NyY09mZnNldCArIGpqXTtcbiAgICAvLyB9XG5cbiAgICBjb25zdCBsZXZlbCA9IDA7XG4gICAgY29uc3QgaW50ZXJuYWxGb3JtYXQgPSBnbC5SR0JBO1xuICAgIGNvbnN0IHdpZHRoID0gZGF0YS5sZW5ndGg7XG4gICAgY29uc3QgaGVpZ2h0ID0gMTtcbiAgICBjb25zdCBib3JkZXIgPSAwO1xuICAgIGNvbnN0IGZvcm1hdCA9IGdsLlJHQkE7XG4gICAgY29uc3QgdHlwZSA9IGdsLlVOU0lHTkVEX0JZVEU7XG4gICAgZ2wudGV4SW1hZ2UyRChcbiAgICAgIGdsLlRFWFRVUkVfMkQsXG4gICAgICBsZXZlbCxcbiAgICAgIGludGVybmFsRm9ybWF0LFxuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHQsXG4gICAgICBib3JkZXIsXG4gICAgICBmb3JtYXQsXG4gICAgICB0eXBlLFxuICAgICAgdGhpcy5fYnVmZmVyXG4gICAgKTtcbiAgfVxuXG4gIHVwZGF0ZShzdGFydDogbnVtYmVyLCBkYXRhOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXVtdKSB7XG4gICAgaWYgKCF0aGlzLl90ZXh0dXJlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgdGV4dHVyZSBub3QgaW5pdGlhbGl6ZWQnKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLl9idWZmZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZGF0YSB0ZXh0dXJlIHVwZGF0ZSBidXQgbm90IHByZXZpb3VzbHkgYWxsb2NhdGVkJyk7XG4gICAgfVxuICAgIGlmIChzdGFydCArIGRhdGEubGVuZ3RoID4gdGhpcy5fYnVmZmVyLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgZGF0YSB0ZXh0dXJlIHVwZGF0ZSBidXQgc2l6ZSBpcyBsYXJnZXIgKHN0YXJ0OiAke3N0YXJ0fSwgbGVuZ3RoOiAke2RhdGEubGVuZ3RofSwgbWF4OiAke3RoaXMuX2J1ZmZlci5sZW5ndGh9KWBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgZ2wgPSBXZWJHTENvbnRleHQuZ2V0Q29udGV4dCgpO1xuXG4gICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGhpcy5fdGV4dHVyZSk7XG5cbiAgICAvLyB0aGlzLl9idWZmZXIgPSBuZXcgVWludDhBcnJheShkYXRhLmZsYXQoKSk7XG5cbiAgICBmb3IgKGxldCBpaSA9IDA7IGlpIDwgZGF0YS5sZW5ndGg7ICsraWkpIHtcbiAgICAgIHRoaXMuX2J1ZmZlcltpaSAqIDQgKyAwXSA9IGRhdGFbaWldWzBdO1xuICAgICAgdGhpcy5fYnVmZmVyW2lpICogNCArIDFdID0gZGF0YVtpaV1bMV07XG4gICAgICB0aGlzLl9idWZmZXJbaWkgKiA0ICsgMl0gPSBkYXRhW2lpXVsyXTtcbiAgICAgIHRoaXMuX2J1ZmZlcltpaSAqIDQgKyAzXSA9IGRhdGFbaWldWzNdO1xuICAgIH1cblxuICAgIGNvbnN0IGxldmVsID0gMDtcbiAgICBjb25zdCB3aWR0aCA9IGRhdGEubGVuZ3RoO1xuICAgIGNvbnN0IGhlaWdodCA9IDE7XG4gICAgY29uc3QgZm9ybWF0ID0gZ2wuUkdCQTtcbiAgICBjb25zdCB0eXBlID0gZ2wuVU5TSUdORURfQllURTtcblxuICAgIGNvbnN0IHhvZmZzZXQgPSBzdGFydDtcbiAgICBjb25zdCB5b2Zmc2V0ID0gMDsgLy8gbXVzdCBzdGF5IDBcbiAgICBjb25zdCBzcmNPZmZzZXQgPSAwO1xuXG4gICAgZ2wudGV4U3ViSW1hZ2UyRChcbiAgICAgIGdsLlRFWFRVUkVfMkQsXG4gICAgICBsZXZlbCxcbiAgICAgIHhvZmZzZXQsXG4gICAgICB5b2Zmc2V0LFxuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHQsXG4gICAgICBmb3JtYXQsXG4gICAgICB0eXBlLFxuICAgICAgdGhpcy5fYnVmZmVyLFxuICAgICAgc3JjT2Zmc2V0XG4gICAgKTtcbiAgfVxuXG4gIHJhd0JpbmQoKSB7XG4gICAgaWYgKCF0aGlzLl90ZXh0dXJlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgdGV4dHVyZSBub3QgaW5pdGlhbGl6ZWQnKTtcbiAgICB9XG5cbiAgICBjb25zdCBnbCA9IFdlYkdMQ29udGV4dC5nZXRDb250ZXh0KCk7XG5cbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0aGlzLl90ZXh0dXJlKTtcbiAgfVxuXG4gIHByZUJpbmQoaW5DYWxsYmFjazogKGJvdW5kOiBJQm91bmREYXRhVGV4dHVyZVZlYzQpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLnJhd0JpbmQoKTtcbiAgICBpbkNhbGxiYWNrKHRoaXMpO1xuICB9XG5cbiAgYmluZChpbkNhbGxiYWNrOiAoYm91bmQ6IElCb3VuZERhdGFUZXh0dXJlVmVjNCkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMucHJlQmluZChpbkNhbGxiYWNrKTtcbiAgICBEYXRhVGV4dHVyZVZlYzQudW5iaW5kKCk7XG4gIH1cblxuICBzdGF0aWMgdW5iaW5kKCk6IHZvaWQge1xuICAgIGNvbnN0IGdsID0gV2ViR0xDb250ZXh0LmdldENvbnRleHQoKTtcblxuICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpO1xuICB9XG59XG4iLAogICJpbXBvcnQgeyBXZWJHTENvbnRleHQgfSBmcm9tICcuL1dlYkdMQ29udGV4dCc7XG5cbmV4cG9ydCBjb25zdCBjaGVja0Vycm9yID0gKCkgPT4ge1xuICBjb25zdCBnbCA9IFdlYkdMQ29udGV4dC5nZXRDb250ZXh0KCk7XG4gIGNvbnN0IGVycm9ySWQgPSBnbC5nZXRFcnJvcigpO1xuXG4gIHN3aXRjaCAoZXJyb3JJZCkge1xuICAgIC8vIEdMX05PX0VSUk9SXG4gICAgLy8gICBObyBlcnJvciBoYXMgYmVlbiByZWNvcmRlZC4gVGhlIHZhbHVlIG9mIHRoaXMgc3ltYm9saWMgY29uc3RhbnQgaXMgZ3VhcmFudGVlZCB0byBiZSAwLlxuICAgIGNhc2UgZ2wuSU5WQUxJRF9FTlVNOlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnZ2wuSU5WQUxJRF9FTlVNXFxuQW4gdW5hY2NlcHRhYmxlIHZhbHVlIGlzIHNwZWNpZmllZCBmb3IgYW4gZW51bWVyYXRlZCBhcmd1bWVudC4gVGhlIG9mZmVuZGluZyBjb21tYW5kIGlzIGlnbm9yZWQgYW5kIGhhcyBubyBvdGhlciBzaWRlIGVmZmVjdCB0aGFuIHRvIHNldCB0aGUgZXJyb3IgZmxhZy4nXG4gICAgICApO1xuICAgIGNhc2UgZ2wuSU5WQUxJRF9WQUxVRTpcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2dsLklOVkFMSURfVkFMVUVcXG5BIG51bWVyaWMgYXJndW1lbnQgaXMgb3V0IG9mIHJhbmdlLiBUaGUgb2ZmZW5kaW5nIGNvbW1hbmQgaXMgaWdub3JlZCBhbmQgaGFzIG5vIG90aGVyIHNpZGUgZWZmZWN0IHRoYW4gdG8gc2V0IHRoZSBlcnJvciBmbGFnLidcbiAgICAgICk7XG4gICAgY2FzZSBnbC5JTlZBTElEX09QRVJBVElPTjpcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2dsLklOVkFMSURfT1BFUkFUSU9OXFxuVGhlIHNwZWNpZmllZCBvcGVyYXRpb24gaXMgbm90IGFsbG93ZWQgaW4gdGhlIGN1cnJlbnQgc3RhdGUuIFRoZSBvZmZlbmRpbmcgY29tbWFuZCBpcyBpZ25vcmVkIGFuZCBoYXMgbm8gb3RoZXIgc2lkZSBlZmZlY3QgdGhhbiB0byBzZXQgdGhlIGVycm9yIGZsYWcuJ1xuICAgICAgKTtcbiAgICBjYXNlIGdsLklOVkFMSURfRlJBTUVCVUZGRVJfT1BFUkFUSU9OOlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnZ2wuSU5WQUxJRF9GUkFNRUJVRkZFUl9PUEVSQVRJT05cXG5UaGUgZnJhbWVidWZmZXIgb2JqZWN0IGlzIG5vdCBjb21wbGV0ZS4gVGhlIG9mZmVuZGluZyBjb21tYW5kIGlzIGlnbm9yZWQgYW5kIGhhcyBubyBvdGhlciBzaWRlIGVmZmVjdCB0aGFuIHRvIHNldCB0aGUgZXJyb3IgZmxhZy4nXG4gICAgICApO1xuICAgIGNhc2UgZ2wuT1VUX09GX01FTU9SWTpcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2dsLk9VVF9PRl9NRU1PUllcXG5UaGVyZSBpcyBub3QgZW5vdWdoIG1lbW9yeSBsZWZ0IHRvIGV4ZWN1dGUgdGhlIGNvbW1hbmQuIFRoZSBzdGF0ZSBvZiB0aGUgR0wgaXMgdW5kZWZpbmVkLCBleGNlcHQgZm9yIHRoZSBzdGF0ZSBvZiB0aGUgZXJyb3IgZmxhZ3MsIGFmdGVyIHRoaXMgZXJyb3IgaXMgcmVjb3JkZWQuJ1xuICAgICAgKTtcbiAgICBjYXNlIGdsLkNPTlRFWFRfTE9TVF9XRUJHTDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2dsLkNPTlRFWFRfTE9TVF9XRUJHTFxcbiBJZiB0aGUgV2ViR0wgY29udGV4dCBpcyBsb3N0LCB0aGlzIGVycm9yIGlzIHJldHVybmVkIG9uIHRoZSBmaXJzdCBjYWxsIHRvIGdldEVycm9yLiBBZnRlcndhcmRzIGFuZCB1bnRpbCB0aGUgY29udGV4dCBoYXMgYmVlbiByZXN0b3JlZCwgaXQgcmV0dXJucyBnbC5OT19FUlJPUi4nXG4gICAgICApO1xuICAgIC8vIGNhc2UgZ2wuU1RBQ0tfVU5ERVJGTE9XOlxuICAgIC8vICAgdGhyb3cgbmV3IEVycm9yKFwiQW4gYXR0ZW1wdCBoYXMgYmVlbiBtYWRlIHRvIHBlcmZvcm0gYW4gb3BlcmF0aW9uIHRoYXQgd291bGQgY2F1c2UgYW4gaW50ZXJuYWwgc3RhY2sgdG8gdW5kZXJmbG93LlwiKVxuICAgIC8vIGNhc2UgZ2wuU1RBQ0tfT1ZFUkZMT1c6XG4gICAgLy8gICB0aHJvdyBuZXcgRXJyb3IoXCJBbiBhdHRlbXB0IGhhcyBiZWVuIG1hZGUgdG8gcGVyZm9ybSBhbiBvcGVyYXRpb24gdGhhdCB3b3VsZCBjYXVzZSBhbiBpbnRlcm5hbCBzdGFjayB0byBvdmVyZmxvdy5cIilcbiAgfVxufTtcbiIsCiAgImltcG9ydCB7IFdlYkdMQ29udGV4dCB9IGZyb20gJy4vV2ViR0xDb250ZXh0JztcblxuZXhwb3J0IGNsYXNzIEZlbmNlU3luYyB7XG4gIHByaXZhdGUgX3N5bmM6IFdlYkdMU3luYyB8IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX3N5bmMpIHtcbiAgICAgIC8vIHRocm93IG5ldyBFcnJvcihcImZlbmNlIG5vdCBzdGFydGVkXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBnbCA9IFdlYkdMQ29udGV4dC5nZXRDb250ZXh0KCk7XG4gICAgZ2wuZGVsZXRlU3luYyh0aGlzLl9zeW5jKTtcbiAgICB0aGlzLl9zeW5jID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaXNTdGFydGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9zeW5jICE9PSB1bmRlZmluZWQ7XG4gIH1cblxuICBzdGFydCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fc3luYykge1xuICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKFwiZmVuY2UgYWxyZWFkeSBzdGFydGVkXCIpO1xuICAgICAgdGhpcy5kaXNwb3NlKCk7XG4gICAgfVxuICAgIGNvbnN0IGdsID0gV2ViR0xDb250ZXh0LmdldENvbnRleHQoKTtcbiAgICBjb25zdCB0bXBTeW5jID0gZ2wuZmVuY2VTeW5jKGdsLlNZTkNfR1BVX0NPTU1BTkRTX0NPTVBMRVRFLCAwKTtcbiAgICBpZiAodG1wU3luYyA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgY3JlYXRlIGEgd2ViZ2wgZmVuY2UnKTtcbiAgICB9XG4gICAgdGhpcy5fc3luYyA9IHRtcFN5bmM7XG4gICAgZ2wuZmx1c2goKTtcbiAgICBnbC5maW5pc2goKTtcbiAgfVxuXG4gIGlzU2lnbmFsZWQoKTogYm9vbGVhbiB7XG4gICAgaWYgKCF0aGlzLl9zeW5jKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZlbmNlIG5vdCBzdGFydGVkJyk7XG4gICAgfVxuXG4gICAgY29uc3QgZ2wgPSBXZWJHTENvbnRleHQuZ2V0Q29udGV4dCgpO1xuICAgIGNvbnN0IHNpZ25hbGVkID0gZ2wuZ2V0U3luY1BhcmFtZXRlcih0aGlzLl9zeW5jLCBnbC5TWU5DX1NUQVRVUyk7XG4gICAgcmV0dXJuIHNpZ25hbGVkID09PSBnbC5TSUdOQUxFRDtcbiAgfVxuXG4gIHdhaXQodGltZW91dE5hbm9TZWM6IG51bWJlcik6ICdkb25lJyB8ICd0aW1lZC1vdXQnIHtcbiAgICBpZiAoIXRoaXMuX3N5bmMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZmVuY2Ugbm90IHN0YXJ0ZWQnKTtcbiAgICB9XG4gICAgY29uc3QgZ2wgPSBXZWJHTENvbnRleHQuZ2V0Q29udGV4dCgpO1xuXG4gICAgY29uc3QgYml0ZmxhZ3MgPSAwO1xuICAgIGNvbnN0IHN0YXR1cyA9IGdsLmNsaWVudFdhaXRTeW5jKHRoaXMuX3N5bmMsIGJpdGZsYWdzLCB0aW1lb3V0TmFub1NlYyk7XG5cbiAgICBzd2l0Y2ggKHN0YXR1cykge1xuICAgICAgY2FzZSBnbC5USU1FT1VUX0VYUElSRUQ6XG4gICAgICAgIC8vIGl0J3Mgbm90IGRvbmUsIGNoZWNrIGFnYWluIG5leHQgdGltZVxuICAgICAgICByZXR1cm4gJ3RpbWVkLW91dCc7XG4gICAgICBjYXNlIGdsLldBSVRfRkFJTEVEOlxuICAgICAgICAvLyB0aHJvdyBuZXcgRXJyb3IoJ2ZlbmNlLndhaXQgLT4gc2hvdWxkIG5ldmVyIGdldCBoZXJlJyk7XG4gICAgICAgIGNvbnNvbGUud2FybignZmVuY2Uud2FpdCAtPiBzaG91bGQgbmV2ZXIgZ2V0IGhlcmUnKTtcbiAgICAgICAgLy8gcmV0dXJuICd0aW1lZC1vdXQnO1xuICAgICAgICB0aGlzLmRpc3Bvc2UoKTtcbiAgICAgICAgcmV0dXJuICdkb25lJztcbiAgICAgIGNhc2UgZ2wuQUxSRUFEWV9TSUdOQUxFRDpcbiAgICAgIGNhc2UgZ2wuQ09ORElUSU9OX1NBVElTRklFRDpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRoaXMuZGlzcG9zZSgpO1xuICAgICAgICByZXR1cm4gJ2RvbmUnO1xuICAgIH1cbiAgfVxufVxuIiwKICAiaW1wb3J0IHsgV2ViR0xDb250ZXh0IH0gZnJvbSAnLi9XZWJHTENvbnRleHQnO1xuaW1wb3J0IHsgSUJvdW5kVGV4dHVyZSB9IGZyb20gJy4vVGV4dHVyZSc7XG5pbXBvcnQgeyBJQm91bmRSZW5kZXJCdWZmZXIgfSBmcm9tICcuL1JlbmRlckJ1ZmZlcic7XG5pbXBvcnQgeyBDdWJlTWFwVHlwZSwgSUJvdW5kQ3ViZU1hcCwgZ2V0Q3ViZU1hcFR5cGUgfSBmcm9tICcuL0N1YmVNYXAnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElVbmJvdW5kRnJhbWVCdWZmZXIge1xuICByYXdCaW5kKCk6IHZvaWQ7XG4gIGJpbmQoaW5DYWxsYmFjazogKGJvdW5kOiBJQm91bmRGcmFtZUJ1ZmZlcikgPT4gdm9pZCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUJvdW5kRnJhbWVCdWZmZXIge1xuICBhdHRhY2hUZXh0dXJlKHRleHR1cmU6IElCb3VuZFRleHR1cmUpOiB2b2lkO1xuICBhdHRhY2hEZXB0aFRleHR1cmUodGV4dHVyZTogSUJvdW5kVGV4dHVyZSk6IHZvaWQ7XG4gIGF0dGFjaFJlbmRlckJ1ZmZlcih0ZXh0dXJlOiBJQm91bmRSZW5kZXJCdWZmZXIpOiB2b2lkO1xuICBhdHRhY2hDdWJlTWFwKHRleHR1cmU6IElCb3VuZEN1YmVNYXAsIHR5cGU6IEN1YmVNYXBUeXBlKTogdm9pZDtcbiAgZ2V0UGl4ZWxzKFxuICAgIHg6IG51bWJlcixcbiAgICB5OiBudW1iZXIsXG4gICAgd2lkdGg6IG51bWJlcixcbiAgICBoZWlnaHQ6IG51bWJlcixcbiAgICBvdXREc3Q6IFVpbnQ4QXJyYXlcbiAgKTogdm9pZDtcbn1cblxuZXhwb3J0IGNsYXNzIEZyYW1lQnVmZmVyIGltcGxlbWVudHMgSVVuYm91bmRGcmFtZUJ1ZmZlciwgSUJvdW5kRnJhbWVCdWZmZXIge1xuICBwcml2YXRlIF9mcmFtZUJ1ZmZlcjogV2ViR0xGcmFtZWJ1ZmZlcjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zdCBnbCA9IFdlYkdMQ29udGV4dC5nZXRDb250ZXh0KCk7XG5cbiAgICBjb25zdCB0bXBGYm8gPSBnbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuICAgIGlmICh0bXBGYm8gPT09IG51bGwpIHRocm93IG5ldyBFcnJvcignbnVsbCBmcmFtZSBidWZmZXIgb2JqZWN0Jyk7XG4gICAgdGhpcy5fZnJhbWVCdWZmZXIgPSB0bXBGYm87XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIGNvbnN0IGdsID0gV2ViR0xDb250ZXh0LmdldENvbnRleHQoKTtcbiAgICBnbC5kZWxldGVGcmFtZWJ1ZmZlcih0aGlzLl9mcmFtZUJ1ZmZlcik7XG4gIH1cblxuICByYXdCaW5kKCkge1xuICAgIGNvbnN0IGdsID0gV2ViR0xDb250ZXh0LmdldENvbnRleHQoKTtcbiAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIHRoaXMuX2ZyYW1lQnVmZmVyKTtcbiAgfVxuXG4gIGJpbmQoaW5DYWxsYmFjazogKGJvdW5kOiBJQm91bmRGcmFtZUJ1ZmZlcikgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMucmF3QmluZCgpO1xuXG4gICAgaW5DYWxsYmFjayh0aGlzKTtcblxuICAgIEZyYW1lQnVmZmVyLnVuYmluZCgpO1xuICB9XG5cbiAgc3RhdGljIHVuYmluZCgpIHtcbiAgICBjb25zdCBnbCA9IFdlYkdMQ29udGV4dC5nZXRDb250ZXh0KCk7XG5cbiAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIG51bGwpO1xuICB9XG5cbiAgYXR0YWNoVGV4dHVyZSh0ZXh0dXJlOiBJQm91bmRUZXh0dXJlKSB7XG4gICAgY29uc3QgZ2wgPSBXZWJHTENvbnRleHQuZ2V0Q29udGV4dCgpO1xuXG4gICAgLy8gZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCB0aGlzLl9mcmFtZUJ1ZmZlcik7XG5cbiAgICAvLyB0ZXh0dXJlLnJhd0JpbmQoKTtcblxuICAgIGNvbnN0IG1pcG1hcExldmVsID0gMDtcblxuICAgIGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKFxuICAgICAgZ2wuRlJBTUVCVUZGRVIsXG4gICAgICBnbC5DT0xPUl9BVFRBQ0hNRU5UMCxcbiAgICAgIGdsLlRFWFRVUkVfMkQsXG4gICAgICB0ZXh0dXJlLmdldFJhd09iamVjdCgpLFxuICAgICAgbWlwbWFwTGV2ZWxcbiAgICApO1xuICB9XG5cbiAgYXR0YWNoRGVwdGhUZXh0dXJlKHRleHR1cmU6IElCb3VuZFRleHR1cmUpIHtcbiAgICBjb25zdCBnbCA9IFdlYkdMQ29udGV4dC5nZXRDb250ZXh0KCk7XG5cbiAgICAvLyBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIHRoaXMuX2ZyYW1lQnVmZmVyKTtcblxuICAgIC8vIHRleHR1cmUucmF3QmluZCgpO1xuXG4gICAgY29uc3QgbWlwbWFwTGV2ZWwgPSAwO1xuXG4gICAgZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoXG4gICAgICBnbC5GUkFNRUJVRkZFUixcbiAgICAgIGdsLkRFUFRIX0FUVEFDSE1FTlQsXG4gICAgICBnbC5URVhUVVJFXzJELFxuICAgICAgdGV4dHVyZS5nZXRSYXdPYmplY3QoKSxcbiAgICAgIG1pcG1hcExldmVsXG4gICAgKTtcbiAgfVxuXG4gIGF0dGFjaFJlbmRlckJ1ZmZlcih0ZXh0dXJlOiBJQm91bmRSZW5kZXJCdWZmZXIpOiB2b2lkIHtcbiAgICBjb25zdCBnbCA9IFdlYkdMQ29udGV4dC5nZXRDb250ZXh0KCk7XG5cbiAgICBnbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihcbiAgICAgIGdsLkZSQU1FQlVGRkVSLFxuICAgICAgZ2wuREVQVEhfQVRUQUNITUVOVCxcbiAgICAgIGdsLlJFTkRFUkJVRkZFUixcbiAgICAgIHRleHR1cmUuZ2V0UmF3T2JqZWN0KClcbiAgICApO1xuICB9XG5cbiAgYXR0YWNoQ3ViZU1hcCh0ZXh0dXJlOiBJQm91bmRDdWJlTWFwLCB0eXBlOiBDdWJlTWFwVHlwZSkge1xuICAgIGNvbnN0IGdsID0gV2ViR0xDb250ZXh0LmdldENvbnRleHQoKTtcblxuICAgIC8vIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgdGhpcy5fZnJhbWVCdWZmZXIpO1xuXG4gICAgLy8gdGV4dHVyZS5yYXdCaW5kKCk7XG5cbiAgICBjb25zdCBtaXBtYXBMZXZlbCA9IDA7XG5cbiAgICBnbC5mcmFtZWJ1ZmZlclRleHR1cmUyRChcbiAgICAgIGdsLkZSQU1FQlVGRkVSLFxuICAgICAgZ2wuQ09MT1JfQVRUQUNITUVOVDAsXG4gICAgICBnZXRDdWJlTWFwVHlwZSh0eXBlKSxcbiAgICAgIHRleHR1cmUuZ2V0UmF3T2JqZWN0KCksXG4gICAgICBtaXBtYXBMZXZlbFxuICAgICk7XG4gIH1cblxuICBnZXRQaXhlbHMoXG4gICAgeDogbnVtYmVyLFxuICAgIHk6IG51bWJlcixcbiAgICB3aWR0aDogbnVtYmVyLFxuICAgIGhlaWdodDogbnVtYmVyLFxuICAgIG91dERzdDogVWludDhBcnJheVxuICApOiB2b2lkIHtcbiAgICBjb25zdCBnbCA9IFdlYkdMQ29udGV4dC5nZXRDb250ZXh0KCk7XG4gICAgZ2wucmVhZFBpeGVscyh4LCB5LCB3aWR0aCwgaGVpZ2h0LCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBvdXREc3QpO1xuICB9XG59XG4iLAogICJpbXBvcnQgeyBXZWJHTENvbnRleHQgfSBmcm9tICcuL1dlYkdMQ29udGV4dCc7XG5pbXBvcnQgeyBJVW5ib3VuZFNoYWRlciB9IGZyb20gJy4vU2hhZGVyUHJvZ3JhbSc7XG5cbmV4cG9ydCBjb25zdCBCeXRlc1BlclBpeGVsID0gNDsgLy8gZmxvYXQgKGZsb2F0MzIgPSA0IGJ5dGVzKVxuXG5leHBvcnQgZW51bSBBdHRyaWJ1dGVUeXBlIHtcbiAgZmxvYXQsXG4gIHZlYzJmLFxuICB2ZWMzZixcbiAgdmVjNGYsXG4gIG1hdDNmLFxuICBtYXQ0ZlxufVxuXG5jb25zdCBnZXRBdHRyVHlwZVNpemUgPSAoaW5UeXBlOiBBdHRyaWJ1dGVUeXBlKSA9PiB7XG4gIHN3aXRjaCAoaW5UeXBlKSB7XG4gICAgY2FzZSBBdHRyaWJ1dGVUeXBlLmZsb2F0OlxuICAgICAgcmV0dXJuIDE7XG4gICAgY2FzZSBBdHRyaWJ1dGVUeXBlLnZlYzJmOlxuICAgICAgcmV0dXJuIDI7XG4gICAgY2FzZSBBdHRyaWJ1dGVUeXBlLnZlYzNmOlxuICAgICAgcmV0dXJuIDM7XG4gICAgY2FzZSBBdHRyaWJ1dGVUeXBlLnZlYzRmOlxuICAgICAgcmV0dXJuIDQ7XG4gICAgY2FzZSBBdHRyaWJ1dGVUeXBlLm1hdDNmOlxuICAgICAgcmV0dXJuIDk7XG4gICAgY2FzZSBBdHRyaWJ1dGVUeXBlLm1hdDRmOlxuICAgICAgcmV0dXJuIDE2O1xuICB9XG59O1xuXG5leHBvcnQgZW51bSBQcmltaXRpdmVUeXBlIHtcbiAgbGluZXMsXG4gIGxpbmVTdHJpcCxcbiAgbGluZUxvb3AsXG4gIHRyaWFuZ2xlcyxcbiAgdHJpYW5nbGVTdHJpcCxcbiAgdHJpYW5nbGVGYW5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBWYm9BdHRyIHtcbiAgbmFtZTogc3RyaW5nO1xuICB0eXBlOiBBdHRyaWJ1dGVUeXBlO1xuICBpbmRleDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZib0RlZmluaXRpb24ge1xuICBhdHRyczogVmJvQXR0cltdO1xuICBzdHJpZGU/OiBudW1iZXI7XG4gIGluc3RhbmNlZDogYm9vbGVhbjtcbiAgbW9kZT86ICdzdGF0aWMnIHwgJ2R5bmFtaWMnIHwgJ3N0cmVhbWluZyc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2VvbWV0cnlEZWZpbml0aW9uIHtcbiAgdmJvczogVmJvRGVmaW5pdGlvbltdO1xuICBwcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlO1xufVxuXG5jb25zdCBfZW5zdXJlRmxvYXRCdWZmZXIgPSAoXG4gIHZlcnRpY2VzOiBSZWFkb25seUFycmF5PG51bWJlcj4gfCBSZWFkb25seTxGbG9hdDMyQXJyYXk+XG4pOiBSZWFkb25seTxGbG9hdDMyQXJyYXk+ID0+IHtcbiAgaWYgKHZlcnRpY2VzIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5KSB7XG4gICAgcmV0dXJuIHZlcnRpY2VzO1xuICB9XG4gIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KHZlcnRpY2VzKTtcbn07XG5cbmludGVyZmFjZSBJVmJvRGF0YSB7XG4gIG9iamVjdDogV2ViR0xCdWZmZXI7XG4gIG1heFNpemU6IG51bWJlcjtcbiAgbW9kZTogJ3N0YXRpYycgfCAnZHluYW1pYycgfCAnc3RyZWFtaW5nJztcbn1cblxuY29uc3QgX2dldEJ1ZmZlclVzYWdlID0gKGluTW9kZTogJ3N0YXRpYycgfCAnZHluYW1pYycgfCAnc3RyZWFtaW5nJykgPT4ge1xuICBjb25zdCBnbCA9IFdlYkdMQ29udGV4dC5nZXRDb250ZXh0KCk7XG5cbiAgaWYgKGluTW9kZSA9PT0gJ2R5bmFtaWMnKSB7XG4gICAgcmV0dXJuIGdsLkRZTkFNSUNfRFJBVztcbiAgfVxuICBpZiAoaW5Nb2RlID09PSAnc3RyZWFtaW5nJykge1xuICAgIHJldHVybiBnbC5TVFJFQU1fRFJBVztcbiAgfVxuICByZXR1cm4gZ2wuU1RBVElDX0RSQVc7XG59O1xuXG5leHBvcnQgY2xhc3MgR2VvbWV0cnkge1xuICBwcml2YXRlIF9kZWY6IEdlb21ldHJ5RGVmaW5pdGlvbjtcbiAgcHJpdmF0ZSBfdmFvOiBXZWJHTFZlcnRleEFycmF5T2JqZWN0T0VTO1xuICBwcml2YXRlIF92Ym9zOiBJVmJvRGF0YVtdO1xuICBwcml2YXRlIF9wcmltaXRpdmVUeXBlOiBudW1iZXI7XG4gIHByaXZhdGUgX3ByaW1pdGl2ZVN0YXJ0OiBudW1iZXIgPSAwO1xuICBwcml2YXRlIF9wcmltaXRpdmVDb3VudDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfaW5zdGFuY2VDb3VudDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfaXNJbnN0YW5jZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihzaGFkZXI6IElVbmJvdW5kU2hhZGVyLCBkZWY6IEdlb21ldHJ5RGVmaW5pdGlvbikge1xuICAgIGNvbnN0IGdsID0gV2ViR0xDb250ZXh0LmdldENvbnRleHQoKTtcblxuICAgIGlmIChkZWYudmJvcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZW1wdHkgdmJvIGRlZmluaXRpb24nKTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHZibyBvZiBkZWYudmJvcykge1xuICAgICAgaWYgKHZiby5hdHRycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdlbXB0eSB2Ym8gYXR0cmlidXRlIGRlZmluaXRpb24nKTtcbiAgICAgIH1cblxuICAgICAgZm9yIChjb25zdCBhdHRyIG9mIHZiby5hdHRycykge1xuICAgICAgICBpZiAoIXNoYWRlci5oYXNBdHRyaWJ1dGUoYXR0ci5uYW1lKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgYXR0cmlidXRlIG5vdCBmb3VuZCwgbmFtZT1cIiR7YXR0ci5uYW1lfVwiYCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9kZWYgPSBkZWY7XG5cbiAgICBzd2l0Y2ggKGRlZi5wcmltaXRpdmVUeXBlKSB7XG4gICAgICBjYXNlIFByaW1pdGl2ZVR5cGUubGluZXM6XG4gICAgICAgIHRoaXMuX3ByaW1pdGl2ZVR5cGUgPSBnbC5MSU5FUztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFByaW1pdGl2ZVR5cGUubGluZVN0cmlwOlxuICAgICAgICB0aGlzLl9wcmltaXRpdmVUeXBlID0gZ2wuTElORV9TVFJJUDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFByaW1pdGl2ZVR5cGUubGluZUxvb3A6XG4gICAgICAgIHRoaXMuX3ByaW1pdGl2ZVR5cGUgPSBnbC5MSU5FX0xPT1A7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBQcmltaXRpdmVUeXBlLnRyaWFuZ2xlczpcbiAgICAgICAgdGhpcy5fcHJpbWl0aXZlVHlwZSA9IGdsLlRSSUFOR0xFUztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFByaW1pdGl2ZVR5cGUudHJpYW5nbGVTdHJpcDpcbiAgICAgICAgdGhpcy5fcHJpbWl0aXZlVHlwZSA9IGdsLlRSSUFOR0xFX1NUUklQO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgUHJpbWl0aXZlVHlwZS50cmlhbmdsZUZhbjpcbiAgICAgICAgdGhpcy5fcHJpbWl0aXZlVHlwZSA9IGdsLlRSSUFOR0xFX0ZBTjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ByaW1pdGl2ZSB0eXBlIG5vdCBmb3VuZCcpO1xuICAgIH1cblxuICAgIGNvbnN0IG5ld1ZhbyA9IGdsLmNyZWF0ZVZlcnRleEFycmF5KCk7XG4gICAgaWYgKCFuZXdWYW8pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZmFpbCBvIGNyZWF0ZSBhIHZhbyB1bml0Jyk7XG4gICAgfVxuXG4gICAgdGhpcy5fdmFvID0gbmV3VmFvO1xuICAgIGdsLmJpbmRWZXJ0ZXhBcnJheSh0aGlzLl92YW8pO1xuXG4gICAgLy9cblxuICAgIHRoaXMuX3Zib3MgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHZib0RlZiBvZiB0aGlzLl9kZWYudmJvcykge1xuICAgICAgY29uc3QgbmV3VmJvID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgICBpZiAoIW5ld1Zibykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZhaWwgbyBjcmVhdGUgYSB2Ym8gdW5pdCcpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl92Ym9zLnB1c2goe1xuICAgICAgICBvYmplY3Q6IG5ld1ZibyxcbiAgICAgICAgbWF4U2l6ZTogMCxcbiAgICAgICAgbW9kZTogdmJvRGVmLm1vZGUgfHwgJ3N0YXRpYydcbiAgICAgIH0pO1xuXG4gICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgbmV3VmJvKTtcblxuICAgICAgbGV0IHN0cmlkZSA9IHZib0RlZi5zdHJpZGUgfHwgMDtcbiAgICAgIGlmICghc3RyaWRlKSB7XG4gICAgICAgIC8vIGF1dG8gZGV0ZXJtaW5lIHN0cmlkZSB2YWx1ZVxuICAgICAgICBmb3IgKGNvbnN0IGF0dHIgb2YgdmJvRGVmLmF0dHJzKSB7XG4gICAgICAgICAgc3dpdGNoIChhdHRyLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgQXR0cmlidXRlVHlwZS5mbG9hdDpcbiAgICAgICAgICAgICAgc3RyaWRlICs9IDE7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBBdHRyaWJ1dGVUeXBlLnZlYzJmOlxuICAgICAgICAgICAgICBzdHJpZGUgKz0gMjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEF0dHJpYnV0ZVR5cGUudmVjM2Y6XG4gICAgICAgICAgICAgIHN0cmlkZSArPSAzO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQXR0cmlidXRlVHlwZS52ZWM0ZjpcbiAgICAgICAgICAgICAgc3RyaWRlICs9IDQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBBdHRyaWJ1dGVUeXBlLm1hdDNmOlxuICAgICAgICAgICAgICBzdHJpZGUgKz0gOTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEF0dHJpYnV0ZVR5cGUubWF0NGY6XG4gICAgICAgICAgICAgIHN0cmlkZSArPSAxNjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN0cmlkZSAqPSBCeXRlc1BlclBpeGVsO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGNvbnN0IGF0dHIgb2YgdmJvRGVmLmF0dHJzKSB7XG4gICAgICAgIGxldCByb3dTaXplID0gMTtcbiAgICAgICAgbGV0IHRvdGFsUm93cyA9IDE7XG4gICAgICAgIHN3aXRjaCAoYXR0ci50eXBlKSB7XG4gICAgICAgICAgY2FzZSBBdHRyaWJ1dGVUeXBlLmZsb2F0OlxuICAgICAgICAgICAgcm93U2l6ZSA9IDE7XG4gICAgICAgICAgICB0b3RhbFJvd3MgPSAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBBdHRyaWJ1dGVUeXBlLnZlYzJmOlxuICAgICAgICAgICAgcm93U2l6ZSA9IDI7XG4gICAgICAgICAgICB0b3RhbFJvd3MgPSAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBBdHRyaWJ1dGVUeXBlLnZlYzNmOlxuICAgICAgICAgICAgcm93U2l6ZSA9IDM7XG4gICAgICAgICAgICB0b3RhbFJvd3MgPSAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBBdHRyaWJ1dGVUeXBlLnZlYzRmOlxuICAgICAgICAgICAgcm93U2l6ZSA9IDQ7XG4gICAgICAgICAgICB0b3RhbFJvd3MgPSAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBBdHRyaWJ1dGVUeXBlLm1hdDNmOlxuICAgICAgICAgICAgcm93U2l6ZSA9IDM7XG4gICAgICAgICAgICB0b3RhbFJvd3MgPSAzO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBBdHRyaWJ1dGVUeXBlLm1hdDRmOlxuICAgICAgICAgICAgcm93U2l6ZSA9IDQ7XG4gICAgICAgICAgICB0b3RhbFJvd3MgPSA0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhdHRyTG9jYXRpb24gPSBzaGFkZXIuZ2V0QXR0cmlidXRlKGF0dHIubmFtZSk7XG5cbiAgICAgICAgLy8gVE9ETzogY2hlY2sgaWYgdGhlIGluZGV4IGlzIDAgb24gaz4wIGFuZCBhc3NlcnQvdGhyb3cgb24gaXRcblxuICAgICAgICBmb3IgKGxldCBpaSA9IDA7IGlpIDwgdG90YWxSb3dzOyArK2lpKSB7XG4gICAgICAgICAgY29uc3QgYXR0cklkID0gYXR0ckxvY2F0aW9uICsgaWk7XG4gICAgICAgICAgY29uc3Qgcm93SW5kZXggPSAoYXR0ci5pbmRleCArIGlpICogcm93U2l6ZSkgKiBCeXRlc1BlclBpeGVsO1xuXG4gICAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoYXR0cklkKTtcbiAgICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKFxuICAgICAgICAgICAgYXR0cklkLFxuICAgICAgICAgICAgcm93U2l6ZSxcbiAgICAgICAgICAgIGdsLkZMT0FULFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBzdHJpZGUsXG4gICAgICAgICAgICByb3dJbmRleFxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBpZiAodmJvRGVmLmluc3RhbmNlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgZ2wudmVydGV4QXR0cmliRGl2aXNvcihhdHRySWQsIDEpO1xuICAgICAgICAgICAgdGhpcy5faXNJbnN0YW5jZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vXG5cbiAgICBnbC5iaW5kVmVydGV4QXJyYXkobnVsbCk7XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIGNvbnN0IGdsID0gV2ViR0xDb250ZXh0LmdldENvbnRleHQoKTtcblxuICAgIGZvciAoY29uc3QgdmJvIG9mIHRoaXMuX3Zib3MpIHtcbiAgICAgIGdsLmRlbGV0ZUJ1ZmZlcih2Ym8ub2JqZWN0KTtcbiAgICB9XG4gICAgdGhpcy5fdmJvcy5sZW5ndGggPSAwO1xuXG4gICAgZ2wuZGVsZXRlVmVydGV4QXJyYXkodGhpcy5fdmFvKTtcbiAgfVxuXG4gIHNldEJ1ZmZlclNpemUoaW5JbmRleDogbnVtYmVyLCBpblNpemU6IG51bWJlcikge1xuICAgIGlmIChpbkluZGV4IDwgMCB8fCBpbkluZGV4ID49IHRoaXMuX3Zib3MubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYG5vIHZibyBhdmFpbGFibGUgdG8gdGhhdCBpbmRleCAoaW5wdXQ6ICR7aW5JbmRleH0pYCk7XG4gICAgfVxuXG4gICAgaWYgKGluU2l6ZSA8PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHZibyBtdXN0IGJlID4gMCAoaW5wdXQ6ICR7aW5TaXplfSlgKTtcbiAgICB9XG5cbiAgICBjb25zdCBjdXJyVmJvID0gdGhpcy5fdmJvc1tpbkluZGV4XTtcblxuICAgIGlmIChpblNpemUgPCBjdXJyVmJvLm1heFNpemUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjdXJyVmJvLm1heFNpemUgPSBpblNpemU7XG5cbiAgICBjb25zdCBnbCA9IFdlYkdMQ29udGV4dC5nZXRDb250ZXh0KCk7XG5cbiAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgY3VyclZiby5vYmplY3QpO1xuICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBpblNpemUsIF9nZXRCdWZmZXJVc2FnZShjdXJyVmJvLm1vZGUpKTtcbiAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgbnVsbCk7XG4gIH1cblxuICBzZXRGbG9hdEJ1ZmZlclNpemUoaW5kZXg6IG51bWJlciwgaW5TaXplOiBudW1iZXIpIHtcbiAgICB0aGlzLnNldEJ1ZmZlclNpemUoaW5kZXgsIGluU2l6ZSAqIDQpO1xuICB9XG5cbiAgYWxsb2NhdGVCdWZmZXIoXG4gICAgaW5JbmRleDogbnVtYmVyLFxuICAgIGluVmVydGljZXM6IFJlYWRvbmx5QXJyYXk8bnVtYmVyPiB8IFJlYWRvbmx5PEZsb2F0MzJBcnJheT4sXG4gICAgaW5TaXplOiBudW1iZXJcbiAgKSB7XG4gICAgaWYgKGluSW5kZXggPCAwIHx8IGluSW5kZXggPj0gdGhpcy5fdmJvcy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYG5vIHZibyBhdmFpbGFibGUgdG8gdGhhdCBpbmRleCAoaW5wdXQ6ICR7aW5JbmRleH0sIHRvdGFsIHZib3M6ICR7dGhpcy5fdmJvcy5sZW5ndGh9KWBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGluU2l6ZSA8PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHNpemUgbXVzdCBiZSA+IDAgKGlucHV0OiAke2luU2l6ZX0pYCk7XG4gICAgfVxuXG4gICAgY29uc3QgY3VyclZibyA9IHRoaXMuX3Zib3NbaW5JbmRleF07XG5cbiAgICBpZiAoaW5TaXplIDw9IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdmJvIG11c3QgYmUgPiAwIChpbnB1dDogJHtpblNpemV9KWApO1xuICAgIH1cblxuICAgIGN1cnJWYm8ubWF4U2l6ZSA9IGluU2l6ZTtcblxuICAgIGNvbnN0IGJ1ZmZlciA9IF9lbnN1cmVGbG9hdEJ1ZmZlcihpblZlcnRpY2VzKTtcblxuICAgIGNvbnN0IGdsID0gV2ViR0xDb250ZXh0LmdldENvbnRleHQoKTtcblxuICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBjdXJyVmJvLm9iamVjdCk7XG4gICAgZ2wuYnVmZmVyRGF0YShcbiAgICAgIGdsLkFSUkFZX0JVRkZFUixcbiAgICAgIGJ1ZmZlcixcbiAgICAgIF9nZXRCdWZmZXJVc2FnZShjdXJyVmJvLm1vZGUpLFxuICAgICAgMCxcbiAgICAgIGluU2l6ZVxuICAgICk7XG4gICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIG51bGwpO1xuICB9XG5cbiAgdXBkYXRlQnVmZmVyKFxuICAgIGluSW5kZXg6IG51bWJlcixcbiAgICBpblZlcnRpY2VzOiBSZWFkb25seUFycmF5PG51bWJlcj4gfCBSZWFkb25seTxGbG9hdDMyQXJyYXk+LFxuICAgIGluU2l6ZTogbnVtYmVyLFxuICAgIGluU3RhcnRPZmZzZXQ/OiBudW1iZXJcbiAgKSB7XG4gICAgaWYgKGluSW5kZXggPCAwIHx8IGluSW5kZXggPj0gdGhpcy5fdmJvcy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYG5vIHZibyBhdmFpbGFibGUgdG8gdGhhdCBpbmRleCAoaW5wdXQ6ICR7aW5JbmRleH0sIHRvdGFsIHZib3M6ICR7dGhpcy5fdmJvcy5sZW5ndGh9KWBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGluU2l6ZSA8PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHNpemUgbXVzdCBiZSA+IDAgKGlucHV0OiAke2luU2l6ZX0pYCk7XG4gICAgfVxuXG4gICAgY29uc3QgY3VyclZibyA9IHRoaXMuX3Zib3NbaW5JbmRleF07XG5cbiAgICBpZiAoaW5TdGFydE9mZnNldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoaW5TdGFydE9mZnNldCA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBvZmZzZXQgbXVzdCBiZSA+PSAwIChpbnB1dDogJHtpblN0YXJ0T2Zmc2V0fSlgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVuZEluZGV4ID0gaW5TdGFydE9mZnNldCArIGluU2l6ZTtcbiAgICAgIGlmIChlbmRJbmRleCA+IGN1cnJWYm8ubWF4U2l6ZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYG9mZnNldCArIHNpemUgPiB0byB2Ym8gbWF4IHNpemUgKGlucHV0OiAke2VuZEluZGV4fSwgbWF4IHNpemU6ICR7Y3VyclZiby5tYXhTaXplfSlgXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpblNpemUgPiBjdXJyVmJvLm1heFNpemUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYHNpemUgbXVzdCBiZSA8IHRvIHZibyBtYXggc2l6ZSAoaW5wdXQ6ICR7aW5TaXplfSwgbWF4IHNpemU6ICR7Y3VyclZiby5tYXhTaXplfSlgXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IGJ1ZmZlciA9IF9lbnN1cmVGbG9hdEJ1ZmZlcihpblZlcnRpY2VzKTtcblxuICAgIGNvbnN0IGdsID0gV2ViR0xDb250ZXh0LmdldENvbnRleHQoKTtcblxuICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBjdXJyVmJvLm9iamVjdCk7XG4gICAgZ2wuYnVmZmVyU3ViRGF0YShnbC5BUlJBWV9CVUZGRVIsIGluU3RhcnRPZmZzZXQgPz8gMCwgYnVmZmVyLCAwLCBpblNpemUpO1xuICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBudWxsKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5fcHJpbWl0aXZlQ291bnQgPT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9pc0luc3RhbmNlZCAmJiB0aGlzLl9pbnN0YW5jZUNvdW50ID09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBnbCA9IFdlYkdMQ29udGV4dC5nZXRDb250ZXh0KCk7XG5cbiAgICBnbC5iaW5kVmVydGV4QXJyYXkodGhpcy5fdmFvKTtcblxuICAgIGlmICh0aGlzLl9pc0luc3RhbmNlZCA9PT0gdHJ1ZSkge1xuICAgICAgZ2wuZHJhd0FycmF5c0luc3RhbmNlZChcbiAgICAgICAgdGhpcy5fcHJpbWl0aXZlVHlwZSxcbiAgICAgICAgdGhpcy5fcHJpbWl0aXZlU3RhcnQsXG4gICAgICAgIHRoaXMuX3ByaW1pdGl2ZUNvdW50LFxuICAgICAgICB0aGlzLl9pbnN0YW5jZUNvdW50XG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBnbC5kcmF3QXJyYXlzKFxuICAgICAgICB0aGlzLl9wcmltaXRpdmVUeXBlLFxuICAgICAgICB0aGlzLl9wcmltaXRpdmVTdGFydCxcbiAgICAgICAgdGhpcy5fcHJpbWl0aXZlQ291bnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZ2wuYmluZFZlcnRleEFycmF5KG51bGwpO1xuICB9XG5cbiAgc2V0UHJpbWl0aXZlU3RhcnQoc3RhcnQ6IG51bWJlcikge1xuICAgIHRoaXMuX3ByaW1pdGl2ZVN0YXJ0ID0gc3RhcnQ7XG4gIH1cblxuICBzZXRQcmltaXRpdmVDb3VudChjb3VudDogbnVtYmVyKSB7XG4gICAgdGhpcy5fcHJpbWl0aXZlQ291bnQgPSBjb3VudDtcbiAgfVxuXG4gIHNldEluc3RhbmNlZENvdW50KGNvdW50OiBudW1iZXIpIHtcbiAgICB0aGlzLl9pbnN0YW5jZUNvdW50ID0gY291bnQ7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEdlb21ldHJ5QnVpbGRlciB7XG4gIHByaXZhdGUgX2RlZjogR2VvbWV0cnlEZWZpbml0aW9uID0ge1xuICAgIHZib3M6IFtdLFxuICAgIHByaW1pdGl2ZVR5cGU6IFByaW1pdGl2ZVR5cGUubGluZXNcbiAgfTtcblxuICByZXNldCgpOiB0aGlzIHtcbiAgICB0aGlzLl9kZWYgPSB7XG4gICAgICB2Ym9zOiBbXSxcbiAgICAgIHByaW1pdGl2ZVR5cGU6IFByaW1pdGl2ZVR5cGUubGluZXNcbiAgICB9O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2V0RGVmKCk6IEdlb21ldHJ5RGVmaW5pdGlvbiB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZjtcbiAgfVxuXG4gIHNldFByaW1pdGl2ZVR5cGUoXG4gICAgaW5QcmltaXRpdmU6XG4gICAgICB8ICdsaW5lcydcbiAgICAgIHwgJ2xpbmVTdHJpcCdcbiAgICAgIHwgJ2xpbmVMb29wJ1xuICAgICAgfCAndHJpYW5nbGVzJ1xuICAgICAgfCAndHJpYW5nbGVTdHJpcCdcbiAgICAgIHwgJ3RyaWFuZ2xlRmFuJ1xuICApOiB0aGlzIHtcbiAgICB0aGlzLl9kZWYucHJpbWl0aXZlVHlwZSA9IFByaW1pdGl2ZVR5cGVbaW5QcmltaXRpdmVdO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGFkZFZibygpOiB0aGlzIHtcbiAgICB0aGlzLl9kZWYudmJvcy5wdXNoKHtcbiAgICAgIGF0dHJzOiBbXSxcbiAgICAgIC8vIHN0cmlkZTogMCxcbiAgICAgIGluc3RhbmNlZDogZmFsc2VcbiAgICAgIC8vIGR5bmFtaWM6IGZhbHNlLFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHNldFZib0FzSW5zdGFuY2VkKCk6IHRoaXMge1xuICAgIHRoaXMuX2dldExhc3RWYm8oKS5pbnN0YW5jZWQgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHNldFZib0FzRHluYW1pYygpOiB0aGlzIHtcbiAgICB0aGlzLl9nZXRMYXN0VmJvKCkubW9kZSA9ICdkeW5hbWljJztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBzZXRWYm9Bc1N0cmVhbWluZygpOiB0aGlzIHtcbiAgICB0aGlzLl9nZXRMYXN0VmJvKCkubW9kZSA9ICdzdHJlYW1pbmcnO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHNldFN0cmlkZShpblN0cmlkZTogbnVtYmVyKTogdGhpcyB7XG4gICAgdGhpcy5fZ2V0TGFzdFZibygpLnN0cmlkZSA9IGluU3RyaWRlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGFkZFZib0F0dHJpYnV0ZShcbiAgICBpbk5hbWU6IHN0cmluZyxcbiAgICBpblR5cGU6ICdmbG9hdCcgfCAndmVjMmYnIHwgJ3ZlYzNmJyB8ICd2ZWM0ZicgfCAnbWF0M2YnIHwgJ21hdDRmJ1xuICApOiB0aGlzIHtcbiAgICBjb25zdCBjdXJyVmJvID0gdGhpcy5fZ2V0TGFzdFZibygpO1xuICAgIGNvbnN0IGxhc3RBdHRyID1cbiAgICAgIGN1cnJWYm8uYXR0cnMubGVuZ3RoID4gMCA/IGN1cnJWYm8uYXR0cnNbY3VyclZiby5hdHRycy5sZW5ndGggLSAxXSA6IG51bGw7XG4gICAgY3VyclZiby5hdHRycy5wdXNoKHtcbiAgICAgIG5hbWU6IGluTmFtZSxcbiAgICAgIHR5cGU6IEF0dHJpYnV0ZVR5cGVbaW5UeXBlXSxcbiAgICAgIGluZGV4OiBsYXN0QXR0ciA/IGxhc3RBdHRyLmluZGV4ICsgZ2V0QXR0clR5cGVTaXplKGxhc3RBdHRyLnR5cGUpIDogMFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHJpdmF0ZSBfZ2V0TGFzdFZibygpOiBWYm9EZWZpbml0aW9uIHtcbiAgICBpZiAodGhpcy5fZGVmLnZib3MubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vIFZCTyBzZXR1cCcpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fZGVmLnZib3NbdGhpcy5fZGVmLnZib3MubGVuZ3RoIC0gMV07XG4gIH1cbn1cbiIsCiAgImltcG9ydCB7IFdlYkdMQ29udGV4dCB9IGZyb20gJy4vV2ViR0xDb250ZXh0JztcblxuZXhwb3J0IGludGVyZmFjZSBJVW5ib3VuZFJlbmRlckJ1ZmZlciB7XG4gIGRpc3Bvc2UoKTogdm9pZDtcbiAgcmF3QmluZCgpOiB2b2lkO1xuICBwcmVCaW5kKGluQ2FsbGJhY2s6IChib3VuZDogSUJvdW5kUmVuZGVyQnVmZmVyKSA9PiB2b2lkKTogdm9pZDtcbiAgYmluZChpbkNhbGxiYWNrOiAoYm91bmQ6IElCb3VuZFJlbmRlckJ1ZmZlcikgPT4gdm9pZCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUJvdW5kUmVuZGVyQnVmZmVyIHtcbiAgc2V0U2l6ZShcbiAgICB0eXBlOiAnZGVwdGgxNicgfCAnZGVwdGgyNCcgfCAnZGVwdGgzMmYnLFxuICAgIHdpZHRoOiBudW1iZXIsXG4gICAgaGVpZ2h0OiBudW1iZXJcbiAgKTogdm9pZDtcbiAgZ2V0UmF3T2JqZWN0KCk6IFdlYkdMUmVuZGVyYnVmZmVyO1xufVxuXG5leHBvcnQgY2xhc3MgUmVuZGVyQnVmZmVyIGltcGxlbWVudHMgSVVuYm91bmRSZW5kZXJCdWZmZXIsIElCb3VuZFJlbmRlckJ1ZmZlciB7XG4gIHByaXZhdGUgX2J1ZmZlcjogV2ViR0xSZW5kZXJidWZmZXI7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgZ2wgPSBXZWJHTENvbnRleHQuZ2V0Q29udGV4dCgpO1xuXG4gICAgY29uc3QgdG1wQnVmID0gZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG4gICAgaWYgKHRtcEJ1ZiA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdudWxsIHJlbmRlciBidWZmZXIgb2JqZWN0Jyk7XG4gICAgfVxuICAgIHRoaXMuX2J1ZmZlciA9IHRtcEJ1ZjtcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgY29uc3QgZ2wgPSBXZWJHTENvbnRleHQuZ2V0Q29udGV4dCgpO1xuICAgIGdsLmRlbGV0ZVJlbmRlcmJ1ZmZlcih0aGlzLl9idWZmZXIpO1xuICB9XG5cbiAgcmF3QmluZCgpIHtcbiAgICBjb25zdCBnbCA9IFdlYkdMQ29udGV4dC5nZXRDb250ZXh0KCk7XG4gICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihnbC5SRU5ERVJCVUZGRVIsIHRoaXMuX2J1ZmZlcik7XG4gIH1cblxuICBwcmVCaW5kKGluQ2FsbGJhY2s6IChib3VuZDogSUJvdW5kUmVuZGVyQnVmZmVyKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5yYXdCaW5kKCk7XG4gICAgaW5DYWxsYmFjayh0aGlzKTtcbiAgfVxuXG4gIGJpbmQoaW5DYWxsYmFjazogKGJvdW5kOiBJQm91bmRSZW5kZXJCdWZmZXIpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLnByZUJpbmQoaW5DYWxsYmFjayk7XG4gICAgUmVuZGVyQnVmZmVyLnVuYmluZCgpO1xuICB9XG5cbiAgc3RhdGljIHVuYmluZCgpIHtcbiAgICBjb25zdCBnbCA9IFdlYkdMQ29udGV4dC5nZXRDb250ZXh0KCk7XG5cbiAgICBnbC5iaW5kUmVuZGVyYnVmZmVyKGdsLlJFTkRFUkJVRkZFUiwgbnVsbCk7XG4gIH1cblxuICBzZXRTaXplKFxuICAgIHR5cGU6ICdkZXB0aDE2JyB8ICdkZXB0aDI0JyB8ICdkZXB0aDMyZicsXG4gICAgd2lkdGg6IG51bWJlcixcbiAgICBoZWlnaHQ6IG51bWJlclxuICApOiB2b2lkIHtcbiAgICBjb25zdCBnbCA9IFdlYkdMQ29udGV4dC5nZXRDb250ZXh0KCk7XG5cbiAgICBsZXQgaW50ZXJuYWxGb3JtYXQ6IG51bWJlciA9IGdsLkRFUFRIX0NPTVBPTkVOVDMyRjtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ2RlcHRoMTYnOiB7XG4gICAgICAgIGludGVybmFsRm9ybWF0ID0gZ2wuREVQVEhfQ09NUE9ORU5UMTY7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnZGVwdGgyNCc6IHtcbiAgICAgICAgaW50ZXJuYWxGb3JtYXQgPSBnbC5ERVBUSF9DT01QT05FTlQxNjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZ2wucmVuZGVyYnVmZmVyU3RvcmFnZShnbC5SRU5ERVJCVUZGRVIsIGludGVybmFsRm9ybWF0LCB3aWR0aCwgaGVpZ2h0KTtcbiAgfVxuXG4gIGdldFJhd09iamVjdCgpOiBXZWJHTFJlbmRlcmJ1ZmZlciB7XG4gICAgcmV0dXJuIHRoaXMuX2J1ZmZlcjtcbiAgfVxufVxuIiwKICAiaW1wb3J0IHsgSVVuYm91bmRUZXh0dXJlQXJyYXkgfSBmcm9tICcuL1RleHR1cmVBcnJheSc7XG5pbXBvcnQgeyBJVW5ib3VuZEN1YmVNYXAgfSBmcm9tICcuL0N1YmVNYXAnO1xuaW1wb3J0IHsgSVVuYm91bmRUZXh0dXJlIH0gZnJvbSAnLi9UZXh0dXJlJztcbmltcG9ydCB7IElVbmJvdW5kRGF0YVRleHR1cmUgfSBmcm9tICcuL0RhdGFUZXh0dXJlJztcbmltcG9ydCB7IElVbmJvdW5kRGF0YVRleHR1cmVWZWM0IH0gZnJvbSAnLi9EYXRhVGV4dHVyZVZlYzQnO1xuaW1wb3J0IHsgV2ViR0xDb250ZXh0IH0gZnJvbSAnLi9XZWJHTENvbnRleHQnO1xuXG5pbXBvcnQgKiBhcyBnbG0gZnJvbSAnZ2wtbWF0cml4JztcblxuZXhwb3J0IGludGVyZmFjZSBJU2hhZGVyUHJvZ3JhbU9wdHMge1xuICB2ZXJ0ZXhTcmM6IHN0cmluZztcbiAgZnJhZ21lbnRTcmM6IHN0cmluZztcbiAgYXR0cmlidXRlczogc3RyaW5nW107XG4gIHVuaWZvcm1zOiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJVW5ib3VuZFNoYWRlciB7XG4gIGlzQm91bmQoKTogYm9vbGVhbjtcbiAgaGFzQXR0cmlidXRlKG5hbWU6IHN0cmluZyk6IGJvb2xlYW47XG4gIGdldEF0dHJpYnV0ZShuYW1lOiBzdHJpbmcpOiBudW1iZXI7XG4gIGdldFVuaWZvcm0obmFtZTogc3RyaW5nKTogV2ViR0xVbmlmb3JtTG9jYXRpb247XG4gIGJpbmQoaW5DYWxsYmFjazogKGJvdW5kOiBJQm91bmRTaGFkZXIpID0+IHZvaWQpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElCb3VuZFNoYWRlciB7XG4gIHNldFRleHR1cmVVbmlmb3JtKFxuICAgIGluTmFtZTogc3RyaW5nLFxuICAgIGluVGV4dHVyZTpcbiAgICAgIHwgSVVuYm91bmRUZXh0dXJlXG4gICAgICB8IElVbmJvdW5kVGV4dHVyZUFycmF5XG4gICAgICB8IElVbmJvdW5kQ3ViZU1hcFxuICAgICAgfCBJVW5ib3VuZERhdGFUZXh0dXJlXG4gICAgICB8IElVbmJvdW5kRGF0YVRleHR1cmVWZWM0LFxuICAgIGluSW5kZXg6IG51bWJlclxuICApOiB2b2lkO1xuICBzZXRJbnRlZ2VyMVVuaWZvcm0oaW5OYW1lOiBzdHJpbmcsIGluVmFsdWU6IG51bWJlcik6IHZvaWQ7XG4gIHNldEludGVnZXIyVW5pZm9ybShpbk5hbWU6IHN0cmluZywgaW5WYWx1ZVg6IG51bWJlciwgaW5WYWx1ZVk6IG51bWJlcik6IHZvaWQ7XG4gIHNldEludGVnZXIzVW5pZm9ybShcbiAgICBpbk5hbWU6IHN0cmluZyxcbiAgICBpblZhbHVlWDogbnVtYmVyLFxuICAgIGluVmFsdWVZOiBudW1iZXIsXG4gICAgaW5WYWx1ZVo6IG51bWJlclxuICApOiB2b2lkO1xuICBzZXRGbG9hdDFVbmlmb3JtKGluTmFtZTogc3RyaW5nLCBpblZhbHVlOiBudW1iZXIpOiB2b2lkO1xuICBzZXRGbG9hdDJVbmlmb3JtKGluTmFtZTogc3RyaW5nLCBpblZhbHVlWDogbnVtYmVyLCBpblZhbHVlWTogbnVtYmVyKTogdm9pZDtcbiAgc2V0RmxvYXQzVW5pZm9ybShcbiAgICBpbk5hbWU6IHN0cmluZyxcbiAgICBpblZhbHVlWDogbnVtYmVyLFxuICAgIGluVmFsdWVZOiBudW1iZXIsXG4gICAgaW5WYWx1ZVo6IG51bWJlclxuICApOiB2b2lkO1xuICBzZXRNYXRyaXgzVW5pZm9ybShpbk5hbWU6IHN0cmluZywgaW5NYXRyaXg6IGdsbS5SZWFkb25seU1hdDMpOiB2b2lkO1xuICBzZXRNYXRyaXg0VW5pZm9ybShpbk5hbWU6IHN0cmluZywgaW5NYXRyaXg6IGdsbS5SZWFkb25seU1hdDQpOiB2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgU2hhZGVyUHJvZ3JhbSB7XG4gIHByaXZhdGUgc3RhdGljIF9pc0JvdW5kOiBTaGFkZXJQcm9ncmFtIHwgbnVsbCA9IG51bGw7XG5cbiAgcHJpdmF0ZSBfbmFtZTogc3RyaW5nO1xuXG4gIHByaXZhdGUgX3Byb2dyYW06IFdlYkdMUHJvZ3JhbTtcblxuICBwcml2YXRlIF9hdHRyaWJ1dGVzID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oKTtcbiAgcHJpdmF0ZSBfdW5pZm9ybXMgPSBuZXcgTWFwPHN0cmluZywgV2ViR0xVbmlmb3JtTG9jYXRpb24+KCk7XG5cbiAgY29uc3RydWN0b3IoaW5OYW1lOiBzdHJpbmcsIG9wdDogSVNoYWRlclByb2dyYW1PcHRzKSB7XG4gICAgdGhpcy5fbmFtZSA9IGluTmFtZTtcblxuICAgIGNvbnN0IGdsID0gV2ViR0xDb250ZXh0LmdldENvbnRleHQoKTtcblxuICAgIGNvbnN0IHZlcnRleFNoYWRlciA9IHRoaXMuX2dldFNoYWRlcihvcHQudmVydGV4U3JjLCBnbC5WRVJURVhfU0hBREVSKTtcbiAgICBjb25zdCBmcmFnbWVudFNoYWRlciA9IHRoaXMuX2dldFNoYWRlcihvcHQuZnJhZ21lbnRTcmMsIGdsLkZSQUdNRU5UX1NIQURFUik7XG5cbiAgICAvL1xuXG4gICAgY29uc3QgcHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcbiAgICBpZiAoIXByb2dyYW0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IGNyZWF0ZSBhIHNoYWRlciBwcm9ncmFtJyk7XG4gICAgfVxuXG4gICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIHZlcnRleFNoYWRlcik7XG4gICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIGZyYWdtZW50U2hhZGVyKTtcbiAgICBnbC5saW5rUHJvZ3JhbShwcm9ncmFtKTtcbiAgICBnbC5kZWxldGVTaGFkZXIodmVydGV4U2hhZGVyKTsgLy8gZnJlZSB1cCBub3cgdW51c2VkIG1lbW9yeVxuICAgIGdsLmRlbGV0ZVNoYWRlcihmcmFnbWVudFNoYWRlcik7IC8vIGZyZWUgdXAgbm93IHVudXNlZCBtZW1vcnlcblxuICAgIGlmICghZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5MSU5LX1NUQVRVUykpIHtcbiAgICAgIC8vIEFuIGVycm9yIG9jY3VycmVkIHdoaWxlIGxpbmtpbmdcbiAgICAgIGNvbnN0IGxhc3RFcnJvciA9IGdsLmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW0pO1xuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdGYWlsZWQgdG8gaW5pdGlhbGl6ZWQgc2hhZGVycywgRXJyb3IgbGlua2luZzonICsgbGFzdEVycm9yXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMuX3Byb2dyYW0gPSBwcm9ncmFtO1xuXG4gICAgLy8gdGhpcy5fZ2V0QXR0cmliQW5kTG9jYXRpb24ob3B0LmF0dHJpYnV0ZXMsIG9wdC51bmlmb3Jtcyk7XG5cbiAgICAvLyB0aGlzLnJhd0JpbmQoKTtcbiAgICB0aGlzLmJpbmQoKCkgPT4ge1xuICAgICAgdGhpcy5fZ2V0QXR0cmlidXRlcyhvcHQuYXR0cmlidXRlcyk7XG4gICAgICB0aGlzLl9nZXRVbmlmb3JtcyhvcHQudW5pZm9ybXMpO1xuICAgIH0pO1xuICAgIC8vIFNoYWRlclByb2dyYW0udW5iaW5kKCk7XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIGNvbnN0IGdsID0gV2ViR0xDb250ZXh0LmdldENvbnRleHQoKTtcbiAgICBnbC5kZWxldGVQcm9ncmFtKHRoaXMuX3Byb2dyYW0pO1xuICB9XG5cbiAgLy8gcmF3QmluZCgpIHtcbiAgLy8gICBjb25zdCBnbCA9IFdlYkdMQ29udGV4dC5nZXRDb250ZXh0KCk7XG5cbiAgLy8gICBnbC51c2VQcm9ncmFtKHRoaXMuX3Byb2dyYW0pO1xuICAvLyB9XG5cbiAgYmluZChpbkNhbGxiYWNrOiAoYm91bmQ6IElCb3VuZFNoYWRlcikgPT4gdm9pZCkge1xuICAgIGlmIChTaGFkZXJQcm9ncmFtLl9pc0JvdW5kICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBEb3VibGUgc2hhZGVyIGJpbmRpbmcgKGJvdW5kOiAke1NoYWRlclByb2dyYW0uX2lzQm91bmQuX25hbWV9LCBiaW5kaW5nOiAke3RoaXMuX25hbWV9KWBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgU2hhZGVyUHJvZ3JhbS5faXNCb3VuZCA9IHRoaXM7XG4gICAgLy8gdGhpcy5yYXdCaW5kKCk7XG4gICAgY29uc3QgZ2wgPSBXZWJHTENvbnRleHQuZ2V0Q29udGV4dCgpO1xuICAgIGdsLnVzZVByb2dyYW0odGhpcy5fcHJvZ3JhbSk7XG5cbiAgICBpbkNhbGxiYWNrKHRoaXMpO1xuXG4gICAgU2hhZGVyUHJvZ3JhbS51bmJpbmQoKTtcbiAgfVxuXG4gIHN0YXRpYyB1bmJpbmQoKSB7XG4gICAgY29uc3QgZ2wgPSBXZWJHTENvbnRleHQuZ2V0Q29udGV4dCgpO1xuXG4gICAgZ2wudXNlUHJvZ3JhbShudWxsKTtcbiAgICBTaGFkZXJQcm9ncmFtLl9pc0JvdW5kID0gbnVsbDtcbiAgfVxuXG4gIGlzQm91bmQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIFNoYWRlclByb2dyYW0uX2lzQm91bmQgPT09IHRoaXM7XG4gIH1cblxuICBoYXNBdHRyaWJ1dGUobmFtZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuX2F0dHJpYnV0ZXMuaGFzKG5hbWUpO1xuICB9XG5cbiAgZ2V0QXR0cmlidXRlKG5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IGF0dHJpYnV0ZSA9IHRoaXMuX2F0dHJpYnV0ZXMuZ2V0KG5hbWUpO1xuICAgIGlmIChhdHRyaWJ1dGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBhdHRyaWJ1dGUgbm90IGZvdW5kOiAke25hbWV9YCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGF0dHJpYnV0ZTtcbiAgfVxuXG4gIGdldFVuaWZvcm0obmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3QgdW5pZm9ybSA9IHRoaXMuX3VuaWZvcm1zLmdldChuYW1lKTtcbiAgICBpZiAodW5pZm9ybSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuaWZvcm0gbm90IGZvdW5kOiAke25hbWV9YCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuaWZvcm07XG4gIH1cblxuICBzZXRUZXh0dXJlVW5pZm9ybShcbiAgICBpbk5hbWU6IHN0cmluZyxcbiAgICBpblRleHR1cmU6XG4gICAgICB8IElVbmJvdW5kVGV4dHVyZVxuICAgICAgfCBJVW5ib3VuZFRleHR1cmVBcnJheVxuICAgICAgfCBJVW5ib3VuZEN1YmVNYXBcbiAgICAgIHwgSVVuYm91bmREYXRhVGV4dHVyZVxuICAgICAgfCBJVW5ib3VuZERhdGFUZXh0dXJlVmVjNCxcbiAgICBpbkluZGV4OiBudW1iZXJcbiAgKSB7XG4gICAgY29uc3QgZ2wgPSBXZWJHTENvbnRleHQuZ2V0Q29udGV4dCgpO1xuXG4gICAgZ2wuYWN0aXZlVGV4dHVyZShnbC5URVhUVVJFMCArIGluSW5kZXgpO1xuICAgIGdsLnVuaWZvcm0xaSh0aGlzLmdldFVuaWZvcm0oaW5OYW1lKSwgaW5JbmRleCk7XG4gICAgaW5UZXh0dXJlLnJhd0JpbmQoKTtcbiAgfVxuXG4gIHNldEludGVnZXIxVW5pZm9ybShpbk5hbWU6IHN0cmluZywgaW5WYWx1ZTogbnVtYmVyKSB7XG4gICAgY29uc3QgZ2wgPSBXZWJHTENvbnRleHQuZ2V0Q29udGV4dCgpO1xuICAgIGdsLnVuaWZvcm0xaSh0aGlzLmdldFVuaWZvcm0oaW5OYW1lKSwgaW5WYWx1ZSk7XG4gIH1cblxuICBzZXRJbnRlZ2VyMlVuaWZvcm0oaW5OYW1lOiBzdHJpbmcsIGluVmFsdWVYOiBudW1iZXIsIGluVmFsdWVZOiBudW1iZXIpIHtcbiAgICBjb25zdCBnbCA9IFdlYkdMQ29udGV4dC5nZXRDb250ZXh0KCk7XG4gICAgZ2wudW5pZm9ybTJpKHRoaXMuZ2V0VW5pZm9ybShpbk5hbWUpLCBpblZhbHVlWCwgaW5WYWx1ZVkpO1xuICB9XG5cbiAgc2V0SW50ZWdlcjNVbmlmb3JtKFxuICAgIGluTmFtZTogc3RyaW5nLFxuICAgIGluVmFsdWVYOiBudW1iZXIsXG4gICAgaW5WYWx1ZVk6IG51bWJlcixcbiAgICBpblZhbHVlWjogbnVtYmVyXG4gICkge1xuICAgIGNvbnN0IGdsID0gV2ViR0xDb250ZXh0LmdldENvbnRleHQoKTtcbiAgICBnbC51bmlmb3JtM2kodGhpcy5nZXRVbmlmb3JtKGluTmFtZSksIGluVmFsdWVYLCBpblZhbHVlWSwgaW5WYWx1ZVopO1xuICB9XG5cbiAgc2V0RmxvYXQxVW5pZm9ybShpbk5hbWU6IHN0cmluZywgaW5WYWx1ZTogbnVtYmVyKSB7XG4gICAgY29uc3QgZ2wgPSBXZWJHTENvbnRleHQuZ2V0Q29udGV4dCgpO1xuICAgIGdsLnVuaWZvcm0xZih0aGlzLmdldFVuaWZvcm0oaW5OYW1lKSwgaW5WYWx1ZSk7XG4gIH1cblxuICBzZXRGbG9hdDJVbmlmb3JtKGluTmFtZTogc3RyaW5nLCBpblZhbHVlWDogbnVtYmVyLCBpblZhbHVlWTogbnVtYmVyKSB7XG4gICAgY29uc3QgZ2wgPSBXZWJHTENvbnRleHQuZ2V0Q29udGV4dCgpO1xuICAgIGdsLnVuaWZvcm0yZih0aGlzLmdldFVuaWZvcm0oaW5OYW1lKSwgaW5WYWx1ZVgsIGluVmFsdWVZKTtcbiAgfVxuXG4gIHNldEZsb2F0M1VuaWZvcm0oXG4gICAgaW5OYW1lOiBzdHJpbmcsXG4gICAgaW5WYWx1ZVg6IG51bWJlcixcbiAgICBpblZhbHVlWTogbnVtYmVyLFxuICAgIGluVmFsdWVaOiBudW1iZXJcbiAgKSB7XG4gICAgY29uc3QgZ2wgPSBXZWJHTENvbnRleHQuZ2V0Q29udGV4dCgpO1xuICAgIGdsLnVuaWZvcm0zZih0aGlzLmdldFVuaWZvcm0oaW5OYW1lKSwgaW5WYWx1ZVgsIGluVmFsdWVZLCBpblZhbHVlWik7XG4gIH1cblxuICBzZXRNYXRyaXgzVW5pZm9ybShpbk5hbWU6IHN0cmluZywgaW5NYXRyaXg6IGdsbS5SZWFkb25seU1hdDMpOiB2b2lkIHtcbiAgICBjb25zdCBnbCA9IFdlYkdMQ29udGV4dC5nZXRDb250ZXh0KCk7XG4gICAgZ2wudW5pZm9ybU1hdHJpeDNmdih0aGlzLmdldFVuaWZvcm0oaW5OYW1lKSwgZmFsc2UsIGluTWF0cml4IGFzIGdsbS5tYXQzKTtcbiAgfVxuXG4gIHNldE1hdHJpeDRVbmlmb3JtKGluTmFtZTogc3RyaW5nLCBpbk1hdHJpeDogZ2xtLlJlYWRvbmx5TWF0NCkge1xuICAgIGNvbnN0IGdsID0gV2ViR0xDb250ZXh0LmdldENvbnRleHQoKTtcbiAgICBnbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMuZ2V0VW5pZm9ybShpbk5hbWUpLCBmYWxzZSwgaW5NYXRyaXggYXMgZ2xtLm1hdDQpO1xuICB9XG5cbiAgcHJpdmF0ZSBfZ2V0QXR0cmlidXRlcyhhdHRyaWJ1dGVzOiBzdHJpbmdbXSkge1xuICAgIGNvbnN0IGdsID0gV2ViR0xDb250ZXh0LmdldENvbnRleHQoKTtcblxuICAgIGZvciAobGV0IGlpID0gMDsgaWkgPCBhdHRyaWJ1dGVzLmxlbmd0aDsgKytpaSkge1xuICAgICAgY29uc3QgdmFsdWUgPSBnbC5nZXRBdHRyaWJMb2NhdGlvbih0aGlzLl9wcm9ncmFtLCBhdHRyaWJ1dGVzW2lpXSk7XG5cbiAgICAgIGlmICh2YWx1ZSA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBhdHRyaWJ1dGUgbm90IGZvdW5kID0+ICR7YXR0cmlidXRlc1tpaV19YCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2F0dHJpYnV0ZXMuc2V0KGF0dHJpYnV0ZXNbaWldLCB2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfZ2V0VW5pZm9ybXModW5pZm9ybXM6IHN0cmluZ1tdKSB7XG4gICAgY29uc3QgZ2wgPSBXZWJHTENvbnRleHQuZ2V0Q29udGV4dCgpO1xuXG4gICAgZm9yIChsZXQgaWkgPSAwOyBpaSA8IHVuaWZvcm1zLmxlbmd0aDsgKytpaSkge1xuICAgICAgY29uc3QgdmFsdWUgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5fcHJvZ3JhbSwgdW5pZm9ybXNbaWldKTtcblxuICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgdW5pZm9ybSBub3QgZm91bmQgPT4gJHt1bmlmb3Jtc1tpaV19YCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3VuaWZvcm1zLnNldCh1bmlmb3Jtc1tpaV0sIHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICAvL1xuXG4gIHByaXZhdGUgX2dldFNoYWRlcihzcmM6IHN0cmluZywgdHlwZTogbnVtYmVyKSB7XG4gICAgY29uc3QgZ2wgPSBXZWJHTENvbnRleHQuZ2V0Q29udGV4dCgpO1xuXG4gICAgY29uc3Qgc2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKHR5cGUpO1xuICAgIGlmICghc2hhZGVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCBjcmVhdGUgYSBzaGFkZXInKTtcbiAgICB9XG5cbiAgICBnbC5zaGFkZXJTb3VyY2Uoc2hhZGVyLCBzcmMpO1xuICAgIGdsLmNvbXBpbGVTaGFkZXIoc2hhZGVyKTtcblxuICAgIGlmICghZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKHNoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMpKSB7XG4gICAgICBsZXQgZXJyb3Jfc3RyID0gZ2wuZ2V0U2hhZGVySW5mb0xvZyhzaGFkZXIpO1xuICAgICAgaWYgKCFlcnJvcl9zdHIpIGVycm9yX3N0ciA9ICdmYWlsZWQgdG8gY29tcGlsZSBhIHNoYWRlcic7XG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcl9zdHIpO1xuICAgIH1cblxuICAgIHJldHVybiBzaGFkZXI7XG4gIH1cbn1cbiIsCiAgImltcG9ydCB7IFdlYkdMQ29udGV4dCB9IGZyb20gJy4vV2ViR0xDb250ZXh0JztcblxuZXhwb3J0IGludGVyZmFjZSBJVW5ib3VuZFRleHR1cmUge1xuICBpbml0aWFsaXplKCk6IHZvaWQ7XG4gIHJhd0JpbmQoKTogdm9pZDtcbiAgcHJlQmluZChpbkNhbGxiYWNrOiAoYm91bmQ6IElCb3VuZFRleHR1cmUpID0+IHZvaWQpOiB2b2lkO1xuICBiaW5kKGluQ2FsbGJhY2s6IChib3VuZDogSUJvdW5kVGV4dHVyZSkgPT4gdm9pZCk6IHZvaWQ7XG4gIGdldFdpZHRoKCk6IG51bWJlcjtcbiAgZ2V0SGVpZ2h0KCk6IG51bWJlcjtcbiAgZ2V0UmF3T2JqZWN0KCk6IFdlYkdMVGV4dHVyZTtcbn1cblxuZXhwb3J0IGVudW0gVGV4dHVyZUZpbHRlciB7XG4gIHBpeGVsYXRlZCA9IDAsXG4gIGxpbmVhciA9IDEsXG4gIG1pcG1hcCA9IDJcbn1cblxuZXhwb3J0IGVudW0gVGV4dHVyZVJlcGVhdCB7XG4gIG5vUmVwZWF0ID0gMCxcbiAgcmVwZWF0ID0gMVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElCb3VuZFRleHR1cmUge1xuICBsb2FkRnJvbUltYWdlKFxuICAgIGluSW1hZ2U6IEhUTUxJbWFnZUVsZW1lbnQsXG4gICAgbW9kZT86IFRleHR1cmVGaWx0ZXIsXG4gICAgcmVwZWF0PzogVGV4dHVyZVJlcGVhdFxuICApOiB2b2lkO1xuICBsb2FkRnJvbU1lbW9yeShcbiAgICBpbldpZHRoOiBudW1iZXIsXG4gICAgaW5IZWlnaHQ6IG51bWJlcixcbiAgICBpblBpeGVsczogVWludDhBcnJheSxcbiAgICBtb2RlPzogVGV4dHVyZUZpbHRlcixcbiAgICByZXBlYXQ/OiBUZXh0dXJlUmVwZWF0XG4gICk6IHZvaWQ7XG4gIGFsbG9jYXRlKFxuICAgIGluV2lkdGg6IG51bWJlcixcbiAgICBpbkhlaWdodDogbnVtYmVyLFxuICAgIG1vZGU/OiBUZXh0dXJlRmlsdGVyLFxuICAgIHJlcGVhdD86IFRleHR1cmVSZXBlYXRcbiAgKTogdm9pZDtcbiAgYWxsb2NhdGVEZXB0aChcbiAgICBpbldpZHRoOiBudW1iZXIsXG4gICAgaW5IZWlnaHQ6IG51bWJlcixcbiAgICBtb2RlPzogVGV4dHVyZUZpbHRlcixcbiAgICByZXBlYXQ/OiBUZXh0dXJlUmVwZWF0XG4gICk6IHZvaWQ7XG4gIHJlc2l6ZShcbiAgICBpbldpZHRoOiBudW1iZXIsXG4gICAgaW5IZWlnaHQ6IG51bWJlcixcbiAgICBtb2RlPzogVGV4dHVyZUZpbHRlcixcbiAgICByZXBlYXQ/OiBUZXh0dXJlUmVwZWF0XG4gICk6IHZvaWQ7XG4gIGdldFJhd09iamVjdCgpOiBXZWJHTFRleHR1cmU7XG59XG5cbmV4cG9ydCBjbGFzcyBUZXh0dXJlIGltcGxlbWVudHMgSVVuYm91bmRUZXh0dXJlLCBJQm91bmRUZXh0dXJlIHtcbiAgcHJpdmF0ZSBfd2lkdGg6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgX2hlaWdodDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfdGV4dHVyZTogV2ViR0xUZXh0dXJlIHwgbnVsbCA9IG51bGw7XG5cbiAgaW5pdGlhbGl6ZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fdGV4dHVyZSkgdGhyb3cgbmV3IEVycm9yKCd0ZXh0dXJlOiBhbHJlYWR5IGluaXRpYWxpemVkJyk7XG5cbiAgICBjb25zdCBnbCA9IFdlYkdMQ29udGV4dC5nZXRDb250ZXh0KCk7XG4gICAgdGhpcy5fdGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcbiAgfVxuXG4gIHJhd0JpbmQoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLl90ZXh0dXJlKSB0aHJvdyBuZXcgRXJyb3IoJ3RleHR1cmU6IG5vdCBpbml0aWFsaXplZCcpO1xuICAgIGNvbnN0IGdsID0gV2ViR0xDb250ZXh0LmdldENvbnRleHQoKTtcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0aGlzLl90ZXh0dXJlKTtcbiAgfVxuXG4gIHByZUJpbmQoaW5DYWxsYmFjazogKGJvdW5kOiBJQm91bmRUZXh0dXJlKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5yYXdCaW5kKCk7XG4gICAgaW5DYWxsYmFjayh0aGlzKTtcbiAgfVxuXG4gIGJpbmQoaW5DYWxsYmFjazogKGJvdW5kOiBJQm91bmRUZXh0dXJlKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5wcmVCaW5kKGluQ2FsbGJhY2spO1xuICAgIFRleHR1cmUudW5iaW5kKCk7XG4gIH1cblxuICBzdGF0aWMgdW5iaW5kKCk6IHZvaWQge1xuICAgIGNvbnN0IGdsID0gV2ViR0xDb250ZXh0LmdldENvbnRleHQoKTtcblxuICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpO1xuICB9XG5cbiAgbG9hZEZyb21JbWFnZShcbiAgICBpbkltYWdlOiBIVE1MSW1hZ2VFbGVtZW50LFxuICAgIG1vZGU6IFRleHR1cmVGaWx0ZXIgPSBUZXh0dXJlRmlsdGVyLnBpeGVsYXRlZCxcbiAgICByZXBlYXQ6IFRleHR1cmVSZXBlYXQgPSBUZXh0dXJlUmVwZWF0Lm5vUmVwZWF0XG4gICk6IHZvaWQge1xuICAgIHRoaXMuX2FsbG9jYXRlKGluSW1hZ2Uud2lkdGgsIGluSW1hZ2UuaGVpZ2h0LCBpbkltYWdlLCBtb2RlLCByZXBlYXQpO1xuICB9XG5cbiAgbG9hZEZyb21NZW1vcnkoXG4gICAgaW5XaWR0aDogbnVtYmVyLFxuICAgIGluSGVpZ2h0OiBudW1iZXIsXG4gICAgaW5QaXhlbHM6IFVpbnQ4QXJyYXksXG4gICAgbW9kZTogVGV4dHVyZUZpbHRlciA9IFRleHR1cmVGaWx0ZXIucGl4ZWxhdGVkLFxuICAgIHJlcGVhdDogVGV4dHVyZVJlcGVhdCA9IFRleHR1cmVSZXBlYXQubm9SZXBlYXRcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5fYWxsb2NhdGUoaW5XaWR0aCwgaW5IZWlnaHQsIGluUGl4ZWxzLCBtb2RlLCByZXBlYXQpO1xuICB9XG5cbiAgYWxsb2NhdGUoXG4gICAgaW5XaWR0aDogbnVtYmVyLFxuICAgIGluSGVpZ2h0OiBudW1iZXIsXG4gICAgbW9kZTogVGV4dHVyZUZpbHRlciA9IFRleHR1cmVGaWx0ZXIucGl4ZWxhdGVkLFxuICAgIHJlcGVhdDogVGV4dHVyZVJlcGVhdCA9IFRleHR1cmVSZXBlYXQubm9SZXBlYXRcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5fYWxsb2NhdGUoaW5XaWR0aCwgaW5IZWlnaHQsIG51bGwsIG1vZGUsIHJlcGVhdCk7XG4gIH1cblxuICBhbGxvY2F0ZURlcHRoKFxuICAgIGluV2lkdGg6IG51bWJlcixcbiAgICBpbkhlaWdodDogbnVtYmVyLFxuICAgIG1vZGU6IFRleHR1cmVGaWx0ZXIgPSBUZXh0dXJlRmlsdGVyLnBpeGVsYXRlZCxcbiAgICByZXBlYXQ6IFRleHR1cmVSZXBlYXQgPSBUZXh0dXJlUmVwZWF0Lm5vUmVwZWF0XG4gICk6IHZvaWQge1xuICAgIHRoaXMuX2FsbG9jYXRlKGluV2lkdGgsIGluSGVpZ2h0LCBudWxsLCBtb2RlLCByZXBlYXQsIHRydWUpO1xuICB9XG5cbiAgcmVzaXplKFxuICAgIGluV2lkdGg6IG51bWJlcixcbiAgICBpbkhlaWdodDogbnVtYmVyLFxuICAgIG1vZGU6IFRleHR1cmVGaWx0ZXIgPSBUZXh0dXJlRmlsdGVyLnBpeGVsYXRlZCxcbiAgICByZXBlYXQ6IFRleHR1cmVSZXBlYXQgPSBUZXh0dXJlUmVwZWF0Lm5vUmVwZWF0XG4gICk6IHZvaWQge1xuICAgIHRoaXMuX2FsbG9jYXRlKGluV2lkdGgsIGluSGVpZ2h0LCBudWxsLCBtb2RlLCByZXBlYXQpO1xuICB9XG5cbiAgcHJpdmF0ZSBfYWxsb2NhdGUoXG4gICAgaW5XaWR0aDogbnVtYmVyLFxuICAgIGluSGVpZ2h0OiBudW1iZXIsXG4gICAgaW5QaXhlbHM6IFVpbnQ4QXJyYXkgfCBIVE1MSW1hZ2VFbGVtZW50IHwgbnVsbCA9IG51bGwsXG4gICAgbW9kZTogVGV4dHVyZUZpbHRlciA9IFRleHR1cmVGaWx0ZXIucGl4ZWxhdGVkLFxuICAgIHJlcGVhdDogVGV4dHVyZVJlcGVhdCA9IFRleHR1cmVSZXBlYXQubm9SZXBlYXQsXG4gICAgaXNEZXB0aFRleHR1cmU6IGJvb2xlYW4gPSBmYWxzZVxuICApOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX3RleHR1cmUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigndGV4dHVyZTogbm90IGluaXRpYWxpemVkJyk7XG4gICAgfVxuICAgIGlmIChpbldpZHRoIDw9IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigndGV4dHVyZTogd2lkdGggbXVzdCBiZSBwb3NpdGl2ZScpO1xuICAgIH1cbiAgICBpZiAoaW5IZWlnaHQgPD0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd0ZXh0dXJlOiBoZWlnaHQgbXVzdCBiZSBwb3NpdGl2ZScpO1xuICAgIH1cblxuICAgIGNvbnN0IGdsID0gV2ViR0xDb250ZXh0LmdldENvbnRleHQoKTtcblxuICAgIHRoaXMuX3dpZHRoID0gaW5XaWR0aDtcbiAgICB0aGlzLl9oZWlnaHQgPSBpbkhlaWdodDtcblxuICAgIGNvbnN0IGxldmVsID0gMDtcbiAgICBjb25zdCBpbnRlcm5hbEZvcm1hdCA9IGlzRGVwdGhUZXh0dXJlID8gZ2wuREVQVEhfQ09NUE9ORU5UMzJGIDogZ2wuUkdCQTtcbiAgICBjb25zdCBib3JkZXIgPSAwO1xuICAgIGNvbnN0IHNyY0Zvcm1hdCA9IGlzRGVwdGhUZXh0dXJlID8gZ2wuREVQVEhfQ09NUE9ORU5UIDogZ2wuUkdCQTtcbiAgICBjb25zdCBzcmNUeXBlID0gaXNEZXB0aFRleHR1cmUgPyBnbC5GTE9BVCA6IGdsLlVOU0lHTkVEX0JZVEU7XG5cbiAgICBpZiAoaW5QaXhlbHMgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50KSB7XG4gICAgICBnbC50ZXhJbWFnZTJEKFxuICAgICAgICBnbC5URVhUVVJFXzJELFxuICAgICAgICBsZXZlbCxcbiAgICAgICAgaW50ZXJuYWxGb3JtYXQsXG4gICAgICAgIHNyY0Zvcm1hdCxcbiAgICAgICAgc3JjVHlwZSxcbiAgICAgICAgaW5QaXhlbHNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdsLnRleEltYWdlMkQoXG4gICAgICAgIGdsLlRFWFRVUkVfMkQsXG4gICAgICAgIGxldmVsLFxuICAgICAgICBpbnRlcm5hbEZvcm1hdCxcbiAgICAgICAgaW5XaWR0aCxcbiAgICAgICAgaW5IZWlnaHQsXG4gICAgICAgIGJvcmRlcixcbiAgICAgICAgc3JjRm9ybWF0LFxuICAgICAgICBzcmNUeXBlLFxuICAgICAgICBpblBpeGVsc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAocmVwZWF0ID09PSBUZXh0dXJlUmVwZWF0Lm5vUmVwZWF0KSB7XG4gICAgICAvLyB3cmFwcGluZyB0byBjbGFtcCB0byBlZGdlXG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsLkNMQU1QX1RPX0VER0UpO1xuICAgIH0gZWxzZSBpZiAocmVwZWF0ID09PSBUZXh0dXJlUmVwZWF0LnJlcGVhdCkge1xuICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuUkVQRUFUKTtcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsLlJFUEVBVCk7XG4gICAgfVxuXG4gICAgaWYgKG1vZGUgPT09IFRleHR1cmVGaWx0ZXIucGl4ZWxhdGVkKSB7XG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XG4gICAgfSBlbHNlIGlmIChtb2RlID09PSBUZXh0dXJlRmlsdGVyLmxpbmVhcikge1xuICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLkxJTkVBUik7XG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTElORUFSKTtcbiAgICB9IGVsc2UgaWYgKG1vZGUgPT09IFRleHR1cmVGaWx0ZXIubWlwbWFwKSB7XG4gICAgICBnbC5nZW5lcmF0ZU1pcG1hcChnbC5URVhUVVJFXzJEKTtcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5ORUFSRVNUKTtcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoXG4gICAgICAgIGdsLlRFWFRVUkVfMkQsXG4gICAgICAgIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUixcbiAgICAgICAgZ2wuTElORUFSX01JUE1BUF9MSU5FQVJcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgZ2V0V2lkdGgoKTogbnVtYmVyIHtcbiAgICBpZiAoIXRoaXMuX3RleHR1cmUpIHRocm93IG5ldyBFcnJvcigndGV4dHVyZSBub3QgaW5pdGlhbGl6ZWQnKTtcblxuICAgIHJldHVybiB0aGlzLl93aWR0aDtcbiAgfVxuXG4gIGdldEhlaWdodCgpOiBudW1iZXIge1xuICAgIGlmICghdGhpcy5fdGV4dHVyZSkgdGhyb3cgbmV3IEVycm9yKCd0ZXh0dXJlIG5vdCBpbml0aWFsaXplZCcpO1xuXG4gICAgcmV0dXJuIHRoaXMuX2hlaWdodDtcbiAgfVxuXG4gIGdldFJhd09iamVjdCgpIHtcbiAgICBpZiAoIXRoaXMuX3RleHR1cmUpIHRocm93IG5ldyBFcnJvcigndGV4dHVyZSBub3QgaW5pdGlhbGl6ZWQnKTtcblxuICAgIC8vIFRPRE86IHRoaXMgaXMgdWdseVxuICAgIHJldHVybiB0aGlzLl90ZXh0dXJlO1xuICB9XG59XG4iLAogICJpbXBvcnQgeyBUZXh0dXJlRmlsdGVyLCBUZXh0dXJlUmVwZWF0IH0gZnJvbSAnLi9UZXh0dXJlJztcbmltcG9ydCB7IFdlYkdMQ29udGV4dCB9IGZyb20gJy4vV2ViR0xDb250ZXh0JztcblxuZXhwb3J0IGludGVyZmFjZSBJVW5ib3VuZFRleHR1cmVBcnJheSB7XG4gIGluaXRpYWxpemUoKTogdm9pZDtcbiAgcmF3QmluZCgpOiB2b2lkO1xuICBwcmVCaW5kKGluQ2FsbGJhY2s6IChib3VuZDogSUJvdW5kVGV4dHVyZUFycmF5KSA9PiB2b2lkKTogdm9pZDtcbiAgYmluZChpbkNhbGxiYWNrOiAoYm91bmQ6IElCb3VuZFRleHR1cmVBcnJheSkgPT4gdm9pZCk6IHZvaWQ7XG4gIGdldFdpZHRoKCk6IG51bWJlcjtcbiAgZ2V0SGVpZ2h0KCk6IG51bWJlcjtcbiAgZ2V0UmF3T2JqZWN0KCk6IFdlYkdMVGV4dHVyZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQm91bmRUZXh0dXJlQXJyYXkge1xuICBsb2FkRnJvbUltYWdlKFxuICAgIGluV2lkdGg6IG51bWJlcixcbiAgICBpbkhlaWdodDogbnVtYmVyLFxuICAgIGluVG90YWxMYXllcnM6IG51bWJlcixcbiAgICBpbkltYWdlOiBIVE1MSW1hZ2VFbGVtZW50LFxuICAgIG1vZGU/OiBUZXh0dXJlRmlsdGVyLFxuICAgIHJlcGVhdD86IFRleHR1cmVSZXBlYXRcbiAgKTogdm9pZDtcbiAgbG9hZEZyb21NZW1vcnkoXG4gICAgaW5XaWR0aDogbnVtYmVyLFxuICAgIGluSGVpZ2h0OiBudW1iZXIsXG4gICAgaW5Ub3RhbExheWVyczogbnVtYmVyLFxuICAgIGluUGl4ZWxzOiBVaW50OEFycmF5LFxuICAgIG1vZGU/OiBUZXh0dXJlRmlsdGVyLFxuICAgIHJlcGVhdD86IFRleHR1cmVSZXBlYXRcbiAgKTogdm9pZDtcbiAgZ2V0UmF3T2JqZWN0KCk6IFdlYkdMVGV4dHVyZTtcbn1cblxuZXhwb3J0IGNsYXNzIFRleHR1cmVBcnJheSBpbXBsZW1lbnRzIElVbmJvdW5kVGV4dHVyZUFycmF5LCBJQm91bmRUZXh0dXJlQXJyYXkge1xuICBwcml2YXRlIF93aWR0aDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfaGVpZ2h0OiBudW1iZXIgPSAwO1xuICBwcml2YXRlIF90ZXh0dXJlOiBXZWJHTFRleHR1cmUgfCBudWxsID0gbnVsbDtcblxuICBpbml0aWFsaXplKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl90ZXh0dXJlKSB0aHJvdyBuZXcgRXJyb3IoJ3RleHR1cmU6IGFscmVhZHkgaW5pdGlhbGl6ZWQnKTtcblxuICAgIGNvbnN0IGdsID0gV2ViR0xDb250ZXh0LmdldENvbnRleHQoKTtcbiAgICB0aGlzLl90ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICBjb25zdCBnbCA9IFdlYkdMQ29udGV4dC5nZXRDb250ZXh0KCk7XG4gICAgZ2wuZGVsZXRlVGV4dHVyZSh0aGlzLl90ZXh0dXJlKTtcbiAgfVxuXG4gIHJhd0JpbmQoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLl90ZXh0dXJlKSB0aHJvdyBuZXcgRXJyb3IoJ3RleHR1cmU6IG5vdCBpbml0aWFsaXplZCcpO1xuICAgIGNvbnN0IGdsID0gV2ViR0xDb250ZXh0LmdldENvbnRleHQoKTtcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJEX0FSUkFZLCB0aGlzLl90ZXh0dXJlKTtcbiAgfVxuXG4gIHByZUJpbmQoaW5DYWxsYmFjazogKGJvdW5kOiBJQm91bmRUZXh0dXJlQXJyYXkpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLnJhd0JpbmQoKTtcbiAgICBpbkNhbGxiYWNrKHRoaXMpO1xuICB9XG5cbiAgYmluZChpbkNhbGxiYWNrOiAoYm91bmQ6IElCb3VuZFRleHR1cmVBcnJheSkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMucHJlQmluZChpbkNhbGxiYWNrKTtcbiAgICBUZXh0dXJlQXJyYXkudW5iaW5kKCk7XG4gIH1cblxuICBzdGF0aWMgdW5iaW5kKCk6IHZvaWQge1xuICAgIGNvbnN0IGdsID0gV2ViR0xDb250ZXh0LmdldENvbnRleHQoKTtcblxuICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkRfQVJSQVksIG51bGwpO1xuICB9XG5cbiAgbG9hZEZyb21JbWFnZShcbiAgICBpbldpZHRoOiBudW1iZXIsXG4gICAgaW5IZWlnaHQ6IG51bWJlcixcbiAgICBpblRvdGFsTGF5ZXJzOiBudW1iZXIsXG4gICAgaW5JbWFnZTogSFRNTEltYWdlRWxlbWVudCxcbiAgICBtb2RlOiBUZXh0dXJlRmlsdGVyID0gVGV4dHVyZUZpbHRlci5waXhlbGF0ZWQsXG4gICAgcmVwZWF0OiBUZXh0dXJlUmVwZWF0ID0gVGV4dHVyZVJlcGVhdC5ub1JlcGVhdFxuICApOiB2b2lkIHtcbiAgICB0aGlzLl9hbGxvY2F0ZShpbldpZHRoLCBpbkhlaWdodCwgaW5Ub3RhbExheWVycywgaW5JbWFnZSwgbW9kZSwgcmVwZWF0KTtcbiAgfVxuXG4gIGxvYWRGcm9tTWVtb3J5KFxuICAgIGluV2lkdGg6IG51bWJlcixcbiAgICBpbkhlaWdodDogbnVtYmVyLFxuICAgIGluVG90YWxMYXllcnM6IG51bWJlcixcbiAgICBpblBpeGVsczogVWludDhBcnJheSxcbiAgICBtb2RlOiBUZXh0dXJlRmlsdGVyID0gVGV4dHVyZUZpbHRlci5waXhlbGF0ZWQsXG4gICAgcmVwZWF0OiBUZXh0dXJlUmVwZWF0ID0gVGV4dHVyZVJlcGVhdC5ub1JlcGVhdFxuICApOiB2b2lkIHtcbiAgICB0aGlzLl9hbGxvY2F0ZShpbldpZHRoLCBpbkhlaWdodCwgaW5Ub3RhbExheWVycywgaW5QaXhlbHMsIG1vZGUsIHJlcGVhdCk7XG4gIH1cblxuICBwcml2YXRlIF9hbGxvY2F0ZShcbiAgICBpbldpZHRoOiBudW1iZXIsXG4gICAgaW5IZWlnaHQ6IG51bWJlcixcbiAgICBpblRvdGFsTGF5ZXJzOiBudW1iZXIsXG4gICAgaW5QaXhlbHM6IFVpbnQ4QXJyYXkgfCBIVE1MSW1hZ2VFbGVtZW50IHwgbnVsbCA9IG51bGwsXG4gICAgbW9kZTogVGV4dHVyZUZpbHRlciA9IFRleHR1cmVGaWx0ZXIucGl4ZWxhdGVkLFxuICAgIHJlcGVhdDogVGV4dHVyZVJlcGVhdCA9IFRleHR1cmVSZXBlYXQubm9SZXBlYXRcbiAgKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLl90ZXh0dXJlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3RleHR1cmU6IG5vdCBpbml0aWFsaXplZCcpO1xuICAgIH1cbiAgICBpZiAoaW5XaWR0aCA8PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3RleHR1cmU6IHdpZHRoIG11c3QgYmUgcG9zaXRpdmUnKTtcbiAgICB9XG4gICAgaWYgKGluSGVpZ2h0IDw9IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigndGV4dHVyZTogaGVpZ2h0IG11c3QgYmUgcG9zaXRpdmUnKTtcbiAgICB9XG5cbiAgICBjb25zdCBnbCA9IFdlYkdMQ29udGV4dC5nZXRDb250ZXh0KCk7XG5cbiAgICB0aGlzLl93aWR0aCA9IGluV2lkdGg7XG4gICAgdGhpcy5faGVpZ2h0ID0gaW5IZWlnaHQ7XG5cbiAgICBjb25zdCBsZXZlbCA9IDA7XG4gICAgY29uc3QgaW50ZXJuYWxGb3JtYXQgPSBnbC5SR0JBO1xuICAgIGNvbnN0IGJvcmRlciA9IDA7XG4gICAgY29uc3Qgc3JjRm9ybWF0ID0gZ2wuUkdCQTtcbiAgICBjb25zdCBzcmNUeXBlID0gZ2wuVU5TSUdORURfQllURTtcblxuICAgIGlmIChpblBpeGVscyBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQpIHtcbiAgICAgIGdsLnRleEltYWdlM0QoXG4gICAgICAgIGdsLlRFWFRVUkVfMkRfQVJSQVksXG4gICAgICAgIGxldmVsLFxuICAgICAgICBpbnRlcm5hbEZvcm1hdCxcbiAgICAgICAgaW5XaWR0aCxcbiAgICAgICAgaW5IZWlnaHQsXG4gICAgICAgIGluVG90YWxMYXllcnMsXG4gICAgICAgIGJvcmRlcixcbiAgICAgICAgc3JjRm9ybWF0LFxuICAgICAgICBzcmNUeXBlLFxuICAgICAgICBpblBpeGVsc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2wudGV4SW1hZ2UzRChcbiAgICAgICAgZ2wuVEVYVFVSRV8yRF9BUlJBWSxcbiAgICAgICAgbGV2ZWwsXG4gICAgICAgIGludGVybmFsRm9ybWF0LFxuICAgICAgICBpbldpZHRoLFxuICAgICAgICBpbkhlaWdodCxcbiAgICAgICAgaW5Ub3RhbExheWVycyxcbiAgICAgICAgYm9yZGVyLFxuICAgICAgICBzcmNGb3JtYXQsXG4gICAgICAgIHNyY1R5cGUsXG4gICAgICAgIGluUGl4ZWxzXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChyZXBlYXQgPT09IFRleHR1cmVSZXBlYXQubm9SZXBlYXQpIHtcbiAgICAgIC8vIHdyYXBwaW5nIHRvIGNsYW1wIHRvIGVkZ2VcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoXG4gICAgICAgIGdsLlRFWFRVUkVfMkRfQVJSQVksXG4gICAgICAgIGdsLlRFWFRVUkVfV1JBUF9TLFxuICAgICAgICBnbC5DTEFNUF9UT19FREdFXG4gICAgICApO1xuICAgICAgZ2wudGV4UGFyYW1ldGVyaShcbiAgICAgICAgZ2wuVEVYVFVSRV8yRF9BUlJBWSxcbiAgICAgICAgZ2wuVEVYVFVSRV9XUkFQX1QsXG4gICAgICAgIGdsLkNMQU1QX1RPX0VER0VcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChyZXBlYXQgPT09IFRleHR1cmVSZXBlYXQucmVwZWF0KSB7XG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkRfQVJSQVksIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5SRVBFQVQpO1xuICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJEX0FSUkFZLCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuUkVQRUFUKTtcbiAgICB9XG5cbiAgICBpZiAobW9kZSA9PT0gVGV4dHVyZUZpbHRlci5waXhlbGF0ZWQpIHtcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRF9BUlJBWSwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5ORUFSRVNUKTtcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRF9BUlJBWSwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5ORUFSRVNUKTtcbiAgICB9IGVsc2UgaWYgKG1vZGUgPT09IFRleHR1cmVGaWx0ZXIubGluZWFyKSB7XG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkRfQVJSQVksIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTElORUFSKTtcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRF9BUlJBWSwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5MSU5FQVIpO1xuICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gVGV4dHVyZUZpbHRlci5taXBtYXApIHtcbiAgICAgIGdsLmdlbmVyYXRlTWlwbWFwKGdsLlRFWFRVUkVfMkRfQVJSQVkpO1xuICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJEX0FSUkFZLCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLk5FQVJFU1QpO1xuICAgICAgZ2wudGV4UGFyYW1ldGVyaShcbiAgICAgICAgZ2wuVEVYVFVSRV8yRF9BUlJBWSxcbiAgICAgICAgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLFxuICAgICAgICBnbC5MSU5FQVJfTUlQTUFQX0xJTkVBUlxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBnZXRXaWR0aCgpOiBudW1iZXIge1xuICAgIGlmICghdGhpcy5fdGV4dHVyZSkgdGhyb3cgbmV3IEVycm9yKCd0ZXh0dXJlIG5vdCBpbml0aWFsaXplZCcpO1xuXG4gICAgcmV0dXJuIHRoaXMuX3dpZHRoO1xuICB9XG5cbiAgZ2V0SGVpZ2h0KCk6IG51bWJlciB7XG4gICAgaWYgKCF0aGlzLl90ZXh0dXJlKSB0aHJvdyBuZXcgRXJyb3IoJ3RleHR1cmUgbm90IGluaXRpYWxpemVkJyk7XG5cbiAgICByZXR1cm4gdGhpcy5faGVpZ2h0O1xuICB9XG5cbiAgZ2V0UmF3T2JqZWN0KCkge1xuICAgIGlmICghdGhpcy5fdGV4dHVyZSkgdGhyb3cgbmV3IEVycm9yKCd0ZXh0dXJlIG5vdCBpbml0aWFsaXplZCcpO1xuXG4gICAgLy8gVE9ETzogdGhpcyBpcyB1Z2x5XG4gICAgcmV0dXJuIHRoaXMuX3RleHR1cmU7XG4gIH1cbn1cbiIsCiAgImV4cG9ydCBkZWZhdWx0IGBcbiN2ZXJzaW9uIDMwMCBlc1xuXG5wcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG5cbnVuaWZvcm0gbWF0NCB1X2NvbXBvc2VkTWF0cml4O1xuXG5pbiB2ZWMzIGFfdmVydGV4X3Bvc2l0aW9uO1xuaW4gdmVjMyBhX3ZlcnRleF9ub3JtYWw7XG5cbmluIHZlYzMgYV9vZmZzZXRfY2VudGVyO1xuaW4gdmVjNCBhX29mZnNldF9vcmllbnRhdGlvbjtcbmluIHZlYzMgYV9vZmZzZXRfY29sb3I7XG5pbiB2ZWMzIGFfb2Zmc2V0X3NjYWxlO1xuXG5mbGF0IG91dCB2ZWM0IHZfY29sb3I7XG5vdXQgdmVjMyB2X3dvcmxkU3BhY2VQb3NpdGlvbjtcbm91dCB2ZWMzIHZfd29ybGRTcGFjZU5vcm1hbDtcblxuXG52ZWMzIGFwcGx5X3F1YXRfdG9fdmVjMyh2ZWMzIHBvc2l0aW9uLCB2ZWM0IHEpXG57XG4gIHZlYzMgdiA9IHBvc2l0aW9uLnh5ejtcbiAgcmV0dXJuIHYgKyAyLjAgKiBjcm9zcyhxLnh5eiwgY3Jvc3MocS54eXosIHYpICsgcS53ICogdik7XG59XG5cbnZvaWQgbWFpbih2b2lkKVxue1xuXHR2ZWMzIHdvcmxkU3BhY2VQb3NpdGlvbiA9IGFfb2Zmc2V0X2NlbnRlciArIGFwcGx5X3F1YXRfdG9fdmVjMyhhX3ZlcnRleF9wb3NpdGlvbiAqIGFfb2Zmc2V0X3NjYWxlLCBhX29mZnNldF9vcmllbnRhdGlvbik7XG5cdHZlYzMgd29ybGRTcGFjZU5vcm1hbCA9IGFwcGx5X3F1YXRfdG9fdmVjMyhhX3ZlcnRleF9ub3JtYWwsIGFfb2Zmc2V0X29yaWVudGF0aW9uKTtcblxuICBnbF9Qb3NpdGlvbiA9IHVfY29tcG9zZWRNYXRyaXggKiB2ZWM0KHdvcmxkU3BhY2VQb3NpdGlvbiwgMS4wKTtcblxuICB2X2NvbG9yID0gdmVjNChhX29mZnNldF9jb2xvciwgMS4wKTtcbiAgdl93b3JsZFNwYWNlUG9zaXRpb24gPSB3b3JsZFNwYWNlUG9zaXRpb247XG4gIHZfd29ybGRTcGFjZU5vcm1hbCA9IHdvcmxkU3BhY2VOb3JtYWw7XG59XG5gLnRyaW0oKTsiLAogICJleHBvcnQgZGVmYXVsdCBgXG4jdmVyc2lvbiAzMDAgZXNcblxucHJlY2lzaW9uIGxvd3AgZmxvYXQ7XG5cbnVuaWZvcm0gdmVjMyB1X2xpZ2h0UG9zO1xuXG5mbGF0IGluIHZlYzQgdl9jb2xvcjtcbmluIHZlYzMgdl93b3JsZFNwYWNlUG9zaXRpb247XG5pbiB2ZWMzIHZfd29ybGRTcGFjZU5vcm1hbDtcblxub3V0IHZlYzQgb19jb2xvcjtcblxuLy9cbi8vXG4vL1xuXG5jb25zdCBmbG9hdCBrX2FtYmlhbnRDb2VmID0gMC4xO1xuXG5jb25zdCB2ZWMzIGtfc3BlY0NvbG9yID0gdmVjMygxLjAsIDEuMCwgMS4wKTtcblxudmVjMyBfZ2V0TGlnaHRDb2xvcih2ZWM0IGN1cnJlbnRDb2xvcilcbntcbiAgdmVjMyBub3JtYWwgPSBub3JtYWxpemUodl93b3JsZFNwYWNlTm9ybWFsKTtcbiAgdmVjMyBsaWdodERpciA9IG5vcm1hbGl6ZSh1X2xpZ2h0UG9zIC0gdl93b3JsZFNwYWNlUG9zaXRpb24pO1xuXG4gIGZsb2F0IGRpZmZ1c2VDb2VmID0gbWF4KGRvdChsaWdodERpciwgdl93b3JsZFNwYWNlTm9ybWFsLnh5eiksIDAuMCk7XG4gIGZsb2F0IHNwZWN1bGFyQ29lZiA9IDAuMDtcblxuICAvLyBpZiAoZGlmZnVzZUNvZWYgPiAwLjAgJiYgdl9za2lwU3BlY3VsYXIgPCAwLjUpXG4gIC8vIHtcbiAgLy8gICAvLyBzcGVjdWxhclxuXG4gIC8vICAgdmVjMyByZWZsZWN0RGlyID0gcmVmbGVjdCgtbGlnaHREaXIsIG5vcm1hbCk7XG4gIC8vICAgdmVjMyB2aWV3RGlyID0gbm9ybWFsaXplKHVfbGlnaHRQb3MgLSB2X3dvcmxkU3BhY2VQb3NpdGlvbik7XG5cbiAgLy8gICBmbG9hdCBzcGVjQW5nbGUgPSBtYXgoZG90KHJlZmxlY3REaXIsIHZpZXdEaXIpLCAwLjApO1xuICAvLyAgIHNwZWN1bGFyQ29lZiA9IHBvdyhzcGVjQW5nbGUsIDMyLjApO1xuICAvLyB9XG5cbiAgdmVjMyBkaWZmdXNlQ29sb3IgPSBjdXJyZW50Q29sb3IucmdiICogKGtfYW1iaWFudENvZWYgKyBkaWZmdXNlQ29lZik7XG4gIHZlYzMgc3BlY3VsYXJDb2xvciA9IGtfc3BlY0NvbG9yICogc3BlY3VsYXJDb2VmICogY3VycmVudENvbG9yLmE7XG5cbiAgcmV0dXJuIGRpZmZ1c2VDb2xvciArIHNwZWN1bGFyQ29sb3I7XG59XG5cbi8vXG4vL1xuLy9cblxudm9pZCBtYWluKHZvaWQpXG57XG4gIG9fY29sb3IgPSB2ZWM0KF9nZXRMaWdodENvbG9yKHZfY29sb3IpLCAxLjApO1xufVxuYC50cmltKCk7IiwKICAiaW1wb3J0ICogYXMgd2ViZ2wyIGZyb20gJy4uLy4uLy4uL2dyYXBoaWNzL3dlYmdsMic7XG5pbXBvcnQgeyBJQ2FtZXJhIH0gZnJvbSAnLi4vLi4vLi4vZ3JhcGhpY3MvY2FtZXJhJztcblxuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHN0YWNrUmVuZGVyZXJWZXJ0ZXggZnJvbSAnLi9zaGFkZXJzL2dlb21ldHJ5LXJlbmRlcmVyLmdsc2wudmVydCc7XG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgc3RhY2tSZW5kZXJlckZyYWdtZW50IGZyb20gJy4vc2hhZGVycy9nZW9tZXRyeS1yZW5kZXJlci5nbHNsLmZyYWcnO1xuXG5pbXBvcnQgKiBhcyBnbG0gZnJvbSAnZ2wtbWF0cml4JztcblxuY29uc3Qga19idWZmZXJTaXplID0gMTQgKiAxMDI0O1xuXG5leHBvcnQgaW50ZXJmYWNlIElWZXJ0ZXgge1xuICBwb3M6IGdsbS52ZWMzO1xuICBub3JtYWw6IGdsbS52ZWMzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElHZW9tZXRyeVJlbmRlcmVyIHtcbiAgcHVzaChcbiAgICBpblBvaW50QTogZ2xtLlJlYWRvbmx5VmVjMyxcbiAgICBpblF1YXQ6IGdsbS5SZWFkb25seVF1YXQsXG4gICAgaW5Db2xvcjogZ2xtLlJlYWRvbmx5VmVjMyxcbiAgICBpblNjYWxlOiBnbG0uUmVhZG9ubHlWZWMzXG4gICk6IHZvaWQ7XG4gIGZsdXNoKGluQ2FtZXJhOiBJQ2FtZXJhKTogdm9pZDtcbiAgY2xlYXIoKTogdm9pZDtcbn1cblxuZXhwb3J0IGNsYXNzIEdlb21ldHJ5UmVuZGVyZXIgaW1wbGVtZW50cyBJR2VvbWV0cnlSZW5kZXJlciB7XG4gIHByaXZhdGUgX3NoYWRlcjogd2ViZ2wyLklVbmJvdW5kU2hhZGVyO1xuICBwcml2YXRlIF9nZW9tZXRyeTogd2ViZ2wyLkdlb21ldHJ5V3JhcHBlci5HZW9tZXRyeTtcblxuICBwcml2YXRlIF9idWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KGtfYnVmZmVyU2l6ZSk7XG4gIHByaXZhdGUgX2N1cnJlbnRTaXplOiBudW1iZXIgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3NoYWRlciA9IG5ldyB3ZWJnbDIuU2hhZGVyUHJvZ3JhbSgnR2VvbWV0cnlSZW5kZXJlcicsIHtcbiAgICAgIHZlcnRleFNyYzogc3RhY2tSZW5kZXJlclZlcnRleCxcbiAgICAgIGZyYWdtZW50U3JjOiBzdGFja1JlbmRlcmVyRnJhZ21lbnQsXG4gICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICdhX3ZlcnRleF9wb3NpdGlvbicsXG4gICAgICAgICdhX3ZlcnRleF9ub3JtYWwnLFxuICAgICAgICAnYV9vZmZzZXRfY2VudGVyJyxcbiAgICAgICAgJ2Ffb2Zmc2V0X29yaWVudGF0aW9uJyxcbiAgICAgICAgJ2Ffb2Zmc2V0X2NvbG9yJyxcbiAgICAgICAgJ2Ffb2Zmc2V0X3NjYWxlJ1xuICAgICAgXSxcbiAgICAgIHVuaWZvcm1zOiBbJ3VfY29tcG9zZWRNYXRyaXgnLCAndV9saWdodFBvcyddXG4gICAgfSk7XG5cbiAgICBjb25zdCBnZW9CdWlsZGVyID0gbmV3IHdlYmdsMi5HZW9tZXRyeVdyYXBwZXIuR2VvbWV0cnlCdWlsZGVyKCk7XG4gICAgZ2VvQnVpbGRlclxuICAgICAgLnJlc2V0KClcbiAgICAgIC5zZXRQcmltaXRpdmVUeXBlKCd0cmlhbmdsZXMnKVxuICAgICAgLmFkZFZibygpXG4gICAgICAuYWRkVmJvQXR0cmlidXRlKCdhX3ZlcnRleF9wb3NpdGlvbicsICd2ZWMzZicpXG4gICAgICAuYWRkVmJvQXR0cmlidXRlKCdhX3ZlcnRleF9ub3JtYWwnLCAndmVjM2YnKVxuICAgICAgLy8gLnNldFN0cmlkZSgzICogNCAqIDYpXG4gICAgICAuYWRkVmJvKClcbiAgICAgIC5zZXRWYm9Bc1N0cmVhbWluZygpXG4gICAgICAuc2V0VmJvQXNJbnN0YW5jZWQoKVxuICAgICAgLmFkZFZib0F0dHJpYnV0ZSgnYV9vZmZzZXRfY2VudGVyJywgJ3ZlYzNmJylcbiAgICAgIC5hZGRWYm9BdHRyaWJ1dGUoJ2Ffb2Zmc2V0X29yaWVudGF0aW9uJywgJ3ZlYzRmJylcbiAgICAgIC5hZGRWYm9BdHRyaWJ1dGUoJ2Ffb2Zmc2V0X2NvbG9yJywgJ3ZlYzNmJylcbiAgICAgIC5hZGRWYm9BdHRyaWJ1dGUoJ2Ffb2Zmc2V0X3NjYWxlJywgJ3ZlYzNmJyk7XG5cbiAgICB0aGlzLl9nZW9tZXRyeSA9IG5ldyB3ZWJnbDIuR2VvbWV0cnlXcmFwcGVyLkdlb21ldHJ5KFxuICAgICAgdGhpcy5fc2hhZGVyLFxuICAgICAgZ2VvQnVpbGRlci5nZXREZWYoKVxuICAgICk7XG4gICAgdGhpcy5fZ2VvbWV0cnkuc2V0RmxvYXRCdWZmZXJTaXplKDEsIGtfYnVmZmVyU2l6ZSk7XG4gIH1cblxuICBzZXRHZW9tZXRyeVZlcnRpY2VzKHZlcnRpY2VzOiBJVmVydGV4W10pIHtcbiAgICBjb25zdCBidWYgPSBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgIC4uLnZlcnRpY2VzLm1hcCgodmFsKSA9PiBbLi4udmFsLnBvcywgLi4udmFsLm5vcm1hbF0pLmZsYXQoKVxuICAgIF0pO1xuICAgIC8vIGNvbnN0IGJ1ZiA9IG5ldyBGbG9hdDMyQXJyYXkoWy4uLnZlcnRpY2VzLm1hcCh2YWwgPT4gWy4uLnZhbC5wb3NdKS5mbGF0KCldKTtcbiAgICB0aGlzLl9nZW9tZXRyeS5hbGxvY2F0ZUJ1ZmZlcigwLCBidWYsIGJ1Zi5sZW5ndGgpO1xuICAgIHRoaXMuX2dlb21ldHJ5LnNldFByaW1pdGl2ZUNvdW50KGJ1Zi5sZW5ndGggLyA2KTtcbiAgfVxuXG4gIHB1c2goXG4gICAgaW5Qb2ludEE6IGdsbS5SZWFkb25seVZlYzMsXG4gICAgaW5RdWF0OiBnbG0uUmVhZG9ubHlRdWF0LFxuICAgIGluQ29sb3I6IGdsbS5SZWFkb25seVZlYzMsXG4gICAgaW5TY2FsZTogZ2xtLlJlYWRvbmx5VmVjM1xuICApIHtcbiAgICBpZiAodGhpcy5fY3VycmVudFNpemUgKyAxMyA+PSB0aGlzLl9idWZmZXIubGVuZ3RoKSB7XG4gICAgICBpZiAodGhpcy5fc2hhZGVyLmlzQm91bmQoKSkge1xuICAgICAgICB0aGlzLl9mbHVzaCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSsrXSA9IGluUG9pbnRBWzBdO1xuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSsrXSA9IGluUG9pbnRBWzFdO1xuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSsrXSA9IGluUG9pbnRBWzJdO1xuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSsrXSA9IGluUXVhdFswXTtcbiAgICB0aGlzLl9idWZmZXJbdGhpcy5fY3VycmVudFNpemUrK10gPSBpblF1YXRbMV07XG4gICAgdGhpcy5fYnVmZmVyW3RoaXMuX2N1cnJlbnRTaXplKytdID0gaW5RdWF0WzJdO1xuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSsrXSA9IGluUXVhdFszXTtcbiAgICB0aGlzLl9idWZmZXJbdGhpcy5fY3VycmVudFNpemUrK10gPSBpbkNvbG9yWzBdO1xuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSsrXSA9IGluQ29sb3JbMV07XG4gICAgdGhpcy5fYnVmZmVyW3RoaXMuX2N1cnJlbnRTaXplKytdID0gaW5Db2xvclsyXTtcbiAgICB0aGlzLl9idWZmZXJbdGhpcy5fY3VycmVudFNpemUrK10gPSBpblNjYWxlWzBdO1xuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSsrXSA9IGluU2NhbGVbMV07XG4gICAgdGhpcy5fYnVmZmVyW3RoaXMuX2N1cnJlbnRTaXplKytdID0gaW5TY2FsZVsyXTtcbiAgICAvLyB0aGlzLl9jdXJyZW50U2l6ZSArPSA2O1xuICB9XG5cbiAgZmx1c2goaW5DYW1lcmE6IElDYW1lcmEpIHtcbiAgICBpZiAoIXRoaXMuY2FuUmVuZGVyKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9zaGFkZXIuYmluZCgoYm91bmQpID0+IHtcbiAgICAgIGJvdW5kLnNldE1hdHJpeDRVbmlmb3JtKCd1X2NvbXBvc2VkTWF0cml4JywgaW5DYW1lcmEuZ2V0Q29tcG9zZWRNYXRyaXgoKSk7XG4gICAgICBjb25zdCBleWVQb3MgPSBpbkNhbWVyYS5nZXRFeWUoKTtcbiAgICAgIGJvdW5kLnNldEZsb2F0M1VuaWZvcm0oJ3VfbGlnaHRQb3MnLCBleWVQb3NbMF0sIGV5ZVBvc1sxXSwgZXllUG9zWzJdKTtcblxuICAgICAgdGhpcy5fZmx1c2goKTtcbiAgICB9KTtcbiAgfVxuXG4gIHNhZmVSZW5kZXIoaW5DYW1lcmE6IElDYW1lcmEsIGluQ2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICB0aGlzLl9zaGFkZXIuYmluZCgoYm91bmQpID0+IHtcbiAgICAgIGJvdW5kLnNldE1hdHJpeDRVbmlmb3JtKCd1X2NvbXBvc2VkTWF0cml4JywgaW5DYW1lcmEuZ2V0Q29tcG9zZWRNYXRyaXgoKSk7XG4gICAgICBjb25zdCBleWVQb3MgPSBpbkNhbWVyYS5nZXRFeWUoKTtcbiAgICAgIGJvdW5kLnNldEZsb2F0M1VuaWZvcm0oJ3VfbGlnaHRQb3MnLCBleWVQb3NbMF0sIGV5ZVBvc1sxXSwgZXllUG9zWzJdKTtcblxuICAgICAgaW5DYWxsYmFjaygpO1xuXG4gICAgICB0aGlzLl9mbHVzaCgpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBfZmx1c2goKSB7XG4gICAgdGhpcy5fZ2VvbWV0cnkudXBkYXRlQnVmZmVyKDEsIHRoaXMuX2J1ZmZlciwgdGhpcy5fY3VycmVudFNpemUsIDApO1xuICAgIHRoaXMuX2dlb21ldHJ5LnNldEluc3RhbmNlZENvdW50KHRoaXMuX2N1cnJlbnRTaXplIC8gMTMpO1xuXG4gICAgdGhpcy5fZ2VvbWV0cnkucmVuZGVyKCk7XG5cbiAgICB0aGlzLmNsZWFyKCk7XG4gIH1cblxuICBjYW5SZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRTaXplID4gMDtcbiAgfVxuXG4gIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMuX2N1cnJlbnRTaXplID0gMDtcbiAgfVxufVxuIiwKICAiZXhwb3J0IGRlZmF1bHQgYFxuI3ZlcnNpb24gMzAwIGVzXG5cbnByZWNpc2lvbiBoaWdocCBmbG9hdDtcblxudW5pZm9ybSBtYXQ0IHVfY29tcG9zZWRNYXRyaXg7XG5cbmluIHZlYzMgYV92ZXJ0ZXhfcG9zaXRpb247XG5cbmluIHZlYzMgYV9vZmZzZXRfY2VudGVyO1xuaW4gdmVjNCBhX29mZnNldF9vcmllbnRhdGlvbjtcbmluIHZlYzMgYV9vZmZzZXRfY29sb3I7XG5pbiB2ZWMzIGFfb2Zmc2V0X3NjYWxlO1xuXG5mbGF0IG91dCB2ZWM0IHZfY29sb3I7XG5cbnZlYzMgYXBwbHlfcXVhdF90b192ZWMzKHZlYzMgcG9zaXRpb24sIHZlYzQgcSlcbntcbiAgdmVjMyB2ID0gcG9zaXRpb24ueHl6O1xuICByZXR1cm4gdiArIDIuMCAqIGNyb3NzKHEueHl6LCBjcm9zcyhxLnh5eiwgdikgKyBxLncgKiB2KTtcbn1cblxudm9pZCBtYWluKHZvaWQpXG57XG5cdHZlYzMgd29ybGRTcGFjZVBvc2l0aW9uID0gYV9vZmZzZXRfY2VudGVyICsgYXBwbHlfcXVhdF90b192ZWMzKGFfdmVydGV4X3Bvc2l0aW9uICogYV9vZmZzZXRfc2NhbGUsIGFfb2Zmc2V0X29yaWVudGF0aW9uKTtcblxuICBnbF9Qb3NpdGlvbiA9IHVfY29tcG9zZWRNYXRyaXggKiB2ZWM0KHdvcmxkU3BhY2VQb3NpdGlvbiwgMS4wKTtcblxuICB2X2NvbG9yID0gdmVjNChhX29mZnNldF9jb2xvciwgMS4wKTtcbn1cbmAudHJpbSgpOyIsCiAgImV4cG9ydCBkZWZhdWx0IGBcbiN2ZXJzaW9uIDMwMCBlc1xuXG5wcmVjaXNpb24gbG93cCBmbG9hdDtcblxuZmxhdCBpbiB2ZWM0IHZfY29sb3I7XG5cbm91dCB2ZWM0IG9fY29sb3I7XG5cbnZvaWQgbWFpbih2b2lkKVxue1xuICBvX2NvbG9yID0gdmVjNCh2X2NvbG9yLnJiZywgMS4wKTtcbn1cbmAudHJpbSgpOyIsCiAgImltcG9ydCAqIGFzIHdlYmdsMiBmcm9tICcuLi8uLi8uLi9ncmFwaGljcy93ZWJnbDInO1xuaW1wb3J0IHsgSUNhbWVyYSB9IGZyb20gJy4uLy4uLy4uL2dyYXBoaWNzL2NhbWVyYSc7XG5cbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBzdGFja1JlbmRlcmVyVmVydGV4IGZyb20gJy4vc2hhZGVycy9nZW9tZXRyeS1yZW5kZXJlci1mbGF0Lmdsc2wudmVydCc7XG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgc3RhY2tSZW5kZXJlckZyYWdtZW50IGZyb20gJy4vc2hhZGVycy9nZW9tZXRyeS1yZW5kZXJlci1mbGF0Lmdsc2wuZnJhZyc7XG5cbmltcG9ydCAqIGFzIGdsbSBmcm9tICdnbC1tYXRyaXgnO1xuXG5jb25zdCBrX2J1ZmZlclNpemUgPSAxNCAqIDEwMjQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUZsYXRWZXJ0ZXgge1xuICBwb3M6IGdsbS52ZWMzO1xuICAvLyBub3JtYWw6IGdsbS52ZWMzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElHZW9tZXRyeVJlbmRlcmVyRmxhdCB7XG4gIHB1c2goXG4gICAgaW5Qb2ludEE6IGdsbS5SZWFkb25seVZlYzMsXG4gICAgaW5RdWF0OiBnbG0uUmVhZG9ubHlRdWF0LFxuICAgIGluQ29sb3I6IGdsbS5SZWFkb25seVZlYzMsXG4gICAgaW5TY2FsZTogZ2xtLlJlYWRvbmx5VmVjM1xuICApOiB2b2lkO1xuICBmbHVzaChpbkNhbWVyYTogSUNhbWVyYSk6IHZvaWQ7XG4gIGNsZWFyKCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBHZW9tZXRyeVJlbmRlcmVyRmxhdCBpbXBsZW1lbnRzIElHZW9tZXRyeVJlbmRlcmVyRmxhdCB7XG4gIHByaXZhdGUgX3NoYWRlcjogd2ViZ2wyLklVbmJvdW5kU2hhZGVyO1xuICBwcml2YXRlIF9nZW9tZXRyeTogd2ViZ2wyLkdlb21ldHJ5V3JhcHBlci5HZW9tZXRyeTtcblxuICBwcml2YXRlIF9idWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KGtfYnVmZmVyU2l6ZSk7XG4gIHByaXZhdGUgX2N1cnJlbnRTaXplOiBudW1iZXIgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3NoYWRlciA9IG5ldyB3ZWJnbDIuU2hhZGVyUHJvZ3JhbSgnR2VvbWV0cnlSZW5kZXJlckZsYXQnLCB7XG4gICAgICB2ZXJ0ZXhTcmM6IHN0YWNrUmVuZGVyZXJWZXJ0ZXgsXG4gICAgICBmcmFnbWVudFNyYzogc3RhY2tSZW5kZXJlckZyYWdtZW50LFxuICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICAnYV92ZXJ0ZXhfcG9zaXRpb24nLFxuICAgICAgICAvLyAnYV92ZXJ0ZXhfbm9ybWFsJyxcbiAgICAgICAgJ2Ffb2Zmc2V0X2NlbnRlcicsXG4gICAgICAgICdhX29mZnNldF9vcmllbnRhdGlvbicsXG4gICAgICAgICdhX29mZnNldF9jb2xvcicsXG4gICAgICAgICdhX29mZnNldF9zY2FsZSdcbiAgICAgIF0sXG4gICAgICB1bmlmb3JtczogW1xuICAgICAgICAndV9jb21wb3NlZE1hdHJpeCdcbiAgICAgICAgLy8gJ3VfbGlnaHRQb3MnXG4gICAgICBdXG4gICAgfSk7XG5cbiAgICBjb25zdCBnZW9CdWlsZGVyID0gbmV3IHdlYmdsMi5HZW9tZXRyeVdyYXBwZXIuR2VvbWV0cnlCdWlsZGVyKCk7XG4gICAgZ2VvQnVpbGRlclxuICAgICAgLnJlc2V0KClcbiAgICAgIC5zZXRQcmltaXRpdmVUeXBlKCd0cmlhbmdsZXMnKVxuICAgICAgLmFkZFZibygpXG4gICAgICAuYWRkVmJvQXR0cmlidXRlKCdhX3ZlcnRleF9wb3NpdGlvbicsICd2ZWMzZicpXG4gICAgICAvLyAuYWRkVmJvQXR0cmlidXRlKCdhX3ZlcnRleF9ub3JtYWwnLCAndmVjM2YnKVxuICAgICAgLy8gLnNldFN0cmlkZSgzICogNCAqIDYpXG4gICAgICAuYWRkVmJvKClcbiAgICAgIC5zZXRWYm9Bc1N0cmVhbWluZygpXG4gICAgICAuc2V0VmJvQXNJbnN0YW5jZWQoKVxuICAgICAgLmFkZFZib0F0dHJpYnV0ZSgnYV9vZmZzZXRfY2VudGVyJywgJ3ZlYzNmJylcbiAgICAgIC5hZGRWYm9BdHRyaWJ1dGUoJ2Ffb2Zmc2V0X29yaWVudGF0aW9uJywgJ3ZlYzRmJylcbiAgICAgIC5hZGRWYm9BdHRyaWJ1dGUoJ2Ffb2Zmc2V0X2NvbG9yJywgJ3ZlYzNmJylcbiAgICAgIC5hZGRWYm9BdHRyaWJ1dGUoJ2Ffb2Zmc2V0X3NjYWxlJywgJ3ZlYzNmJyk7XG5cbiAgICB0aGlzLl9nZW9tZXRyeSA9IG5ldyB3ZWJnbDIuR2VvbWV0cnlXcmFwcGVyLkdlb21ldHJ5KFxuICAgICAgdGhpcy5fc2hhZGVyLFxuICAgICAgZ2VvQnVpbGRlci5nZXREZWYoKVxuICAgICk7XG4gICAgdGhpcy5fZ2VvbWV0cnkuc2V0RmxvYXRCdWZmZXJTaXplKDEsIGtfYnVmZmVyU2l6ZSk7XG4gIH1cblxuICBzZXRHZW9tZXRyeVZlcnRpY2VzKHZlcnRpY2VzOiBJRmxhdFZlcnRleFtdKSB7XG4gICAgY29uc3QgYnVmID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgICAvLyAuLi52ZXJ0aWNlcy5tYXAoKHZhbCkgPT4gWy4uLnZhbC5wb3MsIC4uLnZhbC5ub3JtYWxdKS5mbGF0KClcbiAgICAgIC4uLnZlcnRpY2VzLm1hcCgodmFsKSA9PiBbLi4udmFsLnBvc10pLmZsYXQoKVxuICAgIF0pO1xuICAgIC8vIGNvbnN0IGJ1ZiA9IG5ldyBGbG9hdDMyQXJyYXkoWy4uLnZlcnRpY2VzLm1hcCh2YWwgPT4gWy4uLnZhbC5wb3NdKS5mbGF0KCldKTtcbiAgICB0aGlzLl9nZW9tZXRyeS5hbGxvY2F0ZUJ1ZmZlcigwLCBidWYsIGJ1Zi5sZW5ndGgpO1xuICAgIHRoaXMuX2dlb21ldHJ5LnNldFByaW1pdGl2ZUNvdW50KGJ1Zi5sZW5ndGggLyAzKTtcbiAgfVxuXG4gIHB1c2goXG4gICAgaW5Qb2ludEE6IGdsbS5SZWFkb25seVZlYzMsXG4gICAgaW5RdWF0OiBnbG0uUmVhZG9ubHlRdWF0LFxuICAgIGluQ29sb3I6IGdsbS5SZWFkb25seVZlYzMsXG4gICAgaW5TY2FsZTogZ2xtLlJlYWRvbmx5VmVjM1xuICApIHtcbiAgICBpZiAodGhpcy5fY3VycmVudFNpemUgKyAxMyA+PSB0aGlzLl9idWZmZXIubGVuZ3RoKSB7XG4gICAgICBpZiAodGhpcy5fc2hhZGVyLmlzQm91bmQoKSkge1xuICAgICAgICB0aGlzLl9mbHVzaCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSsrXSA9IGluUG9pbnRBWzBdO1xuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSsrXSA9IGluUG9pbnRBWzFdO1xuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSsrXSA9IGluUG9pbnRBWzJdO1xuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSsrXSA9IGluUXVhdFswXTtcbiAgICB0aGlzLl9idWZmZXJbdGhpcy5fY3VycmVudFNpemUrK10gPSBpblF1YXRbMV07XG4gICAgdGhpcy5fYnVmZmVyW3RoaXMuX2N1cnJlbnRTaXplKytdID0gaW5RdWF0WzJdO1xuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSsrXSA9IGluUXVhdFszXTtcbiAgICB0aGlzLl9idWZmZXJbdGhpcy5fY3VycmVudFNpemUrK10gPSBpbkNvbG9yWzBdO1xuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSsrXSA9IGluQ29sb3JbMV07XG4gICAgdGhpcy5fYnVmZmVyW3RoaXMuX2N1cnJlbnRTaXplKytdID0gaW5Db2xvclsyXTtcbiAgICB0aGlzLl9idWZmZXJbdGhpcy5fY3VycmVudFNpemUrK10gPSBpblNjYWxlWzBdO1xuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSsrXSA9IGluU2NhbGVbMV07XG4gICAgdGhpcy5fYnVmZmVyW3RoaXMuX2N1cnJlbnRTaXplKytdID0gaW5TY2FsZVsyXTtcbiAgICAvLyB0aGlzLl9jdXJyZW50U2l6ZSArPSA2O1xuICB9XG5cbiAgZmx1c2goaW5DYW1lcmE6IElDYW1lcmEpIHtcbiAgICBpZiAoIXRoaXMuY2FuUmVuZGVyKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9zaGFkZXIuYmluZCgoYm91bmQpID0+IHtcbiAgICAgIGJvdW5kLnNldE1hdHJpeDRVbmlmb3JtKCd1X2NvbXBvc2VkTWF0cml4JywgaW5DYW1lcmEuZ2V0Q29tcG9zZWRNYXRyaXgoKSk7XG4gICAgICAvLyBjb25zdCBleWVQb3MgPSBpbkNhbWVyYS5nZXRFeWUoKTtcbiAgICAgIC8vIGJvdW5kLnNldEZsb2F0M1VuaWZvcm0oJ3VfbGlnaHRQb3MnLCBleWVQb3NbMF0sIGV5ZVBvc1sxXSwgZXllUG9zWzJdKTtcblxuICAgICAgdGhpcy5fZmx1c2goKTtcbiAgICB9KTtcbiAgfVxuXG4gIHNhZmVSZW5kZXIoaW5DYW1lcmE6IElDYW1lcmEsIGluQ2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICB0aGlzLl9zaGFkZXIuYmluZCgoYm91bmQpID0+IHtcbiAgICAgIGJvdW5kLnNldE1hdHJpeDRVbmlmb3JtKCd1X2NvbXBvc2VkTWF0cml4JywgaW5DYW1lcmEuZ2V0Q29tcG9zZWRNYXRyaXgoKSk7XG4gICAgICAvLyBjb25zdCBleWVQb3MgPSBpbkNhbWVyYS5nZXRFeWUoKTtcbiAgICAgIC8vIGJvdW5kLnNldEZsb2F0M1VuaWZvcm0oJ3VfbGlnaHRQb3MnLCBleWVQb3NbMF0sIGV5ZVBvc1sxXSwgZXllUG9zWzJdKTtcblxuICAgICAgaW5DYWxsYmFjaygpO1xuXG4gICAgICB0aGlzLl9mbHVzaCgpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBfZmx1c2goKSB7XG4gICAgdGhpcy5fZ2VvbWV0cnkudXBkYXRlQnVmZmVyKDEsIHRoaXMuX2J1ZmZlciwgdGhpcy5fY3VycmVudFNpemUsIDApO1xuICAgIHRoaXMuX2dlb21ldHJ5LnNldEluc3RhbmNlZENvdW50KHRoaXMuX2N1cnJlbnRTaXplIC8gMTMpO1xuXG4gICAgdGhpcy5fZ2VvbWV0cnkucmVuZGVyKCk7XG5cbiAgICB0aGlzLmNsZWFyKCk7XG4gIH1cblxuICBjYW5SZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRTaXplID4gMDtcbiAgfVxuXG4gIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMuX2N1cnJlbnRTaXplID0gMDtcbiAgfVxufVxuIiwKICAiaW1wb3J0ICogYXMgd2ViZ2wyIGZyb20gJy4uLy4uLy4uL3dlYmdsMic7XG5cbmV4cG9ydCBjbGFzcyBTY2VuZUNhcHR1cmVyIHtcbiAgcHJpdmF0ZSBfd2lkdGg6IG51bWJlciA9IDA7XG4gIHByaXZhdGUgX2hlaWdodDogbnVtYmVyID0gMDtcblxuICBwcml2YXRlIF9mcmFtZUJ1ZmZlcjogd2ViZ2wyLklVbmJvdW5kRnJhbWVCdWZmZXIgPSBuZXcgd2ViZ2wyLkZyYW1lQnVmZmVyKCk7XG4gIHByaXZhdGUgX3JlbmRlckJ1ZmZlcjogd2ViZ2wyLklVbmJvdW5kUmVuZGVyQnVmZmVyID1cbiAgICBuZXcgd2ViZ2wyLlJlbmRlckJ1ZmZlcigpO1xuICBwcml2YXRlIF9jb2xvclRleHR1cmVzOiB3ZWJnbDIuSVVuYm91bmRUZXh0dXJlW10gPSBbXTtcbiAgcHJpdmF0ZSBfY3VycmVudEluZGV4OiBudW1iZXIgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG4gICAgdGhpcy5fY29sb3JUZXh0dXJlcy5wdXNoKG5ldyB3ZWJnbDIuVGV4dHVyZSgpKTtcbiAgICB0aGlzLl9jb2xvclRleHR1cmVzLnB1c2gobmV3IHdlYmdsMi5UZXh0dXJlKCkpO1xuICAgIHRoaXMuX2NvbG9yVGV4dHVyZXMuZm9yRWFjaCgodGV4dHVyZSkgPT4gdGV4dHVyZS5pbml0aWFsaXplKCkpO1xuXG4gICAgdGhpcy5yZXNpemUod2lkdGgsIGhlaWdodCk7XG4gIH1cblxuICByZXNpemUod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcbiAgICB0aGlzLl93aWR0aCA9IHdpZHRoO1xuICAgIHRoaXMuX2hlaWdodCA9IGhlaWdodDtcblxuICAgIHRoaXMuX3JlbmRlckJ1ZmZlci5iaW5kKChib3VuZEJ1ZmZlcikgPT4ge1xuICAgICAgYm91bmRCdWZmZXIuc2V0U2l6ZSgnZGVwdGgzMmYnLCB0aGlzLl93aWR0aCwgdGhpcy5faGVpZ2h0KTtcbiAgICB9KTtcblxuICAgIHRoaXMuX2NvbG9yVGV4dHVyZXMuZm9yRWFjaCgodGV4dHVyZSkgPT4ge1xuICAgICAgdGV4dHVyZS5iaW5kKChib3VuZFRleHR1cmUpID0+IHtcbiAgICAgICAgYm91bmRUZXh0dXJlLmFsbG9jYXRlKHRoaXMuX3dpZHRoLCB0aGlzLl9oZWlnaHQpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9mcmFtZUJ1ZmZlci5iaW5kKChib3VuZEZyYW1lQnVmZmVyKSA9PiB7XG4gICAgICB0aGlzLl9yZW5kZXJCdWZmZXIuYmluZCgoYm91bmRCdWZmZXIpID0+IHtcbiAgICAgICAgYm91bmRGcmFtZUJ1ZmZlci5hdHRhY2hSZW5kZXJCdWZmZXIoYm91bmRCdWZmZXIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBjYXB0dXJlU2NlbmUocmVuZGVyQ2FsbGJhY2s6ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLl9mcmFtZUJ1ZmZlci5iaW5kKChib3VuZEZyYW1lQnVmZmVyKSA9PiB7XG4gICAgICB0aGlzLl9jb2xvclRleHR1cmVzW3RoaXMuX2N1cnJlbnRJbmRleF0uYmluZCgoYm91bmRUZXh0dXJlKSA9PiB7XG4gICAgICAgIGJvdW5kRnJhbWVCdWZmZXIuYXR0YWNoVGV4dHVyZShib3VuZFRleHR1cmUpO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGdsID0gd2ViZ2wyLldlYkdMQ29udGV4dC5nZXRDb250ZXh0KCk7XG4gICAgICBnbC52aWV3cG9ydCgwLCAwLCB0aGlzLl93aWR0aCwgdGhpcy5faGVpZ2h0KTtcbiAgICAgIGdsLmNsZWFyQ29sb3IoMCwgMCwgMCwgMCk7XG5cbiAgICAgIHJlbmRlckNhbGxiYWNrKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9jdXJyZW50SW5kZXggPSAodGhpcy5fY3VycmVudEluZGV4ICsgMSkgJSB0aGlzLl9jb2xvclRleHR1cmVzLmxlbmd0aDtcbiAgfVxuXG4gIGdldCBjb2xvclRleHR1cmUoKTogd2ViZ2wyLklVbmJvdW5kVGV4dHVyZSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbG9yVGV4dHVyZXNbdGhpcy5fY3VycmVudEluZGV4XTtcbiAgfVxufVxuIiwKICAiZXhwb3J0IGRlZmF1bHQgYFxuI3ZlcnNpb24gMzAwIGVzXG5cbnByZWNpc2lvbiBoaWdocCBmbG9hdDtcblxudW5pZm9ybSBtYXQ0IHVfY29tcG9zZWRNYXRyaXg7XG5cbmluIHZlYzMgIGFfdmVydGV4X3Bvc2l0aW9uO1xuaW4gdmVjMiAgYV92ZXJ0ZXhfdGV4Q29vcmQ7XG5cbm91dCB2ZWMyIHZfdGV4Q29vcmQ7XG5cbnZvaWQgbWFpbih2b2lkKVxue1xuICB2X3RleENvb3JkID0gYV92ZXJ0ZXhfdGV4Q29vcmQ7XG4gIGdsX1Bvc2l0aW9uID0gdV9jb21wb3NlZE1hdHJpeCAqIHZlYzQoYV92ZXJ0ZXhfcG9zaXRpb24sIDEuMCk7XG59XG5cbmAudHJpbSgpOyIsCiAgImV4cG9ydCBkZWZhdWx0IGBcbiN2ZXJzaW9uIDMwMCBlc1xuXG5wcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG5cbnVuaWZvcm0gc2FtcGxlcjJEIHVfdGV4dHVyZTtcblxuaW4gdmVjMiB2X3RleENvb3JkO1xuXG5vdXQgdmVjNCBvX2NvbG9yO1xuXG52b2lkIG1haW4odm9pZClcbntcbiAgb19jb2xvciA9IHRleHR1cmUodV90ZXh0dXJlLCB2X3RleENvb3JkKTtcbn1cbmAudHJpbSgpOyIsCiAgImltcG9ydCAqIGFzIHdlYmdsMiBmcm9tICcuLi8uLi8uLi93ZWJnbDInO1xuXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgdmVydGV4U2hhZGVyIGZyb20gJy4vc2hhZGVycy9odWQtdGV4dHVyZS1yZW5kZXJlci5nbHNsLnZlcnQnO1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IGZyYWdtZW50U2hhZGVyIGZyb20gJy4vc2hhZGVycy9odWQtdGV4dHVyZS1yZW5kZXJlci5nbHNsLmZyYWcnO1xuXG5pbXBvcnQgKiBhcyBnbG0gZnJvbSAnZ2wtbWF0cml4JztcblxuZXhwb3J0IGNsYXNzIFJlbmRlckh1ZFRleHR1cmUge1xuICBwcml2YXRlIF93aWR0aDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBfaGVpZ2h0OiBudW1iZXIgPSAwO1xuXG4gIHByaXZhdGUgX3NoYWRlcjogd2ViZ2wyLlNoYWRlclByb2dyYW07XG4gIHByaXZhdGUgX2dlb21ldHJ5OiB3ZWJnbDIuR2VvbWV0cnlXcmFwcGVyLkdlb21ldHJ5O1xuXG4gIGNvbnN0cnVjdG9yKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG4gICAgdGhpcy5fc2hhZGVyID0gbmV3IHdlYmdsMi5TaGFkZXJQcm9ncmFtKCdSZW5kZXJIdWRUZXh0dXJlJywge1xuICAgICAgdmVydGV4U3JjOiB2ZXJ0ZXhTaGFkZXIsXG4gICAgICBmcmFnbWVudFNyYzogZnJhZ21lbnRTaGFkZXIsXG4gICAgICBhdHRyaWJ1dGVzOiBbJ2FfdmVydGV4X3Bvc2l0aW9uJywgJ2FfdmVydGV4X3RleENvb3JkJ10sXG4gICAgICB1bmlmb3JtczogWyd1X2NvbXBvc2VkTWF0cml4JywgJ3VfdGV4dHVyZSddXG4gICAgfSk7XG5cbiAgICBjb25zdCBnZW9CdWlsZGVyID0gbmV3IHdlYmdsMi5HZW9tZXRyeVdyYXBwZXIuR2VvbWV0cnlCdWlsZGVyKCk7XG4gICAgZ2VvQnVpbGRlclxuICAgICAgLnJlc2V0KClcbiAgICAgIC5zZXRQcmltaXRpdmVUeXBlKCd0cmlhbmdsZVN0cmlwJylcbiAgICAgIC5hZGRWYm8oKVxuICAgICAgLmFkZFZib0F0dHJpYnV0ZSgnYV92ZXJ0ZXhfcG9zaXRpb24nLCAndmVjM2YnKVxuICAgICAgLmFkZFZib0F0dHJpYnV0ZSgnYV92ZXJ0ZXhfdGV4Q29vcmQnLCAndmVjMmYnKTtcblxuICAgIHRoaXMuX2dlb21ldHJ5ID0gbmV3IHdlYmdsMi5HZW9tZXRyeVdyYXBwZXIuR2VvbWV0cnkoXG4gICAgICB0aGlzLl9zaGFkZXIsXG4gICAgICBnZW9CdWlsZGVyLmdldERlZigpXG4gICAgKTtcblxuICAgIHRoaXMucmVzaXplKHdpZHRoLCBoZWlnaHQpO1xuICB9XG5cbiAgcmVzaXplKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG4gICAgdGhpcy5fd2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICBjb25zdCB0bXBWZXJ0aWNlczogeyBwb3M6IGdsbS5SZWFkb25seVZlYzM7IHRleDogZ2xtLlJlYWRvbmx5VmVjMiB9W10gPSBbXG4gICAgICB7IHBvczogW3RoaXMuX3dpZHRoICogMCwgdGhpcy5faGVpZ2h0ICogMCwgLTFdLCB0ZXg6IFswLCAwXSB9LFxuICAgICAgeyBwb3M6IFt0aGlzLl93aWR0aCAqIDEsIHRoaXMuX2hlaWdodCAqIDAsIC0xXSwgdGV4OiBbMSwgMF0gfSxcbiAgICAgIHsgcG9zOiBbdGhpcy5fd2lkdGggKiAwLCB0aGlzLl9oZWlnaHQgKiAxLCAtMV0sIHRleDogWzAsIDFdIH0sXG4gICAgICB7IHBvczogW3RoaXMuX3dpZHRoICogMSwgdGhpcy5faGVpZ2h0ICogMSwgLTFdLCB0ZXg6IFsxLCAxXSB9XG4gICAgXTtcblxuICAgIGNvbnN0IHZlcnRBcnIgPSB0bXBWZXJ0aWNlc1xuICAgICAgLm1hcCgodmVydGV4KSA9PiB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgdmVydGV4LnBvc1swXSxcbiAgICAgICAgICB2ZXJ0ZXgucG9zWzFdLFxuICAgICAgICAgIHZlcnRleC5wb3NbMl0sXG4gICAgICAgICAgdmVydGV4LnRleFswXSxcbiAgICAgICAgICB2ZXJ0ZXgudGV4WzFdXG4gICAgICAgIF07XG4gICAgICB9KVxuICAgICAgLmZsYXQoKTtcblxuICAgIHRoaXMuX2dlb21ldHJ5LmFsbG9jYXRlQnVmZmVyKDAsIHZlcnRBcnIsIHZlcnRBcnIubGVuZ3RoKTtcbiAgICB0aGlzLl9nZW9tZXRyeS5zZXRQcmltaXRpdmVDb3VudCh2ZXJ0QXJyLmxlbmd0aCAvIDUpO1xuICB9XG5cbiAgZmx1c2goY29tcG9zZWRNYXRyaXg6IGdsbS5SZWFkb25seU1hdDQsIGN1YmVNYXA6IHdlYmdsMi5JVW5ib3VuZFRleHR1cmUpIHtcbiAgICB0aGlzLl9zaGFkZXIuYmluZCgoYm91bmRTaGFkZXIpID0+IHtcbiAgICAgIGJvdW5kU2hhZGVyLnNldE1hdHJpeDRVbmlmb3JtKCd1X2NvbXBvc2VkTWF0cml4JywgY29tcG9zZWRNYXRyaXgpO1xuICAgICAgYm91bmRTaGFkZXIuc2V0VGV4dHVyZVVuaWZvcm0oJ3VfdGV4dHVyZScsIGN1YmVNYXAsIDApO1xuXG4gICAgICB0aGlzLl9nZW9tZXRyeS5yZW5kZXIoKTtcbiAgICB9KTtcbiAgfVxufVxuIiwKICAiaW1wb3J0IHsgU2NlbmVDYXB0dXJlciB9IGZyb20gJy4vaW50ZXJuYWxzL1NjZW5lQ2FwdHVyZXInO1xuaW1wb3J0IHsgUmVuZGVySHVkVGV4dHVyZSB9IGZyb20gJy4vaW50ZXJuYWxzL1JlbmRlckh1ZFRleHR1cmUnO1xuXG5pbXBvcnQgKiBhcyBnbG0gZnJvbSAnZ2wtbWF0cml4JztcblxuZXhwb3J0IGNsYXNzIE11bHRpQnVmZmVyc1JlbmRlcmluZyB7XG4gIHByaXZhdGUgX3NjZW5lQ2FwdHVyZXI6IFNjZW5lQ2FwdHVyZXI7XG4gIHByaXZhdGUgX3JlbmRlckh1ZFRleHR1cmU6IFJlbmRlckh1ZFRleHR1cmU7XG5cbiAgY29uc3RydWN0b3Iod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcbiAgICB0aGlzLl9zY2VuZUNhcHR1cmVyID0gbmV3IFNjZW5lQ2FwdHVyZXIod2lkdGgsIGhlaWdodCk7XG4gICAgdGhpcy5fcmVuZGVySHVkVGV4dHVyZSA9IG5ldyBSZW5kZXJIdWRUZXh0dXJlKHdpZHRoLCBoZWlnaHQpO1xuICB9XG5cbiAgcmVzaXplKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG4gICAgdGhpcy5fc2NlbmVDYXB0dXJlci5yZXNpemUod2lkdGgsIGhlaWdodCk7XG4gICAgdGhpcy5fcmVuZGVySHVkVGV4dHVyZS5yZXNpemUod2lkdGgsIGhlaWdodCk7XG4gIH1cblxuICBjYXB0dXJlU2NlbmUocmVuZGVyQ2FsbGJhY2s6ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLl9zY2VuZUNhcHR1cmVyLmNhcHR1cmVTY2VuZShyZW5kZXJDYWxsYmFjayk7XG4gIH1cblxuICByZW5kZXJIdWQoY29tcG9zZWRNYXQ0OiBnbG0uUmVhZG9ubHlNYXQ0KTogdm9pZCB7XG4gICAgdGhpcy5fcmVuZGVySHVkVGV4dHVyZS5mbHVzaChcbiAgICAgIGNvbXBvc2VkTWF0NCxcbiAgICAgIHRoaXMuX3NjZW5lQ2FwdHVyZXIuY29sb3JUZXh0dXJlXG4gICAgKTtcbiAgfVxufVxuIiwKICAiZXhwb3J0IGRlZmF1bHQgYFxuI3ZlcnNpb24gMzAwIGVzXG5cbnByZWNpc2lvbiBoaWdocCBmbG9hdDtcblxudW5pZm9ybSBtYXQ0IHVfY29tcG9zZWRNYXRyaXg7XG5cbmluIHZlYzMgYV92ZXJ0ZXhfcG9zaXRpb247XG5pbiB2ZWM0IGFfdmVydGV4X2NvbG9yO1xuXG5mbGF0IG91dCB2ZWM0IHZfY29sb3I7XG5cbnZvaWQgbWFpbih2b2lkKVxue1xuICBnbF9Qb3NpdGlvbiA9IHVfY29tcG9zZWRNYXRyaXggKiB2ZWM0KGFfdmVydGV4X3Bvc2l0aW9uLCAxLjApO1xuXG4gIHZfY29sb3IgPSBhX3ZlcnRleF9jb2xvcjtcbn1cbmAudHJpbSgpOyIsCiAgImV4cG9ydCBkZWZhdWx0IGBcbiN2ZXJzaW9uIDMwMCBlc1xuXG5wcmVjaXNpb24gbG93cCBmbG9hdDtcblxuZmxhdCBpbiB2ZWM0IHZfY29sb3I7XG5cbm91dCB2ZWM0IG9fY29sb3I7XG5cbnZvaWQgbWFpbih2b2lkKVxue1xuICBvX2NvbG9yID0gdl9jb2xvcjtcbn1cbmAudHJpbSgpOyIsCiAgImltcG9ydCAqIGFzIHdlYmdsMiBmcm9tICcuLi8uLi8uLi8uLi9ncmFwaGljcy93ZWJnbDInO1xuXG5pbXBvcnQgKiBhcyBnbG0gZnJvbSAnZ2wtbWF0cml4JztcblxuY29uc3Qga19idWZmZXJTaXplID0gMTQgKiAxMDI0O1xuXG5leHBvcnQgY2xhc3MgV2lyZUZyYW1lc1N0YWNrUmVuZGVyZXIge1xuICBwcml2YXRlIF9zaGFkZXI6IHdlYmdsMi5JVW5ib3VuZFNoYWRlcjtcbiAgcHJpdmF0ZSBfZ2VvbWV0cnk6IHdlYmdsMi5HZW9tZXRyeVdyYXBwZXIuR2VvbWV0cnk7XG5cbiAgcHJpdmF0ZSBfYnVmZmVyID0gbmV3IEZsb2F0MzJBcnJheShrX2J1ZmZlclNpemUpO1xuICBwcml2YXRlIF9jdXJyZW50U2l6ZTogbnVtYmVyID0gMDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBpblNoYWRlcjogd2ViZ2wyLklVbmJvdW5kU2hhZGVyLFxuICAgIGluR2VvbWV0cnlEZWY6IHdlYmdsMi5HZW9tZXRyeVdyYXBwZXIuR2VvbWV0cnlEZWZpbml0aW9uXG4gICkge1xuICAgIHRoaXMuX3NoYWRlciA9IGluU2hhZGVyO1xuICAgIGNvbnN0IGdlb21ldHJ5RGVmOiB3ZWJnbDIuR2VvbWV0cnlXcmFwcGVyLkdlb21ldHJ5RGVmaW5pdGlvbiA9IHtcbiAgICAgIC4uLmluR2VvbWV0cnlEZWYsXG4gICAgICBwcmltaXRpdmVUeXBlOiB3ZWJnbDIuR2VvbWV0cnlXcmFwcGVyLlByaW1pdGl2ZVR5cGUubGluZXNcbiAgICB9O1xuXG4gICAgdGhpcy5fZ2VvbWV0cnkgPSBuZXcgd2ViZ2wyLkdlb21ldHJ5V3JhcHBlci5HZW9tZXRyeShpblNoYWRlciwgZ2VvbWV0cnlEZWYpO1xuICB9XG5cbiAgcHVzaExpbmUoXG4gICAgaW5Qb2ludEE6IGdsbS5SZWFkb25seVZlYzMsXG4gICAgaW5Qb2ludEI6IGdsbS5SZWFkb25seVZlYzMsXG4gICAgaW5Db2xvcjogZ2xtLlJlYWRvbmx5VmVjMyB8IGdsbS5SZWFkb25seVZlYzRcbiAgKSB7XG4gICAgaWYgKHRoaXMuX2N1cnJlbnRTaXplICsgNyAqIDIgPj0gdGhpcy5fYnVmZmVyLmxlbmd0aCkge1xuICAgICAgaWYgKHRoaXMuX3NoYWRlci5pc0JvdW5kKCkpIHtcbiAgICAgICAgdGhpcy5mbHVzaCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGFscGhhVmFsdWUgPSBpbkNvbG9yWzNdID8/IDE7XG5cbiAgICB0aGlzLl9idWZmZXJbdGhpcy5fY3VycmVudFNpemUgKyAwXSA9IGluUG9pbnRBWzBdO1xuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSArIDFdID0gaW5Qb2ludEFbMV07XG4gICAgdGhpcy5fYnVmZmVyW3RoaXMuX2N1cnJlbnRTaXplICsgMl0gPSBpblBvaW50QVsyXTtcbiAgICB0aGlzLl9idWZmZXJbdGhpcy5fY3VycmVudFNpemUgKyAzXSA9IGluQ29sb3JbMF07XG4gICAgdGhpcy5fYnVmZmVyW3RoaXMuX2N1cnJlbnRTaXplICsgNF0gPSBpbkNvbG9yWzFdO1xuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSArIDVdID0gaW5Db2xvclsyXTtcbiAgICB0aGlzLl9idWZmZXJbdGhpcy5fY3VycmVudFNpemUgKyA2XSA9IGFscGhhVmFsdWU7XG4gICAgdGhpcy5fY3VycmVudFNpemUgKz0gNztcblxuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSArIDBdID0gaW5Qb2ludEJbMF07XG4gICAgdGhpcy5fYnVmZmVyW3RoaXMuX2N1cnJlbnRTaXplICsgMV0gPSBpblBvaW50QlsxXTtcbiAgICB0aGlzLl9idWZmZXJbdGhpcy5fY3VycmVudFNpemUgKyAyXSA9IGluUG9pbnRCWzJdO1xuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSArIDNdID0gaW5Db2xvclswXTtcbiAgICB0aGlzLl9idWZmZXJbdGhpcy5fY3VycmVudFNpemUgKyA0XSA9IGluQ29sb3JbMV07XG4gICAgdGhpcy5fYnVmZmVyW3RoaXMuX2N1cnJlbnRTaXplICsgNV0gPSBpbkNvbG9yWzJdO1xuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSArIDZdID0gYWxwaGFWYWx1ZTtcbiAgICB0aGlzLl9jdXJyZW50U2l6ZSArPSA3O1xuICB9XG5cbiAgY2FuUmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLl9jdXJyZW50U2l6ZSA+IDA7XG4gIH1cblxuICBmbHVzaCgpIHtcbiAgICBpZiAoIXRoaXMuY2FuUmVuZGVyKCkpIHJldHVybjtcblxuICAgIHRoaXMuX2dlb21ldHJ5LmFsbG9jYXRlQnVmZmVyKDAsIHRoaXMuX2J1ZmZlciwgdGhpcy5fY3VycmVudFNpemUpO1xuICAgIHRoaXMuX2dlb21ldHJ5LnNldFByaW1pdGl2ZUNvdW50KHRoaXMuX2N1cnJlbnRTaXplIC8gNyk7XG5cbiAgICB0aGlzLl9nZW9tZXRyeS5yZW5kZXIoKTtcblxuICAgIHRoaXMuY2xlYXIoKTtcbiAgfVxuXG4gIGNsZWFyKCk6IHZvaWQge1xuICAgIC8vIHJlc2V0IHZlcnRpY2VzXG4gICAgdGhpcy5fY3VycmVudFNpemUgPSAwO1xuICB9XG59XG4iLAogICJpbXBvcnQgKiBhcyB3ZWJnbDIgZnJvbSAnLi4vLi4vLi4vLi4vZ3JhcGhpY3Mvd2ViZ2wyJztcblxuaW1wb3J0ICogYXMgZ2xtIGZyb20gJ2dsLW1hdHJpeCc7XG5cbmNvbnN0IGtfYnVmZmVyU2l6ZSA9IDcgKiAxMDI0O1xuXG5leHBvcnQgY2xhc3MgVHJpYW5nbGVzU3RhY2tSZW5kZXJlciB7XG4gIHByaXZhdGUgX3NoYWRlcjogd2ViZ2wyLklVbmJvdW5kU2hhZGVyO1xuICBwcml2YXRlIF9nZW9tZXRyeTogd2ViZ2wyLkdlb21ldHJ5V3JhcHBlci5HZW9tZXRyeTtcblxuICBwcml2YXRlIF9idWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KGtfYnVmZmVyU2l6ZSk7XG4gIHByaXZhdGUgX2N1cnJlbnRTaXplOiBudW1iZXIgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGluU2hhZGVyOiB3ZWJnbDIuSVVuYm91bmRTaGFkZXIsXG4gICAgaW5HZW9tZXRyeURlZjogd2ViZ2wyLkdlb21ldHJ5V3JhcHBlci5HZW9tZXRyeURlZmluaXRpb25cbiAgKSB7XG4gICAgdGhpcy5fc2hhZGVyID0gaW5TaGFkZXI7XG4gICAgY29uc3QgZ2VvbWV0cnlEZWY6IHdlYmdsMi5HZW9tZXRyeVdyYXBwZXIuR2VvbWV0cnlEZWZpbml0aW9uID0ge1xuICAgICAgLi4uaW5HZW9tZXRyeURlZixcbiAgICAgIHByaW1pdGl2ZVR5cGU6IHdlYmdsMi5HZW9tZXRyeVdyYXBwZXIuUHJpbWl0aXZlVHlwZS50cmlhbmdsZXNcbiAgICB9O1xuXG4gICAgdGhpcy5fZ2VvbWV0cnkgPSBuZXcgd2ViZ2wyLkdlb21ldHJ5V3JhcHBlci5HZW9tZXRyeShpblNoYWRlciwgZ2VvbWV0cnlEZWYpO1xuICB9XG5cbiAgcHVzaFRyaWFuZ2xlKFxuICAgIGluUG9pbnRBOiBnbG0uUmVhZG9ubHlWZWMzLFxuICAgIGluUG9pbnRCOiBnbG0uUmVhZG9ubHlWZWMzLFxuICAgIGluUG9pbnRDOiBnbG0uUmVhZG9ubHlWZWMzLFxuICAgIGluQ29sb3I6IGdsbS5SZWFkb25seVZlYzMgfCBnbG0uUmVhZG9ubHlWZWM0XG4gICkge1xuICAgIGlmICh0aGlzLl9jdXJyZW50U2l6ZSArIDcgKiA2ID49IHRoaXMuX2J1ZmZlci5sZW5ndGgpIHtcbiAgICAgIGlmICh0aGlzLl9zaGFkZXIuaXNCb3VuZCgpKSB7XG4gICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBhbHBoYVZhbHVlID0gaW5Db2xvclszXSA/PyAxO1xuXG4gICAgLy8gMFxuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSArIDBdID0gaW5Qb2ludEFbMF07XG4gICAgdGhpcy5fYnVmZmVyW3RoaXMuX2N1cnJlbnRTaXplICsgMV0gPSBpblBvaW50QVsxXTtcbiAgICB0aGlzLl9idWZmZXJbdGhpcy5fY3VycmVudFNpemUgKyAyXSA9IGluUG9pbnRBWzJdO1xuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSArIDNdID0gaW5Db2xvclswXTtcbiAgICB0aGlzLl9idWZmZXJbdGhpcy5fY3VycmVudFNpemUgKyA0XSA9IGluQ29sb3JbMV07XG4gICAgdGhpcy5fYnVmZmVyW3RoaXMuX2N1cnJlbnRTaXplICsgNV0gPSBpbkNvbG9yWzJdO1xuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSArIDZdID0gYWxwaGFWYWx1ZTtcbiAgICB0aGlzLl9jdXJyZW50U2l6ZSArPSA3O1xuXG4gICAgLy8gMlxuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSArIDBdID0gaW5Qb2ludEJbMF07XG4gICAgdGhpcy5fYnVmZmVyW3RoaXMuX2N1cnJlbnRTaXplICsgMV0gPSBpblBvaW50QlsxXTtcbiAgICB0aGlzLl9idWZmZXJbdGhpcy5fY3VycmVudFNpemUgKyAyXSA9IGluUG9pbnRCWzJdO1xuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSArIDNdID0gaW5Db2xvclswXTtcbiAgICB0aGlzLl9idWZmZXJbdGhpcy5fY3VycmVudFNpemUgKyA0XSA9IGluQ29sb3JbMV07XG4gICAgdGhpcy5fYnVmZmVyW3RoaXMuX2N1cnJlbnRTaXplICsgNV0gPSBpbkNvbG9yWzJdO1xuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSArIDZdID0gYWxwaGFWYWx1ZTtcbiAgICB0aGlzLl9jdXJyZW50U2l6ZSArPSA3O1xuXG4gICAgLy8gM1xuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSArIDBdID0gaW5Qb2ludENbMF07XG4gICAgdGhpcy5fYnVmZmVyW3RoaXMuX2N1cnJlbnRTaXplICsgMV0gPSBpblBvaW50Q1sxXTtcbiAgICB0aGlzLl9idWZmZXJbdGhpcy5fY3VycmVudFNpemUgKyAyXSA9IGluUG9pbnRDWzJdO1xuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSArIDNdID0gaW5Db2xvclswXTtcbiAgICB0aGlzLl9idWZmZXJbdGhpcy5fY3VycmVudFNpemUgKyA0XSA9IGluQ29sb3JbMV07XG4gICAgdGhpcy5fYnVmZmVyW3RoaXMuX2N1cnJlbnRTaXplICsgNV0gPSBpbkNvbG9yWzJdO1xuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSArIDZdID0gYWxwaGFWYWx1ZTtcbiAgICB0aGlzLl9jdXJyZW50U2l6ZSArPSA3O1xuICB9XG5cbiAgcHVzaExpbmUoXG4gICAgaW5Qb2ludEE6IGdsbS5SZWFkb25seVZlYzMsXG4gICAgaW5Qb2ludEI6IGdsbS5SZWFkb25seVZlYzMsXG4gICAgdGhpY2tuZXNzOiBudW1iZXIsXG4gICAgaW5Db2xvcjogZ2xtLlJlYWRvbmx5VmVjMyB8IGdsbS5SZWFkb25seVZlYzRcbiAgKSB7XG4gICAgaWYgKHRoaXMuX2N1cnJlbnRTaXplICsgNyAqIDYgPj0gdGhpcy5fYnVmZmVyLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGRpZmZYID0gaW5Qb2ludEJbMF0gLSBpblBvaW50QVswXTtcbiAgICBjb25zdCBkaWZmWSA9IGluUG9pbnRCWzFdIC0gaW5Qb2ludEFbMV07XG4gICAgY29uc3QgYW5nbGUgPSBNYXRoLmF0YW4yKGRpZmZZLCBkaWZmWCkgKyBNYXRoLlBJICogMC41O1xuXG4gICAgY29uc3Qgc3RlcFggPSBNYXRoLmNvcyhhbmdsZSkgKiB0aGlja25lc3MgKiAwLjU7XG4gICAgY29uc3Qgc3RlcFkgPSBNYXRoLnNpbihhbmdsZSkgKiB0aGlja25lc3MgKiAwLjU7XG5cbiAgICB0aGlzLnB1c2hUcmlhbmdsZShcbiAgICAgIFtpblBvaW50QVswXSAtIHN0ZXBYLCBpblBvaW50QVsxXSAtIHN0ZXBZLCBpblBvaW50QVsyXV0sXG4gICAgICBbaW5Qb2ludEJbMF0gLSBzdGVwWCwgaW5Qb2ludEJbMV0gLSBzdGVwWSwgaW5Qb2ludEJbMl1dLFxuICAgICAgW2luUG9pbnRCWzBdICsgc3RlcFgsIGluUG9pbnRCWzFdICsgc3RlcFksIGluUG9pbnRCWzJdXSxcbiAgICAgIGluQ29sb3JcbiAgICApO1xuICAgIHRoaXMucHVzaFRyaWFuZ2xlKFxuICAgICAgW2luUG9pbnRBWzBdIC0gc3RlcFgsIGluUG9pbnRBWzFdIC0gc3RlcFksIGluUG9pbnRBWzJdXSxcbiAgICAgIFtpblBvaW50QlswXSArIHN0ZXBYLCBpblBvaW50QlsxXSArIHN0ZXBZLCBpblBvaW50QlsyXV0sXG4gICAgICBbaW5Qb2ludEFbMF0gKyBzdGVwWCwgaW5Qb2ludEFbMV0gKyBzdGVwWSwgaW5Qb2ludEFbMl1dLFxuICAgICAgaW5Db2xvclxuICAgICk7XG4gIH1cblxuICBwdXNoUm90YXRlZExpbmUoXG4gICAgY2VudGVyOiBnbG0uUmVhZG9ubHlWZWMzLFxuICAgIGFuZ2xlOiBudW1iZXIsXG4gICAgbGVuZ3RoOiBudW1iZXIsXG4gICAgdGhpY2tuZXNzOiBudW1iZXIsXG4gICAgY29sb3I6IGdsbS5SZWFkb25seVZlYzNcbiAgKSB7XG4gICAgdGhpcy5wdXNoTGluZShcbiAgICAgIFtcbiAgICAgICAgY2VudGVyWzBdIC0gbGVuZ3RoICogTWF0aC5jb3MoYW5nbGUpLFxuICAgICAgICBjZW50ZXJbMV0gLSBsZW5ndGggKiBNYXRoLnNpbihhbmdsZSksXG4gICAgICAgIGNlbnRlclsyXVxuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgY2VudGVyWzBdICsgbGVuZ3RoICogTWF0aC5jb3MoYW5nbGUpLFxuICAgICAgICBjZW50ZXJbMV0gKyBsZW5ndGggKiBNYXRoLnNpbihhbmdsZSksXG4gICAgICAgIGNlbnRlclsyXVxuICAgICAgXSxcbiAgICAgIHRoaWNrbmVzcyxcbiAgICAgIGNvbG9yXG4gICAgKTtcbiAgfVxuXG4gIHB1c2hPcmlnaW5Cb3VuZFJlY3RhbmdsZShcbiAgICBpbk9yaWdpbjogZ2xtLlJlYWRvbmx5VmVjMyxcbiAgICBpblNpemU6IGdsbS5SZWFkb25seVZlYzIsXG4gICAgaW5Db2xvcjogZ2xtLlJlYWRvbmx5VmVjMyB8IGdsbS5SZWFkb25seVZlYzRcbiAgKSB7XG4gICAgaWYgKHRoaXMuX2N1cnJlbnRTaXplICsgNyAqIDYgPj0gdGhpcy5fYnVmZmVyLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG1heENvb3JkOiBnbG0uUmVhZG9ubHlWZWMyID0gW1xuICAgICAgaW5PcmlnaW5bMF0gKyBpblNpemVbMF0sXG4gICAgICBpbk9yaWdpblsxXSArIGluU2l6ZVsxXVxuICAgIF07XG5cbiAgICB0aGlzLnB1c2hUcmlhbmdsZShcbiAgICAgIFtpbk9yaWdpblswXSwgaW5PcmlnaW5bMV0sIGluT3JpZ2luWzJdXSxcbiAgICAgIFttYXhDb29yZFswXSwgbWF4Q29vcmRbMV0sIGluT3JpZ2luWzJdXSxcbiAgICAgIFtpbk9yaWdpblswXSwgbWF4Q29vcmRbMV0sIGluT3JpZ2luWzJdXSxcbiAgICAgIGluQ29sb3JcbiAgICApO1xuXG4gICAgdGhpcy5wdXNoVHJpYW5nbGUoXG4gICAgICBbaW5PcmlnaW5bMF0sIGluT3JpZ2luWzFdLCBpbk9yaWdpblsyXV0sXG4gICAgICBbbWF4Q29vcmRbMF0sIGluT3JpZ2luWzFdLCBpbk9yaWdpblsyXV0sXG4gICAgICBbbWF4Q29vcmRbMF0sIG1heENvb3JkWzFdLCBpbk9yaWdpblsyXV0sXG4gICAgICBpbkNvbG9yXG4gICAgKTtcbiAgfVxuXG4gIHB1c2hDZW50ZXJlZFJlY3RhbmdsZShcbiAgICBpbkNlbnRlcjogZ2xtLlJlYWRvbmx5VmVjMyxcbiAgICBpblNpemU6IGdsbS5SZWFkb25seVZlYzIsXG4gICAgaW5Db2xvcjogZ2xtLlJlYWRvbmx5VmVjMyB8IGdsbS5SZWFkb25seVZlYzRcbiAgKSB7XG4gICAgY29uc3Qgb3JpZ2luOiBnbG0uUmVhZG9ubHlWZWMzID0gW1xuICAgICAgaW5DZW50ZXJbMF0gLSBpblNpemVbMF0gKiAwLjUsXG4gICAgICBpbkNlbnRlclsxXSAtIGluU2l6ZVsxXSAqIDAuNSxcbiAgICAgIGluQ2VudGVyWzJdXG4gICAgXTtcblxuICAgIHRoaXMucHVzaE9yaWdpbkJvdW5kUmVjdGFuZ2xlKG9yaWdpbiwgaW5TaXplLCBpbkNvbG9yKTtcbiAgfVxuXG4gIGNhblJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5fY3VycmVudFNpemUgPiAwO1xuICB9XG5cbiAgZmx1c2goKSB7XG4gICAgaWYgKCF0aGlzLmNhblJlbmRlcigpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fZ2VvbWV0cnkuYWxsb2NhdGVCdWZmZXIoMCwgdGhpcy5fYnVmZmVyLCB0aGlzLl9jdXJyZW50U2l6ZSk7XG4gICAgdGhpcy5fZ2VvbWV0cnkuc2V0UHJpbWl0aXZlQ291bnQodGhpcy5fY3VycmVudFNpemUgLyA3KTtcblxuICAgIHRoaXMuX2dlb21ldHJ5LnJlbmRlcigpO1xuXG4gICAgdGhpcy5jbGVhcigpO1xuICB9XG5cbiAgY2xlYXIoKTogdm9pZCB7XG4gICAgLy8gcmVzZXQgdmVydGljZXNcbiAgICB0aGlzLl9jdXJyZW50U2l6ZSA9IDA7XG4gIH1cbn1cbiIsCiAgImltcG9ydCAqIGFzIHdlYmdsMiBmcm9tICcuLi8uLi8uLi9ncmFwaGljcy93ZWJnbDInO1xuXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgc3RhY2tSZW5kZXJlclZlcnRleCBmcm9tICcuL3NoYWRlcnMvc3RhY2stcmVuZGVyZXIuZ2xzbC52ZXJ0Jztcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBzdGFja1JlbmRlcmVyRnJhZ21lbnQgZnJvbSAnLi9zaGFkZXJzL3N0YWNrLXJlbmRlcmVyLmdsc2wuZnJhZyc7XG5cbmltcG9ydCB7IFdpcmVGcmFtZXNTdGFja1JlbmRlcmVyIH0gZnJvbSAnLi9pbnRlcm5hbHMvV2lyZUZyYW1lc1N0YWNrUmVuZGVyZXInO1xuaW1wb3J0IHsgVHJpYW5nbGVzU3RhY2tSZW5kZXJlciB9IGZyb20gJy4vaW50ZXJuYWxzL1RyaWFuZ2xlc1N0YWNrUmVuZGVyZXInO1xuXG5pbXBvcnQgKiBhcyBnbG0gZnJvbSAnZ2wtbWF0cml4JztcblxuZXhwb3J0IGludGVyZmFjZSBJU3RhY2tSZW5kZXJlcnMge1xuICBwdXNoVHJpYW5nbGUoXG4gICAgaW5Qb3NBOiBnbG0uUmVhZG9ubHlWZWMzLFxuICAgIGluUG9zQjogZ2xtLlJlYWRvbmx5VmVjMyxcbiAgICBpblBvc0M6IGdsbS5SZWFkb25seVZlYzMsXG4gICAgaW5Db2xvcjogZ2xtLlJlYWRvbmx5VmVjMyB8IGdsbS5SZWFkb25seVZlYzRcbiAgKTogdm9pZDtcblxuICBwdXNoUXVhZChcbiAgICBpblBvczogZ2xtLlJlYWRvbmx5VmVjMyxcbiAgICBpblNpemU6IGdsbS5SZWFkb25seVZlYzIsXG4gICAgaW5Db2xvcjogZ2xtLlJlYWRvbmx5VmVjMyB8IGdsbS5SZWFkb25seVZlYzRcbiAgKTogdm9pZDtcblxuICBwdXNoTGluZShcbiAgICBpblBvaW50QTogZ2xtLlJlYWRvbmx5VmVjMyxcbiAgICBpblBvaW50QjogZ2xtLlJlYWRvbmx5VmVjMyxcbiAgICBpbkNvbG9yOiBnbG0uUmVhZG9ubHlWZWMzXG4gICk6IHZvaWQ7XG5cbiAgcHVzaENyb3NzKFxuICAgIGluQ2VudGVyOiBnbG0uUmVhZG9ubHlWZWMzLFxuICAgIGluU2l6ZTogbnVtYmVyLFxuICAgIGluQ29sb3I6IGdsbS5SZWFkb25seVZlYzNcbiAgKTogdm9pZDtcblxuICBwdXNoVGhpY2tMaW5lKFxuICAgIGluUG9pbnRBOiBnbG0uUmVhZG9ubHlWZWMzLFxuICAgIGluUG9pbnRCOiBnbG0uUmVhZG9ubHlWZWMzLFxuICAgIHRoaWNrbmVzczogbnVtYmVyLFxuICAgIGluQ29sb3I6IGdsbS5SZWFkb25seVZlYzNcbiAgKTogdm9pZDtcblxuICBwdXNoUm90YXRlZExpbmUoXG4gICAgY2VudGVyOiBnbG0uUmVhZG9ubHlWZWMzLFxuICAgIGFuZ2xlOiBudW1iZXIsXG4gICAgbGVuZ3RoOiBudW1iZXIsXG4gICAgdGhpY2tuZXNzOiBudW1iZXIsXG4gICAgY29sb3I6IGdsbS5SZWFkb25seVZlYzNcbiAgKTogdm9pZDtcblxuICBwdXNoT3JpZ2luQm91bmRSZWN0YW5nbGUoXG4gICAgaW5PcmlnaW46IGdsbS5SZWFkb25seVZlYzMsXG4gICAgaW5TaXplOiBnbG0uUmVhZG9ubHlWZWMyLFxuICAgIGluQ29sb3I6IGdsbS5SZWFkb25seVZlYzMgfCBnbG0uUmVhZG9ubHlWZWM0XG4gICk6IHZvaWQ7XG5cbiAgcHVzaENlbnRlcmVkUmVjdGFuZ2xlKFxuICAgIGluQ2VudGVyOiBnbG0uUmVhZG9ubHlWZWMzLFxuICAgIGluU2l6ZTogZ2xtLlJlYWRvbmx5VmVjMixcbiAgICBpbkNvbG9yOiBnbG0uUmVhZG9ubHlWZWMzIHwgZ2xtLlJlYWRvbmx5VmVjNFxuICApOiB2b2lkO1xuXG4gIHNhZmVSZW5kZXIoaW5Db21wb3NlZE1hdHJpeDogZ2xtLlJlYWRvbmx5TWF0NCwgaW5DYWxsYmFjazogKCkgPT4gdm9pZCk6IHZvaWQ7XG4gIGZsdXNoKGNvbXBvc2VkTWF0cml4OiBnbG0uUmVhZG9ubHlNYXQ0KTogdm9pZDtcbiAgY2xlYXIoKTogdm9pZDtcbn1cblxuZXhwb3J0IGNsYXNzIFN0YWNrUmVuZGVyZXJzIGltcGxlbWVudHMgSVN0YWNrUmVuZGVyZXJzIHtcbiAgcHJpdmF0ZSBfc2hhZGVyOiB3ZWJnbDIuSVVuYm91bmRTaGFkZXI7XG5cbiAgcHJpdmF0ZSBfd2lyZUZyYW1lc1N0YWNrUmVuZGVyZXI6IFdpcmVGcmFtZXNTdGFja1JlbmRlcmVyO1xuICBwcml2YXRlIF90cmlhbmdsZXNTdGFja1JlbmRlcmVyOiBUcmlhbmdsZXNTdGFja1JlbmRlcmVyO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3NoYWRlciA9IG5ldyB3ZWJnbDIuU2hhZGVyUHJvZ3JhbSgnU3RhY2tSZW5kZXJlcnMnLCB7XG4gICAgICB2ZXJ0ZXhTcmM6IHN0YWNrUmVuZGVyZXJWZXJ0ZXgsXG4gICAgICBmcmFnbWVudFNyYzogc3RhY2tSZW5kZXJlckZyYWdtZW50LFxuICAgICAgYXR0cmlidXRlczogWydhX3ZlcnRleF9wb3NpdGlvbicsICdhX3ZlcnRleF9jb2xvciddLFxuICAgICAgdW5pZm9ybXM6IFsndV9jb21wb3NlZE1hdHJpeCddXG4gICAgfSk7XG5cbiAgICBjb25zdCBnZW9CdWlsZGVyID0gbmV3IHdlYmdsMi5HZW9tZXRyeVdyYXBwZXIuR2VvbWV0cnlCdWlsZGVyKCk7XG4gICAgZ2VvQnVpbGRlclxuICAgICAgLnJlc2V0KClcbiAgICAgIC5zZXRQcmltaXRpdmVUeXBlKCdsaW5lcycpXG4gICAgICAuYWRkVmJvKClcbiAgICAgIC5zZXRWYm9Bc0R5bmFtaWMoKVxuICAgICAgLmFkZFZib0F0dHJpYnV0ZSgnYV92ZXJ0ZXhfcG9zaXRpb24nLCAndmVjM2YnKVxuICAgICAgLmFkZFZib0F0dHJpYnV0ZSgnYV92ZXJ0ZXhfY29sb3InLCAndmVjNGYnKTtcblxuICAgIHRoaXMuX3dpcmVGcmFtZXNTdGFja1JlbmRlcmVyID0gbmV3IFdpcmVGcmFtZXNTdGFja1JlbmRlcmVyKFxuICAgICAgdGhpcy5fc2hhZGVyLFxuICAgICAgZ2VvQnVpbGRlci5nZXREZWYoKVxuICAgICk7XG4gICAgdGhpcy5fdHJpYW5nbGVzU3RhY2tSZW5kZXJlciA9IG5ldyBUcmlhbmdsZXNTdGFja1JlbmRlcmVyKFxuICAgICAgdGhpcy5fc2hhZGVyLFxuICAgICAgZ2VvQnVpbGRlci5nZXREZWYoKVxuICAgICk7XG4gIH1cblxuICBwdXNoTGluZShcbiAgICBpblBvaW50QTogZ2xtLlJlYWRvbmx5VmVjMyxcbiAgICBpblBvaW50QjogZ2xtLlJlYWRvbmx5VmVjMyxcbiAgICBpbkNvbG9yOiBnbG0uUmVhZG9ubHlWZWMzXG4gICkge1xuICAgIHRoaXMuX3dpcmVGcmFtZXNTdGFja1JlbmRlcmVyLnB1c2hMaW5lKGluUG9pbnRBLCBpblBvaW50QiwgaW5Db2xvcik7XG4gIH1cblxuICBwdXNoQ3Jvc3MoXG4gICAgaW5DZW50ZXI6IGdsbS5SZWFkb25seVZlYzMsXG4gICAgaW5TaXplOiBudW1iZXIsXG4gICAgaW5Db2xvcjogZ2xtLlJlYWRvbmx5VmVjM1xuICApIHtcbiAgICBjb25zdCBjcm9zc1ZlcnRpY2VzOiBnbG0uUmVhZG9ubHlWZWMzW10gPSBbXG4gICAgICBbaW5DZW50ZXJbMF0gLSBpblNpemUsIGluQ2VudGVyWzFdLCBpbkNlbnRlclsyXV0sXG4gICAgICBbaW5DZW50ZXJbMF0gKyBpblNpemUsIGluQ2VudGVyWzFdLCBpbkNlbnRlclsyXV0sXG4gICAgICBbaW5DZW50ZXJbMF0sIGluQ2VudGVyWzFdIC0gaW5TaXplLCBpbkNlbnRlclsyXV0sXG4gICAgICBbaW5DZW50ZXJbMF0sIGluQ2VudGVyWzFdICsgaW5TaXplLCBpbkNlbnRlclsyXV0sXG4gICAgICBbaW5DZW50ZXJbMF0sIGluQ2VudGVyWzFdLCBpbkNlbnRlclsyXSAtIGluU2l6ZV0sXG4gICAgICBbaW5DZW50ZXJbMF0sIGluQ2VudGVyWzFdLCBpbkNlbnRlclsyXSArIGluU2l6ZV1cbiAgICBdO1xuICAgIGNvbnN0IGNyb3NzSW5kaWNlczogbnVtYmVyW10gPSBbMCwgMSwgMiwgMywgNCwgNV07XG5cbiAgICBmb3IgKGxldCBpaSA9IDA7IGlpIDwgY3Jvc3NJbmRpY2VzLmxlbmd0aDsgaWkgKz0gMikge1xuICAgICAgY29uc3QgdmVydGV4QSA9IGNyb3NzVmVydGljZXNbaWkgKyAwXTtcbiAgICAgIGNvbnN0IHZlcnRleEIgPSBjcm9zc1ZlcnRpY2VzW2lpICsgMV07XG4gICAgICB0aGlzLl93aXJlRnJhbWVzU3RhY2tSZW5kZXJlci5wdXNoTGluZSh2ZXJ0ZXhBLCB2ZXJ0ZXhCLCBpbkNvbG9yKTtcbiAgICB9XG4gIH1cblxuICBwdXNoVGhpY2tMaW5lKFxuICAgIGluUG9pbnRBOiBnbG0uUmVhZG9ubHlWZWMzLFxuICAgIGluUG9pbnRCOiBnbG0uUmVhZG9ubHlWZWMzLFxuICAgIHRoaWNrbmVzczogbnVtYmVyLFxuICAgIGluQ29sb3I6IGdsbS5SZWFkb25seVZlYzNcbiAgKSB7XG4gICAgdGhpcy5fdHJpYW5nbGVzU3RhY2tSZW5kZXJlci5wdXNoTGluZShcbiAgICAgIGluUG9pbnRBLFxuICAgICAgaW5Qb2ludEIsXG4gICAgICB0aGlja25lc3MsXG4gICAgICBpbkNvbG9yXG4gICAgKTtcbiAgfVxuXG4gIHB1c2hSb3RhdGVkTGluZShcbiAgICBjZW50ZXI6IGdsbS5SZWFkb25seVZlYzMsXG4gICAgYW5nbGU6IG51bWJlcixcbiAgICBsZW5ndGg6IG51bWJlcixcbiAgICB0aGlja25lc3M6IG51bWJlcixcbiAgICBjb2xvcjogZ2xtLlJlYWRvbmx5VmVjM1xuICApIHtcbiAgICB0aGlzLl90cmlhbmdsZXNTdGFja1JlbmRlcmVyLnB1c2hSb3RhdGVkTGluZShcbiAgICAgIGNlbnRlcixcbiAgICAgIGFuZ2xlLFxuICAgICAgbGVuZ3RoLFxuICAgICAgdGhpY2tuZXNzLFxuICAgICAgY29sb3JcbiAgICApO1xuICB9XG5cbiAgcHVzaE9yaWdpbkJvdW5kUmVjdGFuZ2xlKFxuICAgIGluT3JpZ2luOiBnbG0uUmVhZG9ubHlWZWMzLFxuICAgIGluU2l6ZTogZ2xtLlJlYWRvbmx5VmVjMixcbiAgICBpbkNvbG9yOiBnbG0uUmVhZG9ubHlWZWMzIHwgZ2xtLlJlYWRvbmx5VmVjNFxuICApIHtcbiAgICB0aGlzLl90cmlhbmdsZXNTdGFja1JlbmRlcmVyLnB1c2hPcmlnaW5Cb3VuZFJlY3RhbmdsZShcbiAgICAgIGluT3JpZ2luLFxuICAgICAgaW5TaXplLFxuICAgICAgaW5Db2xvclxuICAgICk7XG4gIH1cblxuICBwdXNoQ2VudGVyZWRSZWN0YW5nbGUoXG4gICAgaW5DZW50ZXI6IGdsbS5SZWFkb25seVZlYzMsXG4gICAgaW5TaXplOiBnbG0uUmVhZG9ubHlWZWMyLFxuICAgIGluQ29sb3I6IGdsbS5SZWFkb25seVZlYzMgfCBnbG0uUmVhZG9ubHlWZWM0XG4gICkge1xuICAgIHRoaXMuX3RyaWFuZ2xlc1N0YWNrUmVuZGVyZXIucHVzaENlbnRlcmVkUmVjdGFuZ2xlKFxuICAgICAgaW5DZW50ZXIsXG4gICAgICBpblNpemUsXG4gICAgICBpbkNvbG9yXG4gICAgKTtcbiAgfVxuXG4gIHB1c2hUcmlhbmdsZShcbiAgICBpblBvc0E6IGdsbS5SZWFkb25seVZlYzMsXG4gICAgaW5Qb3NCOiBnbG0uUmVhZG9ubHlWZWMzLFxuICAgIGluUG9zQzogZ2xtLlJlYWRvbmx5VmVjMyxcbiAgICBpbkNvbG9yOiBnbG0uUmVhZG9ubHlWZWMzIHwgZ2xtLlJlYWRvbmx5VmVjNFxuICApIHtcbiAgICB0aGlzLl90cmlhbmdsZXNTdGFja1JlbmRlcmVyLnB1c2hUcmlhbmdsZShpblBvc0EsIGluUG9zQiwgaW5Qb3NDLCBpbkNvbG9yKTtcbiAgfVxuXG4gIHB1c2hRdWFkKFxuICAgIGluUG9zOiBnbG0uUmVhZG9ubHlWZWMzLFxuICAgIGluU2l6ZTogZ2xtLlJlYWRvbmx5VmVjMixcbiAgICBpbkNvbG9yOiBnbG0uUmVhZG9ubHlWZWMzIHwgZ2xtLlJlYWRvbmx5VmVjNFxuICApIHtcbiAgICB0aGlzLnB1c2hUcmlhbmdsZShcbiAgICAgIFtpblBvc1swXSArIGluU2l6ZVswXSAqIDAsIGluUG9zWzFdICsgaW5TaXplWzFdICogMCwgaW5Qb3NbMl1dLFxuICAgICAgW2luUG9zWzBdICsgaW5TaXplWzBdICogMSwgaW5Qb3NbMV0gKyBpblNpemVbMV0gKiAxLCBpblBvc1syXV0sXG4gICAgICBbaW5Qb3NbMF0gKyBpblNpemVbMF0gKiAxLCBpblBvc1sxXSArIGluU2l6ZVsxXSAqIDAsIGluUG9zWzJdXSxcbiAgICAgIGluQ29sb3JcbiAgICApO1xuICAgIHRoaXMucHVzaFRyaWFuZ2xlKFxuICAgICAgW2luUG9zWzBdICsgaW5TaXplWzBdICogMCwgaW5Qb3NbMV0gKyBpblNpemVbMV0gKiAwLCBpblBvc1syXV0sXG4gICAgICBbaW5Qb3NbMF0gKyBpblNpemVbMF0gKiAxLCBpblBvc1sxXSArIGluU2l6ZVsxXSAqIDEsIGluUG9zWzJdXSxcbiAgICAgIFtpblBvc1swXSArIGluU2l6ZVswXSAqIDAsIGluUG9zWzFdICsgaW5TaXplWzFdICogMSwgaW5Qb3NbMl1dLFxuICAgICAgaW5Db2xvclxuICAgICk7XG4gIH1cblxuICBmbHVzaChpbkNvbXBvc2VkTWF0cml4OiBnbG0uUmVhZG9ubHlNYXQ0KSB7XG4gICAgaWYgKFxuICAgICAgIXRoaXMuX3dpcmVGcmFtZXNTdGFja1JlbmRlcmVyLmNhblJlbmRlcigpICYmXG4gICAgICAhdGhpcy5fdHJpYW5nbGVzU3RhY2tSZW5kZXJlci5jYW5SZW5kZXIoKVxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3NoYWRlci5iaW5kKChib3VuZCkgPT4ge1xuICAgICAgYm91bmQuc2V0TWF0cml4NFVuaWZvcm0oJ3VfY29tcG9zZWRNYXRyaXgnLCBpbkNvbXBvc2VkTWF0cml4KTtcblxuICAgICAgdGhpcy5fd2lyZUZyYW1lc1N0YWNrUmVuZGVyZXIuZmx1c2goKTtcbiAgICAgIHRoaXMuX3RyaWFuZ2xlc1N0YWNrUmVuZGVyZXIuZmx1c2goKTtcbiAgICB9KTtcbiAgfVxuXG4gIHNhZmVSZW5kZXIoaW5Db21wb3NlZE1hdHJpeDogZ2xtLlJlYWRvbmx5TWF0NCwgaW5DYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgIHRoaXMuX3NoYWRlci5iaW5kKChib3VuZCkgPT4ge1xuICAgICAgYm91bmQuc2V0TWF0cml4NFVuaWZvcm0oJ3VfY29tcG9zZWRNYXRyaXgnLCBpbkNvbXBvc2VkTWF0cml4KTtcblxuICAgICAgaW5DYWxsYmFjaygpO1xuXG4gICAgICB0aGlzLl93aXJlRnJhbWVzU3RhY2tSZW5kZXJlci5mbHVzaCgpO1xuICAgICAgdGhpcy5fdHJpYW5nbGVzU3RhY2tSZW5kZXJlci5mbHVzaCgpO1xuICAgIH0pO1xuICB9XG5cbiAgY2xlYXIoKTogdm9pZCB7XG4gICAgdGhpcy5fd2lyZUZyYW1lc1N0YWNrUmVuZGVyZXIuY2xlYXIoKTtcbiAgICB0aGlzLl90cmlhbmdsZXNTdGFja1JlbmRlcmVyLmNsZWFyKCk7XG4gIH1cbn1cbiIsCiAgImV4cG9ydCBkZWZhdWx0IGBcbiN2ZXJzaW9uIDMwMCBlc1xuXG5wcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG5cbnVuaWZvcm0gbWF0NCB1X2NvbXBvc2VkTWF0cml4O1xuXG5pbiB2ZWMyIGFfdmVydGV4X3Bvc2l0aW9uO1xuaW4gdmVjMiBhX3ZlcnRleF90ZXhDb29yZDtcbmluIHZlYzMgYV9vZmZzZXRfcG9zaXRpb247XG5pbiB2ZWMyIGFfb2Zmc2V0X3RleENvb3JkO1xuaW4gdmVjMyBhX29mZnNldF9jb2xvcjtcbmluIGZsb2F0IGFfb2Zmc2V0X3NjYWxlO1xuXG5vdXQgdmVjMiB2X3RleENvb3JkO1xuZmxhdCBvdXQgdmVjMyB2X2NvbG9yO1xuXG52b2lkIG1haW4odm9pZClcbntcbiAgdmVjMyBwb3NpdGlvbiA9IHZlYzMoYV92ZXJ0ZXhfcG9zaXRpb24sIDAuMCkgKiBhX29mZnNldF9zY2FsZSArIGFfb2Zmc2V0X3Bvc2l0aW9uO1xuXG4gIGdsX1Bvc2l0aW9uID0gdV9jb21wb3NlZE1hdHJpeCAqIHZlYzQocG9zaXRpb24sIDEuMCk7XG5cbiAgdl90ZXhDb29yZCA9IGFfdmVydGV4X3RleENvb3JkICsgYV9vZmZzZXRfdGV4Q29vcmQ7XG4gIHZfY29sb3IgPSBhX29mZnNldF9jb2xvcjtcbn1cbmAudHJpbSgpOyIsCiAgImV4cG9ydCBkZWZhdWx0IGBcbiN2ZXJzaW9uIDMwMCBlc1xuXG5wcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcblxudW5pZm9ybSBzYW1wbGVyMkQgdV90ZXh0dXJlO1xuXG5pbiB2ZWMyIHZfdGV4Q29vcmQ7XG5mbGF0IGluIHZlYzMgdl9jb2xvcjtcblxub3V0IHZlYzQgb19jb2xvcjtcblxudm9pZCBtYWluKHZvaWQpXG57XG4gIHZlYzQgdGV4dHVyZUNvbG9yID0gdGV4dHVyZSh1X3RleHR1cmUsIHZfdGV4Q29vcmQpO1xuICBpZiAodGV4dHVyZUNvbG9yLmEgPCAwLjUpXG4gIHtcbiAgICBkaXNjYXJkO1xuICB9XG4gIGVsc2VcbiAge1xuICAgIG9fY29sb3IgPSB2ZWM0KHZfY29sb3IsIHRleHR1cmVDb2xvci5hKTtcbiAgfVxufVxuYC50cmltKCk7IiwKICAiZXhwb3J0IGNvbnN0IGFzY2lpVGV4dHVyZUhleCA9XG4gICc3ZTdlMjhmZDAzZmQwN2ZlMDRmZTBhZmYwMmZmN2U0ZGZkMGNmZDAzZmQwN2ZlMDRmZTBhZmYwMmZmMWFmYzBkZmQxMGZjMDhmYzBmZmU1NWZmMTVmYjBiZmQwM2ZkMDdmZTA0ZmUwOGY3MDdmZDA0ZmYwN2ZlMDJmZTBjZmQwZmZkMGNmZDBhZmYwM2ZlMDNmZjBhZmU0NGZlMTVmYjBiZmQwM2ZkMDRmMjA0ZjYwN2ZkMDNmZTA3ZmUwMmZlMGNmZDBlZmQwZWZkMGFmZjAyZmUwMmZmMGJmZTQzZmQxNWZiMGNmZTAzZmUwNWYyMDRmZTAxZmYwMmZmMGFmZDAyZmQwN2ZlMDJmZTBiZmQwZWZkMTBmZDBhZmEwY2ZlNDJmZDE2ZmIxYmZlMDRmZTA3ZmUwMWZmMDJmZjBlZmQwOWZjMWNmZDEyZmQwOWZhMGNmZTQxZmQxN2ZiMWJmZTA0ZmUwN2Y3MGJmZDBhZmMwNGZmMTdmZDEyZmQwNmY0MDVmNjE2ZjYxY2ZkMTlmZDFjZmUwNGZlMDhmNzA5ZmQwYmZiMDJmZTE3ZmQxMmZkMDZmNDA1ZjYxNmY2MWJmZDFhZmQxY2ZlMDRmZTBhZmYwMmZmMDFmZTA4ZmQwYmZlMDJmYTE3ZmQxMmZkMDlmYTBjZmUzZWZkMzdmMjA3ZmYwMmZmMDFmZTA3ZmQwMmZkMDdmZTAzZmMxOWZkMTBmZDBhZmEwY2ZlM2RmZDM4ZjIwNGY2MDdmZTAzZmQwN2ZlMDNmZDFiZmQwZWZkMGFmZjAyZmUwMmZmMGJmZTBjZmQxZGZkMGRmZDFkZmQxY2ZlMDRmZTA3ZjcwOGZmMDRmZDA3ZmUwMmZiMWJmZDBjZmQwYWZmMDNmZTAzZmYwYWZlMGNmZDFkZmQwY2ZkMWVmZDFjZmUwNGZlMGFmZjAyZmYxYWZiMDJmZTFiZmMwOGZjMGZmZTFjZmQxZGZkMGJmZDFmZmQxY2ZlMDRmZTBhZmYwMmZmN2FmZDdlN2U3ZTdlN2U3ZTBlZmQxN2ZkMTBmYzBhZjgwYmZlMGJmOTA5ZjkwZGZkMDhmNjA5ZmIwOGY1MDZmODA4ZjgyY2ZkMTlmZDBkZjgwN2ZkMDRmZDBhZmUwYWZkMDNmZDA3ZmQwM2ZkMGJmYzA4ZmQwZmZkMGJmZDA1ZmQwNWZkMDRmZDA2ZmQwNGZkMmFmZDFiZmQwYmZjMDJmYzA2ZmQwM2ZjMDlmZDBhZmQwNGZkMDZmZDA0ZmQwOWZiMDhmZDBlZmQwY2ZkMDVmZDA1ZmQwNGZkMDZmZDA0ZmQwOWZkMGNmZDBlZmQxZGZkMGFmZTA1ZmQwNmZkMDJmYjA2ZmExMWZkMGRmZDA4ZmUwMWZkMDhmZDBkZmQwZGZkMDVmZDA1ZmQwNGZkMDZmZDA0ZmQwOWZkMGNmZDBkZmQwYWY0MDlmZDEwZmQwNmZkMDJmYjA2ZmExMGZkMGRmZDA4ZmUwMmZkMDhmZDBkZmQxNWZkMDVmYjAyZmQwNmZkMDRmZDA5ZmQwY2ZkMGNmZDBiZjQwYWZkMGVmZDA3ZmQwMWZlMDFmZDA5ZmQwZmZkMGJmYjA4ZmUwM2ZkMDhmODA4ZjcwZWZkMDhmYTA4ZjYyNmZkMjNmZDBjZmQwOGZkMDFmZTAxZmQwOWZkMGVmZDBjZmIwOGY2MDZmNzA3ZjYwY2ZkMDlmYTA5ZjcyNmZkMjNmZDBiZmQwOWZiMDJmZDA5ZmQwZGZkMTBmZDA3ZjYwY2ZjMDZmZDA0ZmQwYmZkMDhmZDAyZmIwZGZkMDlmZDBjZmQwY2ZkMGJmNDBhZmQwY2ZkMDlmYjAyZmQwOWZkMGNmZDEyZmQwYmZkMGZmZDA2ZmQwNGZkMGFmZDA5ZmQwNGZkMGRmZDA5ZmQwY2ZkMGRmZDBhZjQwOWZkMTlmYzAzZmQwOWZkMGJmZDAzZmQwNmZkMDRmZDBiZmQwOGZkMDRmZDA2ZmQwNGZkMDlmZDBhZmQwNGZkMGNmZDBhZmQwY2ZkMGVmZDFkZmQxYWZkMDRmZDA5ZmQwYWZkMDRmZDA2ZmQwM2ZkMGNmZDA4ZmQwM2ZkMDdmZDA0ZmQwOWZkMGFmZDA0ZmQwYmZkMTlmZDEwZmQxYmZkMGZmZDBhZjgwN2Y3MDdmNjA3ZjkwYmY5MDdmOTA5ZjgwYWZkMGJmODA5ZmIyZWZkMTlmZDEwZmQ3ZTUxZmQxN2ZkMTFmZDdlN2U3ZTdlMTNmODdlNzhmZDA1ZmQwOGZjMDlmNzA5ZjkwN2Y4MDhmNjA2ZjYwOGY5MDdmZDAzZmQwN2Y5MGRmOTA1ZmMwM2ZkMDZmYjBiZmQwNWZkMDVmZDA1ZmQwOGZiMDhmZDA1ZmQwN2ZhMDlmZDAzZmQwN2ZkMDNmZDA3ZmQwMmZkMDhmZDA0ZmUwN2ZkMDRmZTA3ZmQwM2ZkMDZmZDAzZmQwOWZkMTFmZDA4ZmQwM2ZkMDdmZDBjZmMwM2ZjMDVmZDA1ZmQwN2ZkMDFmZDA3ZmQwNWZkMDZmZDAyZmQwOGZkMDNmZDA2ZmQwNGZkMDdmZDAzZmQwN2ZkMDVmZjA3ZmQwNWZmMDZmZDA0ZmQwNmZkMDNmZDA5ZmQxMWZkMDhmZDAyZmQwOGZkMGNmYjAxZmIwNWZjMDRmZDA2ZmQwM2ZkMDZmZDA1ZmQwNWZkMDRmZDA3ZmQwM2ZkMDZmZDBlZmQwM2ZkMDdmZDBkZmQwY2ZkMDRmZDA2ZmQwM2ZkMDlmZDExZmQwOGZkMDFmZDA5ZmQwY2Y1MDVmYjAzZmQwNWZkMDVmZDA1ZmQwMmZhMDVmZDA0ZmQwN2ZkMDNmZDA2ZmQwZWZkMDNmZDA3ZmQwM2ZlMDhmZDAzZmUwN2ZkMGRmZDAzZmQwOWZkMTFmZDA4ZmEwYWZkMGNmNTA1ZmEwMmZkMDVmZDA1ZmQwNWZkMDJmYTA1ZmQwNGZkMDdmODA3ZmQwZWZkMDNmZDA3ZjgwOGY4MDdmZDBkZjcwOWZkMTFmZDA4ZmIwYmZkMGNmZDAxZmQwMWZkMDVmZDAxZmQwMWZkMDVmZDA1ZmQwNWZkMDJmYTA1ZmQwNGZkMDdmODA3ZmQwZWZkMDNmZDA3ZjgwOGY4MDdmZDBkZjcwOWZkMTFmZDA4ZmIwYmZkMGNmZDAyZmYwMmZkMDVmZDAyZmEwNWZkMDVmZDA1ZmQwMmZhMDVmNjA3ZmQwM2ZkMDZmZDBlZmQwM2ZkMDdmZDAzZmUwOGZkMDNmZTA3ZmQwMmZiMDZmZDAzZmQwOWZkMGJmZDAzZmQwOGZhMGFmZDBjZmQwNWZkMDVmZDAzZmIwNWZkMDVmZDA1ZmQwZGZkMDRmZDA3ZmQwM2ZkMDZmZDBlZmQwM2ZkMDdmZDBkZmQwY2ZkMDRmZDA2ZmQwM2ZkMDlmZDBiZmQwM2ZkMDhmZDAxZmQwOWZkMDVmZjA2ZmQwNWZkMDVmZDA0ZmMwNWZkMDVmZDA1ZmQwZGZkMDRmZDA3ZmQwM2ZkMDZmZDA0ZmQwN2ZkMDNmZDA3ZmQwNWZmMDdmZDBjZmQwNGZkMDZmZDAzZmQwOWZkMGJmZDAzZmQwOGZkMDJmZDA4ZmQwNGZlMDZmZDA1ZmQwNWZkMDVmZDA2ZmQwM2ZkMDZmZDBkZmQwNGZkMDdmZDAzZmQwN2ZkMDNmZDA3ZmQwMmZkMDhmZDA0ZmUwN2ZkMGRmZDAzZmQwNmZkMDNmZDA5ZmQwYmZkMDNmZDA4ZmQwM2ZkMDdmZDAzZmQwNmZkMDVmZDA1ZmQwNWZkMDdmZDAxZmQwN2ZkMGRmZDA0ZmQwNmY3MDlmOTA3ZjgwOGY2MDZmYjBkZjgwNmZkMDNmZDA3ZjkwYWY5MDhmYzAzZmQwNmY2MDZmZDA1ZmQwNWZkMDVmZDA4ZmIwYWY4N2U3ZTdlN2U3ZTdlN2U2OGZlMWFmNzBhZmIwOGY3MDhmODA3ZjUwNWZkMDNmZDA3ZmQwM2ZkMDdmZDA1ZmQwNWZkMDNmZDA3ZmQwM2ZkMDdmNjA4ZjkwN2ZmMTFmOTBhZmMxYWZkMDNmZDA3ZmMwMWZjMDdmZDAzZmQwNmZkMDRmZDA2ZmUwMmZkMDJmZTA1ZmQwM2ZkMDdmZDAzZmQwN2ZkMDVmZDA1ZmQwM2ZkMDdmZDAzZmQwN2ZkMDRmZDA4ZmQwYmZlMTRmZDA5ZmExOWZkMDNmZDA3ZmQwM2ZkMDdmZDAzZmQwNmZkMDRmZDA2ZmYwM2ZkMDNmZjA1ZmQwM2ZkMDdmZDAzZmQwN2ZkMDVmZDA1ZmQwM2ZkMDdmZDAzZmQwN2ZlMDVmZDA4ZmQwYmZkMTNmZDA4ZmQwMmZkMThmZDAzZmQwNmZkMDVmZDA2ZmQwM2ZkMDZmZDA0ZmQwYWZkMDlmZDAzZmQwN2ZkMDNmZDA3ZmQwNWZkMDZmZDAxZmQwOGZkMDNmZDA3ZmYwNWZkMDlmZDBjZmQxMmZkMDdmZDA0ZmQxN2ZkMDNmZDA2ZmQwNWZkMDZmZDAzZmQwNmZkMTFmZDA5ZmQwM2ZkMDdmZDAzZmQwN2ZkMDVmZDA3ZmIwOWZkMDNmZDBjZmQwYWZkMGRmZDExZmQyOGY4MDdmZDA1ZmQwNmY4MDhmOTBjZmQwOWZkMDNmZDA3ZmQwM2ZkMDdmZDAyZmYwMmZkMDhmZDBiZmQwMWZkMGNmZDBiZmQwZWZkMTBmZDI4ZjgwN2ZkMDVmZDA2ZjgwOWY5MGJmZDA5ZmQwM2ZkMDdmZDAzZmQwN2ZkMDJmZjAyZmQwOGZkMGNmYjBjZmQwY2ZkMGZmZDBmZmQyOGZkMGNmZDAzZmIwNmZkMDJmZDBlZmQwYWZkMDlmZDAzZmQwN2ZkMDNmZDA3ZmQwMmZmMDJmZDA3ZmIwY2ZkMGNmZDBkZmQxMGZkMGVmZDI4ZmQwY2ZkMDJmYTA2ZmQwM2ZkMDZmZDA0ZmQwYWZkMDlmZDAzZmQwN2ZkMDNmZDA4ZjcwN2ZkMDFmZDBiZmQwYmZkMDVmZjA4ZmQxMWZkMGRmZDI4ZmQwZGY3MDdmZDAzZmQwNmZkMDRmZDBhZmQwOWZkMDNmZDA4ZmQwMWZkMDlmYzAxZmMwNmZkMDNmZDBhZmQwYWZkMDVmZTA4ZmQxMmZkMGNmZDI4ZmQwZGY3MDdmZDAzZmQwNmZkMDRmZDBhZmQwOWZkMDNmZDA5ZmIwYmZkMDFmZDA3ZmQwM2ZkMGFmZDBhZmQwNGZkMDhmZDEzZmQwYmZkMjdmYjEyZmQwNmZjMDNmZDA3ZjgwOWY5MDhmOTBiZmQwY2ZkMDFmZDA3ZmQwM2ZkMDhmOTA4ZjYwOGY5MTBmZDA2ZjkzY2ZhN2U1NGYwN2U3MmYwN2U3ZTdlN2UwYmZkMWRmYzIxZmIxOWZiMThmYzEwZmQwZmZkMDdmYzBkZmEzOWZkMWVmZDIyZmQxOWZkMDFmZDE4ZmQxMGZkMGZmZDA4ZmQxMGZkM2JmZDFjZmQyMmZkMTlmZDAxZmQxOGZkMTBmZDBmZmQwOGZkMTBmZDNiZmQxY2ZkMjJmZDE5ZmQxY2ZkMmRmZDEwZmQ0YWY5MDlmODA4ZjkwOWY4MDhmOTBhZmQwY2ZiMDJmZTA3ZmQwMWZjMDhmYTBjZmEwOGZkMDNmZDBhZmQwOWY2MDZmODA5ZjkxZWZkMDhmZDAzZmQwNmZkMDNmZDA3ZmQwM2ZkMDdmZDAzZmQwN2Y4MDhmZDAzZmQwOGZjMDJmZDBhZmQwZmZkMDhmZDAyZmQwYmZkMDlmZDAyZmYwMmZkMDVmZDAzZmQwN2ZkMDNmZDFkZmQwOGZkMDNmZDA2ZmQwM2ZkMDdmZDAzZmQwN2ZkMDNmZDA3ZjgwOGZkMDNmZDA4ZmMwMmZkMGFmZDBmZmQwOGZkMDFmZDBjZmQwOWZkMDJmZjAyZmQwNWZkMDNmZDA3ZmQwM2ZkMThmODA4ZmQwM2ZkMDZmZDBkZmQwM2ZkMDdmNzA5ZmQwYmZkMDNmZDA4ZmQwM2ZkMGFmZDBmZmQwOGZhMGRmZDA5ZmQwMmZmMDJmZDA1ZmQwM2ZkMDdmZDAzZmQxN2ZkMDNmZDA4ZmQwM2ZkMDZmZDBkZmQwM2ZkMDdmZDBmZmQwYmZkMDNmZDA4ZmQwM2ZkMGFmZDBmZmQwOGZkMDFmZDBjZmQwOWZkMDJmZjAyZmQwNWZkMDNmZDA3ZmQwM2ZkMTdmZDAzZmQwOGZkMDNmZDA2ZmQwM2ZkMDdmZDAzZmQwN2ZkMDNmZDA5ZmQwY2Y4MDhmZDAzZmQwYWZkMGZmZDA4ZmQwMmZkMGJmZDA5ZmQwMmZmMDJmZDA1ZmQwM2ZkMDdmZDAzZmQxN2ZkMDNmZDA4ZmQwM2ZkMDZmZDAzZmQwN2ZkMDNmZDA3ZmQwM2ZkMDlmZDBkZjkwOGZkMDNmZDBhZmQwZmZkMDhmZDAzZmQwYWZkMDlmZDAyZmYwMmZkMDVmZDAzZmQwN2ZkMDNmZDE4ZmIwMmZlMDZmZTAyZmIwOGY5MDlmYjAyZmUwN2Y5MDhmOTBmZmQwN2ZjMDNmZDA3ZjcwNmZkMDNmZDA3ZmMwM2ZkMDdmNzA2ZmQwNWZkMDVmZDAzZmQwOGY5NzhmZDAzZmQyN2ZkMDNmZDdlNGFmOTJhZmE3ZTdlN2U3ZTdlN2UxOGZhMDlmYzA5ZmExZWZlNGVmZjZlZmQwZGZjMGRmZDFjZmM0Y2ZlNmVmZDBkZmMwZGZkMWJmYTRhZmQ2ZWZkMGRmYzBkZmQxYWZkMDJmZDA3ZmUwMmZiMDdmYjAyZmUwN2ZjMDJmZDA4ZjkwOGY3MDdmZDAzZmQwN2ZkMDNmZDA3ZmQwNWZkMDVmZDAyZmQwOWZkMDNmZDA2ZjgwYWZkMGVmYzBlZmQwOGZiMDNmZDA1ZmQwNGZkMDdmZDAzZmQwNWZkMDNmZDA5ZjcwNmZkMDRmZTA5ZmQwYmZkMDNmZDA3ZmQwM2ZkMDdmZDA1ZmQwNWZkMDJmZDA5ZmQwM2ZkMDZmZTAzZmQwOGZkMjRmZDA1ZmQwMWZkMDJmZDA1ZmUwNmZlMDdmZDAzZmQwNWZkMDNmZDA5ZmMwMmZkMDZmZDA0ZmUwOWZkMGJmZDAzZmQwN2ZkMDNmZDA3ZmQwNWZkMDZmYTBhZmQwM2ZkMDZmZjAzZmQwOWZkMjRmZDA1ZmQwMmZkMDFmZDA1ZmUwNmZlMDdmZDAzZmQwNWZkMDNmZDA5ZmQwZGZiMGNmZDBiZmQwM2ZkMDdmZDAzZmQwN2ZkMDJmZjAyZmQwN2ZjMGJmZDAzZmQwOWZkMGNmZDBlZmMwZWZkMDdmZDAzZmIwNmZlMDZmZTA3ZmQwM2ZkMDVmZDAzZmQwOWZkMGZmYjBhZmQwYmZkMDNmZDA3ZmQwM2ZkMDdmZDAyZmYwMmZkMDdmYzBiZmQwM2ZkMDhmZDBlZmQwZGZjMGRmZDE5ZmUwNmZlMDdmZDAzZmQwNWZkMDNmZDA5ZmQwY2ZlMDRmZDA5ZmQwMWZkMDdmZDAzZmQwOGZkMDFmZDA5ZmMwMWZjMDdmYTBiZjkwOGZkMDNmZjBiZmQwZGZjMGRmZDE5ZmUwNmZlMDdmODA3ZjgwOWZkMGNmZTA0ZmQwOWZkMDFmZDA3ZmQwM2ZkMDlmYjBiZmQwMWZkMDdmZDAyZmQwYmZiMDhmZDAzZmUwYmZkMGRmYzBkZmQxOWY2MDdmZDExZmQwOGZiMGNmOTBiZmIwOWZiMDJmZTA5ZmQwY2ZkMDFmZDA3ZmQwMmZkMGRmZDA4ZjgwY2ZhMDlmYzA5ZmExYWY2MDdmZDExZmQ3Y2ZkNjlmYjBmZmI3N2ZhJztcbiIsCiAgImltcG9ydCAqIGFzIHdlYmdsMiBmcm9tICcuLi8uLi8uLi9ncmFwaGljcy93ZWJnbDInO1xuXG4vLyBpbXBvcnQgKiBhcyBzaGFkZXJzIGZyb20gJy4vc2hhZGVycyc7XG5cbi8vIEB0cy1pZ25vcmVcbmltcG9ydCB0ZXh0UmVuZGVyZXJWZXJ0ZXggZnJvbSAnLi9zaGFkZXJzL3RleHQtcmVuZGVyZXIuZ2xzbC52ZXJ0Jztcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCB0ZXh0UmVuZGVyZXJGcmFnbWVudCBmcm9tICcuL3NoYWRlcnMvdGV4dC1yZW5kZXJlci5nbHNsLmZyYWcnO1xuXG5pbXBvcnQgeyBhc2NpaVRleHR1cmVIZXggfSBmcm9tICcuL2ludGVybmFscy9hc2NpaVRleHR1cmVIZXgnO1xuXG5pbXBvcnQgKiBhcyBnbG0gZnJvbSAnZ2wtbWF0cml4JztcblxuY29uc3Qga19ncmlkU2l6ZTogZ2xtLlJlYWRvbmx5VmVjMiA9IFsxNiwgNl07XG5jb25zdCBrX3RleENvb3JkOiBnbG0uUmVhZG9ubHlWZWMyID0gWzEgLyBrX2dyaWRTaXplWzBdLCAxIC8ga19ncmlkU2l6ZVsxXV07XG5cbmNvbnN0IGtfYnVmZmVyU2l6ZSA9IDkgKiAxMDI0ICogNDtcblxudHlwZSBIb3Jpem9udGFsVGV4dEFsaWduID0gJ2xlZnQnIHwgJ2NlbnRlcmVkJyB8ICdyaWdodCc7XG50eXBlIFZlcnRpY2FsVGV4dEFsaWduID0gJ3RvcCcgfCAnY2VudGVyZWQnIHwgJ2JvdHRvbSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVRleHRSZW5kZXJlciB7XG4gIHNldFRleHRBbGlnbihcbiAgICBpbkhvcml6b250YWxUZXh0QWxpZ246IEhvcml6b250YWxUZXh0QWxpZ24sXG4gICAgaW5WZXJ0aWNhbFRleHRBbGlnbjogVmVydGljYWxUZXh0QWxpZ25cbiAgKTogdGhpcztcbiAgc2V0VGV4dFNjYWxlKGluU2NhbGU6IG51bWJlcik6IHRoaXM7XG4gIHNldFRleHRDb2xvcihpblJlZDogbnVtYmVyLCBpbkdyZWVuOiBudW1iZXIsIGluQmx1ZTogbnVtYmVyKTogdGhpcztcblxuICBwdXNoVGV4dChpbk1lc3NhZ2U6IHN0cmluZywgaW5Qb3NpdGlvbjogZ2xtLlJlYWRvbmx5VmVjMik6IHRoaXM7XG5cbiAgZmx1c2goY29tcG9zZWRNYXRyaXg6IGdsbS5SZWFkb25seU1hdDQpOiB0aGlzO1xuICBjbGVhcigpOiB0aGlzO1xufVxuXG5leHBvcnQgY2xhc3MgVGV4dFJlbmRlcmVyIGltcGxlbWVudHMgSVRleHRSZW5kZXJlciB7XG4gIHByaXZhdGUgX3NoYWRlcjogd2ViZ2wyLklVbmJvdW5kU2hhZGVyO1xuICBwcml2YXRlIF9nZW9tZXRyeTogd2ViZ2wyLkdlb21ldHJ5V3JhcHBlci5HZW9tZXRyeTtcbiAgcHJpdmF0ZSBfdGV4dHVyZTogd2ViZ2wyLklVbmJvdW5kVGV4dHVyZSA9IG5ldyB3ZWJnbDIuVGV4dHVyZSgpO1xuICBwcml2YXRlIF90ZXhDb29yZE1hcDogTWFwPHN0cmluZywgZ2xtLlJlYWRvbmx5VmVjMj47XG5cbiAgcHJpdmF0ZSBfYnVmZmVyID0gbmV3IEZsb2F0MzJBcnJheShrX2J1ZmZlclNpemUpO1xuICBwcml2YXRlIF9jdXJyZW50U2l6ZTogbnVtYmVyID0gMDtcblxuICBwcml2YXRlIF90ZXh0U2NhbGU6IG51bWJlciA9IDE0O1xuICBwcml2YXRlIF90ZXh0Q29sb3I6IGdsbS52ZWMzID0gWzEsIDEsIDFdO1xuXG4gIHByaXZhdGUgX2hvcml6b250YWxUZXh0QWxpZ246IEhvcml6b250YWxUZXh0QWxpZ24gPSAnbGVmdCc7XG4gIHByaXZhdGUgX3ZlcnRpY2FsVGV4dEFsaWduOiBWZXJ0aWNhbFRleHRBbGlnbiA9ICd0b3AnO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3NoYWRlciA9IG5ldyB3ZWJnbDIuU2hhZGVyUHJvZ3JhbSgnVGV4dFJlbmRlcmVyJywge1xuICAgICAgdmVydGV4U3JjOiB0ZXh0UmVuZGVyZXJWZXJ0ZXgsXG4gICAgICBmcmFnbWVudFNyYzogdGV4dFJlbmRlcmVyRnJhZ21lbnQsXG4gICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgICdhX3ZlcnRleF9wb3NpdGlvbicsXG4gICAgICAgICdhX3ZlcnRleF90ZXhDb29yZCcsXG4gICAgICAgICdhX29mZnNldF9wb3NpdGlvbicsXG4gICAgICAgICdhX29mZnNldF90ZXhDb29yZCcsXG4gICAgICAgICdhX29mZnNldF9jb2xvcicsXG4gICAgICAgICdhX29mZnNldF9zY2FsZSdcbiAgICAgIF0sXG4gICAgICB1bmlmb3JtczogWyd1X2NvbXBvc2VkTWF0cml4JywgJ3VfdGV4dHVyZSddXG4gICAgfSk7XG5cbiAgICBjb25zdCBnZW9CdWlsZGVyID0gbmV3IHdlYmdsMi5HZW9tZXRyeVdyYXBwZXIuR2VvbWV0cnlCdWlsZGVyKCk7XG4gICAgZ2VvQnVpbGRlclxuICAgICAgLnJlc2V0KClcbiAgICAgIC5zZXRQcmltaXRpdmVUeXBlKCd0cmlhbmdsZXMnKVxuICAgICAgLmFkZFZibygpXG4gICAgICAuYWRkVmJvQXR0cmlidXRlKCdhX3ZlcnRleF9wb3NpdGlvbicsICd2ZWMyZicpXG4gICAgICAuYWRkVmJvQXR0cmlidXRlKCdhX3ZlcnRleF90ZXhDb29yZCcsICd2ZWMyZicpXG4gICAgICAuc2V0U3RyaWRlKDQgKiA0KVxuICAgICAgLmFkZFZibygpXG4gICAgICAuc2V0VmJvQXNEeW5hbWljKClcbiAgICAgIC5zZXRWYm9Bc0luc3RhbmNlZCgpXG4gICAgICAuYWRkVmJvQXR0cmlidXRlKCdhX29mZnNldF9wb3NpdGlvbicsICd2ZWMzZicpXG4gICAgICAuYWRkVmJvQXR0cmlidXRlKCdhX29mZnNldF90ZXhDb29yZCcsICd2ZWMyZicpXG4gICAgICAuYWRkVmJvQXR0cmlidXRlKCdhX29mZnNldF9jb2xvcicsICd2ZWMzZicpXG4gICAgICAuYWRkVmJvQXR0cmlidXRlKCdhX29mZnNldF9zY2FsZScsICdmbG9hdCcpXG4gICAgICAuc2V0U3RyaWRlKDkgKiA0KTtcblxuICAgIHRoaXMuX2dlb21ldHJ5ID0gbmV3IHdlYmdsMi5HZW9tZXRyeVdyYXBwZXIuR2VvbWV0cnkoXG4gICAgICB0aGlzLl9zaGFkZXIsXG4gICAgICBnZW9CdWlsZGVyLmdldERlZigpXG4gICAgKTtcblxuICAgIHR5cGUgVmVydGV4ID0geyBwb3NpdGlvbjogZ2xtLlJlYWRvbmx5VmVjMjsgdGV4Q29vcmQ6IGdsbS5SZWFkb25seVZlYzIgfTtcblxuICAgIGNvbnN0IHZlcnRpY2VzOiBbVmVydGV4LCBWZXJ0ZXgsIFZlcnRleCwgVmVydGV4XSA9IFtcbiAgICAgIHtcbiAgICAgICAgcG9zaXRpb246IFsrMC41LCAtMC41XSxcbiAgICAgICAgdGV4Q29vcmQ6IFtrX3RleENvb3JkWzBdICogMSwga190ZXhDb29yZFsxXSAqIDFdXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBwb3NpdGlvbjogWy0wLjUsIC0wLjVdLFxuICAgICAgICB0ZXhDb29yZDogW2tfdGV4Q29vcmRbMF0gKiAwLCBrX3RleENvb3JkWzFdICogMV1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHBvc2l0aW9uOiBbKzAuNSwgKzAuNV0sXG4gICAgICAgIHRleENvb3JkOiBba190ZXhDb29yZFswXSAqIDEsIGtfdGV4Q29vcmRbMV0gKiAwXVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcG9zaXRpb246IFstMC41LCArMC41XSxcbiAgICAgICAgdGV4Q29vcmQ6IFtrX3RleENvb3JkWzBdICogMCwga190ZXhDb29yZFsxXSAqIDBdXG4gICAgICB9XG4gICAgXTtcblxuICAgIGNvbnN0IGluZGljZXMgPSBbMSwgMCwgMiwgMSwgMiwgM107XG5cbiAgICBjb25zdCBsZXR0ZXJWZXJ0aWNlczogbnVtYmVyW10gPSBbXTtcbiAgICBmb3IgKGNvbnN0IGluZGV4IG9mIGluZGljZXMpIHtcbiAgICAgIGNvbnN0IHZlcnRleCA9IHZlcnRpY2VzW2luZGV4XTtcbiAgICAgIGxldHRlclZlcnRpY2VzLnB1c2goXG4gICAgICAgIHZlcnRleC5wb3NpdGlvblswXSxcbiAgICAgICAgdmVydGV4LnBvc2l0aW9uWzFdLFxuICAgICAgICB2ZXJ0ZXgudGV4Q29vcmRbMF0sXG4gICAgICAgIHZlcnRleC50ZXhDb29yZFsxXVxuICAgICAgKTtcbiAgICB9XG5cbiAgICB0aGlzLl9nZW9tZXRyeS5hbGxvY2F0ZUJ1ZmZlcigwLCBsZXR0ZXJWZXJ0aWNlcywgbGV0dGVyVmVydGljZXMubGVuZ3RoKTtcbiAgICB0aGlzLl9nZW9tZXRyeS5zZXRQcmltaXRpdmVDb3VudChsZXR0ZXJWZXJ0aWNlcy5sZW5ndGggLyA0KTtcblxuICAgIHRoaXMuX3RleENvb3JkTWFwID0gbmV3IE1hcDxzdHJpbmcsIGdsbS5SZWFkb25seVZlYzI+KFtcbiAgICAgIFsnICcsIFswICoga190ZXhDb29yZFswXSwgMCAqIGtfdGV4Q29vcmRbMV1dXSxcbiAgICAgIFsnIScsIFsxICoga190ZXhDb29yZFswXSwgMCAqIGtfdGV4Q29vcmRbMV1dXSxcbiAgICAgIFsnXCInLCBbMiAqIGtfdGV4Q29vcmRbMF0sIDAgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJyMnLCBbMyAqIGtfdGV4Q29vcmRbMF0sIDAgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJyQnLCBbNCAqIGtfdGV4Q29vcmRbMF0sIDAgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJyUnLCBbNSAqIGtfdGV4Q29vcmRbMF0sIDAgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJyYnLCBbNiAqIGtfdGV4Q29vcmRbMF0sIDAgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbXCInXCIsIFs3ICoga190ZXhDb29yZFswXSwgMCAqIGtfdGV4Q29vcmRbMV1dXSxcbiAgICAgIFsnKCcsIFs4ICoga190ZXhDb29yZFswXSwgMCAqIGtfdGV4Q29vcmRbMV1dXSxcbiAgICAgIFsnKScsIFs5ICoga190ZXhDb29yZFswXSwgMCAqIGtfdGV4Q29vcmRbMV1dXSxcbiAgICAgIFsnKicsIFsxMCAqIGtfdGV4Q29vcmRbMF0sIDAgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJysnLCBbMTEgKiBrX3RleENvb3JkWzBdLCAwICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWycsJywgWzEyICoga190ZXhDb29yZFswXSwgMCAqIGtfdGV4Q29vcmRbMV1dXSxcbiAgICAgIFsnLScsIFsxMyAqIGtfdGV4Q29vcmRbMF0sIDAgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJy4nLCBbMTQgKiBrX3RleENvb3JkWzBdLCAwICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWycvJywgWzE1ICoga190ZXhDb29yZFswXSwgMCAqIGtfdGV4Q29vcmRbMV1dXSxcblxuICAgICAgWycwJywgWzAgKiBrX3RleENvb3JkWzBdLCAxICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWycxJywgWzEgKiBrX3RleENvb3JkWzBdLCAxICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWycyJywgWzIgKiBrX3RleENvb3JkWzBdLCAxICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWyczJywgWzMgKiBrX3RleENvb3JkWzBdLCAxICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWyc0JywgWzQgKiBrX3RleENvb3JkWzBdLCAxICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWyc1JywgWzUgKiBrX3RleENvb3JkWzBdLCAxICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWyc2JywgWzYgKiBrX3RleENvb3JkWzBdLCAxICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWyc3JywgWzcgKiBrX3RleENvb3JkWzBdLCAxICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWyc4JywgWzggKiBrX3RleENvb3JkWzBdLCAxICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWyc5JywgWzkgKiBrX3RleENvb3JkWzBdLCAxICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWyc6JywgWzEwICoga190ZXhDb29yZFswXSwgMSAqIGtfdGV4Q29vcmRbMV1dXSxcbiAgICAgIFsnOycsIFsxMSAqIGtfdGV4Q29vcmRbMF0sIDEgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJzwnLCBbMTIgKiBrX3RleENvb3JkWzBdLCAxICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWyc9JywgWzEzICoga190ZXhDb29yZFswXSwgMSAqIGtfdGV4Q29vcmRbMV1dXSxcbiAgICAgIFsnPicsIFsxNCAqIGtfdGV4Q29vcmRbMF0sIDEgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJz8nLCBbMTUgKiBrX3RleENvb3JkWzBdLCAxICoga190ZXhDb29yZFsxXV1dLFxuXG4gICAgICBbJ0AnLCBbMCAqIGtfdGV4Q29vcmRbMF0sIDIgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJ0EnLCBbMSAqIGtfdGV4Q29vcmRbMF0sIDIgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJ0InLCBbMiAqIGtfdGV4Q29vcmRbMF0sIDIgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJ0MnLCBbMyAqIGtfdGV4Q29vcmRbMF0sIDIgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJ0QnLCBbNCAqIGtfdGV4Q29vcmRbMF0sIDIgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJ0UnLCBbNSAqIGtfdGV4Q29vcmRbMF0sIDIgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJ0YnLCBbNiAqIGtfdGV4Q29vcmRbMF0sIDIgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJ0cnLCBbNyAqIGtfdGV4Q29vcmRbMF0sIDIgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJ0gnLCBbOCAqIGtfdGV4Q29vcmRbMF0sIDIgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJ0knLCBbOSAqIGtfdGV4Q29vcmRbMF0sIDIgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJ0onLCBbMTAgKiBrX3RleENvb3JkWzBdLCAyICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWydLJywgWzExICoga190ZXhDb29yZFswXSwgMiAqIGtfdGV4Q29vcmRbMV1dXSxcbiAgICAgIFsnTCcsIFsxMiAqIGtfdGV4Q29vcmRbMF0sIDIgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJ00nLCBbMTMgKiBrX3RleENvb3JkWzBdLCAyICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWydOJywgWzE0ICoga190ZXhDb29yZFswXSwgMiAqIGtfdGV4Q29vcmRbMV1dXSxcbiAgICAgIFsnTycsIFsxNSAqIGtfdGV4Q29vcmRbMF0sIDIgKiBrX3RleENvb3JkWzFdXV0sXG5cbiAgICAgIFsnUCcsIFswICoga190ZXhDb29yZFswXSwgMyAqIGtfdGV4Q29vcmRbMV1dXSxcbiAgICAgIFsnUScsIFsxICoga190ZXhDb29yZFswXSwgMyAqIGtfdGV4Q29vcmRbMV1dXSxcbiAgICAgIFsnUicsIFsyICoga190ZXhDb29yZFswXSwgMyAqIGtfdGV4Q29vcmRbMV1dXSxcbiAgICAgIFsnUycsIFszICoga190ZXhDb29yZFswXSwgMyAqIGtfdGV4Q29vcmRbMV1dXSxcbiAgICAgIFsnVCcsIFs0ICoga190ZXhDb29yZFswXSwgMyAqIGtfdGV4Q29vcmRbMV1dXSxcbiAgICAgIFsnVScsIFs1ICoga190ZXhDb29yZFswXSwgMyAqIGtfdGV4Q29vcmRbMV1dXSxcbiAgICAgIFsnVicsIFs2ICoga190ZXhDb29yZFswXSwgMyAqIGtfdGV4Q29vcmRbMV1dXSxcbiAgICAgIFsnVycsIFs3ICoga190ZXhDb29yZFswXSwgMyAqIGtfdGV4Q29vcmRbMV1dXSxcbiAgICAgIFsnWCcsIFs4ICoga190ZXhDb29yZFswXSwgMyAqIGtfdGV4Q29vcmRbMV1dXSxcbiAgICAgIFsnWScsIFs5ICoga190ZXhDb29yZFswXSwgMyAqIGtfdGV4Q29vcmRbMV1dXSxcbiAgICAgIFsnWicsIFsxMCAqIGtfdGV4Q29vcmRbMF0sIDMgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJ1snLCBbMTEgKiBrX3RleENvb3JkWzBdLCAzICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWydcXFxcJywgWzEyICoga190ZXhDb29yZFswXSwgMyAqIGtfdGV4Q29vcmRbMV1dXSxcbiAgICAgIFsnXScsIFsxMyAqIGtfdGV4Q29vcmRbMF0sIDMgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJ14nLCBbMTQgKiBrX3RleENvb3JkWzBdLCAzICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWydfJywgWzE1ICoga190ZXhDb29yZFswXSwgMyAqIGtfdGV4Q29vcmRbMV1dXSxcblxuICAgICAgWydgJywgWzAgKiBrX3RleENvb3JkWzBdLCA0ICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWydhJywgWzEgKiBrX3RleENvb3JkWzBdLCA0ICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWydiJywgWzIgKiBrX3RleENvb3JkWzBdLCA0ICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWydjJywgWzMgKiBrX3RleENvb3JkWzBdLCA0ICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWydkJywgWzQgKiBrX3RleENvb3JkWzBdLCA0ICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWydlJywgWzUgKiBrX3RleENvb3JkWzBdLCA0ICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWydmJywgWzYgKiBrX3RleENvb3JkWzBdLCA0ICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWydnJywgWzcgKiBrX3RleENvb3JkWzBdLCA0ICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWydoJywgWzggKiBrX3RleENvb3JkWzBdLCA0ICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWydpJywgWzkgKiBrX3RleENvb3JkWzBdLCA0ICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWydqJywgWzEwICoga190ZXhDb29yZFswXSwgNCAqIGtfdGV4Q29vcmRbMV1dXSxcbiAgICAgIFsnaycsIFsxMSAqIGtfdGV4Q29vcmRbMF0sIDQgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJ2wnLCBbMTIgKiBrX3RleENvb3JkWzBdLCA0ICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWydtJywgWzEzICoga190ZXhDb29yZFswXSwgNCAqIGtfdGV4Q29vcmRbMV1dXSxcbiAgICAgIFsnbicsIFsxNCAqIGtfdGV4Q29vcmRbMF0sIDQgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJ28nLCBbMTUgKiBrX3RleENvb3JkWzBdLCA0ICoga190ZXhDb29yZFsxXV1dLFxuXG4gICAgICBbJ3AnLCBbMCAqIGtfdGV4Q29vcmRbMF0sIDUgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJ3EnLCBbMSAqIGtfdGV4Q29vcmRbMF0sIDUgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJ3InLCBbMiAqIGtfdGV4Q29vcmRbMF0sIDUgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJ3MnLCBbMyAqIGtfdGV4Q29vcmRbMF0sIDUgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJ3QnLCBbNCAqIGtfdGV4Q29vcmRbMF0sIDUgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJ3UnLCBbNSAqIGtfdGV4Q29vcmRbMF0sIDUgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJ3YnLCBbNiAqIGtfdGV4Q29vcmRbMF0sIDUgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJ3cnLCBbNyAqIGtfdGV4Q29vcmRbMF0sIDUgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJ3gnLCBbOCAqIGtfdGV4Q29vcmRbMF0sIDUgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJ3knLCBbOSAqIGtfdGV4Q29vcmRbMF0sIDUgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJ3onLCBbMTAgKiBrX3RleENvb3JkWzBdLCA1ICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWyd7JywgWzExICoga190ZXhDb29yZFswXSwgNSAqIGtfdGV4Q29vcmRbMV1dXSxcbiAgICAgIFsnfCcsIFsxMiAqIGtfdGV4Q29vcmRbMF0sIDUgKiBrX3RleENvb3JkWzFdXV0sXG4gICAgICBbJ30nLCBbMTMgKiBrX3RleENvb3JkWzBdLCA1ICoga190ZXhDb29yZFsxXV1dLFxuICAgICAgWyd+JywgWzE0ICoga190ZXhDb29yZFswXSwgNSAqIGtfdGV4Q29vcmRbMV1dXVxuICAgIF0pO1xuXG4gICAgY29uc3Qgd2lkdGggPSAyNTY7XG4gICAgY29uc3QgaGVpZ2h0ID0gOTY7XG4gICAgY29uc3QgaW1hZ2VQaXhlbHMgPSBuZXcgVWludDhBcnJheSh3aWR0aCAqIGhlaWdodCAqIDQpO1xuICAgIHtcbiAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICBmb3IgKGxldCBpaSA9IDA7IGlpIDwgYXNjaWlUZXh0dXJlSGV4Lmxlbmd0aDsgaWkgKz0gMikge1xuICAgICAgICBsZXQgY3VyclNpemUgPVxuICAgICAgICAgIHBhcnNlSW50KGAke2FzY2lpVGV4dHVyZUhleC5zdWJzdHJpbmcoaWksIGlpICsgMil9MDAwMDAwYCwgMTYpID4+IDI0O1xuXG4gICAgICAgIGxldCBjdXJyVmFsID0gMDtcbiAgICAgICAgaWYgKGN1cnJTaXplIDwgMCkge1xuICAgICAgICAgIGN1cnJTaXplID0gLWN1cnJTaXplO1xuICAgICAgICAgIGN1cnJWYWwgPSAyNTU7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpaSA9IDA7IGlpIDwgY3VyclNpemU7ICsraWkpIHtcbiAgICAgICAgICBpbWFnZVBpeGVsc1tpbmRleCAqIDQgKyAwXSA9IGN1cnJWYWw7XG4gICAgICAgICAgaW1hZ2VQaXhlbHNbaW5kZXggKiA0ICsgMV0gPSBjdXJyVmFsO1xuICAgICAgICAgIGltYWdlUGl4ZWxzW2luZGV4ICogNCArIDJdID0gY3VyclZhbDtcbiAgICAgICAgICBpbWFnZVBpeGVsc1tpbmRleCAqIDQgKyAzXSA9IGN1cnJWYWw7XG4gICAgICAgICAgKytpbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3RleHR1cmUuaW5pdGlhbGl6ZSgpO1xuICAgIHRoaXMuX3RleHR1cmUuYmluZCgoYm91bmRUZXh0dXJlKSA9PiB7XG4gICAgICBib3VuZFRleHR1cmUubG9hZEZyb21NZW1vcnkod2lkdGgsIGhlaWdodCwgaW1hZ2VQaXhlbHMpO1xuICAgIH0pO1xuICB9XG5cbiAgc2V0VGV4dEFsaWduKFxuICAgIGluSG9yaXpvbnRhbFRleHRBbGlnbjogSG9yaXpvbnRhbFRleHRBbGlnbixcbiAgICBpblZlcnRpY2FsVGV4dEFsaWduOiBWZXJ0aWNhbFRleHRBbGlnblxuICApOiB0aGlzIHtcbiAgICB0aGlzLl9ob3Jpem9udGFsVGV4dEFsaWduID0gaW5Ib3Jpem9udGFsVGV4dEFsaWduO1xuICAgIHRoaXMuX3ZlcnRpY2FsVGV4dEFsaWduID0gaW5WZXJ0aWNhbFRleHRBbGlnbjtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHNldFRleHRTY2FsZShpblNjYWxlOiBudW1iZXIpOiB0aGlzIHtcbiAgICB0aGlzLl90ZXh0U2NhbGUgPSBpblNjYWxlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc2V0VGV4dENvbG9yKGluUmVkOiBudW1iZXIsIGluR3JlZW46IG51bWJlciwgaW5CbHVlOiBudW1iZXIpOiB0aGlzIHtcbiAgICB0aGlzLl90ZXh0Q29sb3JbMF0gPSBpblJlZDtcbiAgICB0aGlzLl90ZXh0Q29sb3JbMV0gPSBpbkdyZWVuO1xuICAgIHRoaXMuX3RleHRDb2xvclsyXSA9IGluQmx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHB1c2hUZXh0KGluTWVzc2FnZTogc3RyaW5nLCBpblBvc2l0aW9uOiBnbG0uUmVhZG9ubHlWZWMyKTogdGhpcyB7XG4gICAgLy9cbiAgICAvLyB2YWxpZGF0ZVxuICAgIC8vXG5cbiAgICBpZiAoaW5NZXNzYWdlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGlmICh0aGlzLl90ZXh0U2NhbGUgPD0gMCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY29uc3QgYWxsTGluZVdpZHRoOiBudW1iZXJbXSA9IFswXTtcbiAgICBmb3IgKGxldCBpaSA9IDA7IGlpIDwgaW5NZXNzYWdlLmxlbmd0aDsgKytpaSkge1xuICAgICAgaWYgKGluTWVzc2FnZVtpaV0gPT0gJ1xcbicpIHtcbiAgICAgICAgYWxsTGluZVdpZHRoLnB1c2goMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbGxMaW5lV2lkdGhbYWxsTGluZVdpZHRoLmxlbmd0aCAtIDFdICs9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFsbExpbmVXaWR0aC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvLyBmb3IgKGNvbnN0IGN1cnJMaW5lIG9mIGFsbExpbmVXaWR0aCkge1xuICAgIC8vICAgaWYgKGN1cnJMaW5lID09PSAwKSB7XG4gICAgLy8gICAgIHJldHVybiB0aGlzO1xuICAgIC8vICAgfVxuICAgIC8vIH1cblxuICAgIGxldCBsaW5lSW5kZXggPSAwO1xuXG4gICAgY29uc3QgY3VyclBvczogZ2xtLnZlYzIgPSBbMCwgMF07XG5cbiAgICAvL1xuICAgIC8vIHByZSBwcm9jZXNzXG4gICAgLy9cblxuICAgIGNvbnN0IGhTY2FsZSA9IHRoaXMuX3RleHRTY2FsZSAqIDAuNTtcblxuICAgIHN3aXRjaCAodGhpcy5faG9yaXpvbnRhbFRleHRBbGlnbikge1xuICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgIGN1cnJQb3NbMF0gPSBpblBvc2l0aW9uWzBdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2NlbnRlcmVkJzpcbiAgICAgICAgY3VyclBvc1swXSA9IGluUG9zaXRpb25bMF0gLSBhbGxMaW5lV2lkdGhbbGluZUluZGV4XSAqIGhTY2FsZSArIGhTY2FsZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgIGN1cnJQb3NbMF0gPVxuICAgICAgICAgIGluUG9zaXRpb25bMF0gLVxuICAgICAgICAgIGFsbExpbmVXaWR0aFtsaW5lSW5kZXhdICogdGhpcy5fdGV4dFNjYWxlICtcbiAgICAgICAgICB0aGlzLl90ZXh0U2NhbGU7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN3aXRjaCAodGhpcy5fdmVydGljYWxUZXh0QWxpZ24pIHtcbiAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgIGN1cnJQb3NbMV0gPSBpblBvc2l0aW9uWzFdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2NlbnRlcmVkJzpcbiAgICAgICAgY3VyclBvc1sxXSA9IGluUG9zaXRpb25bMV0gKyBhbGxMaW5lV2lkdGgubGVuZ3RoICogaFNjYWxlIC0gaFNjYWxlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgIGN1cnJQb3NbMV0gPVxuICAgICAgICAgIGluUG9zaXRpb25bMV0gLSAoYWxsTGluZVdpZHRoLmxlbmd0aCAtIDEpICogdGhpcy5fdGV4dFNjYWxlO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvL1xuICAgIC8vIHByb2Nlc3NcbiAgICAvL1xuXG4gICAgZm9yIChsZXQgaWkgPSAwOyBpaSA8IGluTWVzc2FnZS5sZW5ndGg7ICsraWkpIHtcbiAgICAgIGNvbnN0IGxldHRlciA9IGluTWVzc2FnZVtpaV07XG5cbiAgICAgIGlmIChsZXR0ZXIgPT0gJ1xcbicpIHtcbiAgICAgICAgbGluZUluZGV4ICs9IDE7XG5cbiAgICAgICAgLy8gZ28gYmFja1xuICAgICAgICBzd2l0Y2ggKHRoaXMuX2hvcml6b250YWxUZXh0QWxpZ24pIHtcbiAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgIGN1cnJQb3NbMF0gPSBpblBvc2l0aW9uWzBdO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnY2VudGVyZWQnOlxuICAgICAgICAgICAgY3VyclBvc1swXSA9XG4gICAgICAgICAgICAgIGluUG9zaXRpb25bMF0gLSBhbGxMaW5lV2lkdGhbbGluZUluZGV4XSAqIGhTY2FsZSArIGhTY2FsZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgIGN1cnJQb3NbMF0gPVxuICAgICAgICAgICAgICBpblBvc2l0aW9uWzBdIC1cbiAgICAgICAgICAgICAgYWxsTGluZVdpZHRoW2xpbmVJbmRleF0gKiB0aGlzLl90ZXh0U2NhbGUgK1xuICAgICAgICAgICAgICB0aGlzLl90ZXh0U2NhbGU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJQb3NbMV0gLT0gdGhpcy5fdGV4dFNjYWxlOyAvLyBnbyBkb3duXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9wdXNoTGV0dGVyKGxldHRlciwgY3VyclBvcyk7XG4gICAgICAgIC8vIGdvIHJpZ2h0XG4gICAgICAgIGN1cnJQb3NbMF0gKz0gdGhpcy5fdGV4dFNjYWxlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHByaXZhdGUgX3B1c2hMZXR0ZXIoaW5DaGFyYWN0ZXI6IHN0cmluZywgaW5Qb3NpdGlvbjogZ2xtLlJlYWRvbmx5VmVjMikge1xuICAgIGlmICh0aGlzLl9jdXJyZW50U2l6ZSArIDkgKiAxMCA+PSB0aGlzLl9idWZmZXIubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdGV4Q29vcmQgPSB0aGlzLl90ZXhDb29yZE1hcC5nZXQoaW5DaGFyYWN0ZXIpO1xuXG4gICAgaWYgKCF0ZXhDb29yZClcbiAgICAgIHRocm93IG5ldyBFcnJvcihgZmFpbCB0byBmaW5kIGEgbGV0dGVyLCBsZXR0ZXI9JHtpbkNoYXJhY3Rlcn1gKTtcblxuICAgIGZvciAobGV0IHl5ID0gLTE7IHl5IDw9IDE7ICsreXkpIHtcbiAgICAgIGZvciAobGV0IHh4ID0gLTE7IHh4IDw9IDE7ICsreHgpIHtcbiAgICAgICAgdGhpcy5fYnVmZmVyW3RoaXMuX2N1cnJlbnRTaXplKytdID0gaW5Qb3NpdGlvblswXSArIDIgKiB4eDtcbiAgICAgICAgdGhpcy5fYnVmZmVyW3RoaXMuX2N1cnJlbnRTaXplKytdID0gaW5Qb3NpdGlvblsxXSArIDIgKiB5eTtcbiAgICAgICAgdGhpcy5fYnVmZmVyW3RoaXMuX2N1cnJlbnRTaXplKytdID0gLTAuMTtcbiAgICAgICAgdGhpcy5fYnVmZmVyW3RoaXMuX2N1cnJlbnRTaXplKytdID0gdGV4Q29vcmRbMF07XG4gICAgICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSsrXSA9IHRleENvb3JkWzFdO1xuICAgICAgICB0aGlzLl9idWZmZXJbdGhpcy5fY3VycmVudFNpemUrK10gPSAwOyAvLyBibGFja0NvbG9yXG4gICAgICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSsrXSA9IDA7IC8vIGJsYWNrQ29sb3JcbiAgICAgICAgdGhpcy5fYnVmZmVyW3RoaXMuX2N1cnJlbnRTaXplKytdID0gMDsgLy8gYmxhY2tDb2xvclxuICAgICAgICB0aGlzLl9idWZmZXJbdGhpcy5fY3VycmVudFNpemUrK10gPSB0aGlzLl90ZXh0U2NhbGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fYnVmZmVyW3RoaXMuX2N1cnJlbnRTaXplKytdID0gaW5Qb3NpdGlvblswXTtcbiAgICB0aGlzLl9idWZmZXJbdGhpcy5fY3VycmVudFNpemUrK10gPSBpblBvc2l0aW9uWzFdO1xuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSsrXSA9IDAuMDtcbiAgICB0aGlzLl9idWZmZXJbdGhpcy5fY3VycmVudFNpemUrK10gPSB0ZXhDb29yZFswXTtcbiAgICB0aGlzLl9idWZmZXJbdGhpcy5fY3VycmVudFNpemUrK10gPSB0ZXhDb29yZFsxXTtcbiAgICB0aGlzLl9idWZmZXJbdGhpcy5fY3VycmVudFNpemUrK10gPSB0aGlzLl90ZXh0Q29sb3JbMF07XG4gICAgdGhpcy5fYnVmZmVyW3RoaXMuX2N1cnJlbnRTaXplKytdID0gdGhpcy5fdGV4dENvbG9yWzFdO1xuICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9jdXJyZW50U2l6ZSsrXSA9IHRoaXMuX3RleHRDb2xvclsyXTtcbiAgICB0aGlzLl9idWZmZXJbdGhpcy5fY3VycmVudFNpemUrK10gPSB0aGlzLl90ZXh0U2NhbGU7XG4gIH1cblxuICBmbHVzaChjb21wb3NlZE1hdHJpeDogZ2xtLlJlYWRvbmx5TWF0NCk6IHRoaXMge1xuICAgIGlmICh0aGlzLl9jdXJyZW50U2l6ZSA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy5fc2hhZGVyLmJpbmQoKGJvdW5kU2hhZGVyKSA9PiB7XG4gICAgICBib3VuZFNoYWRlci5zZXRNYXRyaXg0VW5pZm9ybSgndV9jb21wb3NlZE1hdHJpeCcsIGNvbXBvc2VkTWF0cml4KTtcbiAgICAgIGJvdW5kU2hhZGVyLnNldFRleHR1cmVVbmlmb3JtKCd1X3RleHR1cmUnLCB0aGlzLl90ZXh0dXJlLCAwKTtcblxuICAgICAgdGhpcy5fZ2VvbWV0cnkuYWxsb2NhdGVCdWZmZXIoMSwgdGhpcy5fYnVmZmVyLCB0aGlzLl9jdXJyZW50U2l6ZSk7XG4gICAgICB0aGlzLl9nZW9tZXRyeS5zZXRJbnN0YW5jZWRDb3VudCh0aGlzLl9jdXJyZW50U2l6ZSAvIDkpO1xuICAgICAgdGhpcy5fZ2VvbWV0cnkucmVuZGVyKCk7XG4gICAgfSk7XG5cbiAgICB3ZWJnbDIuVGV4dHVyZS51bmJpbmQoKTtcblxuICAgIHRoaXMuY2xlYXIoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY2xlYXIoKTogdGhpcyB7XG4gICAgLy8gcmVzZXQgdmVydGljZXNcbiAgICB0aGlzLl9jdXJyZW50U2l6ZSA9IDA7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cbiIsCiAgImltcG9ydCAqIGFzIGJyb3dzZXIgZnJvbSAnLi4vLi4vLi4vc3lzdGVtL2Jyb3dzZXInO1xuaW1wb3J0ICogYXMgcmVuZGVyZXJzIGZyb20gJy4uLy4uLy4uL2dyYXBoaWNzL3JlbmRlcmVycyc7XG5cbmltcG9ydCAqIGFzIGdsbSBmcm9tICdnbC1tYXRyaXgnO1xuXG5pbnRlcmZhY2UgSW5kaWNhdG9yIHtcbiAgY2VudGVyOiBnbG0uUmVhZG9ubHlWZWMyO1xuICBzaXplOiBnbG0uUmVhZG9ubHlWZWMyO1xuICB0ZXh0Pzogc3RyaW5nO1xuICBsaW5lcz86IHtcbiAgICBhOiBnbG0uUmVhZG9ubHlWZWMyO1xuICAgIGI6IGdsbS5SZWFkb25seVZlYzI7XG4gICAgdGhpY2tuZXNzOiBudW1iZXI7XG4gICAgY29sb3I6IGdsbS5SZWFkb25seVZlYzM7XG4gIH1bXTtcbiAgY29sb3I6IGdsbS5SZWFkb25seVZlYzM7XG59XG5cbmNvbnN0IGRlZmF1bHRDb2xvcjogZ2xtLlJlYWRvbmx5VmVjMyA9IFswLjIsIDAuMiwgMC4yXTtcbmNvbnN0IGFjdGl2YXRlZENvbG9yOiBnbG0uUmVhZG9ubHlWZWMzID0gWzAuMiwgMC42LCAwLjJdO1xuXG5jb25zdCBfcmVuZGVySW5kaWNhdG9yID0gKFxuICBjdXJySW5kaWNhdG9yOiBJbmRpY2F0b3IsXG4gIHN0YWNrUmVuZGVyZXJzOiByZW5kZXJlcnMuSVN0YWNrUmVuZGVyZXJzLFxuICB0ZXh0UmVuZGVyZXI6IHJlbmRlcmVycy5JVGV4dFJlbmRlcmVyXG4pID0+IHtcbiAgY29uc3QgeyBjZW50ZXIgfSA9IGN1cnJJbmRpY2F0b3I7XG5cbiAgc3RhY2tSZW5kZXJlcnMucHVzaENlbnRlcmVkUmVjdGFuZ2xlKFxuICAgIGdsbS52ZWMzLmZyb21WYWx1ZXMoY2VudGVyWzBdLCBjZW50ZXJbMV0sIC0wLjMpLFxuICAgIGN1cnJJbmRpY2F0b3Iuc2l6ZSxcbiAgICBbMCwgMCwgMF1cbiAgKTtcblxuICBzdGFja1JlbmRlcmVycy5wdXNoQ2VudGVyZWRSZWN0YW5nbGUoXG4gICAgZ2xtLnZlYzMuZnJvbVZhbHVlcyhjZW50ZXJbMF0sIGNlbnRlclsxXSwgLTAuMiksXG4gICAgW2N1cnJJbmRpY2F0b3Iuc2l6ZVswXSAtIDIsIGN1cnJJbmRpY2F0b3Iuc2l6ZVsxXSAtIDJdLFxuICAgIGN1cnJJbmRpY2F0b3IuY29sb3JcbiAgKTtcblxuICBpZiAoY3VyckluZGljYXRvci50ZXh0KSB7XG4gICAgdGV4dFJlbmRlcmVyXG4gICAgICAuc2V0VGV4dFNjYWxlKDE2KVxuICAgICAgLnNldFRleHRBbGlnbignY2VudGVyZWQnLCAnY2VudGVyZWQnKVxuICAgICAgLnB1c2hUZXh0KGN1cnJJbmRpY2F0b3IudGV4dCwgY2VudGVyKVxuICAgICAgLnNldFRleHRBbGlnbignbGVmdCcsICd0b3AnKTtcbiAgfVxuXG4gIGlmIChjdXJySW5kaWNhdG9yLmxpbmVzKSB7XG4gICAgY3VyckluZGljYXRvci5saW5lcy5mb3JFYWNoKChjdXJyTGluZSkgPT4ge1xuICAgICAgc3RhY2tSZW5kZXJlcnMucHVzaFRoaWNrTGluZShcbiAgICAgICAgW2NlbnRlclswXSArIGN1cnJMaW5lLmFbMF0sIGNlbnRlclsxXSArIGN1cnJMaW5lLmFbMV0sIDBdLFxuICAgICAgICBbY2VudGVyWzBdICsgY3VyckxpbmUuYlswXSwgY2VudGVyWzFdICsgY3VyckxpbmUuYlsxXSwgMF0sXG4gICAgICAgIGN1cnJMaW5lLnRoaWNrbmVzcyxcbiAgICAgICAgY3VyckxpbmUuY29sb3JcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBhZGRLZXlTdHJva2VzV2lkZ2V0cyA9IChcbiAgaW5Qb3M6IGdsbS5SZWFkb25seVZlYzIsXG4gIHN0YWNrUmVuZGVyZXJzOiByZW5kZXJlcnMuSVN0YWNrUmVuZGVyZXJzLFxuICB0ZXh0UmVuZGVyZXI6IHJlbmRlcmVycy5JVGV4dFJlbmRlcmVyXG4pID0+IHtcbiAgX3JlbmRlckluZGljYXRvcihcbiAgICB7XG4gICAgICBjZW50ZXI6IFtpblBvc1swXSwgaW5Qb3NbMV1dLFxuICAgICAgc2l6ZTogWzQwLCA0MF0sXG4gICAgICB0ZXh0OiAnQVxcblEnLFxuICAgICAgY29sb3I6IGJyb3dzZXIuR2xvYmFsS2V5Ym9hcmRNYW5hZ2VyLmlzUHJlc3NlZCgnQScsICdRJylcbiAgICAgICAgPyBhY3RpdmF0ZWRDb2xvclxuICAgICAgICA6IGRlZmF1bHRDb2xvclxuICAgIH0sXG4gICAgc3RhY2tSZW5kZXJlcnMsXG4gICAgdGV4dFJlbmRlcmVyXG4gICk7XG5cbiAgX3JlbmRlckluZGljYXRvcihcbiAgICB7XG4gICAgICBjZW50ZXI6IFtpblBvc1swXSArIDQ1ICogMSwgaW5Qb3NbMV1dLFxuICAgICAgc2l6ZTogWzQwLCA0MF0sXG4gICAgICB0ZXh0OiAnUycsXG4gICAgICBjb2xvcjogYnJvd3Nlci5HbG9iYWxLZXlib2FyZE1hbmFnZXIuaXNQcmVzc2VkKCdTJylcbiAgICAgICAgPyBhY3RpdmF0ZWRDb2xvclxuICAgICAgICA6IGRlZmF1bHRDb2xvclxuICAgIH0sXG4gICAgc3RhY2tSZW5kZXJlcnMsXG4gICAgdGV4dFJlbmRlcmVyXG4gICk7XG5cbiAgX3JlbmRlckluZGljYXRvcihcbiAgICB7XG4gICAgICBjZW50ZXI6IFtpblBvc1swXSArIDQ1ICogMSwgaW5Qb3NbMV0gKyA0NV0sXG4gICAgICBzaXplOiBbNDAsIDQwXSxcbiAgICAgIHRleHQ6ICdXXFxuWicsXG4gICAgICBjb2xvcjogYnJvd3Nlci5HbG9iYWxLZXlib2FyZE1hbmFnZXIuaXNQcmVzc2VkKCdXJywgJ1onKVxuICAgICAgICA/IGFjdGl2YXRlZENvbG9yXG4gICAgICAgIDogZGVmYXVsdENvbG9yXG4gICAgfSxcbiAgICBzdGFja1JlbmRlcmVycyxcbiAgICB0ZXh0UmVuZGVyZXJcbiAgKTtcblxuICBfcmVuZGVySW5kaWNhdG9yKFxuICAgIHtcbiAgICAgIGNlbnRlcjogW2luUG9zWzBdICsgNDUgKiAyLCBpblBvc1sxXV0sXG4gICAgICBzaXplOiBbNDAsIDQwXSxcbiAgICAgIHRleHQ6ICdEJyxcbiAgICAgIGNvbG9yOiBicm93c2VyLkdsb2JhbEtleWJvYXJkTWFuYWdlci5pc1ByZXNzZWQoJ0QnKVxuICAgICAgICA/IGFjdGl2YXRlZENvbG9yXG4gICAgICAgIDogZGVmYXVsdENvbG9yXG4gICAgfSxcbiAgICBzdGFja1JlbmRlcmVycyxcbiAgICB0ZXh0UmVuZGVyZXJcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBhZGRBcnJvd1N0cm9rZXNXaWRnZXRzID0gKFxuICBpblBvczogZ2xtLlJlYWRvbmx5VmVjMixcbiAgc3RhY2tSZW5kZXJlcnM6IHJlbmRlcmVycy5JU3RhY2tSZW5kZXJlcnMsXG4gIHRleHRSZW5kZXJlcjogcmVuZGVyZXJzLklUZXh0UmVuZGVyZXJcbikgPT4ge1xuICAvLyBhcnJvdyBsZWZ0XG4gIF9yZW5kZXJJbmRpY2F0b3IoXG4gICAge1xuICAgICAgY2VudGVyOiBbaW5Qb3NbMF0sIGluUG9zWzFdXSxcbiAgICAgIHNpemU6IFs0MCwgNDBdLFxuICAgICAgbGluZXM6IFtcbiAgICAgICAgeyBhOiBbMTUsIDBdLCBiOiBbLTgsIDBdLCB0aGlja25lc3M6IDYsIGNvbG9yOiBbMSwgMSwgMV0gfSxcbiAgICAgICAgeyBhOiBbMCwgMTBdLCBiOiBbLTEyLCAtMl0sIHRoaWNrbmVzczogNiwgY29sb3I6IFsxLCAxLCAxXSB9LFxuICAgICAgICB7IGE6IFswLCAtMTBdLCBiOiBbLTEyLCAyXSwgdGhpY2tuZXNzOiA2LCBjb2xvcjogWzEsIDEsIDFdIH1cbiAgICAgIF0sXG4gICAgICBjb2xvcjogYnJvd3Nlci5HbG9iYWxLZXlib2FyZE1hbmFnZXIuaXNQcmVzc2VkKCdBcnJvd0xlZnQnKVxuICAgICAgICA/IGFjdGl2YXRlZENvbG9yXG4gICAgICAgIDogZGVmYXVsdENvbG9yXG4gICAgfSxcbiAgICBzdGFja1JlbmRlcmVycyxcbiAgICB0ZXh0UmVuZGVyZXJcbiAgKTtcblxuICAvLyBhcnJvdyBkb3duXG4gIF9yZW5kZXJJbmRpY2F0b3IoXG4gICAge1xuICAgICAgY2VudGVyOiBbaW5Qb3NbMF0gKyA0NSwgaW5Qb3NbMV1dLFxuICAgICAgc2l6ZTogWzQwLCA0MF0sXG4gICAgICBsaW5lczogW1xuICAgICAgICB7IGE6IFswLCAxNV0sIGI6IFswLCAtOF0sIHRoaWNrbmVzczogNiwgY29sb3I6IFsxLCAxLCAxXSB9LFxuICAgICAgICB7IGE6IFsxMCwgMF0sIGI6IFstMiwgLTEyXSwgdGhpY2tuZXNzOiA2LCBjb2xvcjogWzEsIDEsIDFdIH0sXG4gICAgICAgIHsgYTogWy0xMCwgMF0sIGI6IFsyLCAtMTJdLCB0aGlja25lc3M6IDYsIGNvbG9yOiBbMSwgMSwgMV0gfVxuICAgICAgXSxcbiAgICAgIGNvbG9yOiBicm93c2VyLkdsb2JhbEtleWJvYXJkTWFuYWdlci5pc1ByZXNzZWQoJ0Fycm93RG93bicpXG4gICAgICAgID8gYWN0aXZhdGVkQ29sb3JcbiAgICAgICAgOiBkZWZhdWx0Q29sb3JcbiAgICB9LFxuICAgIHN0YWNrUmVuZGVyZXJzLFxuICAgIHRleHRSZW5kZXJlclxuICApO1xuXG4gIC8vIGFycm93IHVwXG4gIF9yZW5kZXJJbmRpY2F0b3IoXG4gICAge1xuICAgICAgY2VudGVyOiBbaW5Qb3NbMF0gKyA0NSwgaW5Qb3NbMV0gKyA0NV0sXG4gICAgICBzaXplOiBbNDAsIDQwXSxcbiAgICAgIGxpbmVzOiBbXG4gICAgICAgIHsgYTogWzAsIC0xNV0sIGI6IFswLCA4XSwgdGhpY2tuZXNzOiA2LCBjb2xvcjogWzEsIDEsIDFdIH0sXG4gICAgICAgIHsgYTogWzEwLCAwXSwgYjogWy0yLCAxMl0sIHRoaWNrbmVzczogNiwgY29sb3I6IFsxLCAxLCAxXSB9LFxuICAgICAgICB7IGE6IFstMTAsIDBdLCBiOiBbMiwgMTJdLCB0aGlja25lc3M6IDYsIGNvbG9yOiBbMSwgMSwgMV0gfVxuICAgICAgXSxcbiAgICAgIGNvbG9yOiBicm93c2VyLkdsb2JhbEtleWJvYXJkTWFuYWdlci5pc1ByZXNzZWQoJ0Fycm93VXAnKVxuICAgICAgICA/IGFjdGl2YXRlZENvbG9yXG4gICAgICAgIDogZGVmYXVsdENvbG9yXG4gICAgfSxcbiAgICBzdGFja1JlbmRlcmVycyxcbiAgICB0ZXh0UmVuZGVyZXJcbiAgKTtcblxuICAvLyBhcnJvdyByaWdodFxuICBfcmVuZGVySW5kaWNhdG9yKFxuICAgIHtcbiAgICAgIGNlbnRlcjogW2luUG9zWzBdICsgNDUgKiAyLCBpblBvc1sxXV0sXG4gICAgICBzaXplOiBbNDAsIDQwXSxcbiAgICAgIGxpbmVzOiBbXG4gICAgICAgIHsgYTogWy0xNSwgMF0sIGI6IFs4LCAwXSwgdGhpY2tuZXNzOiA2LCBjb2xvcjogWzEsIDEsIDFdIH0sXG4gICAgICAgIHsgYTogWzAsIDEwXSwgYjogWzEyLCAtMl0sIHRoaWNrbmVzczogNiwgY29sb3I6IFsxLCAxLCAxXSB9LFxuICAgICAgICB7IGE6IFswLCAtMTBdLCBiOiBbMTIsIDJdLCB0aGlja25lc3M6IDYsIGNvbG9yOiBbMSwgMSwgMV0gfVxuICAgICAgXSxcbiAgICAgIGNvbG9yOiBicm93c2VyLkdsb2JhbEtleWJvYXJkTWFuYWdlci5pc1ByZXNzZWQoJ0Fycm93UmlnaHQnKVxuICAgICAgICA/IGFjdGl2YXRlZENvbG9yXG4gICAgICAgIDogZGVmYXVsdENvbG9yXG4gICAgfSxcbiAgICBzdGFja1JlbmRlcmVycyxcbiAgICB0ZXh0UmVuZGVyZXJcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBhZGRLZXlzVG91Y2hlc1dpZGdldHMgPSAoXG4gIGluQ2FudmFzRWxlbWVudDogSFRNTENhbnZhc0VsZW1lbnQsXG4gIGluUG9zOiBnbG0uUmVhZG9ubHlWZWMyLFxuICBzdGFja1JlbmRlcmVyczogcmVuZGVyZXJzLklTdGFja1JlbmRlcmVycyxcbiAgdGV4dFJlbmRlcmVyOiByZW5kZXJlcnMuSVRleHRSZW5kZXJlclxuKSA9PiB7XG4gIGlmIChicm93c2VyLkdsb2JhbFRvdWNoTWFuYWdlci5pc1N1cHBvcnRlZChpbkNhbnZhc0VsZW1lbnQpKSB7XG4gICAgX3JlbmRlckluZGljYXRvcihcbiAgICAgIHtcbiAgICAgICAgY2VudGVyOiBbaW5Qb3NbMF0gKyAxMTUsIGluUG9zWzFdXSxcbiAgICAgICAgc2l6ZTogWzIzMCwgNjBdLFxuICAgICAgICB0ZXh0OiAnVG91Y2ggRXZlbnRzXFxuU3VwcG9ydGVkXFxuKGRvdWJsZSB0YXApJyxcbiAgICAgICAgY29sb3I6IFswLCAwLjUsIDBdXG4gICAgICB9LFxuICAgICAgc3RhY2tSZW5kZXJlcnMsXG4gICAgICB0ZXh0UmVuZGVyZXJcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIF9yZW5kZXJJbmRpY2F0b3IoXG4gICAgICB7XG4gICAgICAgIGNlbnRlcjogW2luUG9zWzBdICsgMTE1LCBpblBvc1sxXV0sXG4gICAgICAgIHNpemU6IFsyMzAsIDYwXSxcbiAgICAgICAgdGV4dDogJ1RvdWNoIEV2ZW50c1xcbk5vdCBTdXBwb3J0ZWQnLFxuICAgICAgICBjb2xvcjogWzAuNSwgMCwgMF1cbiAgICAgIH0sXG4gICAgICBzdGFja1JlbmRlcmVycyxcbiAgICAgIHRleHRSZW5kZXJlclxuICAgICk7XG4gIH1cblxuICBpZiAoYnJvd3Nlci5HbG9iYWxQb2ludGVyTG9ja01hbmFnZXIuY2FuQmVQb2ludGVyTG9ja2VkKGluQ2FudmFzRWxlbWVudCkpIHtcbiAgICBfcmVuZGVySW5kaWNhdG9yKFxuICAgICAge1xuICAgICAgICBjZW50ZXI6IFtpblBvc1swXSArIDEwNSwgaW5Qb3NbMV0gKyA3MF0sXG4gICAgICAgIHNpemU6IFsyMTAsIDYwXSxcbiAgICAgICAgdGV4dDogJ01vdXNlXFxuU3VwcG9ydGVkJyxcbiAgICAgICAgY29sb3I6IFswLCAwLjUsIDBdXG4gICAgICB9LFxuICAgICAgc3RhY2tSZW5kZXJlcnMsXG4gICAgICB0ZXh0UmVuZGVyZXJcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIF9yZW5kZXJJbmRpY2F0b3IoXG4gICAgICB7XG4gICAgICAgIGNlbnRlcjogW2luUG9zWzBdICsgMTA1LCBpblBvc1sxXSArIDcwXSxcbiAgICAgICAgc2l6ZTogWzIxMCwgNjBdLFxuICAgICAgICB0ZXh0OiAnTW91c2UgRXZlbnRzXFxuTm90IFN1cHBvcnRlZCcsXG4gICAgICAgIGNvbG9yOiBbMC41LCAwLCAwXVxuICAgICAgfSxcbiAgICAgIHN0YWNrUmVuZGVyZXJzLFxuICAgICAgdGV4dFJlbmRlcmVyXG4gICAgKTtcbiAgfVxufTtcblxuLy8gZXhwb3J0IGNvbnN0IHJlbmRlckNvbnRyb2xzID0gKFxuLy8gICBpbkNhbnZhc0VsZW1lbnQ6IEhUTUxDYW52YXNFbGVtZW50LFxuLy8gICBzdGFja1JlbmRlcmVyczogcmVuZGVyZXJzLklTdGFja1JlbmRlcmVycyxcbi8vICAgdGV4dFJlbmRlcmVyOiByZW5kZXJlcnMuSVRleHRSZW5kZXJlclxuLy8gKSA9PiB7XG4vLyAgIC8vIGNvbnN0IGFsbEluZGljYXRvcjogSW5kaWNhdG9yW10gPSBbXTtcblxuLy8gICBjb25zdCBrZXlFdmVudHNQb3M6IGdsbS5SZWFkb25seVZlYzIgPSBbNyArIDIwLCAxNjVdO1xuLy8gICBjb25zdCB0b3VjaEV2ZW50c1BvczogZ2xtLlJlYWRvbmx5VmVjMiA9IFs3ICsgMjAsIDI2MF07XG4vLyAgIGNvbnN0IGJvYXJkUG9zOiBnbG0uUmVhZG9ubHlWZWMyID0gWzcsIDM1XTtcblxuLy8gICBhZGRLZXlTdHJva2VzV2lkZ2V0cyhrZXlFdmVudHNQb3MsIHN0YWNrUmVuZGVyZXJzLCB0ZXh0UmVuZGVyZXIpO1xuLy8gICBhZGRBcnJvd1N0cm9rZXNXaWRnZXRzKHRvdWNoRXZlbnRzUG9zLCBzdGFja1JlbmRlcmVycywgdGV4dFJlbmRlcmVyKTtcbi8vICAgYWRkS2V5c1RvdWNoZXNXaWRnZXRzKGluQ2FudmFzRWxlbWVudCwgYm9hcmRQb3MsIHN0YWNrUmVuZGVyZXJzLCB0ZXh0UmVuZGVyZXIpO1xuLy8gfTtcbiIsCiAgImltcG9ydCB7IHN5c3RlbSwgZ3JhcGhpY3MgfSBmcm9tICcuLi8uLi8uLic7XG5cbmltcG9ydCAqIGFzIGdsbSBmcm9tICdnbC1tYXRyaXgnO1xuXG5leHBvcnQgY29uc3QgcmVuZGVyRnBzTWV0ZXIgPSAoXG4gIGluUG9zOiBnbG0uUmVhZG9ubHlWZWMzLFxuICBpblNpemU6IGdsbS5SZWFkb25seVZlYzIsXG4gIGluRnJhbWVQcm9maWxlcjogc3lzdGVtLm1ldHJpY3MuSUZyYW1lUHJvZmlsZXIsXG4gIGluU3RhY2tSZW5kZXJlcnM6IGdyYXBoaWNzLnJlbmRlcmVycy5JU3RhY2tSZW5kZXJlcnMsXG4gIGluVGV4dFJlbmRlcmVyOiBncmFwaGljcy5yZW5kZXJlcnMuSVRleHRSZW5kZXJlcixcbiAgaW5TaG93RnBzID0gZmFsc2VcbikgPT4ge1xuICAvLyBmcHMgbWV0ZXJcblxuICBjb25zdCBrX2RpdmlkZXIgPSA1O1xuICBjb25zdCBrX3ZlcnRpY2FsU2l6ZSA9XG4gICAgTWF0aC5jZWlsKGluRnJhbWVQcm9maWxlci5tYXhEZWx0YSAvIGtfZGl2aWRlcikgKiBrX2RpdmlkZXI7XG5cbiAge1xuICAgIC8vIGJvcmRlclxuXG4gICAgaW5TdGFja1JlbmRlcmVycy5wdXNoT3JpZ2luQm91bmRSZWN0YW5nbGUoaW5Qb3MsIGluU2l6ZSwgWzAsIDAsIDAsIDAuNV0pO1xuXG4gICAgY29uc3QgYWxsVmVydGljZXM6IFtcbiAgICAgIGdsbS5SZWFkb25seVZlYzMsXG4gICAgICBnbG0uUmVhZG9ubHlWZWMzLFxuICAgICAgZ2xtLlJlYWRvbmx5VmVjMyxcbiAgICAgIGdsbS5SZWFkb25seVZlYzNcbiAgICBdID0gW1xuICAgICAgW2luUG9zWzBdICsgaW5TaXplWzBdICogMCwgaW5Qb3NbMV0gKyBpblNpemVbMV0gKiAwLCAwXSxcbiAgICAgIFtpblBvc1swXSArIGluU2l6ZVswXSAqIDEsIGluUG9zWzFdICsgaW5TaXplWzFdICogMCwgMF0sXG4gICAgICBbaW5Qb3NbMF0gKyBpblNpemVbMF0gKiAxLCBpblBvc1sxXSArIGluU2l6ZVsxXSAqIDEsIDBdLFxuICAgICAgW2luUG9zWzBdICsgaW5TaXplWzBdICogMCwgaW5Qb3NbMV0gKyBpblNpemVbMV0gKiAxLCAwXVxuICAgIF07XG5cbiAgICBpblN0YWNrUmVuZGVyZXJzLnB1c2hMaW5lKGFsbFZlcnRpY2VzWzBdLCBhbGxWZXJ0aWNlc1sxXSwgWzEsIDEsIDFdKTtcbiAgICBpblN0YWNrUmVuZGVyZXJzLnB1c2hMaW5lKGFsbFZlcnRpY2VzWzFdLCBhbGxWZXJ0aWNlc1syXSwgWzEsIDEsIDFdKTtcbiAgICBpblN0YWNrUmVuZGVyZXJzLnB1c2hMaW5lKGFsbFZlcnRpY2VzWzJdLCBhbGxWZXJ0aWNlc1szXSwgWzEsIDEsIDFdKTtcbiAgICBpblN0YWNrUmVuZGVyZXJzLnB1c2hMaW5lKGFsbFZlcnRpY2VzWzNdLCBhbGxWZXJ0aWNlc1swXSwgWzEsIDEsIDFdKTtcbiAgfSAvLyBib3JkZXJcblxuICB7XG4gICAgLy8gZGl2aWRlcnNcblxuICAgIGZvciAoXG4gICAgICBsZXQgY3VyckRpdmlkZXIgPSBrX2RpdmlkZXI7XG4gICAgICBjdXJyRGl2aWRlciA8IGtfdmVydGljYWxTaXplO1xuICAgICAgY3VyckRpdmlkZXIgKz0ga19kaXZpZGVyXG4gICAgKSB7XG4gICAgICBjb25zdCByYXRpbyA9IGN1cnJEaXZpZGVyIC8ga192ZXJ0aWNhbFNpemU7XG5cbiAgICAgIGNvbnN0IHBvaW50QTogZ2xtLlJlYWRvbmx5VmVjMyA9IFtcbiAgICAgICAgaW5Qb3NbMF0gKyAwLFxuICAgICAgICBpblBvc1sxXSArIGluU2l6ZVsxXSAqIHJhdGlvLFxuICAgICAgICAwXG4gICAgICBdO1xuICAgICAgY29uc3QgcG9pbnRCOiBnbG0uUmVhZG9ubHlWZWMzID0gW1xuICAgICAgICBpblBvc1swXSArIGluU2l6ZVswXSxcbiAgICAgICAgaW5Qb3NbMV0gKyBpblNpemVbMV0gKiByYXRpbyxcbiAgICAgICAgMFxuICAgICAgXTtcblxuICAgICAgaW5TdGFja1JlbmRlcmVycy5wdXNoTGluZShwb2ludEEsIHBvaW50QiwgWzAuNSwgMC41LCAwLjVdKTtcbiAgICB9XG4gIH0gLy8gZGl2aWRlcnNcblxuICB7XG4gICAgLy8gY3VydmVcblxuICAgIGlmIChpbkZyYW1lUHJvZmlsZXIuZnJhbWVzRGVsdGEubGVuZ3RoID49IDIpIHtcbiAgICAgIGNvbnN0IHdpZHRoU3RlcCA9IGluU2l6ZVswXSAvIGluRnJhbWVQcm9maWxlci5mcmFtZXNEZWx0YS5sZW5ndGg7XG5cbiAgICAgIGxldCBwcmV2RGVsdGEgPSBpbkZyYW1lUHJvZmlsZXIuZnJhbWVzRGVsdGFbMF07XG4gICAgICBsZXQgcHJldkNvb3JkWCA9IDA7XG4gICAgICBsZXQgcHJldkNvb3JkWSA9IChpblNpemVbMV0gKiBwcmV2RGVsdGEpIC8ga192ZXJ0aWNhbFNpemU7XG5cbiAgICAgIGZvciAobGV0IGlpID0gMTsgaWkgPCBpbkZyYW1lUHJvZmlsZXIuZnJhbWVzRGVsdGEubGVuZ3RoOyArK2lpKSB7XG4gICAgICAgIGNvbnN0IGN1cnJEZWx0YSA9IGluRnJhbWVQcm9maWxlci5mcmFtZXNEZWx0YVtpaV07XG4gICAgICAgIGNvbnN0IGN1cnJDb29yZFggPSBpaSAqIHdpZHRoU3RlcDtcbiAgICAgICAgY29uc3QgY3VyckNvb3JkWSA9IChpblNpemVbMV0gKiBjdXJyRGVsdGEpIC8ga192ZXJ0aWNhbFNpemU7XG5cbiAgICAgICAgY29uc3QgcG9pbnRBOiBnbG0uUmVhZG9ubHlWZWMzID0gW1xuICAgICAgICAgIGluUG9zWzBdICsgcHJldkNvb3JkWCxcbiAgICAgICAgICBpblBvc1sxXSArIHByZXZDb29yZFksXG4gICAgICAgICAgMFxuICAgICAgICBdO1xuICAgICAgICBjb25zdCBwb2ludEI6IGdsbS5SZWFkb25seVZlYzMgPSBbXG4gICAgICAgICAgaW5Qb3NbMF0gKyBjdXJyQ29vcmRYLFxuICAgICAgICAgIGluUG9zWzFdICsgY3VyckNvb3JkWSxcbiAgICAgICAgICAwXG4gICAgICAgIF07XG5cbiAgICAgICAgaW5TdGFja1JlbmRlcmVycy5wdXNoTGluZShwb2ludEEsIHBvaW50QiwgWzEsIDEsIDFdKTtcblxuICAgICAgICBwcmV2RGVsdGEgPSBjdXJyRGVsdGE7XG4gICAgICAgIHByZXZDb29yZFggPSBjdXJyQ29vcmRYO1xuICAgICAgICBwcmV2Q29vcmRZID0gY3VyckNvb3JkWTtcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gY3VydmVcblxuICB7XG4gICAgLy8gY291bnRlclxuXG4gICAgY29uc3Qga190ZXh0U2NhbGUgPSAxNDtcbiAgICBjb25zdCBrX3RleHRIU2NhbGUgPSBrX3RleHRTY2FsZSAqIDAuNTtcblxuICAgIGNvbnN0IGF2ZXJhZ2VWYWx1ZSA9IGluRnJhbWVQcm9maWxlci5hdmVyYWdlRGVsdGE7XG4gICAgY29uc3QgbWF4VmFsdWUgPSBpbkZyYW1lUHJvZmlsZXIubWF4RGVsdGE7XG4gICAgY29uc3QgbWluVmFsdWUgPSBpbkZyYW1lUHJvZmlsZXIubWluRGVsdGE7XG5cbiAgICBsZXQgYXZlcmFnZVN0ciA9IGB+JHthdmVyYWdlVmFsdWUudG9GaXhlZCgwKX1tc2A7XG4gICAgbGV0IG1heFN0ciA9IGA8JHttYXhWYWx1ZX1tc2A7XG4gICAgbGV0IG1pblN0ciA9IGA+JHttaW5WYWx1ZX1tc2A7XG5cbiAgICBpZiAoaW5TaG93RnBzID09PSB0cnVlKSB7XG4gICAgICBjb25zdCBfZ2V0RnBzU3RyID0gKGluVmFsOiBudW1iZXIpID0+XG4gICAgICAgIGluVmFsIDwgOTk5ID8gaW5WYWwudG9GaXhlZCgwKSA6ICc/Pz8nO1xuXG4gICAgICBhdmVyYWdlU3RyICs9IGBcXG5+JHtfZ2V0RnBzU3RyKDEwMDAgLyBhdmVyYWdlVmFsdWUpfWZwc2A7XG4gICAgICBtYXhTdHIgKz0gYFxcbjwke19nZXRGcHNTdHIoMTAwMCAvIG1heFZhbHVlKX1mcHNgO1xuICAgICAgbWluU3RyICs9IGBcXG4+JHtfZ2V0RnBzU3RyKDEwMDAgLyBtaW5WYWx1ZSl9ZnBzYDtcbiAgICB9XG5cbiAgICBpblRleHRSZW5kZXJlclxuICAgICAgLnNldFRleHRTY2FsZShrX3RleHRTY2FsZSlcbiAgICAgIC5zZXRUZXh0QWxpZ24oJ2xlZnQnLCAndG9wJylcbiAgICAgIC5zZXRUZXh0Q29sb3IoMS4wLCAxLjAsIDAuNzUpXG4gICAgICAucHVzaFRleHQoYXZlcmFnZVN0ciwgW2luUG9zWzBdICsgNywgaW5Qb3NbMV0gLSA4XSlcbiAgICAgIC5zZXRUZXh0QWxpZ24oJ2xlZnQnLCAnY2VudGVyZWQnKVxuICAgICAgLnNldFRleHRDb2xvcigxLjAsIDAuNzUsIDAuNzUpXG4gICAgICAucHVzaFRleHQobWF4U3RyLCBbXG4gICAgICAgIGluUG9zWzBdICsgaW5TaXplWzBdICsga190ZXh0SFNjYWxlLFxuICAgICAgICBpblBvc1sxXSArIGluU2l6ZVsxXSAtIGtfdGV4dEhTY2FsZSAqIDFcbiAgICAgIF0pXG4gICAgICAuc2V0VGV4dENvbG9yKDAuNzUsIDEuMCwgMC43NSlcbiAgICAgIC5wdXNoVGV4dChtaW5TdHIsIFtcbiAgICAgICAgaW5Qb3NbMF0gKyBpblNpemVbMF0gKyBrX3RleHRIU2NhbGUsXG4gICAgICAgIGluUG9zWzFdICsga190ZXh0SFNjYWxlICogMVxuICAgICAgXSlcbiAgICAgIC5zZXRUZXh0Q29sb3IoMS4wLCAxLjAsIDEuMCk7XG4gIH0gLy8gY291bnRlclxufTtcbiIsCiAgImV4cG9ydCBjb25zdCBnZXRJbWFnZUZyb21VcmwgPSAodXJsOiBzdHJpbmcpOiBQcm9taXNlPEhUTUxJbWFnZUVsZW1lbnQ+ID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPEhUTUxJbWFnZUVsZW1lbnQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgIGltYWdlLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgaW1hZ2Uub25sb2FkID0gKCkgPT4ge1xuICAgICAgcmVzb2x2ZShpbWFnZSk7XG4gICAgfTtcbiAgICBpbWFnZS5zcmMgPSB1cmw7XG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IGZldGNoSW1hZ2VCdWZmZXIgPSBhc3luYyAoXG4gIHVybDogc3RyaW5nLFxuICBvblByb2dyZXNzPzogKHJlY2VpdmVkOiBudW1iZXIsIHRvdGFsOiBudW1iZXIpID0+IHZvaWRcbik6IFByb21pc2U8eyBidWZmZXI6IFVpbnQ4QXJyYXk7IHR5cGU6IHN0cmluZyB9PiA9PiB7XG4gIC8vIFN0ZXAgMTogc3RhcnQgdGhlIGZldGNoIGFuZCBvYnRhaW4gYSByZWFkZXJcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwpO1xuICBjb25zdCByZWFkZXIgPSByZXNwb25zZS5ib2R5IS5nZXRSZWFkZXIoKTtcblxuICAvLyBTdGVwIDI6IGdldCB0b3RhbCBsZW5ndGhcbiAgY29uc3QgY29udGVudExlbmd0aCA9ICtyZXNwb25zZS5oZWFkZXJzLmdldCgnQ29udGVudC1MZW5ndGgnKSE7XG4gIGNvbnN0IGNvbnRlbnRUeXBlID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoJ0NvbnRlbnQtVHlwZScpITtcblxuICBsZXQgbGFzdFBlcmNlbnQgPSAwO1xuXG4gIC8vIFN0ZXAgMzogcmVhZCB0aGUgZGF0YVxuICBsZXQgcmVjZWl2ZWRMZW5ndGggPSAwOyAvLyByZWNlaXZlZCB0aGF0IG1hbnkgYnl0ZXMgYXQgdGhlIG1vbWVudFxuICBsZXQgY2h1bmtzID0gW107IC8vIGFycmF5IG9mIHJlY2VpdmVkIGJpbmFyeSBjaHVua3MgKGNvbXByaXNlcyB0aGUgYm9keSlcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuXG4gICAgaWYgKGRvbmUpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNodW5rcy5wdXNoKHZhbHVlKTtcbiAgICByZWNlaXZlZExlbmd0aCArPSB2YWx1ZS5sZW5ndGg7XG5cbiAgICBpZiAob25Qcm9ncmVzcykge1xuICAgICAgLy8gY29uc3QgY3VycmVudFBlcmNlbnQgPSBNYXRoLmZsb29yKHJlY2VpdmVkTGVuZ3RoIC8gY29udGVudExlbmd0aCAqIDEwMCk7XG4gICAgICAvLyBpZiAobGFzdFBlcmNlbnQgIT09IGN1cnJlbnRQZXJjZW50KSB7XG4gICAgICAvLyAgIGxhc3RQZXJjZW50ID0gY3VycmVudFBlcmNlbnQ7XG4gICAgICBvblByb2dyZXNzKHJlY2VpdmVkTGVuZ3RoLCBjb250ZW50TGVuZ3RoKTtcbiAgICAgIC8vIH1cbiAgICB9XG5cbiAgICAvLyBjb25zb2xlLmxvZyhgUmVjZWl2ZWQgJHtyZWNlaXZlZExlbmd0aH0gb2YgJHtjb250ZW50TGVuZ3RofWApO1xuICB9XG5cbiAgLy8gU3RlcCA0OiBjb25jYXRlbmF0ZSBjaHVua3MgaW50byBzaW5nbGUgVWludDhBcnJheVxuICBjb25zdCBjaHVua3NBbGwgPSBuZXcgVWludDhBcnJheShyZWNlaXZlZExlbmd0aCk7IC8vICg0LjEpXG4gIGxldCBwb3NpdGlvbiA9IDA7XG4gIGZvciAobGV0IGNodW5rIG9mIGNodW5rcykge1xuICAgIGNodW5rc0FsbC5zZXQoY2h1bmssIHBvc2l0aW9uKTsgLy8gKDQuMilcbiAgICBwb3NpdGlvbiArPSBjaHVuay5sZW5ndGg7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGJ1ZmZlcjogY2h1bmtzQWxsLFxuICAgIHR5cGU6IGNvbnRlbnRUeXBlXG4gIH07XG5cbiAgLy8gLy8gU3RlcCA1OiBkZWNvZGUgaW50byBhIHN0cmluZ1xuICAvLyBsZXQgcmVzdWx0ID0gbmV3IFRleHREZWNvZGVyKFwidXRmLThcIikuZGVjb2RlKGNodW5rc0FsbCk7XG5cbiAgLy8gLy8gV2UncmUgZG9uZSFcbiAgLy8gbGV0IGNvbW1pdHMgPSBKU09OLnBhcnNlKHJlc3VsdCk7XG4gIC8vIGFsZXJ0KGNvbW1pdHNbMF0uYXV0aG9yLmxvZ2luKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRJbWFnZUZyb21CdWZmZXIgPSBhc3luYyAoXG4gIGJ1ZmZlcjogVWludDhBcnJheSxcbiAgdHlwZTogc3RyaW5nXG4pOiBQcm9taXNlPEhUTUxJbWFnZUVsZW1lbnQ+ID0+IHtcbiAgLy8gZmV0Y2hJbWFnZUJ1ZmZlcigpO1xuICByZXR1cm4gbmV3IFByb21pc2U8SFRNTEltYWdlRWxlbWVudD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKCk7XG4gICAgaW1hZ2Uub25lcnJvciA9IHJlamVjdDtcbiAgICBpbWFnZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICByZXNvbHZlKGltYWdlKTtcbiAgICB9O1xuICAgIGltYWdlLnNyYyA9IFVSTC5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2IoW2J1ZmZlcl0sIHsgdHlwZSB9IC8qICgxKSAqLykpO1xuICB9KTtcblxuICAvLyBjb25zdCB0bXBJbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAvLyB0bXBJbWFnZS5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKFxuICAvLyAgIG5ldyBCbG9iKFtidWZmZXJdLCB7IHR5cGUgfSAvKiAoMSkgKi8pXG4gIC8vICk7XG5cbiAgLy8gcmV0dXJuIHRtcEltYWdlO1xufTtcblxuLy8gLy8gU21hbGwgcmVkIGRvdCBpbWFnZVxuLy8gY29uc3QgY29udGVudCA9IG5ldyBVaW50OEFycmF5KFsxMzcsIDgwLCA3OCwgNzEsIDEzLCAxMCwgMjYsIDEwLCAwLCAwLCAwLCAxMywgNzMsIDcyLCA2OCwgODIsIDAsIDAsIDAsIDUsIDAsIDAsIDAsIDUsIDgsIDYsIDAsIDAsIDAsIDE0MSwgMTExLCAzOCwgMjI5LCAwLCAwLCAwLCAyOCwgNzMsIDY4LCA2NSwgODQsIDgsIDIxNSwgOTksIDI0OCwgMjU1LCAyNTUsIDYzLCAxOTUsIDEyNywgNiwgMzIsIDUsIDE5NSwgMzIsIDE4LCAxMzIsIDIwOCwgNDksIDI0MSwgMTMwLCA4OCwgMjA1LCA0LCAwLCAxNCwgMjQ1LCA1MywgMjAzLCAyMDksIDE0MiwgMTQsIDMxLCAwLCAwLCAwLCAwLCA3MywgNjksIDc4LCA2OCwgMTc0LCA2NiwgOTYsIDEzMF0pO1xuXG4vLyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbXktaW1nJykuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChcbi8vICAgbmV3IEJsb2IoW2NvbnRlbnQuYnVmZmVyXSwgeyB0eXBlOiAnaW1hZ2UvcG5nJyB9IC8qICgxKSAqLylcbi8vICk7XG4iLAogICJpbXBvcnQgeyBJVmVydGV4IH0gZnJvbSAnLi9JVmVydGV4JztcblxuaW1wb3J0ICogYXMgZ2xtIGZyb20gJ2dsLW1hdHJpeCc7XG5cbi8vIGV4cG9ydCBpbnRlcmZhY2UgSVZlcnRleCB7XG4vLyAgIHBvczogZ2xtLnZlYzM7XG4vLyAgIG5vcm1hbDogZ2xtLnZlYzM7XG4vLyB9XG5cbmV4cG9ydCBjb25zdCBtYWtlQm94ID0gKGluU2l6ZTogZ2xtLlJlYWRvbmx5VmVjMyk6IElWZXJ0ZXhbXSA9PiB7XG4gIGNvbnN0IGhTaXplWCA9IGluU2l6ZVswXSAqIDAuNTtcbiAgY29uc3QgaFNpemVZID0gaW5TaXplWzFdICogMC41O1xuICBjb25zdCBoU2l6ZVogPSBpblNpemVbMl0gKiAwLjU7XG5cbiAgY29uc3QgYWxsTm9ybWFsczogZ2xtLlJlYWRvbmx5VmVjM1tdID0gW107XG4gIGFsbE5vcm1hbHMucHVzaChbLTEsIDAsIDBdKTsgLy8gMFxuICBhbGxOb3JtYWxzLnB1c2goWysxLCAwLCAwXSk7IC8vIDFcbiAgYWxsTm9ybWFscy5wdXNoKFswLCAtMSwgMF0pOyAvLyAyXG4gIGFsbE5vcm1hbHMucHVzaChbMCwgKzEsIDBdKTsgLy8gM1xuICBhbGxOb3JtYWxzLnB1c2goWzAsIDAsIC0xXSk7IC8vIDRcbiAgYWxsTm9ybWFscy5wdXNoKFswLCAwLCArMV0pOyAvLyA1XG5cbiAgY29uc3QgYWxsVmVydGljZXM6IGdsbS5SZWFkb25seVZlYzNbXSA9IFtdO1xuICBhbGxWZXJ0aWNlcy5wdXNoKFstaFNpemVYLCAtaFNpemVZLCAtaFNpemVaXSk7IC8vIDBcbiAgYWxsVmVydGljZXMucHVzaChbK2hTaXplWCwgLWhTaXplWSwgLWhTaXplWl0pOyAvLyAxXG4gIGFsbFZlcnRpY2VzLnB1c2goWy1oU2l6ZVgsICtoU2l6ZVksIC1oU2l6ZVpdKTsgLy8gMlxuICBhbGxWZXJ0aWNlcy5wdXNoKFsraFNpemVYLCAraFNpemVZLCAtaFNpemVaXSk7IC8vIDNcbiAgYWxsVmVydGljZXMucHVzaChbLWhTaXplWCwgLWhTaXplWSwgK2hTaXplWl0pOyAvLyA0XG4gIGFsbFZlcnRpY2VzLnB1c2goWytoU2l6ZVgsIC1oU2l6ZVksICtoU2l6ZVpdKTsgLy8gNVxuICBhbGxWZXJ0aWNlcy5wdXNoKFstaFNpemVYLCAraFNpemVZLCAraFNpemVaXSk7IC8vIDZcbiAgYWxsVmVydGljZXMucHVzaChbK2hTaXplWCwgK2hTaXplWSwgK2hTaXplWl0pOyAvLyA3XG5cbiAgLy9cblxuICBjb25zdCBhbGxJbmRpY2VzOiBnbG0uUmVhZG9ubHlWZWM0W10gPSBbXTtcblxuICAvLyAteiAwMTIzXG4gIGFsbEluZGljZXMucHVzaChbMCwgMiwgMSwgLypub3JtYWwgPT4gKi8gNF0pO1xuICBhbGxJbmRpY2VzLnB1c2goWzIsIDMsIDEsIC8qbm9ybWFsID0+ICovIDRdKTtcbiAgLy8gK3ogNDU2N1xuICBhbGxJbmRpY2VzLnB1c2goWzQsIDUsIDYsIC8qbm9ybWFsID0+ICovIDVdKTtcbiAgYWxsSW5kaWNlcy5wdXNoKFs2LCA1LCA3LCAvKm5vcm1hbCA9PiAqLyA1XSk7XG5cbiAgLy8gK3ggMTM1N1xuICBhbGxJbmRpY2VzLnB1c2goWzEsIDMsIDUsIC8qbm9ybWFsID0+ICovIDFdKTtcbiAgYWxsSW5kaWNlcy5wdXNoKFs1LCAzLCA3LCAvKm5vcm1hbCA9PiAqLyAxXSk7XG4gIC8vIC14IDAyNDZcbiAgYWxsSW5kaWNlcy5wdXNoKFswLCA0LCAyLCAvKm5vcm1hbCA9PiAqLyAwXSk7XG4gIGFsbEluZGljZXMucHVzaChbNCwgNiwgMiwgLypub3JtYWwgPT4gKi8gMF0pO1xuXG4gIC8vICt5IDIzNjdcbiAgYWxsSW5kaWNlcy5wdXNoKFsyLCA2LCAzLCAvKm5vcm1hbCA9PiAqLyAzXSk7XG4gIGFsbEluZGljZXMucHVzaChbNiwgNywgMywgLypub3JtYWwgPT4gKi8gM10pO1xuICAvLyAteSAwMTQ1XG4gIGFsbEluZGljZXMucHVzaChbMCwgMSwgNCwgLypub3JtYWwgPT4gKi8gMl0pO1xuICBhbGxJbmRpY2VzLnB1c2goWzQsIDEsIDUsIC8qbm9ybWFsID0+ICovIDJdKTtcblxuICAvLyBjb25zdCBmaW5hbFZlcnRpY2VzOiBudW1iZXJbXSA9IFtdO1xuICBjb25zdCB2ZXJ0aWNlczogSVZlcnRleFtdID0gW107XG5cbiAgZm9yIChjb25zdCBpbmRleCBvZiBhbGxJbmRpY2VzKSB7XG4gICAgdmVydGljZXMucHVzaCh7XG4gICAgICBwb3M6IGdsbS52ZWMzLmNvcHkoWzAsIDAsIDBdLCBhbGxWZXJ0aWNlc1tpbmRleFswXV0pLFxuICAgICAgbm9ybWFsOiBnbG0udmVjMy5jb3B5KFswLCAwLCAwXSwgYWxsTm9ybWFsc1tpbmRleFszXV0pXG4gICAgfSk7XG4gICAgdmVydGljZXMucHVzaCh7XG4gICAgICBwb3M6IGdsbS52ZWMzLmNvcHkoWzAsIDAsIDBdLCBhbGxWZXJ0aWNlc1tpbmRleFsxXV0pLFxuICAgICAgbm9ybWFsOiBnbG0udmVjMy5jb3B5KFswLCAwLCAwXSwgYWxsTm9ybWFsc1tpbmRleFszXV0pXG4gICAgfSk7XG4gICAgdmVydGljZXMucHVzaCh7XG4gICAgICBwb3M6IGdsbS52ZWMzLmNvcHkoWzAsIDAsIDBdLCBhbGxWZXJ0aWNlc1tpbmRleFsyXV0pLFxuICAgICAgbm9ybWFsOiBnbG0udmVjMy5jb3B5KFswLCAwLCAwXSwgYWxsTm9ybWFsc1tpbmRleFszXV0pXG4gICAgfSk7XG5cbiAgICAvLyBmaW5hbFZlcnRpY2VzLnB1c2goYWxsVmVydGljZXNbaW5kZXhbMF1dWzBdKTtcbiAgICAvLyBmaW5hbFZlcnRpY2VzLnB1c2goYWxsVmVydGljZXNbaW5kZXhbMF1dWzFdKTtcbiAgICAvLyBmaW5hbFZlcnRpY2VzLnB1c2goYWxsVmVydGljZXNbaW5kZXhbMF1dWzJdKTtcblxuICAgIC8vIGlmIChpbkFkZE5vcm1hbHMpIHtcbiAgICAvLyAgIGZpbmFsVmVydGljZXMucHVzaChhbGxOb3JtYWxzW2luZGV4WzNdXVswXSk7XG4gICAgLy8gICBmaW5hbFZlcnRpY2VzLnB1c2goYWxsTm9ybWFsc1tpbmRleFszXV1bMV0pO1xuICAgIC8vICAgZmluYWxWZXJ0aWNlcy5wdXNoKGFsbE5vcm1hbHNbaW5kZXhbM11dWzJdKTtcbiAgICAvLyB9XG5cbiAgICAvLyBmaW5hbFZlcnRpY2VzLnB1c2goYWxsVmVydGljZXNbaW5kZXhbMV1dWzBdKTtcbiAgICAvLyBmaW5hbFZlcnRpY2VzLnB1c2goYWxsVmVydGljZXNbaW5kZXhbMV1dWzFdKTtcbiAgICAvLyBmaW5hbFZlcnRpY2VzLnB1c2goYWxsVmVydGljZXNbaW5kZXhbMV1dWzJdKTtcblxuICAgIC8vIGlmIChpbkFkZE5vcm1hbHMpIHtcbiAgICAvLyAgIGZpbmFsVmVydGljZXMucHVzaChhbGxOb3JtYWxzW2luZGV4WzNdXVswXSk7XG4gICAgLy8gICBmaW5hbFZlcnRpY2VzLnB1c2goYWxsTm9ybWFsc1tpbmRleFszXV1bMV0pO1xuICAgIC8vICAgZmluYWxWZXJ0aWNlcy5wdXNoKGFsbE5vcm1hbHNbaW5kZXhbM11dWzJdKTtcbiAgICAvLyB9XG5cbiAgICAvLyBmaW5hbFZlcnRpY2VzLnB1c2goYWxsVmVydGljZXNbaW5kZXhbMl1dWzBdKTtcbiAgICAvLyBmaW5hbFZlcnRpY2VzLnB1c2goYWxsVmVydGljZXNbaW5kZXhbMl1dWzFdKTtcbiAgICAvLyBmaW5hbFZlcnRpY2VzLnB1c2goYWxsVmVydGljZXNbaW5kZXhbMl1dWzJdKTtcblxuICAgIC8vIGlmIChpbkFkZE5vcm1hbHMpIHtcbiAgICAvLyAgIGZpbmFsVmVydGljZXMucHVzaChhbGxOb3JtYWxzW2luZGV4WzNdXVswXSk7XG4gICAgLy8gICBmaW5hbFZlcnRpY2VzLnB1c2goYWxsTm9ybWFsc1tpbmRleFszXV1bMV0pO1xuICAgIC8vICAgZmluYWxWZXJ0aWNlcy5wdXNoKGFsbE5vcm1hbHNbaW5kZXhbM11dWzJdKTtcbiAgICAvLyB9XG4gIH1cblxuICByZXR1cm4gdmVydGljZXM7XG59O1xuIiwKICAiaW1wb3J0IHsgSVZlcnRleCB9IGZyb20gJy4vSVZlcnRleCc7XG5cbmltcG9ydCAqIGFzIGdsbSBmcm9tICdnbC1tYXRyaXgnO1xuXG4vLyBleHBvcnQgaW50ZXJmYWNlIElWZXJ0ZXgge1xuLy8gICBwb3M6IGdsbS52ZWMzO1xuLy8gICBub3JtYWw6IGdsbS52ZWMzO1xuLy8gfVxuXG5jb25zdCBfZHJhd1NwaGVyZVBhdGNoID0gKFxuICB2ZXJ0aWNlczogSVZlcnRleFtdLFxuICBxdWFsaXR5OiBudW1iZXIsXG4gIHJhZGl1czogbnVtYmVyLFxuICB2MDE6IGdsbS5SZWFkb25seVZlYzMsXG4gIHYwMjogZ2xtLlJlYWRvbmx5VmVjMyxcbiAgdjAzOiBnbG0uUmVhZG9ubHlWZWMzXG4pID0+IHtcbiAgaWYgKHF1YWxpdHkgPD0gMCkge1xuICAgIC8vIGhhY2s6IHBvc2l0aW9uID0gbm9ybWFsXG4gICAgdmVydGljZXMucHVzaCh7XG4gICAgICBwb3M6IGdsbS52ZWMzLnNjYWxlKGdsbS52ZWMzLmNyZWF0ZSgpLCB2MDEsIHJhZGl1cyksXG4gICAgICBub3JtYWw6IGdsbS52ZWMzLmNvcHkoZ2xtLnZlYzMuY3JlYXRlKCksIHYwMSlcbiAgICB9KTtcbiAgICB2ZXJ0aWNlcy5wdXNoKHtcbiAgICAgIHBvczogZ2xtLnZlYzMuc2NhbGUoZ2xtLnZlYzMuY3JlYXRlKCksIHYwMywgcmFkaXVzKSxcbiAgICAgIG5vcm1hbDogZ2xtLnZlYzMuY29weShnbG0udmVjMy5jcmVhdGUoKSwgdjAzKVxuICAgIH0pO1xuICAgIHZlcnRpY2VzLnB1c2goe1xuICAgICAgcG9zOiBnbG0udmVjMy5zY2FsZShnbG0udmVjMy5jcmVhdGUoKSwgdjAyLCByYWRpdXMpLFxuICAgICAgbm9ybWFsOiBnbG0udmVjMy5jb3B5KGdsbS52ZWMzLmNyZWF0ZSgpLCB2MDIpXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgdjEyID0gZ2xtLnZlYzMubm9ybWFsaXplKFxuICAgICAgZ2xtLnZlYzMuY3JlYXRlKCksXG4gICAgICBnbG0udmVjMy5sZXJwKGdsbS52ZWMzLmNyZWF0ZSgpLCB2MDEsIHYwMiwgMC41KVxuICAgICk7XG4gICAgY29uc3QgdjIzID0gZ2xtLnZlYzMubm9ybWFsaXplKFxuICAgICAgZ2xtLnZlYzMuY3JlYXRlKCksXG4gICAgICBnbG0udmVjMy5sZXJwKGdsbS52ZWMzLmNyZWF0ZSgpLCB2MDIsIHYwMywgMC41KVxuICAgICk7XG4gICAgY29uc3QgdjMxID0gZ2xtLnZlYzMubm9ybWFsaXplKFxuICAgICAgZ2xtLnZlYzMuY3JlYXRlKCksXG4gICAgICBnbG0udmVjMy5sZXJwKGdsbS52ZWMzLmNyZWF0ZSgpLCB2MDMsIHYwMSwgMC41KVxuICAgICk7XG5cbiAgICBxdWFsaXR5IC09IDE7XG5cbiAgICBfZHJhd1NwaGVyZVBhdGNoKHZlcnRpY2VzLCBxdWFsaXR5LCByYWRpdXMsIHYwMSwgdjEyLCB2MzEpO1xuICAgIF9kcmF3U3BoZXJlUGF0Y2godmVydGljZXMsIHF1YWxpdHksIHJhZGl1cywgdjEyLCB2MDIsIHYyMyk7XG4gICAgX2RyYXdTcGhlcmVQYXRjaCh2ZXJ0aWNlcywgcXVhbGl0eSwgcmFkaXVzLCB2MzEsIHYyMywgdjAzKTtcbiAgICBfZHJhd1NwaGVyZVBhdGNoKHZlcnRpY2VzLCBxdWFsaXR5LCByYWRpdXMsIHYxMiwgdjIzLCB2MzEpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgbWFrZVNwaGVyZSA9IChcbiAgcXVhbGl0eTogbnVtYmVyLFxuICByYWRpdXM6IG51bWJlclxuICAvLyBtb2RlbE1hdDQ6IGdsbS5SZWFkb25seU1hdDRcbik6IElWZXJ0ZXhbXSA9PiB7XG4gIGNvbnN0IGtfaWN4ID0gMC41MjU3MzExMTIxMTkxMzM2MDY7XG4gIGNvbnN0IGtfaWN6ID0gMC44NTA2NTA4MDgzNTIwMzk5MzI7XG5cbiAgY29uc3QgdG1wVmVydGljZXM6IGdsbS5SZWFkb25seVZlYzNbXSA9IFtcbiAgICBbLWtfaWN4LCAwLjAsICtrX2ljel0sXG4gICAgWytrX2ljeCwgMC4wLCAra19pY3pdLFxuICAgIFsta19pY3gsIDAuMCwgLWtfaWN6XSxcbiAgICBbK2tfaWN4LCAwLjAsIC1rX2ljel0sXG4gICAgWzAuMCwgK2tfaWN6LCAra19pY3hdLFxuICAgIFswLjAsICtrX2ljeiwgLWtfaWN4XSxcbiAgICBbMC4wLCAta19pY3osICtrX2ljeF0sXG4gICAgWzAuMCwgLWtfaWN6LCAta19pY3hdLFxuICAgIFsra19pY3osICtrX2ljeCwgMC4wXSxcbiAgICBbLWtfaWN6LCAra19pY3gsIDAuMF0sXG4gICAgWytrX2ljeiwgLWtfaWN4LCAwLjBdLFxuICAgIFsta19pY3osIC1rX2ljeCwgMC4wXVxuICBdO1xuXG4gIGNvbnN0IHRtcEluZGljZXM6IGdsbS5SZWFkb25seVZlYzNbXSA9IFtcbiAgICBbMCwgNCwgMV0sXG4gICAgWzAsIDksIDRdLFxuICAgIFs5LCA1LCA0XSxcbiAgICBbNCwgNSwgOF0sXG4gICAgWzQsIDgsIDFdLFxuICAgIFs4LCAxMCwgMV0sXG4gICAgWzgsIDMsIDEwXSxcbiAgICBbNSwgMywgOF0sXG4gICAgWzUsIDIsIDNdLFxuICAgIFsyLCA3LCAzXSxcbiAgICBbNywgMTAsIDNdLFxuICAgIFs3LCA2LCAxMF0sXG4gICAgWzcsIDExLCA2XSxcbiAgICBbMTEsIDAsIDZdLFxuICAgIFswLCAxLCA2XSxcbiAgICBbNiwgMSwgMTBdLFxuICAgIFs5LCAwLCAxMV0sXG4gICAgWzksIDExLCAyXSxcbiAgICBbOSwgMiwgNV0sXG4gICAgWzcsIDIsIDExXVxuICBdO1xuXG4gIGNvbnN0IHZlcnRpY2VzOiBJVmVydGV4W10gPSBbXTtcblxuICBmb3IgKGNvbnN0IGluZGV4IG9mIHRtcEluZGljZXMpIHtcbiAgICBfZHJhd1NwaGVyZVBhdGNoKFxuICAgICAgdmVydGljZXMsXG4gICAgICBxdWFsaXR5LFxuICAgICAgcmFkaXVzLFxuICAgICAgdG1wVmVydGljZXNbaW5kZXhbMF1dLFxuICAgICAgdG1wVmVydGljZXNbaW5kZXhbMV1dLFxuICAgICAgdG1wVmVydGljZXNbaW5kZXhbMl1dXG4gICAgKTtcbiAgfVxuXG4gIC8vIGNvbnN0IG5ld1BvcyA9IGdsbS52ZWMzLmNyZWF0ZSgpO1xuICAvLyAvLyBjb25zdCBuZXdOb3JtID0gZ2xtLnZlYzMuY3JlYXRlKCk7XG4gIC8vIC8vIGNvbnN0IG1vZGVsTWF0MyA9IGdsbS5tYXQzLmZyb21NYXQ0KGdsbS5tYXQzLmNyZWF0ZSgpLCBtb2RlbE1hdDQpO1xuXG4gIC8vIGZvciAoY29uc3QgdmVydGV4IG9mIHZlcnRpY2VzKSB7XG4gIC8vICAgZ2xtLnZlYzMudHJhbnNmb3JtTWF0NChuZXdQb3MsIHZlcnRleC5wb3MsIG1vZGVsTWF0NCk7XG4gIC8vICAgZ2xtLnZlYzMuY29weSh2ZXJ0ZXgucG9zLCBuZXdQb3MpO1xuICAvLyB9XG5cbiAgcmV0dXJuIHZlcnRpY2VzO1xuXG4gIC8vIHJldHVybiB2ZXJ0aWNlcy5tYXAoKHZlcnRleCkgPT4ge1xuXG4gIC8vICAgZ2xtLnZlYzMudHJhbnNmb3JtTWF0NChuZXdQb3MsIHZlcnRleC5wb3MsIG1vZGVsTWF0NCk7XG4gIC8vICAgLy8gZ2xtLnZlYzMudHJhbnNmb3JtTWF0MyhuZXdOb3JtLCB2ZXJ0ZXgubm9ybWFsLCBtb2RlbE1hdDMpO1xuXG4gIC8vICAgcmV0dXJuIHtcbiAgLy8gICAgIHBvczogZ2xtLnZlYzMuY29weShnbG0udmVjMy5jcmVhdGUoKSwgbmV3UG9zKSxcbiAgLy8gICB9XG4gIC8vICAgLy8gICBuZXdQb3NbMF0sXG4gIC8vICAgLy8gICBuZXdQb3NbMV0sXG4gIC8vICAgLy8gICBuZXdQb3NbMl0sXG4gIC8vICAgLy8gICB2ZXJ0ZXgubm9ybWFsWzBdLFxuICAvLyAgIC8vICAgdmVydGV4Lm5vcm1hbFsxXSxcbiAgLy8gICAvLyAgIHZlcnRleC5ub3JtYWxbMl1cbiAgLy8gICAvLyBdO1xuICAvLyB9KVxuICAvLyAgIC8vIC5mbGF0KCk7XG59O1xuIiwKICAiZXhwb3J0IGNsYXNzIExvZ2dlciB7XG4gIHByaXZhdGUgX3RleHRBcmVhRWxlbWVudDogSFRNTFRleHRBcmVhRWxlbWVudDtcblxuICBwcml2YXRlIF9saW5lczogc3RyaW5nW10gPSBbXTtcbiAgcHJpdmF0ZSBfbWF4TGluZXMgPSAzMDtcblxuICBjb25zdHJ1Y3Rvcih0ZXh0QXJlYUVsZW1lbnRJZDogc3RyaW5nKSB7XG4gICAgdGhpcy5fdGV4dEFyZWFFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXG4gICAgICB0ZXh0QXJlYUVsZW1lbnRJZFxuICAgICkgYXMgSFRNTFRleHRBcmVhRWxlbWVudDtcblxuICAgIGlmICghdGhpcy5fdGV4dEFyZWFFbGVtZW50KVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBET00gZWxlbWVudHMgbm90IGZvdW5kLCBpZD0ke3RleHRBcmVhRWxlbWVudElkfWApO1xuXG4gICAgdGhpcy5fdGV4dEFyZWFFbGVtZW50LnZhbHVlID0gJyc7IC8vIDw9IGNsZWFyIGFueSBicm93c2VyIGNhY2hlXG4gIH1cblxuICBsb2coLi4uYXJnczogYW55W10pIHtcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgIGNvbnN0IHRleHQgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKS5qb2luKCcgJyk7XG5cbiAgICBjb25zb2xlLmxvZyh0ZXh0KTtcblxuICAgIHRoaXMuX3B1c2hUZXh0KHRleHQpO1xuICB9XG5cbiAgZXJyb3IoLi4uYXJnczogYW55W10pIHtcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgIGNvbnN0IHRleHQgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKS5qb2luKCcgJyk7XG5cbiAgICBjb25zb2xlLmVycm9yKHRleHQpO1xuXG4gICAgdGhpcy5fcHVzaFRleHQoYFtFUlJdIC0gJHt0ZXh0fWApO1xuICB9XG5cbiAgX3B1c2hUZXh0KHRleHQ6IHN0cmluZykge1xuICAgIHRoaXMuX2xpbmVzLnB1c2godGV4dCk7XG4gICAgaWYgKHRoaXMuX2xpbmVzLmxlbmd0aCA+IHRoaXMuX21heExpbmVzKVxuICAgICAgdGhpcy5fbGluZXMuc3BsaWNlKDAsIHRoaXMuX2xpbmVzLmxlbmd0aCAtIHRoaXMuX21heExpbmVzKTtcblxuICAgIHRoaXMuX3RleHRBcmVhRWxlbWVudC52YWx1ZSA9IGAke3RoaXMuX2xpbmVzLmpvaW4oJ1xcbicpfVxcbmA7XG5cbiAgICAvLyBmb3JjZSBmb2N1cyBvbiBsYXN0IGxpbmVcbiAgICB0aGlzLl90ZXh0QXJlYUVsZW1lbnQuc2Nyb2xsVG9wID0gdGhpcy5fdGV4dEFyZWFFbGVtZW50LnNjcm9sbEhlaWdodDtcbiAgfVxuXG4gIHBlZWtMYXN0KCkge1xuICAgIGlmICh0aGlzLl9saW5lcy5sZW5ndGggPiAwKSByZXR1cm4gdGhpcy5fbGluZXNbdGhpcy5fbGluZXMubGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHBvcExhc3QoKSB7XG4gICAgaWYgKHRoaXMuX2xpbmVzLmxlbmd0aCA+IDApIHRoaXMuX2xpbmVzLnNwbGljZSh0aGlzLl9saW5lcy5sZW5ndGggLSAxLCAxKTtcbiAgfVxufVxuIiwKICAiZXhwb3J0IGRlZmF1bHQgYFxuI3ZlcnNpb24gMzAwIGVzXG5cbnByZWNpc2lvbiBoaWdocCBmbG9hdDtcblxuaW4gdmVjMiBhX3ZlcnRleFBvc2l0aW9uO1xuaW4gdmVjMyBhX3Bsb3RQb3NpdGlvbjtcblxub3V0IHZlYzMgdl9wb3NpdGlvbjtcblxudm9pZCBtYWluKHZvaWQpXG57XG4gIGdsX1Bvc2l0aW9uID0gdmVjNChhX3ZlcnRleFBvc2l0aW9uLCAxLjAsIDEuMCk7XG5cbiAgdl9wb3NpdGlvbiA9IGFfcGxvdFBvc2l0aW9uO1xufVxuYC50cmltKCk7IiwKICAiZXhwb3J0IGRlZmF1bHQgYFxuI3ZlcnNpb24gMzAwIGVzXG5cbnByZWNpc2lvbiBoaWdocCBmbG9hdDtcblxuLy9cbi8vXG4vL1xuXG5cbi8vIEluZGljZXMgb2YgcmVmcmFjdGlvbkZhY3RvclxuY29uc3QgZmxvYXQgQWlyID0gMS4wO1xuY29uc3QgZmxvYXQgR2xhc3MgPSAxLjUxNzE0O1xuXG4vLyBBaXIgdG8gZ2xhc3MgcmF0aW8gb2YgdGhlIGluZGljZXMgb2YgcmVmcmFjdGlvbkZhY3RvciAoRXRhKVxuY29uc3QgZmxvYXQgRXRhID0gQWlyIC8gR2xhc3M7XG5cbi8vIHNlZSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1JlZnJhY3RpdmVfaW5kZXggUmVmbGVjdGl2aXR5XG5jb25zdCBmbG9hdCBSMCA9ICgoQWlyIC0gR2xhc3MpICogKEFpciAtIEdsYXNzKSkgLyAoKEFpciArIEdsYXNzKSAqIChBaXIgKyBHbGFzcykpO1xuXG4vL1xuLy9cbi8vXG5cbnVuaWZvcm0gdmVjMyAgICAgICAgdV9jYW1lcmFFeWU7XG5cbi8vXG5cbnVuaWZvcm0gc2FtcGxlcjJEICAgdV9zY2VuZVRleHR1cmVEYXRhO1xudW5pZm9ybSBpbnQgICAgICAgICB1X3NjZW5lVGV4dHVyZVNpemU7XG5cbnVuaWZvcm0gaW50ICAgICAgIHVfc3BoZXJlc1N0YXJ0O1xudW5pZm9ybSBpbnQgICAgICAgdV9zcGhlcmVzU3RvcDtcblxudW5pZm9ybSBpbnQgICAgICAgdV9ib3hlc1N0YXJ0O1xudW5pZm9ybSBpbnQgICAgICAgdV9ib3hlc1N0b3A7XG5cbnVuaWZvcm0gaW50ICAgICAgIHVfdHJpYW5nbGVzU3RhcnQ7XG51bmlmb3JtIGludCAgICAgICB1X3RyaWFuZ2xlc1N0b3A7XG5cbi8vXG5cbnVuaWZvcm0gc2FtcGxlcjJEICAgdV9saWdodHNUZXh0dXJlRGF0YTtcblxudW5pZm9ybSBpbnQgICAgICAgdV9zdW5MaWdodHNTdGFydDtcbnVuaWZvcm0gaW50ICAgICAgIHVfc3VuTGlnaHRzU3RvcDtcblxudW5pZm9ybSBpbnQgICAgICAgdV9zcG90TGlnaHRzU3RhcnQ7XG51bmlmb3JtIGludCAgICAgICB1X3Nwb3RMaWdodHNTdG9wO1xuXG4vL1xuLy9cbi8vXG5cbmluIHZlYzMgIHZfcG9zaXRpb247XG5cbm91dCB2ZWM0IG9fY29sb3I7XG5cbi8vXG5cbmNvbnN0IGZsb2F0ICAgICBnX2FtYmlhbnRMaWdodCA9IDAuMDU7XG5cbmNvbnN0IGludCAgICAgICBnX21heFRvdGFsUmVmbGVjdGlvbiA9IDI7XG5jb25zdCBib29sICAgICAgZ19zaGFkb3dzRW5hYmxlZCA9IHRydWU7XG5cbmNvbnN0IHZlYzMgICAgICBnX2JhY2tncm91bmRDb2xvciA9IHZlYzMoMC4xKTtcblxuLy9cblxuc3RydWN0IFJheVZhbHVlc1xue1xuICB2ZWMzIG9yaWdpbjtcbiAgdmVjMyBkaXJlY3Rpb247XG59O1xuXG5zdHJ1Y3QgUmF5UmVzdWx0XG57XG4gIGJvb2wgaGFzSGl0O1xuICBmbG9hdCBkaXN0YW5jZTtcbiAgdmVjMyBwb3NpdGlvbjtcbiAgdmVjMyBub3JtYWw7XG4gIHZlYzQgY29sb3I7XG4gIGZsb2F0IHJlZmxlY3Rpb25GYWN0b3I7XG4gIGZsb2F0IHJlZnJhY3Rpb25GYWN0b3I7XG4gIGJvb2wgbGlnaHRFbmFibGVkO1xufTtcblxuLy9cbi8vXG4vL1xuLy9cbi8vXG5cbmZsb2F0IGdldFNjZW5lRGF0YUJ5SW5kZXgoaW50IGluZGV4KVxue1xuICByZXR1cm4gdGV4ZWxGZXRjaCh1X3NjZW5lVGV4dHVyZURhdGEsIGl2ZWMyKGluZGV4LCAwKSwgMCkueDtcbn1cblxudmVjMyBnZXRTY2VuZVZlYzNCeUluZGV4KGludCBpbmRleClcbntcbiAgcmV0dXJuIHZlYzMoXG4gICAgdGV4ZWxGZXRjaCh1X3NjZW5lVGV4dHVyZURhdGEsIGl2ZWMyKGluZGV4ICsgMCwgMCksIDApLngsXG4gICAgdGV4ZWxGZXRjaCh1X3NjZW5lVGV4dHVyZURhdGEsIGl2ZWMyKGluZGV4ICsgMSwgMCksIDApLngsXG4gICAgdGV4ZWxGZXRjaCh1X3NjZW5lVGV4dHVyZURhdGEsIGl2ZWMyKGluZGV4ICsgMiwgMCksIDApLnhcbiAgKTtcbn1cblxuZmxvYXQgZ2V0TGlnaHRzRGF0YUJ5SW5kZXgoaW50IGluZGV4KVxue1xuICByZXR1cm4gdGV4ZWxGZXRjaCh1X2xpZ2h0c1RleHR1cmVEYXRhLCBpdmVjMihpbmRleCwgMCksIDApLng7XG59XG5cbnZlYzMgZ2V0TGlnaHRzVmVjM0J5SW5kZXgoaW50IGluZGV4KVxue1xuICByZXR1cm4gdmVjMyhcbiAgICB0ZXhlbEZldGNoKHVfbGlnaHRzVGV4dHVyZURhdGEsIGl2ZWMyKGluZGV4ICsgMCwgMCksIDApLngsXG4gICAgdGV4ZWxGZXRjaCh1X2xpZ2h0c1RleHR1cmVEYXRhLCBpdmVjMihpbmRleCArIDEsIDApLCAwKS54LFxuICAgIHRleGVsRmV0Y2godV9saWdodHNUZXh0dXJlRGF0YSwgaXZlYzIoaW5kZXggKyAyLCAwKSwgMCkueFxuICApO1xufVxuXG4vL1xuLy9cbi8vXG4vL1xuLy9cblxuYm9vbCBpbnRlcnNlY3RTcGhlcmUoXG4gIFJheVZhbHVlcyByYXksXG4gIGZsb2F0IHJhZGl1cyxcbiAgb3V0IGZsb2F0IG91dERpc3RhbmNlLFxuICBvdXQgdmVjMyBub3JtYWxcbikge1xuICBmbG9hdCBuZWFyVmFsdWUgPSAwLjAwMTsgLy8gVE9ETzogaGFyZGNvZGVkXG4gIGZsb2F0IGZhclZhbHVlID0gMTAwLjA7IC8vIFRPRE86IGhhcmRjb2RlZFxuXG4gIGZsb2F0IGIgPSBkb3QocmF5Lm9yaWdpbiwgcmF5LmRpcmVjdGlvbik7XG4gIGZsb2F0IGMgPSBkb3QocmF5Lm9yaWdpbiwgcmF5Lm9yaWdpbikgLSByYWRpdXMgKiByYWRpdXM7XG4gIGZsb2F0IGggPSBiICogYiAtIGM7XG4gIGlmIChoIDwgMC4wKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaCA9IHNxcnQoaCk7XG5cbiAgZmxvYXQgZDEgPSAtYiAtIGg7XG4gIGlmIChkMSA+PSBuZWFyVmFsdWUgJiYgZDEgPD0gZmFyVmFsdWUpXG4gIHtcbiAgICBub3JtYWwgPSBub3JtYWxpemUocmF5Lm9yaWdpbiArIHJheS5kaXJlY3Rpb24gKiBkMSk7XG4gICAgb3V0RGlzdGFuY2UgPSBkMTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGZsb2F0IGQyID0gLWIgKyBoO1xuICBpZiAoZDIgPj0gbmVhclZhbHVlICYmIGQyIDw9IGZhclZhbHVlKVxuICB7XG4gICAgbm9ybWFsID0gbm9ybWFsaXplKHJheS5vcmlnaW4gKyByYXkuZGlyZWN0aW9uICogZDIpO1xuICAgIG91dERpc3RhbmNlID0gZDI7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmJvb2wgaW50ZXJzZWN0Qm94KFJheVZhbHVlcyByYXksIHZlYzMgYm94U2l6ZSwgb3V0IGZsb2F0IG91dERpc3RhbmNlLCBvdXQgdmVjMyBub3JtYWwpXG57XG4gIGZsb2F0IG5lYXJWYWx1ZSA9IDAuMDAxOyAvLyBUT0RPOiBoYXJkY29kZWRcbiAgZmxvYXQgZmFyVmFsdWUgPSAxMDAuMDsgLy8gVE9ETzogaGFyZGNvZGVkXG5cbiAgLy9cbiAgLy9cbiAgLy8gc2FkIGhhY2s6IGZpeCBhIHNoYWRvdyByZWxhdGVkIGJ1Z1xuXG4gIGlmIChyYXkuZGlyZWN0aW9uLnggPT0gMC4wKSByYXkuZGlyZWN0aW9uLnggPSAtMWUtODtcbiAgaWYgKHJheS5kaXJlY3Rpb24ueSA9PSAwLjApIHJheS5kaXJlY3Rpb24ueSA9IC0xZS04O1xuICBpZiAocmF5LmRpcmVjdGlvbi56ID09IDAuMCkgcmF5LmRpcmVjdGlvbi56ID0gLTFlLTg7XG5cbiAgLy8gc2FkIGhhY2s6IGZpeCBhIHNoYWRvdyByZWxhdGVkIGJ1Z1xuICAvL1xuICAvL1xuXG4gIHZlYzMgbSA9IHNpZ24ocmF5LmRpcmVjdGlvbikgLyBtYXgoYWJzKHJheS5kaXJlY3Rpb24pLCAxZS04KTtcbiAgdmVjMyBuID0gbSAqIHJheS5vcmlnaW47XG4gIHZlYzMgayA9IGFicyhtKSAqIGJveFNpemU7XG5cbiAgdmVjMyB0MSA9IC1uIC0gaztcbiAgdmVjMyB0MiA9IC1uICsgaztcblxuICBmbG9hdCB0TiA9IG1heChtYXgodDEueCwgdDEueSksIHQxLnopO1xuICBmbG9hdCB0RiA9IG1pbihtaW4odDIueCwgdDIueSksIHQyLnopO1xuXG4gIGlmICh0TiA+IHRGIHx8IHRGIDw9IDAuMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICh0TiA+PSBuZWFyVmFsdWUgJiYgdE4gPD0gZmFyVmFsdWUpXG4gIHtcbiAgICBub3JtYWwgPSBub3JtYWxpemUoLXNpZ24ocmF5LmRpcmVjdGlvbikgKiBzdGVwKHQxLnl6eCwgdDEueHl6KSAqIHN0ZXAodDEuenh5LCB0MS54eXopKTtcbiAgICBvdXREaXN0YW5jZSA9IHROO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHRGID49IG5lYXJWYWx1ZSAmJiB0RiA8PSBmYXJWYWx1ZSlcbiAge1xuICAgIG5vcm1hbCA9IG5vcm1hbGl6ZSgtc2lnbihyYXkuZGlyZWN0aW9uKSAqIHN0ZXAodDEueXp4LCB0MS54eXopICogc3RlcCh0MS56eHksIHQxLnh5eikpO1xuICAgIG91dERpc3RhbmNlID0gdEY7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmJvb2wgaW50ZXJzZWN0VHJpYW5nbGUoUmF5VmFsdWVzIHJheSwgdmVjMyB2MCwgdmVjMyB2MSwgdmVjMyB2Miwgb3V0IGZsb2F0IG91dERpc3RhbmNlLCBvdXQgdmVjMyBub3JtYWwpXG57XG4gIGZsb2F0IG5lYXJWYWx1ZSA9IDAuMDAxOyAvLyBUT0RPOiBoYXJkY29kZWRcbiAgZmxvYXQgZmFyVmFsdWUgPSAxMDAuMDsgLy8gVE9ETzogaGFyZGNvZGVkXG5cbiAgdmVjMyB2MXYwID0gdjEgLSB2MDtcbiAgdmVjMyB2MnYwID0gdjIgLSB2MDtcbiAgdmVjMyByb3YwID0gcmF5Lm9yaWdpbiAtIHYwO1xuXG4gIHZlYzMgbiA9IGNyb3NzKHYxdjAsIHYydjApO1xuICB2ZWMzIHEgPSBjcm9zcyhyb3YwLCByYXkuZGlyZWN0aW9uKTtcbiAgZmxvYXQgZCA9IDEuMCAvIGRvdChyYXkuZGlyZWN0aW9uLCBuKTtcbiAgZmxvYXQgdSA9IGQgKiBkb3QoLXEsIHYydjApO1xuICBmbG9hdCB2ID0gZCAqIGRvdChxLCB2MXYwKTtcbiAgZmxvYXQgdCA9IGQgKiBkb3QoLW4sIHJvdjApO1xuXG4gIGlmICh1IDwgMC4wIHx8IHYgPCAwLjAgfHwgKHUgKyB2KSA+IDEuMCB8fCB0IDwgbmVhclZhbHVlIHx8IHQgPiBmYXJWYWx1ZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIG5vcm1hbCA9IG5vcm1hbGl6ZSgtbik7XG4gIG91dERpc3RhbmNlID0gdDtcbiAgcmV0dXJuIHRydWU7XG59XG5cbi8vIGZsb2F0IGludGVyc2VjdFBsYW5lKFJheVZhbHVlcyByYXksIHZlYzMgbm9ybWFsLCBmbG9hdCBvZmZzZXQpXG4vLyB7XG4vLyAgICAgcmV0dXJuIC0oZG90KHJheS5vcmlnaW4sIG5vcm1hbCkgKyBvZmZzZXQpIC8gZG90KHJheS5kaXJlY3Rpb24sIG5vcm1hbCk7XG4vLyB9XG5cbi8vIGZsb2F0IGludGVyc2VjdFBsYW5lMihSYXlWYWx1ZXMgcmF5LCB2ZWMzIG5vcm1hbCwgZmxvYXQgb2Zmc2V0KVxuLy8ge1xuLy8gICAgIGZsb2F0IG5lYXJWYWx1ZSA9IDAuMDAxOyAvLyBUT0RPOiBoYXJkY29kZWRcbi8vICAgICBmbG9hdCBmYXJWYWx1ZSA9IDEwMDAuMDsgLy8gVE9ETzogaGFyZGNvZGVkXG5cbi8vICAgICBmbG9hdCBhID0gZG90KHJheS5kaXJlY3Rpb24sIG5vcm1hbCk7XG4vLyAgICAgZmxvYXQgZCA9IC0oZG90KHJheS5vcmlnaW4sIG5vcm1hbCkgKyBvZmZzZXQpIC8gYTtcblxuLy8gICAgIGlmIChhID4gMC4wIHx8IGQgPCBuZWFyVmFsdWUgfHwgZCA+IGZhclZhbHVlKVxuLy8gICAgICAgICByZXR1cm4gLTEuMDtcblxuLy8gICAgIHJldHVybiBkO1xuLy8gfVxuXG4vLyBmbG9hdCBkaXNrSW50ZXJzZWN0KFJheVZhbHVlcyByYXksIHZlYzMgY2VudGVyLCB2ZWMzIG5vcm1hbCwgZmxvYXQgcmFkaXVzKVxuLy8ge1xuLy8gICAgIHZlYzMgIG8gPSByYXkub3JpZ2luIC0gY2VudGVyO1xuLy8gICAgIGZsb2F0IHQgPSAtZG90KG5vcm1hbCwgbykgLyBkb3QocmF5LmRpcmVjdGlvbiwgbm9ybWFsKTtcbi8vICAgICB2ZWMzICBxID0gbyArIHJheS5kaXJlY3Rpb24gKiB0O1xuLy8gICAgIHJldHVybiAoZG90KHEsIHEpIDwgcmFkaXVzICogcmFkaXVzKSA/IHQgOiAtMS4wO1xuLy8gfVxuXG4vL1xuLy9cbi8vXG4vL1xuLy9cblxuYm9vbCBpbnRlcnNlY3RTY2VuZShSYXlWYWx1ZXMgcmF5LCBvdXQgUmF5UmVzdWx0IG91dEJlc3RSZXN1bHQsIGJvb2wgc2hhZG93TW9kZSlcbntcbiAgZmxvYXQgYmVzdERpc3RhbmNlID0gLTEuMDtcblxuICBvdXRCZXN0UmVzdWx0Lmhhc0hpdCA9IGZhbHNlO1xuICBvdXRCZXN0UmVzdWx0LmRpc3RhbmNlID0gLTEuMDtcblxuICBpZiAodV9zY2VuZVRleHR1cmVTaXplIDw9IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBSYXlWYWx1ZXMgdG1wUmF5O1xuICB2ZWMzIG5vcm1hbDtcblxuICBmb3IgKGludCBpbmRleCA9IHVfc3BoZXJlc1N0YXJ0OyBpbmRleCA8IHVfc3BoZXJlc1N0b3A7IGluZGV4ICs9IDEyKVxuICB7XG4gICAgYm9vbCBjYXN0U2hhZG93ID0gKGdldFNjZW5lRGF0YUJ5SW5kZXgoaW5kZXggKyA5KSAhPSAwLjApO1xuXG4gICAgaWYgKHNoYWRvd01vZGUgJiYgIWNhc3RTaGFkb3cpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHRtcFJheS5vcmlnaW4gPSByYXkub3JpZ2luO1xuICAgIHRtcFJheS5kaXJlY3Rpb24gPSByYXkuZGlyZWN0aW9uO1xuXG4gICAgdmVjMyBjZW50ZXIgPSBnZXRTY2VuZVZlYzNCeUluZGV4KGluZGV4ICsgMCk7XG5cbiAgICB0bXBSYXkub3JpZ2luIC09IGNlbnRlcjtcblxuICAgIGZsb2F0IHJhZGl1cyA9IGdldFNjZW5lRGF0YUJ5SW5kZXgoaW5kZXggKyAzKTtcblxuICAgIGZsb2F0IGN1cnJEaXN0YW5jZSA9IDAuMDtcbiAgICBpZiAoXG4gICAgICAhaW50ZXJzZWN0U3BoZXJlKHRtcFJheSwgcmFkaXVzLCBjdXJyRGlzdGFuY2UsIG5vcm1hbCkgfHxcbiAgICAgIChvdXRCZXN0UmVzdWx0LmRpc3RhbmNlID4gMC4wICYmIGN1cnJEaXN0YW5jZSA+IG91dEJlc3RSZXN1bHQuZGlzdGFuY2UpXG4gICAgKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBvdXRCZXN0UmVzdWx0Lmhhc0hpdCA9IHRydWU7XG4gICAgb3V0QmVzdFJlc3VsdC5kaXN0YW5jZSA9IGN1cnJEaXN0YW5jZTtcbiAgICBvdXRCZXN0UmVzdWx0LnBvc2l0aW9uID0gcmF5Lm9yaWdpbiArIGN1cnJEaXN0YW5jZSAqIHJheS5kaXJlY3Rpb247XG4gICAgb3V0QmVzdFJlc3VsdC5ub3JtYWwgPSBub3JtYWw7XG4gICAgb3V0QmVzdFJlc3VsdC5yZWZyYWN0aW9uRmFjdG9yID0gMC4wO1xuXG4gICAgYm9vbCBjaGVzc2JvYXJkTWF0ZXJpYWxFbmFibGVkID0gKGdldFNjZW5lRGF0YUJ5SW5kZXgoaW5kZXggKyAxMSkgIT0gMC4wKTtcblxuICAgIGlmIChjaGVzc2JvYXJkTWF0ZXJpYWxFbmFibGVkKVxuICAgIHtcbiAgICAgIC8vIHZlYzMgdHhQb3MgPSAodHh4ICogdmVjNChvdXRCZXN0UmVzdWx0LnBvc2l0aW9uIC0gY2VudGVyLCAxLjApKS54eXo7XG4gICAgICB2ZWMzIHR4UG9zID0gKHZlYzQob3V0QmVzdFJlc3VsdC5wb3NpdGlvbiAtIGNlbnRlciwgMS4wKSkueHl6O1xuICAgICAgLy8gY2hlc3Nib2FyZCBjb2xvciBlZmZlY3RcbiAgICAgIGlmIChmcmFjdCh0eFBvcy54ICogMC4yKSA+IDAuNSA9PSBmcmFjdCh0eFBvcy56ICogMC4yKSA+IDAuNSA9PSBmcmFjdCh0eFBvcy55ICogMC4yKSA+IDAuNSlcbiAgICAgIHtcbiAgICAgICAgb3V0QmVzdFJlc3VsdC5jb2xvciA9IHZlYzQoMS4wKTtcbiAgICAgICAgb3V0QmVzdFJlc3VsdC5yZWZsZWN0aW9uRmFjdG9yID0gMC4zO1xuICAgICAgfVxuICAgICAgZWxzZVxuICAgICAge1xuICAgICAgICBvdXRCZXN0UmVzdWx0LmNvbG9yID0gdmVjNCgwLjAsIDAuNCwgMC40NSwgMS4wKTtcbiAgICAgICAgb3V0QmVzdFJlc3VsdC5yZWZsZWN0aW9uRmFjdG9yID0gMC4wO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlXG4gICAge1xuICAgICAgdmVjMyBjb2xvciA9IGdldFNjZW5lVmVjM0J5SW5kZXgoaW5kZXggKyA0KTtcblxuICAgICAgZmxvYXQgcmVmbGVjdGlvbkZhY3RvciA9IGdldFNjZW5lRGF0YUJ5SW5kZXgoaW5kZXggKyA3KTtcbiAgICAgIGZsb2F0IHJlZnJhY3Rpb25GYWN0b3IgPSBnZXRTY2VuZURhdGFCeUluZGV4KGluZGV4ICsgOCk7XG5cbiAgICAgIG91dEJlc3RSZXN1bHQuY29sb3IgPSB2ZWM0KGNvbG9yLCAwLjUpO1xuICAgICAgb3V0QmVzdFJlc3VsdC5yZWZsZWN0aW9uRmFjdG9yID0gcmVmbGVjdGlvbkZhY3RvcjtcbiAgICAgIG91dEJlc3RSZXN1bHQucmVmcmFjdGlvbkZhY3RvciA9IHJlZnJhY3Rpb25GYWN0b3I7XG4gICAgfVxuXG4gICAgYm9vbCBsaWdodEVuYWJsZWQgPSAoZ2V0U2NlbmVEYXRhQnlJbmRleChpbmRleCArIDEwKSAhPSAwLjApO1xuICAgIG91dEJlc3RSZXN1bHQubGlnaHRFbmFibGVkID0gbGlnaHRFbmFibGVkO1xuXG4gICAgLy8gaWYgKHNoYWRvd01vZGUpXG4gICAgLy8gICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZm9yIChpbnQgaW5kZXggPSB1X2JveGVzU3RhcnQ7IGluZGV4IDwgdV9ib3hlc1N0b3A7IGluZGV4ICs9IDI2KVxuICB7XG4gICAgYm9vbCBjYXN0U2hhZG93ID0gKGdldFNjZW5lRGF0YUJ5SW5kZXgoaW5kZXggKyAyMykgIT0gMC4wKTtcblxuICAgIGlmIChzaGFkb3dNb2RlICYmICFjYXN0U2hhZG93KSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB0bXBSYXkub3JpZ2luID0gcmF5Lm9yaWdpbjtcbiAgICB0bXBSYXkuZGlyZWN0aW9uID0gcmF5LmRpcmVjdGlvbjtcblxuICAgIG1hdDQgbm9ybWFsVHJhbnNmb3JtYXRpb25NYXRyaXggPSBtYXQ0KFxuICAgICAgZ2V0U2NlbmVEYXRhQnlJbmRleChpbmRleCArIDApLFxuICAgICAgZ2V0U2NlbmVEYXRhQnlJbmRleChpbmRleCArIDEpLFxuICAgICAgZ2V0U2NlbmVEYXRhQnlJbmRleChpbmRleCArIDIpLFxuICAgICAgZ2V0U2NlbmVEYXRhQnlJbmRleChpbmRleCArIDMpLFxuXG4gICAgICBnZXRTY2VuZURhdGFCeUluZGV4KGluZGV4ICsgNCksXG4gICAgICBnZXRTY2VuZURhdGFCeUluZGV4KGluZGV4ICsgNSksXG4gICAgICBnZXRTY2VuZURhdGFCeUluZGV4KGluZGV4ICsgNiksXG4gICAgICBnZXRTY2VuZURhdGFCeUluZGV4KGluZGV4ICsgNyksXG5cbiAgICAgIGdldFNjZW5lRGF0YUJ5SW5kZXgoaW5kZXggKyA4KSxcbiAgICAgIGdldFNjZW5lRGF0YUJ5SW5kZXgoaW5kZXggKyA5KSxcbiAgICAgIGdldFNjZW5lRGF0YUJ5SW5kZXgoaW5kZXggKyAxMCksXG4gICAgICBnZXRTY2VuZURhdGFCeUluZGV4KGluZGV4ICsgMTEpLFxuXG4gICAgICBnZXRTY2VuZURhdGFCeUluZGV4KGluZGV4ICsgMTIpLFxuICAgICAgZ2V0U2NlbmVEYXRhQnlJbmRleChpbmRleCArIDEzKSxcbiAgICAgIGdldFNjZW5lRGF0YUJ5SW5kZXgoaW5kZXggKyAxNCksXG4gICAgICBnZXRTY2VuZURhdGFCeUluZGV4KGluZGV4ICsgMTUpXG4gICAgKTtcblxuICAgIHZlYzMgYm94U2l6ZSA9IGdldFNjZW5lVmVjM0J5SW5kZXgoaW5kZXggKyAxNik7XG5cbiAgICBtYXQ0IGludmVyc2VkVHJhbnNmb3JtYXRpb25NYXRyaXggPSBpbnZlcnNlKG5vcm1hbFRyYW5zZm9ybWF0aW9uTWF0cml4KTtcblxuICAgIC8vIGNvbnZlcnQgcmF5IGZyb20gd29ybGQgc3BhY2UgdG8gYm94IHNwYWNlXG4gICAgdG1wUmF5Lm9yaWdpbiA9IChpbnZlcnNlZFRyYW5zZm9ybWF0aW9uTWF0cml4ICogdmVjNCh0bXBSYXkub3JpZ2luLCAxLjApKS54eXo7XG4gICAgdG1wUmF5LmRpcmVjdGlvbiA9IChpbnZlcnNlZFRyYW5zZm9ybWF0aW9uTWF0cml4ICogdmVjNCh0bXBSYXkuZGlyZWN0aW9uLCAwLjApKS54eXo7XG5cbiAgICBmbG9hdCBjdXJyRGlzdGFuY2UgPSAwLjA7XG4gICAgaWYgKFxuICAgICAgIWludGVyc2VjdEJveCh0bXBSYXksIGJveFNpemUsIGN1cnJEaXN0YW5jZSwgbm9ybWFsKSB8fFxuICAgICAgKG91dEJlc3RSZXN1bHQuZGlzdGFuY2UgPiAwLjAgJiYgY3VyckRpc3RhbmNlID4gb3V0QmVzdFJlc3VsdC5kaXN0YW5jZSlcbiAgICApIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIGNvbnZlcnQgbm9ybWFsIGZyb20gYm94IHNwYWNlIHRvIHdvcmxkIHNwYWNlXG4gICAgbm9ybWFsID0gKG5vcm1hbFRyYW5zZm9ybWF0aW9uTWF0cml4ICogdmVjNChub3JtYWwsIDAuMCkpLnh5ejtcblxuICAgIG91dEJlc3RSZXN1bHQuaGFzSGl0ID0gdHJ1ZTtcbiAgICBvdXRCZXN0UmVzdWx0LmRpc3RhbmNlID0gY3VyckRpc3RhbmNlO1xuICAgIG91dEJlc3RSZXN1bHQucG9zaXRpb24gPSByYXkub3JpZ2luICsgY3VyckRpc3RhbmNlICogcmF5LmRpcmVjdGlvbjtcbiAgICBvdXRCZXN0UmVzdWx0Lm5vcm1hbCA9IG5vcm1hbDtcbiAgICBvdXRCZXN0UmVzdWx0LnJlZnJhY3Rpb25GYWN0b3IgPSAwLjA7IC8vIFRPRE9cblxuICAgIGJvb2wgY2hlc3Nib2FyZE1hdGVyaWFsRW5hYmxlZCA9IChnZXRTY2VuZURhdGFCeUluZGV4KGluZGV4ICsgMjUpICE9IDAuMCk7XG5cbiAgICBpZiAoY2hlc3Nib2FyZE1hdGVyaWFsRW5hYmxlZClcbiAgICB7XG4gICAgICB2ZWMzIHR4UG9zID0gKGludmVyc2VkVHJhbnNmb3JtYXRpb25NYXRyaXggKiB2ZWM0KG91dEJlc3RSZXN1bHQucG9zaXRpb24sIDEuMCkpLnh5ejtcblxuICAgICAgLy8gY2hlc3Nib2FyZCBjb2xvciBlZmZlY3RcbiAgICAgIGlmIChmcmFjdCh0eFBvcy54ICogMC4yKSA+IDAuNSA9PSBmcmFjdCh0eFBvcy56ICogMC4yKSA+IDAuNSA9PSBmcmFjdCh0eFBvcy55ICogMC4yKSA+IDAuNSlcbiAgICAgIHtcbiAgICAgICAgb3V0QmVzdFJlc3VsdC5jb2xvciA9IHZlYzQoMS4wKTtcbiAgICAgICAgb3V0QmVzdFJlc3VsdC5yZWZsZWN0aW9uRmFjdG9yID0gMC4zO1xuICAgICAgfVxuICAgICAgZWxzZVxuICAgICAge1xuICAgICAgICBvdXRCZXN0UmVzdWx0LmNvbG9yID0gdmVjNCgwLjAsIDAuNCwgMC40NSwgMS4wKTtcbiAgICAgICAgb3V0QmVzdFJlc3VsdC5yZWZsZWN0aW9uRmFjdG9yID0gMC4wO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlXG4gICAge1xuICAgICAgdmVjMyBjb2xvciA9IGdldFNjZW5lVmVjM0J5SW5kZXgoaW5kZXggKyAxOSk7XG5cbiAgICAgIGZsb2F0IHJlZmxlY3Rpb25GYWN0b3IgPSBnZXRTY2VuZURhdGFCeUluZGV4KGluZGV4ICsgMjIpO1xuXG4gICAgICBvdXRCZXN0UmVzdWx0LmNvbG9yID0gdmVjNChjb2xvciwgMS4wKTtcbiAgICAgIG91dEJlc3RSZXN1bHQucmVmbGVjdGlvbkZhY3RvciA9IHJlZmxlY3Rpb25GYWN0b3I7XG4gICAgfVxuXG4gICAgYm9vbCBsaWdodEVuYWJsZWQgPSAoZ2V0U2NlbmVEYXRhQnlJbmRleChpbmRleCArIDI0KSAhPSAwLjApO1xuICAgIG91dEJlc3RSZXN1bHQubGlnaHRFbmFibGVkID0gbGlnaHRFbmFibGVkO1xuXG4gICAgLy8gaWYgKHNoYWRvd01vZGUpXG4gICAgLy8gICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZm9yIChpbnQgaW5kZXggPSB1X3RyaWFuZ2xlc1N0YXJ0OyBpbmRleCA8IHVfdHJpYW5nbGVzU3RvcDsgaW5kZXggKz0gMTUpXG4gIHtcbiAgICBib29sIGNhc3RTaGFkb3cgPSAoZ2V0U2NlbmVEYXRhQnlJbmRleChpbmRleCArIDEzKSAhPSAwLjApO1xuXG4gICAgaWYgKHNoYWRvd01vZGUgJiYgIWNhc3RTaGFkb3cpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHRtcFJheS5vcmlnaW4gPSByYXkub3JpZ2luO1xuICAgIHRtcFJheS5kaXJlY3Rpb24gPSByYXkuZGlyZWN0aW9uO1xuXG4gICAgdmVjMyB2MCA9IGdldFNjZW5lVmVjM0J5SW5kZXgoaW5kZXggKyAwKTtcbiAgICB2ZWMzIHYxID0gZ2V0U2NlbmVWZWMzQnlJbmRleChpbmRleCArIDMpO1xuICAgIHZlYzMgdjIgPSBnZXRTY2VuZVZlYzNCeUluZGV4KGluZGV4ICsgNik7XG5cbiAgICBmbG9hdCBjdXJyRGlzdGFuY2UgPSAwLjA7XG4gICAgaWYgKFxuICAgICAgIWludGVyc2VjdFRyaWFuZ2xlKHRtcFJheSwgdjAsIHYxLCB2MiwgY3VyckRpc3RhbmNlLCBub3JtYWwpIHx8XG4gICAgICAob3V0QmVzdFJlc3VsdC5kaXN0YW5jZSA+IDAuMCAmJiBjdXJyRGlzdGFuY2UgPiBvdXRCZXN0UmVzdWx0LmRpc3RhbmNlKVxuICAgICkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgb3V0QmVzdFJlc3VsdC5oYXNIaXQgPSB0cnVlO1xuICAgIG91dEJlc3RSZXN1bHQuZGlzdGFuY2UgPSBjdXJyRGlzdGFuY2U7XG4gICAgb3V0QmVzdFJlc3VsdC5wb3NpdGlvbiA9IHJheS5vcmlnaW4gKyBjdXJyRGlzdGFuY2UgKiByYXkuZGlyZWN0aW9uO1xuICAgIG91dEJlc3RSZXN1bHQubm9ybWFsID0gbm9ybWFsO1xuICAgIG91dEJlc3RSZXN1bHQucmVmcmFjdGlvbkZhY3RvciA9IDAuMDsgLy8gVE9ET1xuXG4gICAgdmVjMyBjb2xvciA9IGdldFNjZW5lVmVjM0J5SW5kZXgoaW5kZXggKyA5KTtcblxuICAgIGZsb2F0IHJlZmxlY3Rpb25GYWN0b3IgPSBnZXRTY2VuZURhdGFCeUluZGV4KGluZGV4ICsgMTIpO1xuXG4gICAgb3V0QmVzdFJlc3VsdC5jb2xvciA9IHZlYzQoY29sb3IsIDEuMCk7XG4gICAgb3V0QmVzdFJlc3VsdC5yZWZsZWN0aW9uRmFjdG9yID0gcmVmbGVjdGlvbkZhY3RvcjtcblxuICAgIGJvb2wgbGlnaHRFbmFibGVkID0gKGdldFNjZW5lRGF0YUJ5SW5kZXgoaW5kZXggKyAxNCkgIT0gMC4wKTtcbiAgICBvdXRCZXN0UmVzdWx0LmxpZ2h0RW5hYmxlZCA9IGxpZ2h0RW5hYmxlZDtcblxuICAgIC8vIGlmIChzaGFkb3dNb2RlKVxuICAgIC8vICAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHsgLy8gcGxhbmUgdGVzdFxuXG4gICAgLy8gdmVjMyBwbGFuZU5vcm1hbCA9IG5vcm1hbGl6ZSh2ZWMzKDAuMCwgMC4wLCAxLjApKTtcbiAgICAvLyBmbG9hdCB2YWwgPSBpbnRlcnNlY3RQbGFuZSh0bXBSYXksIHBsYW5lTm9ybWFsLCAzNS4wLzQuMCozLjApO1xuXG4gICAgLy8gdmVjMyBwbGFuZU5vcm1hbCA9IG5vcm1hbGl6ZSh2ZWMzKDAuMCwgMC4wLCAxLjApKTtcbiAgICAvLyBmbG9hdCB2YWwgPSBpbnRlcnNlY3RQbGFuZSh0bXBSYXksIHBsYW5lTm9ybWFsLCAwLjApO1xuXG4gICAgLy8gdmVjMyBwbGFuZU5vcm1hbCA9IG5vcm1hbGl6ZSh2ZWMzKDAuMCwgMC4wLCAxLjApKTtcbiAgICAvLyBmbG9hdCB2YWwgPSBpbnRlcnNlY3RQbGFuZSh0bXBSYXksIHBsYW5lTm9ybWFsLCAxMC4wKTtcblxuICAgIC8vIGlmICh2YWwgPiAwLjAgJiYgKGJlc3REaXN0YW5jZSA8PSAwLjAgfHwgdmFsIDwgYmVzdERpc3RhbmNlKSlcbiAgICAvLyB7XG4gICAgLy8gICAgIG91dEJlc3RSZXN1bHQuaGFzSGl0ID0gdHJ1ZTtcbiAgICAvLyAgICAgb3V0QmVzdFJlc3VsdC5kaXN0YW5jZSA9IHZhbDtcbiAgICAvLyAgICAgb3V0QmVzdFJlc3VsdC5wb3NpdGlvbiA9IHJheS5vcmlnaW4gKyB2YWwgKiByYXkuZGlyZWN0aW9uO1xuICAgIC8vICAgICBvdXRCZXN0UmVzdWx0Lm5vcm1hbCA9IHZlYzMocGxhbmVOb3JtYWwpO1xuICAgIC8vICAgICBvdXRCZXN0UmVzdWx0LmNvbG9yID0gdmVjNCgxLjAsIDEuMCwgMS4wLCAxLjApO1xuICAgIC8vICAgICBvdXRCZXN0UmVzdWx0LnJlZmxlY3Rpb25GYWN0b3IgPSAwLjA7XG4gICAgLy8gICAgIG91dEJlc3RSZXN1bHQubGlnaHRFbmFibGVkID0gdHJ1ZTtcbiAgICAvLyB9XG5cbiAgfSAvLyBwbGFuZSB0ZXN0XG5cbiAgcmV0dXJuIG91dEJlc3RSZXN1bHQuaGFzSGl0O1xufVxuXG5mbG9hdCBsaWdodEF0KHZlYzMgaW1wYWN0UG9zaXRpb24sIHZlYzMgaW1wYWN0Tm9ybWFsLCB2ZWMzIHZpZXdlcilcbntcbiAgZmxvYXQgYmVzdEludGVuc2l0eSA9IDAuMDtcblxuICBmb3IgKGludCBpbmRleCA9IHVfc3VuTGlnaHRzU3RhcnQ7IGluZGV4IDwgdV9zdW5MaWdodHNTdG9wOyBpbmRleCArPSA0KVxuICB7XG4gICAgaWYgKCFnX3NoYWRvd3NFbmFibGVkKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2ZWMzIGxpZ2h0RGlyID0gZ2V0TGlnaHRzVmVjM0J5SW5kZXgoaW5kZXggKyAwKTtcbiAgICBmbG9hdCBsb2NhbEludGVuc2l0eSA9IGdldExpZ2h0c0RhdGFCeUluZGV4KGluZGV4ICsgMyk7XG5cbiAgICBmbG9hdCBjb2VmID0gbG9jYWxJbnRlbnNpdHk7XG4gICAgbGlnaHREaXIgPSBub3JtYWxpemUobGlnaHREaXIpO1xuXG4gICAgLy8gaXMgdGhlIHN1biBsaWdodCBibG9ja2VkIGJ5IGFuIG9iamVjdD9cbiAgICBSYXlSZXN1bHQgcmVzdWx0O1xuICAgIGlmIChpbnRlcnNlY3RTY2VuZShSYXlWYWx1ZXMoaW1wYWN0UG9zaXRpb24sIGxpZ2h0RGlyKSwgcmVzdWx0LCB0cnVlKSkge1xuICAgICAgLy8gbGlnaHQgcmF5IGlzIGJsb2NrZWQsIHNraXAgdGhpcyBsaWdodFxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy9cbiAgICAvL1xuICAgIC8vXG5cbiAgICBmbG9hdCBpbnRlbnNpdHkgPSAwLjA7XG4gICAgdmVjMyByZWZsZWN0aW9uRmFjdG9yID0gcmVmbGVjdCgtbGlnaHREaXIsIGltcGFjdE5vcm1hbCk7XG4gICAgaW50ZW5zaXR5ICs9IDAuNiAqIHBvdyhtYXgoZG90KHJlZmxlY3Rpb25GYWN0b3IsIHZpZXdlciksIDAuMCksIDMwLjApO1xuICAgIGludGVuc2l0eSArPSAxLjAgKiBkb3QobGlnaHREaXIsIGltcGFjdE5vcm1hbCk7XG5cbiAgICBpbnRlbnNpdHkgKj0gY29lZjtcblxuICAgIGlmIChiZXN0SW50ZW5zaXR5IDwgaW50ZW5zaXR5KSB7XG4gICAgICBiZXN0SW50ZW5zaXR5ID0gaW50ZW5zaXR5O1xuICAgIH1cbiAgfVxuXG4gIGZvciAoaW50IGluZGV4ID0gdV9zcG90TGlnaHRzU3RhcnQ7IGluZGV4IDwgdV9zcG90TGlnaHRzU3RvcDsgaW5kZXggKz0gNSlcbiAge1xuICAgIHZlYzMgbGlnaHREaXIgPSB2ZWMzKDEuMCk7XG4gICAgZmxvYXQgY29lZiA9IDEuMDtcblxuICAgIC8vIHNwb3QgbGlnaHRcblxuICAgIHZlYzMgbGlnaHRQb3MgPSBnZXRMaWdodHNWZWMzQnlJbmRleChpbmRleCArIDApO1xuICAgIGZsb2F0IGxpZ2h0UmFkaXVzID0gZ2V0TGlnaHRzRGF0YUJ5SW5kZXgoaW5kZXggKyAzKTtcblxuICAgIHZlYzMgbGlnaHRUb0ltcGFjdFZlYzMgPSBsaWdodFBvcyAtIGltcGFjdFBvc2l0aW9uO1xuXG4gICAgLy8gaXMgaXQgb3V0IG9mIHRoZSBzcG90IGxpZ2h0IGVmZmVjdCByYWRpdXM/XG4gICAgZmxvYXQgbGlnaHRUb0ltcGFjdERpc3RhbmNlID0gbGVuZ3RoKGxpZ2h0VG9JbXBhY3RWZWMzKTtcbiAgICBpZiAobGlnaHRUb0ltcGFjdERpc3RhbmNlID4gbGlnaHRSYWRpdXMpIHtcbiAgICAgIC8vIG91dCBvZiByYW5nZSwgZG8gbm90IGFwcGx5IHRoaXMgbGlnaHRcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGxpZ2h0RGlyLnggPSBsaWdodFRvSW1wYWN0VmVjMy54IC8gbGlnaHRUb0ltcGFjdERpc3RhbmNlOyAvLyBub3JtYWxpemVcbiAgICBsaWdodERpci55ID0gbGlnaHRUb0ltcGFjdFZlYzMueSAvIGxpZ2h0VG9JbXBhY3REaXN0YW5jZTsgLy8gbm9ybWFsaXplXG4gICAgbGlnaHREaXIueiA9IGxpZ2h0VG9JbXBhY3RWZWMzLnogLyBsaWdodFRvSW1wYWN0RGlzdGFuY2U7IC8vIG5vcm1hbGl6ZVxuXG4gICAgZmxvYXQgbG9jYWxJbnRlbnNpdHkgPSBnZXRMaWdodHNEYXRhQnlJbmRleChpbmRleCArIDQpO1xuXG4gICAgY29lZiA9IGxvY2FsSW50ZW5zaXR5ICogKDEuMCAtIGxpZ2h0VG9JbXBhY3REaXN0YW5jZSAvIGxpZ2h0UmFkaXVzKTtcblxuICAgIGlmICghZ19zaGFkb3dzRW5hYmxlZCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgUmF5UmVzdWx0IHJlc3VsdDtcbiAgICBpZiAoXG4gICAgICAvLyBpcyB0aGUgc3BvdCBsaWdodCBibG9ja2VkIGJ5IGFuIG9iamVjdD9cbiAgICAgIGludGVyc2VjdFNjZW5lKFJheVZhbHVlcyhpbXBhY3RQb3NpdGlvbiwgbGlnaHREaXIpLCByZXN1bHQsIHRydWUpICYmXG4gICAgICAvLyBpcyB0aGUgYmxvY2tpbmcgb2JqZWN0IGluIHJhbmdlIG9mIHRoZSBzcG90IGxpZ2h0IGVmZmVjdCByYWRpdXM/XG4gICAgICByZXN1bHQuZGlzdGFuY2UgPCBsaWdodFRvSW1wYWN0RGlzdGFuY2VcbiAgICApIHtcbiAgICAgIC8vIGxpZ2h0IHJheSBpcyBibG9ja2VkLCBza2lwIHRoaXMgbGlnaHRcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vXG4gICAgLy9cbiAgICAvL1xuXG4gICAgZmxvYXQgaW50ZW5zaXR5ID0gMC4wO1xuICAgIHZlYzMgcmVmbGVjdGlvbkZhY3RvciA9IHJlZmxlY3QoLWxpZ2h0RGlyLCBpbXBhY3ROb3JtYWwpO1xuICAgIGludGVuc2l0eSArPSAwLjYgKiBwb3cobWF4KGRvdChyZWZsZWN0aW9uRmFjdG9yLCB2aWV3ZXIpLCAwLjApLCAzMC4wKTtcbiAgICBpbnRlbnNpdHkgKz0gMS4wICogZG90KGxpZ2h0RGlyLCBpbXBhY3ROb3JtYWwpO1xuXG4gICAgaW50ZW5zaXR5ICo9IGNvZWY7XG5cbiAgICBpZiAoYmVzdEludGVuc2l0eSA8IGludGVuc2l0eSkge1xuICAgICAgYmVzdEludGVuc2l0eSA9IGludGVuc2l0eTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWF4KGdfYW1iaWFudExpZ2h0LCBiZXN0SW50ZW5zaXR5KTtcbn1cblxudm9pZCBtYWluKClcbntcbiAgLy9cbiAgLy9cbiAgLy8gaW5pdGlhbCByYXlcblxuICB2ZWMzIHJheURpciA9IG5vcm1hbGl6ZSh2X3Bvc2l0aW9uIC0gdV9jYW1lcmFFeWUpOyAvLyBjYW1lcmEgZGlyZWN0aW9uXG4gIHZlYzMgZmluYWxQaXhlbENvbG9yID0gZ19iYWNrZ3JvdW5kQ29sb3I7XG5cbiAgUmF5VmFsdWVzIGN1cnJSYXkgPSBSYXlWYWx1ZXModV9jYW1lcmFFeWUsIHJheURpcik7XG4gIFJheVJlc3VsdCByZXN1bHQ7XG5cbiAgcmVzdWx0LnBvc2l0aW9uID0gdV9jYW1lcmFFeWU7XG4gIHJlc3VsdC5yZWZsZWN0aW9uRmFjdG9yID0gMS4wO1xuICByZXN1bHQubGlnaHRFbmFibGVkID0gdHJ1ZTtcblxuICBmbG9hdCBsYXN0UmVmbGVjdGlvbkZhY3RvciA9IDEuMDtcbiAgZmxvYXQgbGFzdFJlZnJhY3Rpb25GYWN0b3IgPSAxLjA7XG5cbiAgY29uc3QgaW50IG1heEl0ZXJhdGlvbiA9IGdfbWF4VG90YWxSZWZsZWN0aW9uO1xuICBmb3IgKGludCBpdGVyYXRpb25MZWZ0ID0gbWF4SXRlcmF0aW9uOyBpdGVyYXRpb25MZWZ0ID49IDA7IC0taXRlcmF0aW9uTGVmdClcbiAge1xuICAgIGlmIChcbiAgICAgIHJlc3VsdC5yZWZsZWN0aW9uRmFjdG9yIDw9IDAuMDUgJiZcbiAgICAgIHJlc3VsdC5yZWZyYWN0aW9uRmFjdG9yIDw9IDAuMDVcbiAgICApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGJvb2wgbXVzdFN0b3AgPSBmYWxzZTtcblxuICAgIGN1cnJSYXkgPSBSYXlWYWx1ZXMocmVzdWx0LnBvc2l0aW9uLCByYXlEaXIpO1xuXG4gICAgcmVzdWx0Lmhhc0hpdCA9IGludGVyc2VjdFNjZW5lKGN1cnJSYXksIHJlc3VsdCwgZmFsc2UpO1xuXG4gICAgdmVjMyB0bXBDb2xvciA9IGdfYmFja2dyb3VuZENvbG9yO1xuXG4gICAgaWYgKHJlc3VsdC5oYXNIaXQpXG4gICAge1xuICAgICAgZmxvYXQgbGlnaHRJbnRlbnNpdHkgPSAxLjA7XG5cbiAgICAgIGlmIChyZXN1bHQubGlnaHRFbmFibGVkKVxuICAgICAge1xuICAgICAgICBsaWdodEludGVuc2l0eSA9IGxpZ2h0QXQocmVzdWx0LnBvc2l0aW9uLCByZXN1bHQubm9ybWFsLCAtY3VyclJheS5kaXJlY3Rpb24pO1xuXG4gICAgICAgIGlmIChsaWdodEludGVuc2l0eSA8PSAwLjApXG4gICAgICAgIHtcbiAgICAgICAgICAvLyBub3QgbGl0XG4gICAgICAgICAgbXVzdFN0b3AgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRtcENvbG9yID0gcmVzdWx0LmNvbG9yLnh5eiAqIGxpZ2h0SW50ZW5zaXR5O1xuICAgIH1cblxuICAgIC8vIHZlYzMgaW5jaWRlbnQgPSBub3JtYWxpemUoIHZlYzMoIHZlcnRleCAtIGNhbWVyYSApICk7XG5cbiAgICAvLyBpZiAocmVzdWx0LnJlZnJhY3Rpb25GYWN0b3IgPiAwLjA1KSB7XG5cbiAgICAvLyAgIGZpbmFsUGl4ZWxDb2xvciA9IGZpbmFsUGl4ZWxDb2xvciAqICgxLjAgLSBsYXN0UmVmbGVjdGlvbkZhY3RvcikgKyB0bXBDb2xvciAqIGxhc3RSZWZsZWN0aW9uRmFjdG9yO1xuXG4gICAgLy8gICBpZiAobXVzdFN0b3AgfHwgIXJlc3VsdC5oYXNIaXQpXG4gICAgLy8gICB7XG4gICAgLy8gICAgIGJyZWFrO1xuICAgIC8vICAgfVxuXG4gICAgLy8gICAvLyBsYXN0UmVmbGVjdGlvbkZhY3RvciAqPSByZXN1bHQucmVmbGVjdGlvbkZhY3RvcjtcbiAgICAvLyAgIGxhc3RSZWZyYWN0aW9uRmFjdG9yICo9IHJlc3VsdC5yZWZyYWN0aW9uRmFjdG9yO1xuXG4gICAgLy8gICAvLyByYXlEaXIgPSByZWZyYWN0KHJheURpciwgcmVzdWx0Lm5vcm1hbCk7XG4gICAgLy8gICByYXlEaXIgPSByZWZyYWN0KHJheURpciwgcmVzdWx0Lm5vcm1hbCwgRXRhKTtcblxuICAgIC8vICAgY29udGludWU7XG4gICAgLy8gfVxuXG4gICAgZmluYWxQaXhlbENvbG9yID0gZmluYWxQaXhlbENvbG9yICogKDEuMCAtIGxhc3RSZWZsZWN0aW9uRmFjdG9yKSArIHRtcENvbG9yICogbGFzdFJlZmxlY3Rpb25GYWN0b3I7XG5cbiAgICBpZiAobXVzdFN0b3AgfHwgIXJlc3VsdC5oYXNIaXQpXG4gICAge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgbGFzdFJlZmxlY3Rpb25GYWN0b3IgKj0gcmVzdWx0LnJlZmxlY3Rpb25GYWN0b3I7XG5cbiAgICByYXlEaXIgPSByZWZsZWN0KHJheURpciwgcmVzdWx0Lm5vcm1hbCk7XG5cbiAgICAvLyByZXN1bHQucmVmcmFjdGlvbkZhY3RvclxuICAgIC8vIHJheURpciA9IHJlZnJhY3QocmF5RGlyLCByZXN1bHQubm9ybWFsLCBFdGEpO1xuXG4gIH1cblxuICBvX2NvbG9yID0gdmVjNChmaW5hbFBpeGVsQ29sb3IsIDEuMCk7XG59XG5gLnRyaW0oKTsiLAogICJleHBvcnQgZGVmYXVsdCBgXG4jdmVyc2lvbiAzMDAgZXNcblxucHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xuXG5pbiB2ZWMyIGFfdmVydGV4UG9zaXRpb247XG5pbiB2ZWMyIGFfdmVydGV4VGV4dHVyZUNvb3JkO1xuXG5vdXQgdmVjMiB2X3RleHR1cmVDb29yZDtcblxudm9pZCBtYWluKHZvaWQpXG57XG4gIHZfdGV4dHVyZUNvb3JkID0gYV92ZXJ0ZXhUZXh0dXJlQ29vcmQ7XG5cbiAgZ2xfUG9zaXRpb24gPSB2ZWM0KGFfdmVydGV4UG9zaXRpb24sIDEuMCwgMS4wKTtcbn1cbmAudHJpbSgpOyIsCiAgImV4cG9ydCBkZWZhdWx0IGBcbiN2ZXJzaW9uIDMwMCBlc1xuXG5wcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG5cbnVuaWZvcm0gc2FtcGxlcjJEIHVfdGV4dHVyZTtcbnVuaWZvcm0gdmVjMiB1X3N0ZXA7XG5cbmluIHZlYzIgdl90ZXh0dXJlQ29vcmQ7XG5cbm91dCB2ZWM0IG9fY29sb3I7XG5cbnZvaWQgbWFpbih2b2lkKVxue1xuICAvLyBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlKHVfdGV4dHVyZSwgdl90ZXh0dXJlQ29vcmQpO1xuXG4gIGZsb2F0IHRvdGFsID0gMC4wO1xuICB2ZWM0IGFjY3VtdWxhdGVkID0gdmVjNCgwLjApO1xuXG4gIC8vXG5cbiAgaWYgKHZfdGV4dHVyZUNvb3JkLnggLSB1X3N0ZXAueCA+IDAuMClcbiAge1xuICAgIGFjY3VtdWxhdGVkICs9IHRleHR1cmUodV90ZXh0dXJlLCB2ZWMyKHZfdGV4dHVyZUNvb3JkLnggLSB1X3N0ZXAueCwgdl90ZXh0dXJlQ29vcmQueSkpO1xuICAgIHRvdGFsICs9IDEuMDtcbiAgfVxuXG4gIGlmICh2X3RleHR1cmVDb29yZC54ICsgdV9zdGVwLnggPiAwLjApXG4gIHtcbiAgICBhY2N1bXVsYXRlZCArPSB0ZXh0dXJlKHVfdGV4dHVyZSwgdmVjMih2X3RleHR1cmVDb29yZC54ICsgdV9zdGVwLngsIHZfdGV4dHVyZUNvb3JkLnkpKTtcbiAgICB0b3RhbCArPSAxLjA7XG4gIH1cblxuICBpZiAodl90ZXh0dXJlQ29vcmQueSAtIHVfc3RlcC55ID4gMC4wKVxuICB7XG4gICAgYWNjdW11bGF0ZWQgKz0gdGV4dHVyZSh1X3RleHR1cmUsIHZlYzIodl90ZXh0dXJlQ29vcmQueCwgdl90ZXh0dXJlQ29vcmQueSAtIHVfc3RlcC55KSk7XG4gICAgdG90YWwgKz0gMS4wO1xuICB9XG5cbiAgaWYgKHZfdGV4dHVyZUNvb3JkLnkgKyB1X3N0ZXAueSA+IDAuMClcbiAge1xuICAgIGFjY3VtdWxhdGVkICs9IHRleHR1cmUodV90ZXh0dXJlLCB2ZWMyKHZfdGV4dHVyZUNvb3JkLngsIHZfdGV4dHVyZUNvb3JkLnkgKyB1X3N0ZXAueSkpO1xuICAgIHRvdGFsICs9IDEuMDtcbiAgfVxuXG4gIC8vXG5cbiAgaWYgKHZfdGV4dHVyZUNvb3JkLnggLSB1X3N0ZXAueCA+IDAuMCAmJiB2X3RleHR1cmVDb29yZC55IC0gdV9zdGVwLnkgPiAwLjApXG4gIHtcbiAgICBhY2N1bXVsYXRlZCArPSB0ZXh0dXJlKHVfdGV4dHVyZSwgdmVjMih2X3RleHR1cmVDb29yZC54IC0gdV9zdGVwLngsIHZfdGV4dHVyZUNvb3JkLnkgLSB1X3N0ZXAueSkpO1xuICAgIHRvdGFsICs9IDEuMDtcbiAgfVxuXG4gIGlmICh2X3RleHR1cmVDb29yZC54ICsgdV9zdGVwLnggPiAwLjAgJiYgdl90ZXh0dXJlQ29vcmQueSAtIHVfc3RlcC55ID4gMC4wKVxuICB7XG4gICAgYWNjdW11bGF0ZWQgKz0gdGV4dHVyZSh1X3RleHR1cmUsIHZlYzIodl90ZXh0dXJlQ29vcmQueCArIHVfc3RlcC54LCB2X3RleHR1cmVDb29yZC55IC0gdV9zdGVwLnkpKTtcbiAgICB0b3RhbCArPSAxLjA7XG4gIH1cblxuICBpZiAodl90ZXh0dXJlQ29vcmQueCAtIHVfc3RlcC54ID4gMC4wICYmIHZfdGV4dHVyZUNvb3JkLnkgKyB1X3N0ZXAueSA+IDAuMClcbiAge1xuICAgIGFjY3VtdWxhdGVkICs9IHRleHR1cmUodV90ZXh0dXJlLCB2ZWMyKHZfdGV4dHVyZUNvb3JkLnggLSB1X3N0ZXAueCwgdl90ZXh0dXJlQ29vcmQueSArIHVfc3RlcC55KSk7XG4gICAgdG90YWwgKz0gMS4wO1xuICB9XG5cbiAgaWYgKHZfdGV4dHVyZUNvb3JkLnggKyB1X3N0ZXAueCA+IDAuMCAmJiB2X3RleHR1cmVDb29yZC55ICsgdV9zdGVwLnkgPiAwLjApXG4gIHtcbiAgICBhY2N1bXVsYXRlZCArPSB0ZXh0dXJlKHVfdGV4dHVyZSwgdmVjMih2X3RleHR1cmVDb29yZC54ICsgdV9zdGVwLngsIHZfdGV4dHVyZUNvb3JkLnkgKyB1X3N0ZXAueSkpO1xuICAgIHRvdGFsICs9IDEuMDtcbiAgfVxuXG4gIC8vXG5cbiAgaWYgKHRvdGFsID4gMC4wKVxuICAgIG9fY29sb3IgPSBhY2N1bXVsYXRlZCAvIHRvdGFsO1xuICBlbHNlXG4gICAgb19jb2xvciA9IHZlYzQoMS4wLCAwLjAsIDAuMCwgMS4wKTsgLy8gd2FybmluZ1xufVxuYC50cmltKCk7IiwKICAiaW1wb3J0IHsgZ3JhcGhpY3MgfSBmcm9tICdAbG9jYWwtZnJhbWV3b3JrJztcbmNvbnN0IHtcbiAgV2ViR0xDb250ZXh0LFxuICBEYXRhVGV4dHVyZSxcbiAgVGV4dHVyZSxcbiAgRnJhbWVCdWZmZXIsXG4gIFNoYWRlclByb2dyYW0sXG4gIEdlb21ldHJ5V3JhcHBlclxufSA9IGdyYXBoaWNzLndlYmdsMjtcblxuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHJheVRyYWNlclZlcnRleCBmcm9tICcuL3NoYWRlcnMvcmF5LXRyYWNlci5nbHNsLnZlcnQnO1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHJheVRyYWNlckZyYWdtZW50IGZyb20gJy4vc2hhZGVycy9yYXktdHJhY2VyLmdsc2wuZnJhZyc7XG5cbi8vIEB0cy1pZ25vcmVcbmltcG9ydCB0ZXh0dXJlVmVydGV4IGZyb20gJy4vc2hhZGVycy90ZXh0dXJlLmdsc2wudmVydCc7XG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgdGV4dHVyZUZyYWdtZW50IGZyb20gJy4vc2hhZGVycy90ZXh0dXJlLmdsc2wuZnJhZyc7XG5cbmltcG9ydCAqIGFzIGdsbSBmcm9tICdnbC1tYXRyaXgnO1xuXG5jb25zdCBfZGVncmVlVG9SYWQgPSAoYW5nbGU6IG51bWJlcikgPT4gKGFuZ2xlICogTWF0aC5QSSkgLyAxODA7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSURlZmluaXRpb24ge1xuICBjYW52YXNXaWR0aDogbnVtYmVyO1xuICBjYW52YXNIZWlnaHQ6IG51bWJlcjtcbiAgZm92eTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQdWJsaWNTcGhlcmUge1xuICBwb3NpdGlvbjogZ2xtLlJlYWRvbmx5VmVjMztcbiAgcmFkaXVzOiBudW1iZXI7XG4gIGNvbG9yOiBnbG0uUmVhZG9ubHlWZWMzO1xuICByZWZsZWN0aW9uRmFjdG9yOiBudW1iZXI7XG4gIHJlZnJhY3Rpb25GYWN0b3I6IG51bWJlcjtcbiAgY2hlc3Nib2FyZEVuYWJsZWQ6IGJvb2xlYW47XG4gIGNhc3RTaGFkb3dFbmFibGVkOiBib29sZWFuO1xuICByZWNlaXZlTGlnaHRFbmFibGVkOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElJbnRlcm5hbFNwaGVyZSB7XG4gIHBvc2l0aW9uOiBnbG0uUmVhZG9ubHlWZWMzO1xuICByYWRpdXM6IG51bWJlcjtcbiAgY29sb3I6IGdsbS5SZWFkb25seVZlYzM7XG4gIHJlZmxlY3Rpb25GYWN0b3I6IG51bWJlcjtcbiAgcmVmcmFjdGlvbkZhY3RvcjogbnVtYmVyO1xuICBjYXN0U2hhZG93RW5hYmxlZDogYm9vbGVhbjtcbiAgcmVjZWl2ZUxpZ2h0RW5hYmxlZDogYm9vbGVhbjtcbiAgY2hlc3Nib2FyZEVuYWJsZWQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVB1YmxpY0JveCB7XG4gIHBvc2l0aW9uOiBnbG0uUmVhZG9ubHlWZWMzO1xuICBhbmdsZVg6IG51bWJlcjtcbiAgYW5nbGVZOiBudW1iZXI7XG4gIGFuZ2xlWjogbnVtYmVyO1xuICBib3hTaXplOiBnbG0uUmVhZG9ubHlWZWMzO1xuICBjb2xvcjogZ2xtLlJlYWRvbmx5VmVjMztcbiAgcmVmbGVjdGlvbkZhY3RvcjogbnVtYmVyO1xuICBjaGVzc2JvYXJkRW5hYmxlZDogYm9vbGVhbjtcbiAgY2FzdFNoYWRvd0VuYWJsZWQ6IGJvb2xlYW47XG4gIHJlY2VpdmVMaWdodEVuYWJsZWQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW50ZXJuYWxCb3gge1xuICBtYXRyaXg6IGdsbS5tYXQ0O1xuICBib3hTaXplOiBnbG0uUmVhZG9ubHlWZWMzO1xuICBjb2xvcjogZ2xtLlJlYWRvbmx5VmVjMztcbiAgcmVmbGVjdGlvbkZhY3RvcjogbnVtYmVyO1xuICBjYXN0U2hhZG93RW5hYmxlZDogYm9vbGVhbjtcbiAgcmVjZWl2ZUxpZ2h0RW5hYmxlZDogYm9vbGVhbjtcbiAgY2hlc3Nib2FyZEVuYWJsZWQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVRyaWFuZ2xlIHtcbiAgdjA6IGdsbS5SZWFkb25seVZlYzM7XG4gIHYxOiBnbG0uUmVhZG9ubHlWZWMzO1xuICB2MjogZ2xtLlJlYWRvbmx5VmVjMztcbiAgY29sb3I6IGdsbS5SZWFkb25seVZlYzM7XG4gIHJlZmxlY3Rpb25GYWN0b3I6IG51bWJlcjtcbiAgY2FzdFNoYWRvd0VuYWJsZWQ6IGJvb2xlYW47XG4gIHJlY2VpdmVMaWdodEVuYWJsZWQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVN1bkxpZ2h0IHtcbiAgZGlyZWN0aW9uOiBnbG0uUmVhZG9ubHlWZWMzO1xuICBpbnRlbnNpdHk6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJU3BvdExpZ2h0IHtcbiAgcG9zaXRpb246IGdsbS5SZWFkb25seVZlYzM7XG4gIGludGVuc2l0eTogbnVtYmVyO1xuICByYWRpdXM6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQ2FtZXJhIHtcbiAgcG9zaXRpb246IGdsbS52ZWMzO1xuICB0YXJnZXQ6IGdsbS52ZWMzO1xuICB1cDogZ2xtLnZlYzM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVJheVRyYWNlclJlbmRlcmVyIHtcbiAgcHVzaFNwaGVyZSh7XG4gICAgcG9zaXRpb24sXG4gICAgcmFkaXVzLFxuICAgIGNvbG9yLFxuICAgIHJlZmxlY3Rpb25GYWN0b3IsXG4gICAgY2hlc3Nib2FyZEVuYWJsZWQsXG4gICAgY2FzdFNoYWRvd0VuYWJsZWQsXG4gICAgcmVjZWl2ZUxpZ2h0RW5hYmxlZFxuICB9OiBJUHVibGljU3BoZXJlKTogdm9pZDtcblxuICBwdXNoQm94KHtcbiAgICBwb3NpdGlvbixcbiAgICBhbmdsZVgsXG4gICAgYW5nbGVZLFxuICAgIGFuZ2xlWixcbiAgICBib3hTaXplLFxuICAgIGNvbG9yLFxuICAgIHJlZmxlY3Rpb25GYWN0b3IsXG4gICAgY2hlc3Nib2FyZEVuYWJsZWQsXG4gICAgY2FzdFNoYWRvd0VuYWJsZWQsXG4gICAgcmVjZWl2ZUxpZ2h0RW5hYmxlZFxuICB9OiBJUHVibGljQm94KTogdm9pZDtcblxuICBwdXNoVHJpYW5nbGUoe1xuICAgIHYwLFxuICAgIHYxLFxuICAgIHYyLFxuICAgIGNvbG9yLFxuICAgIHJlZmxlY3Rpb25GYWN0b3IsXG4gICAgY2FzdFNoYWRvd0VuYWJsZWQsXG4gICAgcmVjZWl2ZUxpZ2h0RW5hYmxlZFxuICB9OiBJVHJpYW5nbGUpOiB2b2lkO1xuXG4gIHB1c2hTdW5MaWdodCh7IGRpcmVjdGlvbiwgaW50ZW5zaXR5IH06IElTdW5MaWdodCk6IHZvaWQ7XG5cbiAgcHVzaFNwb3RMaWdodCh7IHBvc2l0aW9uLCBpbnRlbnNpdHksIHJhZGl1cyB9OiBJU3BvdExpZ2h0KTogdm9pZDtcblxuICBsb29rQXQoXG4gICAgZXllOiBnbG0uUmVhZG9ubHlWZWMzLFxuICAgIHRhcmdldDogZ2xtLlJlYWRvbmx5VmVjMyxcbiAgICB1cDogZ2xtLlJlYWRvbmx5VmVjM1xuICApOiB2b2lkO1xuXG4gIHJlbmRlcigpOiB2b2lkO1xuXG4gIHJlc2V0KCk6IHZvaWQ7XG5cbiAgc2V0UmVzb2x1dGlvbkNvZWYoaW5SZXNvbHV0aW9uQ29lZjogbnVtYmVyKTogdm9pZDtcbiAgZ2V0UmVzb2x1dGlvbkNvZWYoKTogbnVtYmVyO1xuXG4gIHNldEFudGlBbGlhc2luZyhlbmFibGVkOiBib29sZWFuKTogdm9pZDtcbiAgZ2V0QW50aUFsaWFzaW5nKCk6IGJvb2xlYW47XG5cbiAgZ2V0Q3VycmVudFNpemUoKTogZ2xtLlJlYWRvbmx5VmVjMjtcbn1cblxuZXhwb3J0IGNsYXNzIFJheVRyYWNlclJlbmRlcmVyIGltcGxlbWVudHMgSVJheVRyYWNlclJlbmRlcmVyIHtcbiAgcHJpdmF0ZSBfY2FtZXJhRm92eTogbnVtYmVyO1xuXG4gIHByaXZhdGUgX2NhbnZhc1dpZHRoOiBudW1iZXI7XG4gIHByaXZhdGUgX2NhbnZhc0hlaWdodDogbnVtYmVyO1xuICBwcml2YXRlIF9yZW5kZXJXaWR0aDogbnVtYmVyO1xuICBwcml2YXRlIF9yZW5kZXJIZWlnaHQ6IG51bWJlcjtcbiAgcHJpdmF0ZSBfcmVzb2x1dGlvbkNvZWY6IG51bWJlciA9IDE7XG4gIHByaXZhdGUgX2FudGlBbGlhc2luZzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHByaXZhdGUgX3JheVRyYWNlclNoYWRlclByb2dyYW06IGdyYXBoaWNzLndlYmdsMi5JVW5ib3VuZFNoYWRlcjtcbiAgcHJpdmF0ZSBfdGV4dHVyZVNoYWRlclByb2dyYW06IGdyYXBoaWNzLndlYmdsMi5JVW5ib3VuZFNoYWRlcjtcblxuICBwcml2YXRlIF9yYXlUcmFjZXJHZW9tZXRyeTogZ3JhcGhpY3Mud2ViZ2wyLkdlb21ldHJ5V3JhcHBlci5HZW9tZXRyeTtcbiAgcHJpdmF0ZSBfc2NyZWVuR2VvbWV0cnk6IGdyYXBoaWNzLndlYmdsMi5HZW9tZXRyeVdyYXBwZXIuR2VvbWV0cnk7XG5cbiAgcHJpdmF0ZSBfZmluYWxUZXh0dXJlOiBncmFwaGljcy53ZWJnbDIuSVVuYm91bmRUZXh0dXJlO1xuICBwcml2YXRlIF9mcmFtZUJ1ZmZlcjogZ3JhcGhpY3Mud2ViZ2wyLklVbmJvdW5kRnJhbWVCdWZmZXI7XG5cbiAgcHJpdmF0ZSBfc2NlbmVEYXRhVGV4dHVyZTogZ3JhcGhpY3Mud2ViZ2wyLklVbmJvdW5kRGF0YVRleHR1cmU7XG4gIHByaXZhdGUgX3NwaGVyZXM6IElJbnRlcm5hbFNwaGVyZVtdID0gW107XG4gIHByaXZhdGUgX2JveGVzOiBJbnRlcm5hbEJveFtdID0gW107XG4gIHByaXZhdGUgX3RyaWFuZ2xlczogSVRyaWFuZ2xlW10gPSBbXTtcblxuICBwcml2YXRlIF9saWdodHNEYXRhVGV4dHVyZTogZ3JhcGhpY3Mud2ViZ2wyLklVbmJvdW5kRGF0YVRleHR1cmU7XG4gIHByaXZhdGUgX3N1bkxpZ2h0czogSVN1bkxpZ2h0W10gPSBbXTtcbiAgcHJpdmF0ZSBfc3BvdExpZ2h0czogSVNwb3RMaWdodFtdID0gW107XG5cbiAgcHJpdmF0ZSBfY2FtZXJhOiBJQ2FtZXJhO1xuXG4gIGNvbnN0cnVjdG9yKGluRGVmOiBJRGVmaW5pdGlvbikge1xuICAgIHRoaXMuX2NhbWVyYUZvdnkgPSBpbkRlZi5mb3Z5O1xuXG4gICAgdGhpcy5fcmVuZGVyV2lkdGggPSB0aGlzLl9jYW52YXNXaWR0aCA9IGluRGVmLmNhbnZhc1dpZHRoO1xuICAgIHRoaXMuX3JlbmRlckhlaWdodCA9IHRoaXMuX2NhbnZhc0hlaWdodCA9IGluRGVmLmNhbnZhc0hlaWdodDtcblxuICAgIHRoaXMuX3JheVRyYWNlclNoYWRlclByb2dyYW0gPSBuZXcgU2hhZGVyUHJvZ3JhbSgnUmF5VHJhY2VyUmVuZGVyZXItMScsIHtcbiAgICAgIHZlcnRleFNyYzogcmF5VHJhY2VyVmVydGV4LFxuICAgICAgZnJhZ21lbnRTcmM6IHJheVRyYWNlckZyYWdtZW50LFxuICAgICAgYXR0cmlidXRlczogWydhX3ZlcnRleFBvc2l0aW9uJywgJ2FfcGxvdFBvc2l0aW9uJ10sXG4gICAgICB1bmlmb3JtczogW1xuICAgICAgICAndV9jYW1lcmFFeWUnLFxuXG4gICAgICAgICd1X3NjZW5lVGV4dHVyZURhdGEnLFxuICAgICAgICAndV9zY2VuZVRleHR1cmVTaXplJyxcblxuICAgICAgICAndV9zcGhlcmVzU3RhcnQnLFxuICAgICAgICAndV9zcGhlcmVzU3RvcCcsXG4gICAgICAgICd1X2JveGVzU3RhcnQnLFxuICAgICAgICAndV9ib3hlc1N0b3AnLFxuICAgICAgICAndV90cmlhbmdsZXNTdGFydCcsXG4gICAgICAgICd1X3RyaWFuZ2xlc1N0b3AnLFxuXG4gICAgICAgICd1X2xpZ2h0c1RleHR1cmVEYXRhJyxcblxuICAgICAgICAndV9zdW5MaWdodHNTdGFydCcsXG4gICAgICAgICd1X3N1bkxpZ2h0c1N0b3AnLFxuICAgICAgICAndV9zcG90TGlnaHRzU3RhcnQnLFxuICAgICAgICAndV9zcG90TGlnaHRzU3RvcCdcbiAgICAgIF1cbiAgICB9KTtcblxuICAgIHRoaXMuX3RleHR1cmVTaGFkZXJQcm9ncmFtID0gbmV3IFNoYWRlclByb2dyYW0oJ1JheVRyYWNlclJlbmRlcmVyLTEnLCB7XG4gICAgICB2ZXJ0ZXhTcmM6IHRleHR1cmVWZXJ0ZXgsXG4gICAgICBmcmFnbWVudFNyYzogdGV4dHVyZUZyYWdtZW50LFxuICAgICAgYXR0cmlidXRlczogWydhX3ZlcnRleFBvc2l0aW9uJywgJ2FfdmVydGV4VGV4dHVyZUNvb3JkJ10sXG4gICAgICB1bmlmb3JtczogWyd1X3RleHR1cmUnLCAndV9zdGVwJ11cbiAgICB9KTtcblxuICAgIHRoaXMuX2ZpbmFsVGV4dHVyZSA9IG5ldyBUZXh0dXJlKCk7XG4gICAgdGhpcy5fZnJhbWVCdWZmZXIgPSBuZXcgRnJhbWVCdWZmZXIoKTtcblxuICAgIHRoaXMuX2ZpbmFsVGV4dHVyZS5pbml0aWFsaXplKCk7XG4gICAgdGhpcy5fZmluYWxUZXh0dXJlLnByZUJpbmQoKGJvdW5kVGV4dHVyZSkgPT4ge1xuICAgICAgYm91bmRUZXh0dXJlLmFsbG9jYXRlKHRoaXMuX3JlbmRlcldpZHRoLCB0aGlzLl9yZW5kZXJIZWlnaHQpO1xuXG4gICAgICB0aGlzLl9mcmFtZUJ1ZmZlci5iaW5kKChib3VuZEZyYW1lQnVmZmVyKSA9PiB7XG4gICAgICAgIGJvdW5kRnJhbWVCdWZmZXIuYXR0YWNoVGV4dHVyZShib3VuZFRleHR1cmUpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvL1xuICAgIC8vXG5cbiAgICBjb25zdCBnZW9CdWlsZGVyID0gbmV3IEdlb21ldHJ5V3JhcHBlci5HZW9tZXRyeUJ1aWxkZXIoKTtcbiAgICBnZW9CdWlsZGVyXG4gICAgICAucmVzZXQoKVxuICAgICAgLnNldFByaW1pdGl2ZVR5cGUoJ3RyaWFuZ2xlU3RyaXAnKVxuICAgICAgLmFkZFZibygpXG4gICAgICAuYWRkVmJvQXR0cmlidXRlKCdhX3ZlcnRleFBvc2l0aW9uJywgJ3ZlYzJmJylcbiAgICAgIC5hZGRWYm8oKVxuICAgICAgLnNldFZib0FzRHluYW1pYygpXG4gICAgICAuYWRkVmJvQXR0cmlidXRlKCdhX3Bsb3RQb3NpdGlvbicsICd2ZWMzZicpO1xuXG4gICAgdGhpcy5fcmF5VHJhY2VyR2VvbWV0cnkgPSBuZXcgR2VvbWV0cnlXcmFwcGVyLkdlb21ldHJ5KFxuICAgICAgdGhpcy5fcmF5VHJhY2VyU2hhZGVyUHJvZ3JhbSxcbiAgICAgIGdlb0J1aWxkZXIuZ2V0RGVmKClcbiAgICApO1xuXG4gICAgY29uc3QgcmF5VHJhY2VyVmVydGljZXMgPSBbXTtcbiAgICByYXlUcmFjZXJWZXJ0aWNlcy5wdXNoKCsxLjAsICsxLjApOyAvLyB0b3AgcmlnaHRcbiAgICByYXlUcmFjZXJWZXJ0aWNlcy5wdXNoKC0xLjAsICsxLjApOyAvLyB0b3AgbGVmdFxuICAgIHJheVRyYWNlclZlcnRpY2VzLnB1c2goKzEuMCwgLTEuMCk7IC8vIGJvdHRvbSByaWdodFxuICAgIHJheVRyYWNlclZlcnRpY2VzLnB1c2goLTEuMCwgLTEuMCk7IC8vIGJvdHRvbSBsZWZ0XG5cbiAgICB0aGlzLl9yYXlUcmFjZXJHZW9tZXRyeS5hbGxvY2F0ZUJ1ZmZlcihcbiAgICAgIDAsXG4gICAgICByYXlUcmFjZXJWZXJ0aWNlcyxcbiAgICAgIHJheVRyYWNlclZlcnRpY2VzLmxlbmd0aFxuICAgICk7XG4gICAgdGhpcy5fcmF5VHJhY2VyR2VvbWV0cnkuc2V0UHJpbWl0aXZlU3RhcnQoMCk7XG4gICAgdGhpcy5fcmF5VHJhY2VyR2VvbWV0cnkuc2V0UHJpbWl0aXZlQ291bnQoNCk7XG5cbiAgICAvL1xuICAgIC8vXG5cbiAgICBnZW9CdWlsZGVyXG4gICAgICAucmVzZXQoKVxuICAgICAgLnNldFByaW1pdGl2ZVR5cGUoJ3RyaWFuZ2xlU3RyaXAnKVxuICAgICAgLmFkZFZibygpXG4gICAgICAuYWRkVmJvQXR0cmlidXRlKCdhX3ZlcnRleFBvc2l0aW9uJywgJ3ZlYzJmJylcbiAgICAgIC5hZGRWYm9BdHRyaWJ1dGUoJ2FfdmVydGV4VGV4dHVyZUNvb3JkJywgJ3ZlYzJmJyk7XG5cbiAgICB0aGlzLl9zY3JlZW5HZW9tZXRyeSA9IG5ldyBHZW9tZXRyeVdyYXBwZXIuR2VvbWV0cnkoXG4gICAgICB0aGlzLl90ZXh0dXJlU2hhZGVyUHJvZ3JhbSxcbiAgICAgIGdlb0J1aWxkZXIuZ2V0RGVmKClcbiAgICApO1xuXG4gICAgY29uc3Qgc2NyZWVuVmVydGljZXM6IG51bWJlcltdID0gW107XG4gICAgc2NyZWVuVmVydGljZXMucHVzaCgrMS4wLCArMS4wLCAxLCAxKTsgLy8gdG9wIHJpZ2h0XG4gICAgc2NyZWVuVmVydGljZXMucHVzaCgtMS4wLCArMS4wLCAwLCAxKTsgLy8gdG9wIGxlZnRcbiAgICBzY3JlZW5WZXJ0aWNlcy5wdXNoKCsxLjAsIC0xLjAsIDEsIDApOyAvLyBib3R0b20gcmlnaHRcbiAgICBzY3JlZW5WZXJ0aWNlcy5wdXNoKC0xLjAsIC0xLjAsIDAsIDApOyAvLyBib3R0b20gbGVmdFxuXG4gICAgdGhpcy5fc2NyZWVuR2VvbWV0cnkuYWxsb2NhdGVCdWZmZXIoXG4gICAgICAwLFxuICAgICAgc2NyZWVuVmVydGljZXMsXG4gICAgICBzY3JlZW5WZXJ0aWNlcy5sZW5ndGhcbiAgICApO1xuICAgIHRoaXMuX3NjcmVlbkdlb21ldHJ5LnNldFByaW1pdGl2ZVN0YXJ0KDApO1xuICAgIHRoaXMuX3NjcmVlbkdlb21ldHJ5LnNldFByaW1pdGl2ZUNvdW50KDQpO1xuXG4gICAgLy9cbiAgICAvL1xuXG4gICAgdGhpcy5fc2NlbmVEYXRhVGV4dHVyZSA9IG5ldyBEYXRhVGV4dHVyZSgpO1xuICAgIHRoaXMuX3NjZW5lRGF0YVRleHR1cmUuaW5pdGlhbGl6ZSgyMDQ4KTtcblxuICAgIHRoaXMuX2xpZ2h0c0RhdGFUZXh0dXJlID0gbmV3IERhdGFUZXh0dXJlKCk7XG4gICAgdGhpcy5fbGlnaHRzRGF0YVRleHR1cmUuaW5pdGlhbGl6ZSgyMDQ4KTtcblxuICAgIHRoaXMuX2NhbWVyYSA9IHtcbiAgICAgIHBvc2l0aW9uOiBnbG0udmVjMy5mcm9tVmFsdWVzKDAsIDAsIDApLFxuICAgICAgdGFyZ2V0OiBnbG0udmVjMy5mcm9tVmFsdWVzKDEuNSwgMS41LCAxLjUpLFxuICAgICAgdXA6IGdsbS52ZWMzLmZyb21WYWx1ZXMoMCwgMSwgMClcbiAgICB9O1xuICB9XG5cbiAgcHVzaFNwaGVyZSh7XG4gICAgcG9zaXRpb24sXG4gICAgcmFkaXVzLFxuICAgIGNvbG9yLFxuICAgIHJlZmxlY3Rpb25GYWN0b3IsXG4gICAgcmVmcmFjdGlvbkZhY3RvcixcbiAgICBjaGVzc2JvYXJkRW5hYmxlZCxcbiAgICBjYXN0U2hhZG93RW5hYmxlZCxcbiAgICByZWNlaXZlTGlnaHRFbmFibGVkXG4gIH06IElQdWJsaWNTcGhlcmUpOiB2b2lkIHtcbiAgICBpZiAocmFkaXVzIDw9IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBzcGhlcmUgcmFkaXVzJyk7XG4gICAgfVxuICAgIGlmIChyZWZsZWN0aW9uRmFjdG9yIDwgMCB8fCByZWZsZWN0aW9uRmFjdG9yID4gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHNwaGVyZSByZWZsZWN0aW9uJyk7XG4gICAgfVxuXG4gICAgdGhpcy5fc3BoZXJlcy5wdXNoKHtcbiAgICAgIHBvc2l0aW9uOiBbcG9zaXRpb25bMF0sIHBvc2l0aW9uWzFdLCBwb3NpdGlvblsyXV0sXG4gICAgICByYWRpdXMsXG4gICAgICBjb2xvcjogW2NvbG9yWzBdLCBjb2xvclsxXSwgY29sb3JbMl1dLFxuICAgICAgcmVmbGVjdGlvbkZhY3RvcixcbiAgICAgIHJlZnJhY3Rpb25GYWN0b3IsXG4gICAgICBjaGVzc2JvYXJkRW5hYmxlZCxcbiAgICAgIGNhc3RTaGFkb3dFbmFibGVkLFxuICAgICAgcmVjZWl2ZUxpZ2h0RW5hYmxlZFxuICAgIH0pO1xuICB9XG5cbiAgcHVzaEJveCh7XG4gICAgcG9zaXRpb24sXG4gICAgYW5nbGVYLFxuICAgIGFuZ2xlWSxcbiAgICBhbmdsZVosXG4gICAgYm94U2l6ZSxcbiAgICBjb2xvcixcbiAgICByZWZsZWN0aW9uRmFjdG9yLFxuICAgIGNoZXNzYm9hcmRFbmFibGVkLFxuICAgIGNhc3RTaGFkb3dFbmFibGVkLFxuICAgIHJlY2VpdmVMaWdodEVuYWJsZWRcbiAgfTogSVB1YmxpY0JveCk6IHZvaWQge1xuICAgIGlmIChib3hTaXplWzBdIDw9IDAgfHwgYm94U2l6ZVsxXSA8PSAwIHx8IGJveFNpemVbMl0gPD0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGJveCBzaXplJyk7XG4gICAgfVxuICAgIGlmIChyZWZsZWN0aW9uRmFjdG9yIDwgMCB8fCByZWZsZWN0aW9uRmFjdG9yID4gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGJveCByZWZsZWN0aW9uJyk7XG4gICAgfVxuXG4gICAgY29uc3QgbWF0NCA9IGdsbS5tYXQ0LmNyZWF0ZSgpO1xuICAgIGdsbS5tYXQ0LmlkZW50aXR5KG1hdDQpO1xuICAgIGdsbS5tYXQ0LnRyYW5zbGF0ZShtYXQ0LCBtYXQ0LCBwb3NpdGlvbik7XG4gICAgZ2xtLm1hdDQucm90YXRlWShtYXQ0LCBtYXQ0LCBhbmdsZVkpOyAvLyB2ZXJ0aWNhbCBheGlzIGZpcnN0XG4gICAgZ2xtLm1hdDQucm90YXRlWihtYXQ0LCBtYXQ0LCBhbmdsZVopO1xuICAgIGdsbS5tYXQ0LnJvdGF0ZVgobWF0NCwgbWF0NCwgYW5nbGVYKTtcbiAgICAvLyBnbG0ubWF0NC5zY2FsZShtYXQ0LCBtYXQ0LCBbMC41LDAuNSwwLjVdKTtcblxuICAgIHRoaXMuX2JveGVzLnB1c2goe1xuICAgICAgbWF0cml4OiBtYXQ0LFxuICAgICAgYm94U2l6ZTogZ2xtLnZlYzMuY2xvbmUoYm94U2l6ZSksXG4gICAgICBjb2xvcjogZ2xtLnZlYzMuY2xvbmUoY29sb3IpLFxuICAgICAgcmVmbGVjdGlvbkZhY3RvcixcbiAgICAgIGNoZXNzYm9hcmRFbmFibGVkLFxuICAgICAgY2FzdFNoYWRvd0VuYWJsZWQsXG4gICAgICByZWNlaXZlTGlnaHRFbmFibGVkXG4gICAgfSk7XG4gIH1cblxuICBwdXNoVHJpYW5nbGUoe1xuICAgIHYwLFxuICAgIHYxLFxuICAgIHYyLFxuICAgIGNvbG9yLFxuICAgIHJlZmxlY3Rpb25GYWN0b3IsXG4gICAgY2FzdFNoYWRvd0VuYWJsZWQsXG4gICAgcmVjZWl2ZUxpZ2h0RW5hYmxlZFxuICB9OiBJVHJpYW5nbGUpIHtcbiAgICBpZiAocmVmbGVjdGlvbkZhY3RvciA8IDAgfHwgcmVmbGVjdGlvbkZhY3RvciA+IDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCB0cmlhbmdsZSByZWZsZWN0aW9uJyk7XG4gICAgfVxuXG4gICAgdGhpcy5fdHJpYW5nbGVzLnB1c2goe1xuICAgICAgdjA6IGdsbS52ZWMzLmNsb25lKHYwKSxcbiAgICAgIHYxOiBnbG0udmVjMy5jbG9uZSh2MSksXG4gICAgICB2MjogZ2xtLnZlYzMuY2xvbmUodjIpLFxuICAgICAgY29sb3I6IGdsbS52ZWMzLmNsb25lKGNvbG9yKSxcbiAgICAgIHJlZmxlY3Rpb25GYWN0b3IsXG4gICAgICBjYXN0U2hhZG93RW5hYmxlZCxcbiAgICAgIHJlY2VpdmVMaWdodEVuYWJsZWRcbiAgICB9KTtcbiAgfVxuXG4gIHB1c2hTdW5MaWdodCh7IGRpcmVjdGlvbiwgaW50ZW5zaXR5IH06IElTdW5MaWdodCkge1xuICAgIC8vIGFkZCBzdW4gbGlnaHRcblxuICAgIGlmIChpbnRlbnNpdHkgPD0gMCkgdGhyb3cgbmV3IEVycm9yKCdpbnRlbnNpdHkgY2Fubm90IGJlIDAnKTtcbiAgICBpZiAoZ2xtLnZlYzMubGVuZ3RoKGRpcmVjdGlvbikgPT09IDApXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RpcmVjdGlvbiBjYW5ub3QgYmUgMCcpO1xuXG4gICAgY29uc3QgZGlyID0gZ2xtLnZlYzMubm9ybWFsaXplKGdsbS52ZWMzLmNsb25lKGRpcmVjdGlvbiksIGRpcmVjdGlvbik7XG5cbiAgICB0aGlzLl9zdW5MaWdodHMucHVzaCh7IGRpcmVjdGlvbjogZGlyLCBpbnRlbnNpdHkgfSk7XG4gIH1cblxuICBwdXNoU3BvdExpZ2h0KHsgcG9zaXRpb24sIGludGVuc2l0eSwgcmFkaXVzIH06IElTcG90TGlnaHQpOiB2b2lkIHtcbiAgICAvLyBhZGQgc3BvdCBsaWdodFxuXG4gICAgaWYgKGludGVuc2l0eSA8PSAwKSB0aHJvdyBuZXcgRXJyb3IoJ2ludGVuc2l0eSBjYW5ub3QgYmUgMCcpO1xuICAgIGlmIChyYWRpdXMgPD0gMCkgdGhyb3cgbmV3IEVycm9yKCdyYWRpdXMgY2Fubm90IGJlIDw9IDAnKTtcblxuICAgIHRoaXMuX3Nwb3RMaWdodHMucHVzaCh7XG4gICAgICBwb3NpdGlvbjogZ2xtLnZlYzMuY2xvbmUocG9zaXRpb24pLFxuICAgICAgaW50ZW5zaXR5LFxuICAgICAgcmFkaXVzXG4gICAgfSk7XG4gIH1cblxuICBsb29rQXQoXG4gICAgZXllOiBnbG0uUmVhZG9ubHlWZWMzLFxuICAgIHRhcmdldDogZ2xtLlJlYWRvbmx5VmVjMyxcbiAgICB1cDogZ2xtLlJlYWRvbmx5VmVjM1xuICApIHtcbiAgICBnbG0udmVjMy5jb3B5KHRoaXMuX2NhbWVyYS5wb3NpdGlvbiwgZXllKTtcblxuICAgIC8vXG4gICAgLy9cblxuICAgIGxldCBmb3J3YXJkRGlyID0gZ2xtLnZlYzMuc3ViKGdsbS52ZWMzLmNyZWF0ZSgpLCB0YXJnZXQsIGV5ZSk7XG4gICAgZm9yd2FyZERpciA9IGdsbS52ZWMzLm5vcm1hbGl6ZShmb3J3YXJkRGlyLCBmb3J3YXJkRGlyKTtcbiAgICBmb3J3YXJkRGlyID0gZ2xtLnZlYzMuYWRkKGZvcndhcmREaXIsIGV5ZSwgZm9yd2FyZERpcik7XG4gICAgZ2xtLnZlYzMuY29weSh0aGlzLl9jYW1lcmEudGFyZ2V0LCBmb3J3YXJkRGlyKTtcblxuICAgIC8vXG4gICAgLy9cblxuICAgIGNvbnN0IHVwRGlyID0gZ2xtLnZlYzMubm9ybWFsaXplKGdsbS52ZWMzLmNyZWF0ZSgpLCB1cCk7XG4gICAgZ2xtLnZlYzMuY29weSh0aGlzLl9jYW1lcmEudXAsIHVwRGlyKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICAvLyB0ZXh0dXJlIHBhc3MgZmlyc3RcbiAgICAvLyAtPiB3ZSByZW5kZXIgdGhlIHByZXZpb3VzIGZyYW1lIHRvIGF2b2lkIHBvdGVudGlhbCB3ZWJnbCBxdWV1ZSBibG9ja2luZ1xuICAgIHRoaXMuX3JlbmRlclRleHR1cmVQYXNzKCk7XG4gICAgdGhpcy5fcmVuZGVyUmF5VHJhY2luZ1Bhc3MoKTtcbiAgfVxuXG4gIHByaXZhdGUgX3JlbmRlclRleHR1cmVQYXNzKCkge1xuICAgIGNvbnN0IGdsID0gV2ViR0xDb250ZXh0LmdldENvbnRleHQoKTtcblxuICAgIGdsLnZpZXdwb3J0KDAsIDAsIHRoaXMuX2NhbnZhc1dpZHRoLCB0aGlzLl9jYW52YXNIZWlnaHQpO1xuICAgIGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQgLyp8IGdsLkRFUFRIX0JVRkZFUl9CSVQqLyk7XG5cbiAgICBjb25zdCBzaGFkZXIgPSB0aGlzLl90ZXh0dXJlU2hhZGVyUHJvZ3JhbTtcblxuICAgIHNoYWRlci5iaW5kKChib3VuZFNoYWRlcikgPT4ge1xuICAgICAgYm91bmRTaGFkZXIuc2V0VGV4dHVyZVVuaWZvcm0oJ3VfdGV4dHVyZScsIHRoaXMuX2ZpbmFsVGV4dHVyZSwgMCk7XG5cbiAgICAgIC8vIGFudGkgYWxpYXNpbmcgc2V0dXBcblxuICAgICAgaWYgKHRoaXMuX2FudGlBbGlhc2luZykge1xuICAgICAgICBjb25zdCBzdGVwWCA9ICgxIC0gdGhpcy5fcmVuZGVyV2lkdGggLyB0aGlzLl9jYW52YXNXaWR0aCkgKiAwLjAwNTtcbiAgICAgICAgY29uc3Qgc3RlcFkgPSAoMSAtIHRoaXMuX3JlbmRlckhlaWdodCAvIHRoaXMuX2NhbnZhc0hlaWdodCkgKiAwLjAwNTtcblxuICAgICAgICBib3VuZFNoYWRlci5zZXRGbG9hdDJVbmlmb3JtKCd1X3N0ZXAnLCBzdGVwWCwgc3RlcFkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYm91bmRTaGFkZXIuc2V0RmxvYXQyVW5pZm9ybSgndV9zdGVwJywgMCwgMCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3NjcmVlbkdlb21ldHJ5LnJlbmRlcigpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVuZGVyUmF5VHJhY2luZ1Bhc3MoKSB7XG4gICAgY29uc3QgZ2wgPSBXZWJHTENvbnRleHQuZ2V0Q29udGV4dCgpO1xuXG4gICAgY29uc3QgZmFyQ29ybmVycyA9IHRoaXMuX2NvbXB1dGVDYW1lcmFGYXJDb3JuZXJzKCk7XG4gICAgdGhpcy5fcmF5VHJhY2VyR2VvbWV0cnkuYWxsb2NhdGVCdWZmZXIoMSwgZmFyQ29ybmVycywgZmFyQ29ybmVycy5sZW5ndGgpO1xuXG4gICAgY29uc3Qgc2NhbGVkV2lkdGggPSBNYXRoLmZsb29yKHRoaXMuX3JlbmRlcldpZHRoKTtcbiAgICBjb25zdCBzY2FsZWRIZWlnaHQgPSBNYXRoLmZsb29yKHRoaXMuX3JlbmRlckhlaWdodCk7XG5cbiAgICB0aGlzLl9mcmFtZUJ1ZmZlci5iaW5kKCgpID0+IHtcbiAgICAgIGdsLnZpZXdwb3J0KDAsIDAsIHNjYWxlZFdpZHRoLCBzY2FsZWRIZWlnaHQpO1xuICAgICAgZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCAvKnwgZ2wuREVQVEhfQlVGRkVSX0JJVCovKTtcblxuICAgICAge1xuICAgICAgICAvLyByYXl0cmFjaW5nIHBhc3NcblxuICAgICAgICBjb25zdCBzaGFkZXIgPSB0aGlzLl9yYXlUcmFjZXJTaGFkZXJQcm9ncmFtO1xuXG4gICAgICAgIHNoYWRlci5iaW5kKChib3VuZFNoYWRlcikgPT4ge1xuICAgICAgICAgIGJvdW5kU2hhZGVyLnNldEZsb2F0M1VuaWZvcm0oXG4gICAgICAgICAgICAndV9jYW1lcmFFeWUnLFxuICAgICAgICAgICAgdGhpcy5fY2FtZXJhLnBvc2l0aW9uWzBdLFxuICAgICAgICAgICAgdGhpcy5fY2FtZXJhLnBvc2l0aW9uWzFdLFxuICAgICAgICAgICAgdGhpcy5fY2FtZXJhLnBvc2l0aW9uWzJdXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvL1xuXG4gICAgICAgICAge1xuICAgICAgICAgICAgLy8gc2NlbmUgZGF0YVxuXG4gICAgICAgICAgICBjb25zdCBzY2VuZURhdGFWYWx1ZXM6IG51bWJlcltdID0gW107XG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8vIHNwaGVyZXNcblxuICAgICAgICAgICAgICAgIGJvdW5kU2hhZGVyLnNldEludGVnZXIxVW5pZm9ybSgndV9zcGhlcmVzU3RhcnQnLCAwKTtcblxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3BoZXJlIG9mIHRoaXMuX3NwaGVyZXMpIHtcbiAgICAgICAgICAgICAgICAgIC8vIGFkZCBzcGhlcmVcblxuICAgICAgICAgICAgICAgICAgc2NlbmVEYXRhVmFsdWVzLnB1c2goXG4gICAgICAgICAgICAgICAgICAgIHNwaGVyZS5wb3NpdGlvblswXSxcbiAgICAgICAgICAgICAgICAgICAgc3BoZXJlLnBvc2l0aW9uWzFdLFxuICAgICAgICAgICAgICAgICAgICBzcGhlcmUucG9zaXRpb25bMl1cbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICBzY2VuZURhdGFWYWx1ZXMucHVzaChzcGhlcmUucmFkaXVzKTtcblxuICAgICAgICAgICAgICAgICAgc2NlbmVEYXRhVmFsdWVzLnB1c2goXG4gICAgICAgICAgICAgICAgICAgIHNwaGVyZS5jb2xvclswXSxcbiAgICAgICAgICAgICAgICAgICAgc3BoZXJlLmNvbG9yWzFdLFxuICAgICAgICAgICAgICAgICAgICBzcGhlcmUuY29sb3JbMl1cbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICBzY2VuZURhdGFWYWx1ZXMucHVzaChzcGhlcmUucmVmbGVjdGlvbkZhY3Rvcik7XG4gICAgICAgICAgICAgICAgICBzY2VuZURhdGFWYWx1ZXMucHVzaChzcGhlcmUucmVmcmFjdGlvbkZhY3Rvcik7IC8vIDhcblxuICAgICAgICAgICAgICAgICAgc2NlbmVEYXRhVmFsdWVzLnB1c2goc3BoZXJlLmNhc3RTaGFkb3dFbmFibGVkID8gMSA6IDApO1xuICAgICAgICAgICAgICAgICAgc2NlbmVEYXRhVmFsdWVzLnB1c2goc3BoZXJlLnJlY2VpdmVMaWdodEVuYWJsZWQgPyAxIDogMCk7XG5cbiAgICAgICAgICAgICAgICAgIHNjZW5lRGF0YVZhbHVlcy5wdXNoKHNwaGVyZS5jaGVzc2JvYXJkRW5hYmxlZCA/IDEgOiAwKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBib3VuZFNoYWRlci5zZXRJbnRlZ2VyMVVuaWZvcm0oXG4gICAgICAgICAgICAgICAgICAndV9zcGhlcmVzU3RvcCcsXG4gICAgICAgICAgICAgICAgICBzY2VuZURhdGFWYWx1ZXMubGVuZ3RoXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSAvLyBzcGhlcmVzXG5cbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8vIGJveGVzXG5cbiAgICAgICAgICAgICAgICBib3VuZFNoYWRlci5zZXRJbnRlZ2VyMVVuaWZvcm0oXG4gICAgICAgICAgICAgICAgICAndV9ib3hlc1N0YXJ0JyxcbiAgICAgICAgICAgICAgICAgIHNjZW5lRGF0YVZhbHVlcy5sZW5ndGhcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBib3ggb2YgdGhpcy5fYm94ZXMpIHtcbiAgICAgICAgICAgICAgICAgIC8vIGFkZCBib3hcblxuICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaWkgPSAwOyBpaSA8IDE2OyArK2lpKVxuICAgICAgICAgICAgICAgICAgICBzY2VuZURhdGFWYWx1ZXMucHVzaChib3gubWF0cml4W2lpXSk7XG5cbiAgICAgICAgICAgICAgICAgIHNjZW5lRGF0YVZhbHVlcy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICBib3guYm94U2l6ZVswXSxcbiAgICAgICAgICAgICAgICAgICAgYm94LmJveFNpemVbMV0sXG4gICAgICAgICAgICAgICAgICAgIGJveC5ib3hTaXplWzJdXG4gICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICBzY2VuZURhdGFWYWx1ZXMucHVzaChcbiAgICAgICAgICAgICAgICAgICAgYm94LmNvbG9yWzBdLFxuICAgICAgICAgICAgICAgICAgICBib3guY29sb3JbMV0sXG4gICAgICAgICAgICAgICAgICAgIGJveC5jb2xvclsyXVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIHNjZW5lRGF0YVZhbHVlcy5wdXNoKGJveC5yZWZsZWN0aW9uRmFjdG9yKTtcblxuICAgICAgICAgICAgICAgICAgc2NlbmVEYXRhVmFsdWVzLnB1c2goYm94LmNhc3RTaGFkb3dFbmFibGVkID8gMSA6IDApO1xuICAgICAgICAgICAgICAgICAgc2NlbmVEYXRhVmFsdWVzLnB1c2goYm94LnJlY2VpdmVMaWdodEVuYWJsZWQgPyAxIDogMCk7XG5cbiAgICAgICAgICAgICAgICAgIHNjZW5lRGF0YVZhbHVlcy5wdXNoKGJveC5jaGVzc2JvYXJkRW5hYmxlZCA/IDEgOiAwKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBib3VuZFNoYWRlci5zZXRJbnRlZ2VyMVVuaWZvcm0oXG4gICAgICAgICAgICAgICAgICAndV9ib3hlc1N0b3AnLFxuICAgICAgICAgICAgICAgICAgc2NlbmVEYXRhVmFsdWVzLmxlbmd0aFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0gLy8gYm94ZXNcblxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLy8gdHJpYW5nbGVzXG5cbiAgICAgICAgICAgICAgICBib3VuZFNoYWRlci5zZXRJbnRlZ2VyMVVuaWZvcm0oXG4gICAgICAgICAgICAgICAgICAndV90cmlhbmdsZXNTdGFydCcsXG4gICAgICAgICAgICAgICAgICBzY2VuZURhdGFWYWx1ZXMubGVuZ3RoXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdHJpYW5nbGUgb2YgdGhpcy5fdHJpYW5nbGVzKSB7XG4gICAgICAgICAgICAgICAgICAvLyBhZGQgdHJpYW5nbGVcblxuICAgICAgICAgICAgICAgICAgc2NlbmVEYXRhVmFsdWVzLnB1c2goXG4gICAgICAgICAgICAgICAgICAgIHRyaWFuZ2xlLnYwWzBdLFxuICAgICAgICAgICAgICAgICAgICB0cmlhbmdsZS52MFsxXSxcbiAgICAgICAgICAgICAgICAgICAgdHJpYW5nbGUudjBbMl1cbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICBzY2VuZURhdGFWYWx1ZXMucHVzaChcbiAgICAgICAgICAgICAgICAgICAgdHJpYW5nbGUudjFbMF0sXG4gICAgICAgICAgICAgICAgICAgIHRyaWFuZ2xlLnYxWzFdLFxuICAgICAgICAgICAgICAgICAgICB0cmlhbmdsZS52MVsyXVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIHNjZW5lRGF0YVZhbHVlcy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICB0cmlhbmdsZS52MlswXSxcbiAgICAgICAgICAgICAgICAgICAgdHJpYW5nbGUudjJbMV0sXG4gICAgICAgICAgICAgICAgICAgIHRyaWFuZ2xlLnYyWzJdXG4gICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICBzY2VuZURhdGFWYWx1ZXMucHVzaChcbiAgICAgICAgICAgICAgICAgICAgdHJpYW5nbGUuY29sb3JbMF0sXG4gICAgICAgICAgICAgICAgICAgIHRyaWFuZ2xlLmNvbG9yWzFdLFxuICAgICAgICAgICAgICAgICAgICB0cmlhbmdsZS5jb2xvclsyXVxuICAgICAgICAgICAgICAgICAgKTsgLy8gY29sb3JcbiAgICAgICAgICAgICAgICAgIHNjZW5lRGF0YVZhbHVlcy5wdXNoKHRyaWFuZ2xlLnJlZmxlY3Rpb25GYWN0b3IpOyAvLyByZWZsZWN0aW9uXG5cbiAgICAgICAgICAgICAgICAgIHNjZW5lRGF0YVZhbHVlcy5wdXNoKHRyaWFuZ2xlLmNhc3RTaGFkb3dFbmFibGVkID8gMSA6IDApOyAvLyBjYXN0U2hhZG93XG4gICAgICAgICAgICAgICAgICBzY2VuZURhdGFWYWx1ZXMucHVzaCh0cmlhbmdsZS5yZWNlaXZlTGlnaHRFbmFibGVkID8gMSA6IDApOyAvLyByZWNlaXZlTGlnaHRcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBib3VuZFNoYWRlci5zZXRJbnRlZ2VyMVVuaWZvcm0oXG4gICAgICAgICAgICAgICAgICAndV90cmlhbmdsZXNTdG9wJyxcbiAgICAgICAgICAgICAgICAgIHNjZW5lRGF0YVZhbHVlcy5sZW5ndGhcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9IC8vIHRyaWFuZ2xlc1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwICsgMCk7XG4gICAgICAgICAgICB0aGlzLl9zY2VuZURhdGFUZXh0dXJlLnByZUJpbmQoKGJvdW5kRGF0YVRleHR1cmUpID0+IHtcbiAgICAgICAgICAgICAgYm91bmREYXRhVGV4dHVyZS51cGRhdGUoMCwgc2NlbmVEYXRhVmFsdWVzKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBib3VuZFNoYWRlci5zZXRJbnRlZ2VyMVVuaWZvcm0oJ3Vfc2NlbmVUZXh0dXJlRGF0YScsIDApO1xuICAgICAgICAgICAgYm91bmRTaGFkZXIuc2V0SW50ZWdlcjFVbmlmb3JtKFxuICAgICAgICAgICAgICAndV9zY2VuZVRleHR1cmVTaXplJyxcbiAgICAgICAgICAgICAgc2NlbmVEYXRhVmFsdWVzLmxlbmd0aFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IC8vIHNjZW5lIGRhdGFcblxuICAgICAgICAgIHtcbiAgICAgICAgICAgIC8vIGxpZ2h0cyBkYXRhXG5cbiAgICAgICAgICAgIGNvbnN0IGxpZ2h0c0RhdGFWYWx1ZXM6IG51bWJlcltdID0gW107XG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgLy8gc3VuIGxpZ2h0c1xuXG4gICAgICAgICAgICAgIGJvdW5kU2hhZGVyLnNldEludGVnZXIxVW5pZm9ybSgndV9zdW5MaWdodHNTdGFydCcsIDApO1xuXG4gICAgICAgICAgICAgIGZvciAoY29uc3Qgc3VuTGlnaHQgb2YgdGhpcy5fc3VuTGlnaHRzKSB7XG4gICAgICAgICAgICAgICAgLy8gYWRkIHN1biBsaWdodFxuXG4gICAgICAgICAgICAgICAgbGlnaHRzRGF0YVZhbHVlcy5wdXNoKFxuICAgICAgICAgICAgICAgICAgc3VuTGlnaHQuZGlyZWN0aW9uWzBdLFxuICAgICAgICAgICAgICAgICAgc3VuTGlnaHQuZGlyZWN0aW9uWzFdLFxuICAgICAgICAgICAgICAgICAgc3VuTGlnaHQuZGlyZWN0aW9uWzJdXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBsaWdodHNEYXRhVmFsdWVzLnB1c2goc3VuTGlnaHQuaW50ZW5zaXR5KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGJvdW5kU2hhZGVyLnNldEludGVnZXIxVW5pZm9ybShcbiAgICAgICAgICAgICAgICAndV9zdW5MaWdodHNTdG9wJyxcbiAgICAgICAgICAgICAgICBsaWdodHNEYXRhVmFsdWVzLmxlbmd0aFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSAvLyBzdW4gbGlnaHRzXG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgLy8gc3BvdCBsaWdodHNcblxuICAgICAgICAgICAgICBib3VuZFNoYWRlci5zZXRJbnRlZ2VyMVVuaWZvcm0oXG4gICAgICAgICAgICAgICAgJ3Vfc3BvdExpZ2h0c1N0YXJ0JyxcbiAgICAgICAgICAgICAgICBsaWdodHNEYXRhVmFsdWVzLmxlbmd0aFxuICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgIGZvciAoY29uc3Qgc3BvdExpZ2h0IG9mIHRoaXMuX3Nwb3RMaWdodHMpIHtcbiAgICAgICAgICAgICAgICAvLyBhZGQgc3BvdCBsaWdodFxuXG4gICAgICAgICAgICAgICAgbGlnaHRzRGF0YVZhbHVlcy5wdXNoKFxuICAgICAgICAgICAgICAgICAgc3BvdExpZ2h0LnBvc2l0aW9uWzBdLFxuICAgICAgICAgICAgICAgICAgc3BvdExpZ2h0LnBvc2l0aW9uWzFdLFxuICAgICAgICAgICAgICAgICAgc3BvdExpZ2h0LnBvc2l0aW9uWzJdXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBsaWdodHNEYXRhVmFsdWVzLnB1c2goc3BvdExpZ2h0LnJhZGl1cyk7XG4gICAgICAgICAgICAgICAgbGlnaHRzRGF0YVZhbHVlcy5wdXNoKHNwb3RMaWdodC5pbnRlbnNpdHkpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYm91bmRTaGFkZXIuc2V0SW50ZWdlcjFVbmlmb3JtKFxuICAgICAgICAgICAgICAgICd1X3Nwb3RMaWdodHNTdG9wJyxcbiAgICAgICAgICAgICAgICBsaWdodHNEYXRhVmFsdWVzLmxlbmd0aFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSAvLyBzcG90IGxpZ2h0c1xuXG4gICAgICAgICAgICBnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwICsgMSk7XG4gICAgICAgICAgICB0aGlzLl9saWdodHNEYXRhVGV4dHVyZS5wcmVCaW5kKChib3VuZERhdGFUZXh0dXJlKSA9PiB7XG4gICAgICAgICAgICAgIGJvdW5kRGF0YVRleHR1cmUudXBkYXRlKDAsIGxpZ2h0c0RhdGFWYWx1ZXMpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGJvdW5kU2hhZGVyLnNldEludGVnZXIxVW5pZm9ybSgndV9saWdodHNUZXh0dXJlRGF0YScsIDEpO1xuICAgICAgICAgIH0gLy8gbGlnaHRzIGRhdGFcblxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvL1xuXG4gICAgICAgICAgdGhpcy5fcmF5VHJhY2VyR2VvbWV0cnkucmVuZGVyKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSAvLyByYXl0cmFjaW5nIHBhc3NcbiAgICB9KTtcbiAgfVxuXG4gIHJlc2V0KCk6IHZvaWQge1xuICAgIHRoaXMuX3N1bkxpZ2h0cy5sZW5ndGggPSAwO1xuICAgIHRoaXMuX3Nwb3RMaWdodHMubGVuZ3RoID0gMDtcblxuICAgIHRoaXMuX3NwaGVyZXMubGVuZ3RoID0gMDtcbiAgICB0aGlzLl9ib3hlcy5sZW5ndGggPSAwO1xuICAgIHRoaXMuX3RyaWFuZ2xlcy5sZW5ndGggPSAwO1xuICB9XG5cbiAgc2V0UmVzb2x1dGlvbkNvZWYoaW5SZXNvbHV0aW9uQ29lZjogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKFxuICAgICAgaW5SZXNvbHV0aW9uQ29lZiA9PT0gdGhpcy5fcmVzb2x1dGlvbkNvZWYgfHxcbiAgICAgIGluUmVzb2x1dGlvbkNvZWYgPD0gMCB8fFxuICAgICAgaW5SZXNvbHV0aW9uQ29lZiA+IDFcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9yZXNvbHV0aW9uQ29lZiA9IGluUmVzb2x1dGlvbkNvZWY7XG5cbiAgICB0aGlzLl9yZW5kZXJXaWR0aCA9IE1hdGguZmxvb3IodGhpcy5fY2FudmFzV2lkdGggKiB0aGlzLl9yZXNvbHV0aW9uQ29lZik7XG4gICAgdGhpcy5fcmVuZGVySGVpZ2h0ID0gTWF0aC5mbG9vcih0aGlzLl9jYW52YXNIZWlnaHQgKiB0aGlzLl9yZXNvbHV0aW9uQ29lZik7XG5cbiAgICB0aGlzLl9maW5hbFRleHR1cmUucHJlQmluZCgoYm91bmRUZXh0dXJlKSA9PiB7XG4gICAgICBib3VuZFRleHR1cmUucmVzaXplKHRoaXMuX3JlbmRlcldpZHRoLCB0aGlzLl9yZW5kZXJIZWlnaHQpO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0UmVzb2x1dGlvbkNvZWYoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fcmVzb2x1dGlvbkNvZWY7XG4gIH1cblxuICBzZXRBbnRpQWxpYXNpbmcoZW5hYmxlZDogYm9vbGVhbikge1xuICAgIHRoaXMuX2FudGlBbGlhc2luZyA9IGVuYWJsZWQ7XG4gIH1cblxuICBnZXRBbnRpQWxpYXNpbmcoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2FudGlBbGlhc2luZztcbiAgfVxuXG4gIGdldEN1cnJlbnRTaXplKCk6IGdsbS5SZWFkb25seVZlYzIge1xuICAgIHJldHVybiBbdGhpcy5fcmVuZGVyV2lkdGgsIHRoaXMuX3JlbmRlckhlaWdodF07XG4gIH1cblxuICBwcml2YXRlIF9jb21wdXRlQ2FtZXJhRmFyQ29ybmVycygpOiBSZWFkb25seUFycmF5PG51bWJlcj4ge1xuICAgIGNvbnN0IGZvcndhcmREaXIgPSBnbG0udmVjMy5zdWIoXG4gICAgICBnbG0udmVjMy5jcmVhdGUoKSxcbiAgICAgIHRoaXMuX2NhbWVyYS50YXJnZXQsXG4gICAgICB0aGlzLl9jYW1lcmEucG9zaXRpb25cbiAgICApO1xuXG4gICAgY29uc3QgbGVmdERpciA9IGdsbS52ZWMzLmNyb3NzKFxuICAgICAgZ2xtLnZlYzMuY3JlYXRlKCksXG4gICAgICBmb3J3YXJkRGlyLFxuICAgICAgdGhpcy5fY2FtZXJhLnVwXG4gICAgKTtcbiAgICBjb25zdCB1cERpciA9IGdsbS52ZWMzLmNyb3NzKGdsbS52ZWMzLmNyZWF0ZSgpLCBsZWZ0RGlyLCBmb3J3YXJkRGlyKTtcblxuICAgIGNvbnN0IHJhZEhGb3Z5ID0gX2RlZ3JlZVRvUmFkKHRoaXMuX2NhbWVyYUZvdnkgKiAwLjUpO1xuICAgIGNvbnN0IHhMZW5ndGggPSAoTWF0aC5jb3MocmFkSEZvdnkpICogMSkgLyBNYXRoLnNpbihyYWRIRm92eSk7XG5cbiAgICBjb25zdCBzY2FsZWRGb3J3YXJkRGlyID0gZ2xtLnZlYzMubXVsdGlwbHkoXG4gICAgICBnbG0udmVjMy5jcmVhdGUoKSxcbiAgICAgIGZvcndhcmREaXIsXG4gICAgICBnbG0udmVjMy5mcm9tVmFsdWVzKHhMZW5ndGgsIHhMZW5ndGgsIHhMZW5ndGgpXG4gICAgKTtcbiAgICBjb25zdCBmYXJDZW50ZXIgPSBnbG0udmVjMy5hZGQoXG4gICAgICBnbG0udmVjMy5jcmVhdGUoKSxcbiAgICAgIHRoaXMuX2NhbWVyYS5wb3NpdGlvbixcbiAgICAgIHNjYWxlZEZvcndhcmREaXJcbiAgICApO1xuXG4gICAgY29uc3QgYXNwZWN0UmF0aW8gPSB0aGlzLl9jYW52YXNXaWR0aCAvIHRoaXMuX2NhbnZhc0hlaWdodDtcbiAgICBjb25zdCBmYXJIYWxmV2lkdGggPSBnbG0udmVjMy5tdWx0aXBseShcbiAgICAgIGdsbS52ZWMzLmNyZWF0ZSgpLFxuICAgICAgbGVmdERpcixcbiAgICAgIGdsbS52ZWMzLmZyb21WYWx1ZXMoYXNwZWN0UmF0aW8sIGFzcGVjdFJhdGlvLCBhc3BlY3RSYXRpbylcbiAgICApO1xuXG4gICAgY29uc3QgZmFyVXAgPSBnbG0udmVjMy5hZGQoZ2xtLnZlYzMuY3JlYXRlKCksIGZhckNlbnRlciwgdXBEaXIpO1xuICAgIGNvbnN0IGZhckJvdHRvbSA9IGdsbS52ZWMzLnN1YnRyYWN0KGdsbS52ZWMzLmNyZWF0ZSgpLCBmYXJDZW50ZXIsIHVwRGlyKTtcbiAgICBjb25zdCBmYXJUb3BMZWZ0ID0gZ2xtLnZlYzMuc3VidHJhY3QoXG4gICAgICBnbG0udmVjMy5jcmVhdGUoKSxcbiAgICAgIGZhclVwLFxuICAgICAgZmFySGFsZldpZHRoXG4gICAgKTtcbiAgICBjb25zdCBmYXJCb3R0b21MZWZ0ID0gZ2xtLnZlYzMuc3VidHJhY3QoXG4gICAgICBnbG0udmVjMy5jcmVhdGUoKSxcbiAgICAgIGZhckJvdHRvbSxcbiAgICAgIGZhckhhbGZXaWR0aFxuICAgICk7XG4gICAgY29uc3QgZmFyVG9wUmlnaHQgPSBnbG0udmVjMy5hZGQoZ2xtLnZlYzMuY3JlYXRlKCksIGZhclVwLCBmYXJIYWxmV2lkdGgpO1xuICAgIGNvbnN0IGZhckJvdHRvbVJpZ2h0ID0gZ2xtLnZlYzMuYWRkKFxuICAgICAgZ2xtLnZlYzMuY3JlYXRlKCksXG4gICAgICBmYXJCb3R0b20sXG4gICAgICBmYXJIYWxmV2lkdGhcbiAgICApO1xuXG4gICAgcmV0dXJuIFtcbiAgICAgIGZhclRvcFJpZ2h0WzBdLFxuICAgICAgZmFyVG9wUmlnaHRbMV0sXG4gICAgICBmYXJUb3BSaWdodFsyXSxcbiAgICAgIGZhclRvcExlZnRbMF0sXG4gICAgICBmYXJUb3BMZWZ0WzFdLFxuICAgICAgZmFyVG9wTGVmdFsyXSxcbiAgICAgIGZhckJvdHRvbVJpZ2h0WzBdLFxuICAgICAgZmFyQm90dG9tUmlnaHRbMV0sXG4gICAgICBmYXJCb3R0b21SaWdodFsyXSxcbiAgICAgIGZhckJvdHRvbUxlZnRbMF0sXG4gICAgICBmYXJCb3R0b21MZWZ0WzFdLFxuICAgICAgZmFyQm90dG9tTGVmdFsyXVxuICAgIF07XG4gIH1cblxuICBnZXQgY2FudmFzV2lkdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NhbnZhc1dpZHRoO1xuICB9XG4gIGdldCBjYW52YXNIZWlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NhbnZhc0hlaWdodDtcbiAgfVxuICBnZXQgcmVuZGVyV2lkdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlbmRlcldpZHRoO1xuICB9XG4gIGdldCByZW5kZXJIZWlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlbmRlckhlaWdodDtcbiAgfVxuXG4gIGdldCBjYW1lcmEoKTogUmVhZG9ubHk8SUNhbWVyYT4ge1xuICAgIHJldHVybiB0aGlzLl9jYW1lcmE7XG4gIH1cblxuICBnZXQgc3BoZXJlcygpOiBSZWFkb25seUFycmF5PElJbnRlcm5hbFNwaGVyZT4ge1xuICAgIHJldHVybiB0aGlzLl9zcGhlcmVzO1xuICB9XG4gIGdldCBib3hlcygpOiBSZWFkb25seUFycmF5PEludGVybmFsQm94PiB7XG4gICAgcmV0dXJuIHRoaXMuX2JveGVzO1xuICB9XG4gIGdldCB0cmlhbmdsZXMoKTogUmVhZG9ubHlBcnJheTxJVHJpYW5nbGU+IHtcbiAgICByZXR1cm4gdGhpcy5fdHJpYW5nbGVzO1xuICB9XG5cbiAgZ2V0IHN1bkxpZ2h0cygpOiBSZWFkb25seUFycmF5PElTdW5MaWdodD4ge1xuICAgIHJldHVybiB0aGlzLl9zdW5MaWdodHM7XG4gIH1cbiAgZ2V0IHNwb3RMaWdodHMoKTogUmVhZG9ubHlBcnJheTxJU3BvdExpZ2h0PiB7XG4gICAgcmV0dXJuIHRoaXMuX3Nwb3RMaWdodHM7XG4gIH1cbn1cbiIsCiAgImltcG9ydCB7IGdyYXBoaWNzIH0gZnJvbSAnQGxvY2FsLWZyYW1ld29yayc7XG5jb25zdCB7IFdlYkdMQ29udGV4dCB9ID0gZ3JhcGhpY3Mud2ViZ2wyO1xuY29uc3QgeyBDYW1lcmEgfSA9IGdyYXBoaWNzLmNhbWVyYTtcbmNvbnN0IHsgVGV4dFJlbmRlcmVyLCBTdGFja1JlbmRlcmVycyB9ID0gZ3JhcGhpY3MucmVuZGVyZXJzO1xuXG5pbXBvcnQge1xuICBSYXlUcmFjZXJSZW5kZXJlcixcbiAgSVRyaWFuZ2xlLFxuICBJUHVibGljU3BoZXJlLFxuICBJUmF5VHJhY2VyUmVuZGVyZXIsXG4gIEludGVybmFsQm94XG59IGZyb20gJy4vcmVuZGVyZXJzJztcblxuaW1wb3J0ICogYXMgZ2xtIGZyb20gJ2dsLW1hdHJpeCc7XG5cbi8vXG5cbmNvbnN0IGtfZm92eSA9IDcwO1xuXG5pbnRlcmZhY2UgSURlZmluaXRpb24ge1xuICBjYW52YXNEb21FbGVtZW50OiBIVE1MQ2FudmFzRWxlbWVudDtcbn1cblxuZXhwb3J0IGNsYXNzIFJlbmRlcmVyIHtcbiAgcHJpdmF0ZSBfZGVmOiBJRGVmaW5pdGlvbjtcblxuICBwcml2YXRlIF9yYXlUcmFjZXJSZW5kZXJlcjogUmF5VHJhY2VyUmVuZGVyZXI7XG4gIHByaXZhdGUgX3RleHRSZW5kZXJlcjogZ3JhcGhpY3MucmVuZGVyZXJzLlRleHRSZW5kZXJlcjtcbiAgcHJpdmF0ZSBfc3RhY2tSZW5kZXJlcnM6IGdyYXBoaWNzLnJlbmRlcmVycy5TdGFja1JlbmRlcmVycztcbiAgcHJpdmF0ZSBfbXVsdGlwbGVCdWZmZXJpbmc6IGdyYXBoaWNzLnJlbmRlcmVycy5NdWx0aUJ1ZmZlcnNSZW5kZXJpbmc7XG5cbiAgcHJpdmF0ZSBfZGVidWdTY2VuZUNhbWVyYSA9IG5ldyBDYW1lcmEoKTtcbiAgcHJpdmF0ZSBfbWFpbkh1ZENhbWVyYSA9IG5ldyBDYW1lcmEoKTtcblxuICBjb25zdHJ1Y3RvcihkZWY6IElEZWZpbml0aW9uKSB7XG4gICAgdGhpcy5fZGVmID0gZGVmO1xuXG4gICAgdGhpcy5yZXNpemUoXG4gICAgICB0aGlzLl9kZWYuY2FudmFzRG9tRWxlbWVudC53aWR0aCxcbiAgICAgIHRoaXMuX2RlZi5jYW52YXNEb21FbGVtZW50LmhlaWdodFxuICAgICk7XG5cbiAgICBXZWJHTENvbnRleHQuaW5pdGlhbGl6ZSh0aGlzLl9kZWYuY2FudmFzRG9tRWxlbWVudCk7XG5cbiAgICB0aGlzLl9yYXlUcmFjZXJSZW5kZXJlciA9IG5ldyBSYXlUcmFjZXJSZW5kZXJlcih7XG4gICAgICBjYW52YXNXaWR0aDogdGhpcy5fZGVmLmNhbnZhc0RvbUVsZW1lbnQud2lkdGgsXG4gICAgICBjYW52YXNIZWlnaHQ6IHRoaXMuX2RlZi5jYW52YXNEb21FbGVtZW50LmhlaWdodCxcbiAgICAgIGZvdnk6IGtfZm92eVxuICAgIH0pO1xuICAgIHRoaXMuX3RleHRSZW5kZXJlciA9IG5ldyBUZXh0UmVuZGVyZXIoKTtcbiAgICB0aGlzLl9zdGFja1JlbmRlcmVycyA9IG5ldyBTdGFja1JlbmRlcmVycygpO1xuICAgIHRoaXMuX211bHRpcGxlQnVmZmVyaW5nID0gbmV3IGdyYXBoaWNzLnJlbmRlcmVycy5NdWx0aUJ1ZmZlcnNSZW5kZXJpbmcoXG4gICAgICB0aGlzLl9kZWYuY2FudmFzRG9tRWxlbWVudC53aWR0aCxcbiAgICAgIHRoaXMuX2RlZi5jYW52YXNEb21FbGVtZW50LmhlaWdodFxuICAgICk7XG4gIH1cblxuICBpbml0aWFsaXplKCkge1xuICAgIGNvbnN0IGdsID0gV2ViR0xDb250ZXh0LmdldENvbnRleHQoKTtcblxuICAgIC8vIGZvdCB0aGUgZGF0YSB0ZXh0dXJlIHRvIGdvdCBmcm9tIFwiZmxvYXQgdG8gZmxvYXRcIlxuICAgIC8vID0+IGluc3RlYWQgb2YgXCJ2ZWM0IHRvIHZlYzRcIlxuICAgIGNvbnN0IGFsaWdubWVudCA9IDE7XG4gICAgZ2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX0FMSUdOTUVOVCwgYWxpZ25tZW50KTtcblxuICAgIC8vXG4gICAgLy9cbiAgICAvLyBpbml0aWFsaXplIFdlYkdMXG5cbiAgICBnbC5kaXNhYmxlKGdsLkRFUFRIX1RFU1QpO1xuICAgIGdsLmRpc2FibGUoZ2wuQkxFTkQpO1xuICAgIGdsLmRpc2FibGUoZ2wuQ1VMTF9GQUNFKTtcbiAgICBnbC5kZXB0aEZ1bmMoZ2wuTkVWRVIpO1xuXG4gICAgZ2wuY2xlYXJDb2xvcigwLjAsIDAuMCwgMC4wLCAxLjApO1xuICAgIGdsLmNsZWFyRGVwdGgoMS4wKTtcbiAgfVxuXG4gIHJlc2l6ZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xuICAgIHRoaXMuX2RlYnVnU2NlbmVDYW1lcmEuc2V0Vmlld3BvcnRTaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgIHRoaXMuX2RlYnVnU2NlbmVDYW1lcmEuc2V0QXNQZXJzcGVjdGl2ZSh7XG4gICAgICBmb3Z5OiBrX2ZvdnksXG4gICAgICBuZWFyOiAxLFxuICAgICAgZmFyOiA1MDBcbiAgICB9KTtcblxuICAgIHRoaXMuX21haW5IdWRDYW1lcmEuc2V0Vmlld3BvcnRTaXplKHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgY29uc3QgaFdpZHRoID0gd2lkdGggKiAwLjU7XG4gICAgY29uc3QgaEhlaWdodCA9IGhlaWdodCAqIDAuNTtcblxuICAgIHRoaXMuX21haW5IdWRDYW1lcmEuc2V0QXNPcnRob2dvbmFsKHtcbiAgICAgIGxlZnQ6IC1oV2lkdGgsXG4gICAgICByaWdodDogK2hXaWR0aCxcbiAgICAgIHRvcDogLWhIZWlnaHQsXG4gICAgICBib3R0b206ICtoSGVpZ2h0LFxuICAgICAgbmVhcjogLTIwMCxcbiAgICAgIGZhcjogMjAwXG4gICAgfSk7XG4gICAgdGhpcy5fbWFpbkh1ZENhbWVyYS5zZXRFeWUoW2hXaWR0aCwgaEhlaWdodCwgMV0pO1xuICAgIHRoaXMuX21haW5IdWRDYW1lcmEuc2V0VGFyZ2V0KFtoV2lkdGgsIGhIZWlnaHQsIDBdKTtcbiAgICB0aGlzLl9tYWluSHVkQ2FtZXJhLnNldFVwQXhpcyhbMCwgMSwgMF0pO1xuICAgIHRoaXMuX21haW5IdWRDYW1lcmEuY29tcHV0ZU1hdHJpY2VzKCk7XG4gIH1cblxuICBwcml2YXRlIF9wdXNoV2lyZUZyYW1lU3BoZXJlKHNwaGVyZTogSVB1YmxpY1NwaGVyZSkge1xuICAgIGNvbnN0IFggPSAwLjUyNTczMTExMjExOTEzMzYwNiAqIHNwaGVyZS5yYWRpdXM7XG4gICAgY29uc3QgWiA9IDAuODUwNjUwODA4MzUyMDM5OTMyICogc3BoZXJlLnJhZGl1cztcbiAgICBjb25zdCBOID0gMC4wO1xuXG4gICAgY29uc3QgcG9zaXRpb25zOiBSZWFkb25seUFycmF5PGdsbS52ZWMzPiA9IFtcbiAgICAgIFstWCwgTiwgWl0sXG4gICAgICBbWCwgTiwgWl0sXG4gICAgICBbLVgsIE4sIC1aXSxcbiAgICAgIFtYLCBOLCAtWl0sXG4gICAgICBbTiwgWiwgWF0sXG4gICAgICBbTiwgWiwgLVhdLFxuICAgICAgW04sIC1aLCBYXSxcbiAgICAgIFtOLCAtWiwgLVhdLFxuICAgICAgW1osIFgsIE5dLFxuICAgICAgWy1aLCBYLCBOXSxcbiAgICAgIFtaLCAtWCwgTl0sXG4gICAgICBbLVosIC1YLCBOXVxuICAgIF07XG5cbiAgICBmb3IgKGxldCBpaSA9IDA7IGlpIDwgcG9zaXRpb25zLmxlbmd0aDsgKytpaSkge1xuICAgICAgcG9zaXRpb25zW2lpXVswXSArPSBzcGhlcmUucG9zaXRpb25bMF07XG4gICAgICBwb3NpdGlvbnNbaWldWzFdICs9IHNwaGVyZS5wb3NpdGlvblsxXTtcbiAgICAgIHBvc2l0aW9uc1tpaV1bMl0gKz0gc3BoZXJlLnBvc2l0aW9uWzJdO1xuICAgIH1cblxuICAgIGNvbnN0IGluZGljZXM6IFJlYWRvbmx5QXJyYXk8Z2xtLlJlYWRvbmx5VmVjMz4gPSBbXG4gICAgICBbMCwgNCwgMV0sXG4gICAgICBbMCwgOSwgNF0sXG4gICAgICBbOSwgNSwgNF0sXG4gICAgICBbNCwgNSwgOF0sXG4gICAgICBbNCwgOCwgMV0sXG4gICAgICBbOCwgMTAsIDFdLFxuICAgICAgWzgsIDMsIDEwXSxcbiAgICAgIFs1LCAzLCA4XSxcbiAgICAgIFs1LCAyLCAzXSxcbiAgICAgIFsyLCA3LCAzXSxcbiAgICAgIFs3LCAxMCwgM10sXG4gICAgICBbNywgNiwgMTBdLFxuICAgICAgWzcsIDExLCA2XSxcbiAgICAgIFsxMSwgMCwgNl0sXG4gICAgICBbMCwgMSwgNl0sXG4gICAgICBbNiwgMSwgMTBdLFxuICAgICAgWzksIDAsIDExXSxcbiAgICAgIFs5LCAxMSwgMl0sXG4gICAgICBbOSwgMiwgNV0sXG4gICAgICBbNywgMiwgMTFdXG4gICAgXTtcblxuICAgIGZvciAoY29uc3QgaW5kZXggb2YgaW5kaWNlcykge1xuICAgICAgY29uc3QgdjEgPSBwb3NpdGlvbnNbaW5kZXhbMF1dO1xuICAgICAgY29uc3QgdjIgPSBwb3NpdGlvbnNbaW5kZXhbMV1dO1xuICAgICAgY29uc3QgdjMgPSBwb3NpdGlvbnNbaW5kZXhbMl1dO1xuXG4gICAgICB0aGlzLl9zdGFja1JlbmRlcmVycy5wdXNoTGluZSh2MSwgdjIsIHNwaGVyZS5jb2xvcik7XG4gICAgICB0aGlzLl9zdGFja1JlbmRlcmVycy5wdXNoTGluZSh2MiwgdjMsIHNwaGVyZS5jb2xvcik7XG4gICAgICB0aGlzLl9zdGFja1JlbmRlcmVycy5wdXNoTGluZSh2MywgdjEsIHNwaGVyZS5jb2xvcik7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfcHVzaFdpcmVGcmFtZUJveChib3g6IEludGVybmFsQm94KSB7XG4gICAgY29uc3QgdmVydGljZXM6IFJlYWRvbmx5QXJyYXk8Z2xtLlJlYWRvbmx5VmVjMz4gPSBbXG4gICAgICBnbG0udmVjMy5mcm9tVmFsdWVzKC1ib3guYm94U2l6ZVswXSwgLWJveC5ib3hTaXplWzFdLCAtYm94LmJveFNpemVbMl0pLFxuICAgICAgZ2xtLnZlYzMuZnJvbVZhbHVlcygrYm94LmJveFNpemVbMF0sIC1ib3guYm94U2l6ZVsxXSwgLWJveC5ib3hTaXplWzJdKSxcbiAgICAgIGdsbS52ZWMzLmZyb21WYWx1ZXMoLWJveC5ib3hTaXplWzBdLCArYm94LmJveFNpemVbMV0sIC1ib3guYm94U2l6ZVsyXSksXG4gICAgICBnbG0udmVjMy5mcm9tVmFsdWVzKCtib3guYm94U2l6ZVswXSwgK2JveC5ib3hTaXplWzFdLCAtYm94LmJveFNpemVbMl0pLFxuICAgICAgZ2xtLnZlYzMuZnJvbVZhbHVlcygtYm94LmJveFNpemVbMF0sIC1ib3guYm94U2l6ZVsxXSwgK2JveC5ib3hTaXplWzJdKSxcbiAgICAgIGdsbS52ZWMzLmZyb21WYWx1ZXMoK2JveC5ib3hTaXplWzBdLCAtYm94LmJveFNpemVbMV0sICtib3guYm94U2l6ZVsyXSksXG4gICAgICBnbG0udmVjMy5mcm9tVmFsdWVzKC1ib3guYm94U2l6ZVswXSwgK2JveC5ib3hTaXplWzFdLCArYm94LmJveFNpemVbMl0pLFxuICAgICAgZ2xtLnZlYzMuZnJvbVZhbHVlcygrYm94LmJveFNpemVbMF0sICtib3guYm94U2l6ZVsxXSwgK2JveC5ib3hTaXplWzJdKVxuICAgIF07XG5cbiAgICBjb25zdCB2ZXJ0aWNlczI6IGdsbS5SZWFkb25seVZlYzNbXSA9IFtdO1xuXG4gICAgdmVydGljZXMuZm9yRWFjaCgodmVydGV4KSA9PiB7XG4gICAgICBjb25zdCBwb3MgPSBnbG0udmVjMy5mcm9tVmFsdWVzKDAsIDAsIDApO1xuICAgICAgZ2xtLnZlYzMudHJhbnNmb3JtTWF0NChwb3MsIHZlcnRleCwgYm94Lm1hdHJpeCk7XG4gICAgICB2ZXJ0aWNlczIucHVzaChwb3MpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgaW5kaWNlc0dyb3VwOiBSZWFkb25seUFycmF5PGdsbS5SZWFkb25seVZlYzI+ID0gW1xuICAgICAgWzAsIDFdLFxuICAgICAgWzEsIDNdLFxuICAgICAgWzMsIDJdLFxuICAgICAgWzIsIDBdLFxuICAgICAgWzQsIDVdLFxuICAgICAgWzUsIDddLFxuICAgICAgWzcsIDZdLFxuICAgICAgWzYsIDRdLFxuICAgICAgWzAsIDRdLFxuICAgICAgWzEsIDVdLFxuICAgICAgWzMsIDddLFxuICAgICAgWzIsIDZdXG4gICAgXTtcblxuICAgIGluZGljZXNHcm91cC5mb3JFYWNoKChpbmRleCkgPT4ge1xuICAgICAgdGhpcy5fc3RhY2tSZW5kZXJlcnMucHVzaExpbmUoXG4gICAgICAgIHZlcnRpY2VzMltpbmRleFswXV0sXG4gICAgICAgIHZlcnRpY2VzMltpbmRleFsxXV0sXG4gICAgICAgIGJveC5jb2xvclxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgX3B1c2hXaXJlRnJhbWVUcmlhbmdsZSh0cmlhbmdsZTogSVRyaWFuZ2xlKSB7XG4gICAgdGhpcy5fc3RhY2tSZW5kZXJlcnMucHVzaExpbmUodHJpYW5nbGUudjAsIHRyaWFuZ2xlLnYxLCB0cmlhbmdsZS5jb2xvcik7XG4gICAgdGhpcy5fc3RhY2tSZW5kZXJlcnMucHVzaExpbmUodHJpYW5nbGUudjEsIHRyaWFuZ2xlLnYyLCB0cmlhbmdsZS5jb2xvcik7XG4gICAgdGhpcy5fc3RhY2tSZW5kZXJlcnMucHVzaExpbmUodHJpYW5nbGUudjIsIHRyaWFuZ2xlLnYwLCB0cmlhbmdsZS5jb2xvcik7XG4gIH1cblxuICBzYWZlU2NlbmVXaXJlRnJhbWUoaW5DYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgIHRoaXMuX2RlYnVnU2NlbmVDYW1lcmEuc2V0RXllKHRoaXMuX3JheVRyYWNlclJlbmRlcmVyLmNhbWVyYS5wb3NpdGlvbik7XG4gICAgdGhpcy5fZGVidWdTY2VuZUNhbWVyYS5zZXRUYXJnZXQodGhpcy5fcmF5VHJhY2VyUmVuZGVyZXIuY2FtZXJhLnRhcmdldCk7XG4gICAgdGhpcy5fZGVidWdTY2VuZUNhbWVyYS5zZXRVcEF4aXModGhpcy5fcmF5VHJhY2VyUmVuZGVyZXIuY2FtZXJhLnVwKTtcbiAgICB0aGlzLl9kZWJ1Z1NjZW5lQ2FtZXJhLmNvbXB1dGVNYXRyaWNlcygpO1xuXG4gICAgdGhpcy5fc3RhY2tSZW5kZXJlcnMuc2FmZVJlbmRlcihcbiAgICAgIHRoaXMuX2RlYnVnU2NlbmVDYW1lcmEuZ2V0Q29tcG9zZWRNYXRyaXgoKSxcbiAgICAgIGluQ2FsbGJhY2tcbiAgICApO1xuICB9XG5cbiAgZmx1c2hIdWRXaXJlRnJhbWUoKSB7XG4gICAgdGhpcy5fc3RhY2tSZW5kZXJlcnMuZmx1c2godGhpcy5fbWFpbkh1ZENhbWVyYS5nZXRDb21wb3NlZE1hdHJpeCgpKTtcbiAgfVxuXG4gIGZsdXNoSHVkVGV4dCgpIHtcbiAgICB0aGlzLl90ZXh0UmVuZGVyZXIuZmx1c2godGhpcy5fbWFpbkh1ZENhbWVyYS5nZXRDb21wb3NlZE1hdHJpeCgpKTtcbiAgfVxuXG4gIHNldHVwRGVidWdSZW5kZXJlcigpIHtcbiAgICB0aGlzLl9yYXlUcmFjZXJSZW5kZXJlci5zcGhlcmVzLmZvckVhY2goKHNwaGVyZSkgPT5cbiAgICAgIHRoaXMuX3B1c2hXaXJlRnJhbWVTcGhlcmUoc3BoZXJlKVxuICAgICk7XG4gICAgdGhpcy5fcmF5VHJhY2VyUmVuZGVyZXIuYm94ZXMuZm9yRWFjaCgoYm94KSA9PiB0aGlzLl9wdXNoV2lyZUZyYW1lQm94KGJveCkpO1xuICAgIHRoaXMuX3JheVRyYWNlclJlbmRlcmVyLnRyaWFuZ2xlcy5mb3JFYWNoKCh0cmlhbmdsZSkgPT5cbiAgICAgIHRoaXMuX3B1c2hXaXJlRnJhbWVUcmlhbmdsZSh0cmlhbmdsZSlcbiAgICApO1xuICB9XG5cbiAgZ2V0IHJheVRyYWNlclJlbmRlcmVyKCk6IElSYXlUcmFjZXJSZW5kZXJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3JheVRyYWNlclJlbmRlcmVyO1xuICB9XG4gIGdldCBzdGFja1JlbmRlcmVycygpOiBncmFwaGljcy5yZW5kZXJlcnMuSVN0YWNrUmVuZGVyZXJzIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhY2tSZW5kZXJlcnM7XG4gIH1cbiAgZ2V0IHRleHRSZW5kZXJlcigpOiBncmFwaGljcy5yZW5kZXJlcnMuSVRleHRSZW5kZXJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3RleHRSZW5kZXJlcjtcbiAgfVxuICBnZXQgbXVsdGlwbGVCdWZmZXJpbmcoKTogZ3JhcGhpY3MucmVuZGVyZXJzLk11bHRpQnVmZmVyc1JlbmRlcmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX211bHRpcGxlQnVmZmVyaW5nO1xuICB9XG5cbiAgZ2V0IGRlYnVnU2NlbmVDYW1lcmEoKTogZ3JhcGhpY3MuY2FtZXJhLklDYW1lcmEge1xuICAgIHJldHVybiB0aGlzLl9kZWJ1Z1NjZW5lQ2FtZXJhO1xuICB9XG4gIGdldCBtYWluSHVkQ2FtZXJhKCk6IGdyYXBoaWNzLmNhbWVyYS5JQ2FtZXJhIHtcbiAgICByZXR1cm4gdGhpcy5fbWFpbkh1ZENhbWVyYTtcbiAgfVxufVxuIiwKICAiaW1wb3J0IHsgUmVuZGVyZXIgfSBmcm9tICcuLi9ncmFwaGljcy9SZW5kZXJlcic7XG5cbmltcG9ydCAqIGFzIGdsbSBmcm9tICdnbC1tYXRyaXgnO1xuXG5sZXQgY29udGludW91c1RpbWU6IG51bWJlciA9IDA7XG5sZXQgY29udGludW91c0FuZ2xlOiBudW1iZXIgPSAwO1xuXG5sZXQgY3VyclN0ZXAgPSAwO1xubGV0IG5leHRTdGVwID0gMTtcbmNvbnN0IGFsbFN0ZXBzOiBnbG0uUmVhZG9ubHlWZWMzW10gPSBbXG4gIFstNSwgNCwgMF0sXG4gIFsrNSwgNCwgMF0sXG4gIFsrNSwgMTAsIDBdLFxuICBbLTUsIDEwLCAwXVxuXTtcblxuZXhwb3J0IGNsYXNzIFRlc3RTY2VuZTIge1xuICByZXNldCgpIHtcbiAgICBjb250aW51b3VzVGltZSA9IDA7XG4gICAgY29udGludW91c0FuZ2xlID0gMDtcbiAgICBjdXJyU3RlcCA9IDA7XG4gICAgbmV4dFN0ZXAgPSAxO1xuICB9XG5cbiAgcnVuKHJlbmRlcmVyOiBSZW5kZXJlciwgZWxhcHNlZFRpbWU6IG51bWJlcikge1xuICAgIGNvbnRpbnVvdXNBbmdsZSArPSBlbGFwc2VkVGltZSAqIDIuMDtcbiAgICBpZiAoY29udGludW91c0FuZ2xlID49IE1hdGguUEkgKiAyKSB7XG4gICAgICBjb250aW51b3VzQW5nbGUgLT0gTWF0aC5QSSAqIDI7XG4gICAgfVxuXG4gICAgY29udGludW91c1RpbWUgKz0gZWxhcHNlZFRpbWUgKiAwLjc1O1xuICAgIGlmIChjb250aW51b3VzVGltZSA+IDEpIHtcbiAgICAgIGNvbnRpbnVvdXNUaW1lID0gMDtcblxuICAgICAgY3VyclN0ZXAgPSAoY3VyclN0ZXAgKyAxKSAlIGFsbFN0ZXBzLmxlbmd0aDtcbiAgICAgIG5leHRTdGVwID0gKGN1cnJTdGVwICsgMSkgJSBhbGxTdGVwcy5sZW5ndGg7XG4gICAgfVxuXG4gICAgY29uc3QgbGlnaHRQb3M6IGdsbS52ZWMzID0gW1xuICAgICAgYWxsU3RlcHNbY3VyclN0ZXBdWzBdICtcbiAgICAgICAgKGFsbFN0ZXBzW25leHRTdGVwXVswXSAtIGFsbFN0ZXBzW2N1cnJTdGVwXVswXSkgKiBjb250aW51b3VzVGltZSxcbiAgICAgIGFsbFN0ZXBzW2N1cnJTdGVwXVsxXSArXG4gICAgICAgIChhbGxTdGVwc1tuZXh0U3RlcF1bMV0gLSBhbGxTdGVwc1tjdXJyU3RlcF1bMV0pICogY29udGludW91c1RpbWUsXG4gICAgICBhbGxTdGVwc1tjdXJyU3RlcF1bMl0gK1xuICAgICAgICAoYWxsU3RlcHNbbmV4dFN0ZXBdWzJdIC0gYWxsU3RlcHNbY3VyclN0ZXBdWzJdKSAqIGNvbnRpbnVvdXNUaW1lXG4gICAgXTtcblxuICAgIC8vXG4gICAgLy9cblxuICAgIC8vIHJlbmRlcmVyLnJheVRyYWNlclJlbmRlcmVyLnB1c2hTdW5MaWdodCh7XG4gICAgLy8gICBkaXJlY3Rpb246IFsxLjAsIDEuMCwgMS4wXSxcbiAgICAvLyAgIGludGVuc2l0eTogMC41XG4gICAgLy8gfSk7XG5cbiAgICB7XG4gICAgICAvLyBtb3Zpbmcgc3BvdCBsaWdodHNcblxuICAgICAgLy8gYWN0dWFsIHNwb3QgbGlnaHRzXG4gICAgICByZW5kZXJlci5yYXlUcmFjZXJSZW5kZXJlci5wdXNoU3BvdExpZ2h0KHtcbiAgICAgICAgcG9zaXRpb246IFswLCAxMCwgMTBdLFxuICAgICAgICBpbnRlbnNpdHk6IDIsXG4gICAgICAgIHJhZGl1czogMjBcbiAgICAgIH0pO1xuICAgICAgLy8gZ3JhcGhpY2FsIHByZXNlbnRhdGlvbiBvZiB0aGUgc3BvdCBsaWdodHNcbiAgICAgIHJlbmRlcmVyLnJheVRyYWNlclJlbmRlcmVyLnB1c2hTcGhlcmUoe1xuICAgICAgICBwb3NpdGlvbjogWzAsIDEwLCAxMF0sXG4gICAgICAgIHJhZGl1czogMC4yNSxcbiAgICAgICAgY29sb3I6IFsxLCAxLCAxXSxcbiAgICAgICAgcmVmbGVjdGlvbkZhY3RvcjogMCxcbiAgICAgICAgcmVmcmFjdGlvbkZhY3RvcjogMC4wLFxuICAgICAgICBjaGVzc2JvYXJkRW5hYmxlZDogZmFsc2UsXG4gICAgICAgIHJlY2VpdmVMaWdodEVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICBjYXN0U2hhZG93RW5hYmxlZDogZmFsc2VcbiAgICAgIH0pO1xuXG4gICAgICAvLyBhY3R1YWwgc3BvdCBsaWdodHNcbiAgICAgIHJlbmRlcmVyLnJheVRyYWNlclJlbmRlcmVyLnB1c2hTcG90TGlnaHQoe1xuICAgICAgICBwb3NpdGlvbjogbGlnaHRQb3MsXG4gICAgICAgIGludGVuc2l0eTogMixcbiAgICAgICAgcmFkaXVzOiAxMFxuICAgICAgfSk7XG5cbiAgICAgIC8vIGdyYXBoaWNhbCBwcmVzZW50YXRpb24gb2YgdGhlIHNwb3QgbGlnaHRzXG4gICAgICByZW5kZXJlci5yYXlUcmFjZXJSZW5kZXJlci5wdXNoU3BoZXJlKHtcbiAgICAgICAgcG9zaXRpb246IGxpZ2h0UG9zLFxuICAgICAgICByYWRpdXM6IDAuMjUsXG4gICAgICAgIGNvbG9yOiBbMSwgMSwgMV0sXG4gICAgICAgIHJlZmxlY3Rpb25GYWN0b3I6IDAsXG4gICAgICAgIHJlZnJhY3Rpb25GYWN0b3I6IDAuMCxcbiAgICAgICAgY2hlc3Nib2FyZEVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICByZWNlaXZlTGlnaHRFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgY2FzdFNoYWRvd0VuYWJsZWQ6IGZhbHNlXG4gICAgICB9KTtcblxuICAgICAgLy8gLy8gc2ltcGxlIHJlZmxlY3RpdmUgc3BoZXJlXG4gICAgICAvLyByZW5kZXJlci5yYXlUcmFjZXJSZW5kZXJlci5wdXNoU3BoZXJlKHtcbiAgICAgIC8vICAgcG9zaXRpb246IFswLCA3LCAxXSxcbiAgICAgIC8vICAgcmFkaXVzOiAxLjAsXG4gICAgICAvLyAgIGNvbG9yOiBbMSwgMSwgMV0sXG4gICAgICAvLyAgIHJlZmxlY3Rpb25GYWN0b3I6IDAuMCxcbiAgICAgIC8vICAgcmVmcmFjdGlvbkZhY3RvcjogMC41LFxuICAgICAgLy8gICBjaGVzc2JvYXJkRW5hYmxlZDogZmFsc2UsXG4gICAgICAvLyAgIHJlY2VpdmVMaWdodEVuYWJsZWQ6IGZhbHNlLFxuICAgICAgLy8gICBjYXN0U2hhZG93RW5hYmxlZDogdHJ1ZVxuICAgICAgLy8gfSk7XG5cbiAgICAgIC8vIC8vIHNpbXBsZSByZWZsZWN0aXZlIGJveFxuICAgICAgLy8gcmVuZGVyZXIucmF5VHJhY2VyUmVuZGVyZXIucHVzaEJveCh7XG4gICAgICAvLyAgIHBvc2l0aW9uOiBbMCwgNywgMV0sXG4gICAgICAvLyAgIGFuZ2xlWDogY29udGludW91c0FuZ2xlICogMC4wLFxuICAgICAgLy8gICBhbmdsZVk6IGNvbnRpbnVvdXNBbmdsZSAqIDEuMCxcbiAgICAgIC8vICAgYW5nbGVaOiAwLFxuICAgICAgLy8gICBib3hTaXplOiBbMC44LDAuOCwwLjhdLFxuXG4gICAgICAvLyAgIGNvbG9yOiBbMSwgMSwgMV0sXG4gICAgICAvLyAgIHJlZmxlY3Rpb25GYWN0b3I6IDEuMCxcbiAgICAgIC8vICAgY2hlc3Nib2FyZEVuYWJsZWQ6IGZhbHNlLFxuICAgICAgLy8gICByZWNlaXZlTGlnaHRFbmFibGVkOiBmYWxzZSxcbiAgICAgIC8vICAgY2FzdFNoYWRvd0VuYWJsZWQ6IHRydWVcbiAgICAgIC8vIH0pO1xuXG4gICAgICAvLyAvLyBzaW1wbGUgcmVmbGVjdGl2ZSB0cmlhbmdsZVxuICAgICAgLy8gcmVuZGVyZXIucmF5VHJhY2VyUmVuZGVyZXIucHVzaFRyaWFuZ2xlKHtcbiAgICAgIC8vICAgdjA6IFswLCA3LCAxXSxcbiAgICAgIC8vICAgdjE6IFswLCA4LCAxXSxcbiAgICAgIC8vICAgdjI6IFswLCA4LCAyXSxcblxuICAgICAgLy8gICBjb2xvcjogWzEsIDEsIDFdLFxuICAgICAgLy8gICByZWZsZWN0aW9uRmFjdG9yOiAxLjAsXG4gICAgICAvLyAgIHJlY2VpdmVMaWdodEVuYWJsZWQ6IGZhbHNlLFxuICAgICAgLy8gICBjYXN0U2hhZG93RW5hYmxlZDogdHJ1ZVxuICAgICAgLy8gfSk7XG5cbiAgICAgIGNvbnN0IGFsbEJveGVzOiB7XG4gICAgICAgIHBvczogZ2xtLlJlYWRvbmx5VmVjMztcbiAgICAgICAgc2l6ZTogZ2xtLlJlYWRvbmx5VmVjMztcbiAgICAgICAgY29sb3I/OiBnbG0uUmVhZG9ubHlWZWMzO1xuICAgICAgICByZWZsZWN0aW9uRmFjdG9yPzogbnVtYmVyO1xuICAgICAgfVtdID0gW1xuICAgICAgICAvLyBob2xsb3cgYm94IDFcbiAgICAgICAgeyBwb3M6IFstMiwgNCwgLTFdLCBzaXplOiBbMSwgMS4xMjUsIDAuMTI1XSB9LFxuICAgICAgICB7IHBvczogWy0yLCA0LCArMV0sIHNpemU6IFsxLCAxLjEyNSwgMC4xMjVdIH0sXG4gICAgICAgIHsgcG9zOiBbLTIsIDQgLSAxLCAwXSwgc2l6ZTogWzEsIDAuMTI1LCAxLjEyNV0gfSxcbiAgICAgICAgeyBwb3M6IFstMiwgNCArIDEsIDBdLCBzaXplOiBbMSwgMC4xMjUsIDEuMTI1XSB9LFxuXG4gICAgICAgIC8vIGhvbGxvdyBib3ggMlxuICAgICAgICB7IHBvczogWysyLCA0LCAtMV0sIHNpemU6IFsxLCAxLjEyNSwgMC4xMjVdIH0sXG4gICAgICAgIHsgcG9zOiBbKzIsIDQsICsxXSwgc2l6ZTogWzEsIDEuMTI1LCAwLjEyNV0gfSxcbiAgICAgICAgeyBwb3M6IFsrMiwgNCAtIDEsIDBdLCBzaXplOiBbMSwgMC4xMjUsIDEuMTI1XSB9LFxuICAgICAgICB7IHBvczogWysyLCA0ICsgMSwgMF0sIHNpemU6IFsxLCAwLjEyNSwgMS4xMjVdIH0sXG5cbiAgICAgICAgLy8gYmFja2dyb3VuZFxuICAgICAgICB7IHBvczogWzAsIDgsIC04XSwgc2l6ZTogWzgsIDgsIDAuMTI1XSwgY29sb3I6IFsxLjAsIDAuNSwgMC41XSB9LFxuICAgICAgICB7IHBvczogWy04LCA4LCAwXSwgc2l6ZTogWzAuMTI1LCA4LCA4XSwgY29sb3I6IFswLjUsIDEuMCwgMC41XSB9LFxuICAgICAgICB7IHBvczogWys4LCA4LCAwXSwgc2l6ZTogWzAuMTI1LCA4LCA4XSwgY29sb3I6IFswLjUsIDAuNSwgMS4wXSB9LFxuICAgICAgICB7IHBvczogWzAsIDAsIC0xXSwgc2l6ZTogWzgsIDAuMTI1LCA4XSwgcmVmbGVjdGlvbkZhY3RvcjogMC4zIH1cbiAgICAgIF07XG4gICAgICBhbGxCb3hlcy5mb3JFYWNoKCh7IHBvcywgc2l6ZSwgY29sb3IsIHJlZmxlY3Rpb25GYWN0b3IgfSkgPT4ge1xuICAgICAgICByZW5kZXJlci5yYXlUcmFjZXJSZW5kZXJlci5wdXNoQm94KHtcbiAgICAgICAgICBwb3NpdGlvbjogcG9zLFxuICAgICAgICAgIGFuZ2xlWDogMCxcbiAgICAgICAgICBhbmdsZVk6IDAsXG4gICAgICAgICAgYW5nbGVaOiAwLFxuICAgICAgICAgIGJveFNpemU6IHNpemUsXG4gICAgICAgICAgY29sb3I6IGNvbG9yID8/IFsxLCAxLCAxXSxcbiAgICAgICAgICByZWZsZWN0aW9uRmFjdG9yOiByZWZsZWN0aW9uRmFjdG9yID8/IDAsXG4gICAgICAgICAgY2hlc3Nib2FyZEVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgIHJlY2VpdmVMaWdodEVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgY2FzdFNoYWRvd0VuYWJsZWQ6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAge1xuICAgICAgICBjb25zdCBhbGxSb3RhdGVkQm94ZXM6IHtcbiAgICAgICAgICBwb3M6IGdsbS5SZWFkb25seVZlYzM7XG4gICAgICAgICAgYW5nbGVZOiBudW1iZXI7XG4gICAgICAgICAgc2l6ZTogZ2xtLlJlYWRvbmx5VmVjMztcbiAgICAgICAgfVtdID0gW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHBvczogW1xuICAgICAgICAgICAgICA1ICsgMSAqIE1hdGguY29zKGNvbnRpbnVvdXNBbmdsZSksXG4gICAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAgIDAgKyAxICogTWF0aC5zaW4oY29udGludW91c0FuZ2xlKVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGFuZ2xlWTogLWNvbnRpbnVvdXNBbmdsZSxcbiAgICAgICAgICAgIHNpemU6IFswLjEyNSwgMS4wLCAxLjEyNV1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHBvczogW1xuICAgICAgICAgICAgICA1IC0gMSAqIE1hdGguY29zKGNvbnRpbnVvdXNBbmdsZSksXG4gICAgICAgICAgICAgIDYgKyAyLFxuICAgICAgICAgICAgICAwIC0gMSAqIE1hdGguc2luKGNvbnRpbnVvdXNBbmdsZSlcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBhbmdsZVk6IC1jb250aW51b3VzQW5nbGUsXG4gICAgICAgICAgICBzaXplOiBbMC4xMjUsIDEuMCwgMS4xMjVdXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBwb3M6IFtcbiAgICAgICAgICAgICAgNSArIDEgKiBNYXRoLmNvcyhjb250aW51b3VzQW5nbGUgKyBNYXRoLlBJICogMC41KSxcbiAgICAgICAgICAgICAgNiArIDEsXG4gICAgICAgICAgICAgIDAgKyAxICogTWF0aC5zaW4oY29udGludW91c0FuZ2xlICsgTWF0aC5QSSAqIDAuNSlcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBhbmdsZVk6IC1jb250aW51b3VzQW5nbGUgKyBNYXRoLlBJICogMC41LFxuICAgICAgICAgICAgc2l6ZTogWzAuMTI1LCAyLjAsIDEuMF1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHBvczogW1xuICAgICAgICAgICAgICA1ICsgMSAqIE1hdGguY29zKGNvbnRpbnVvdXNBbmdsZSAtIE1hdGguUEkgKiAwLjUpLFxuICAgICAgICAgICAgICA2ICsgMSxcbiAgICAgICAgICAgICAgMCArIDEgKiBNYXRoLnNpbihjb250aW51b3VzQW5nbGUgLSBNYXRoLlBJICogMC41KVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGFuZ2xlWTogLWNvbnRpbnVvdXNBbmdsZSAtIE1hdGguUEkgKiAwLjUsXG4gICAgICAgICAgICBzaXplOiBbMC4xMjUsIDIuMCwgMS4wXVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyB7IHBvczogWy0yLDQsKzFdLCBzaXplOiBbMSwxLDAuMTI1XSB9LFxuICAgICAgICAgIC8vIHsgcG9zOiBbLTIsNC0xLDBdLCBzaXplOiBbMSwwLjEyNSwxXSB9LFxuICAgICAgICBdO1xuICAgICAgICBhbGxSb3RhdGVkQm94ZXMuZm9yRWFjaCgoeyBwb3MsIGFuZ2xlWSwgc2l6ZSB9KSA9PiB7XG4gICAgICAgICAgLy8gY29uc3QgcG9zQTogZ2xtLlJlYWRvbmx5VmVjMyA9IFtcbiAgICAgICAgICAvLyAgIE1hdGguc2luKGFuZ2xlKSAqIDcsXG4gICAgICAgICAgLy8gICA0LFxuICAgICAgICAgIC8vICAgTWF0aC5jb3MoYW5nbGUpICogN1xuICAgICAgICAgIC8vIF07XG5cbiAgICAgICAgICByZW5kZXJlci5yYXlUcmFjZXJSZW5kZXJlci5wdXNoQm94KHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBwb3MsXG4gICAgICAgICAgICBhbmdsZVg6IDAsXG4gICAgICAgICAgICBhbmdsZVk6IGFuZ2xlWSxcbiAgICAgICAgICAgIGFuZ2xlWjogMCxcbiAgICAgICAgICAgIGJveFNpemU6IHNpemUsXG4gICAgICAgICAgICBjb2xvcjogWzAsIDEsIDBdLFxuICAgICAgICAgICAgcmVmbGVjdGlvbkZhY3RvcjogMCxcbiAgICAgICAgICAgIGNoZXNzYm9hcmRFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgIHJlY2VpdmVMaWdodEVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICBjYXN0U2hhZG93RW5hYmxlZDogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IC8vIG1vdmluZyBzcG90IGxpZ2h0c1xuICB9XG59XG4iLAogICJpbXBvcnQgeyBzeXN0ZW0sIGdyYXBoaWNzIH0gZnJvbSAnQGxvY2FsLWZyYW1ld29yayc7XG5jb25zdCB7XG4gIEdsb2JhbE1vdXNlTWFuYWdlcixcbiAgR2xvYmFsS2V5Ym9hcmRNYW5hZ2VyLFxuICBHbG9iYWxUb3VjaE1hbmFnZXIsXG4gIEdsb2JhbFZpc2liaWxpdHlNYW5hZ2VyLFxuICBHbG9iYWxQb2ludGVyTG9ja01hbmFnZXJcbn0gPSBzeXN0ZW0uYnJvd3NlcjtcbmNvbnN0IHsgV2ViR0xDb250ZXh0IH0gPSBncmFwaGljcy53ZWJnbDI7XG5jb25zdCB7IEZyZWVGbHlDb250cm9sbGVyIH0gPSBzeXN0ZW0uY29udHJvbGxlcnM7XG5cbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4vdXRpbGl0aWVzL0xvZ2dlcic7XG5cbmltcG9ydCB7IFJlbmRlcmVyIH0gZnJvbSAnLi9ncmFwaGljcy9SZW5kZXJlcic7XG5pbXBvcnQgKiBhcyBzY2VuZXMgZnJvbSAnLi9zY2VuZXMvaW50ZXgnO1xuXG5pbXBvcnQgKiBhcyBnbG0gZnJvbSAnZ2wtbWF0cml4JztcblxuY29uc3QgX2NsYW1wID0gKGluVmFsdWU6IG51bWJlciwgaW5NaW46IG51bWJlciwgaW5NYXg6IG51bWJlcikgPT5cbiAgTWF0aC5taW4oTWF0aC5tYXgoaW5WYWx1ZSwgaW5NaW4pLCBpbk1heCk7XG5cbmludGVyZmFjZSBFeHBlcmltZW50RGVmIHtcbiAgY2FudmFzRWxlbWVudDogSFRNTENhbnZhc0VsZW1lbnQ7XG4gIGxvZ2dlcjogTG9nZ2VyO1xuICBwZXJmQXV0b1NjYWxpbmc6IEhUTUxJbnB1dEVsZW1lbnQ7XG4gIHJlc29sdXRpb246IEhUTUxJbnB1dEVsZW1lbnQ7XG4gIGFudGlfYWxpYXNpbmdfZW5hYmxlZDogSFRNTElucHV0RWxlbWVudDtcbiAgZGVidWdfbW9kZV9lbmFibGVkOiBIVE1MSW5wdXRFbGVtZW50O1xufVxuXG5jb25zdCBrX21heEZyYW1lc1VudGlsTmV4dENoZWNrID0gNjA7XG5cbmV4cG9ydCBjbGFzcyBFeHBlcmltZW50IHtcbiAgcHJpdmF0ZSBfY2FudmFzRWxlbWVudDogSFRNTENhbnZhc0VsZW1lbnQ7XG4gIHByaXZhdGUgX2FuaW1hdGlvbkZyYW1lSGFuZGxlOiBudW1iZXIgPSAwO1xuICBwcml2YXRlIF9kZWY6IE9taXQ8RXhwZXJpbWVudERlZiwgJ2NhbnZhc0VsZW1lbnQnPjtcblxuICBwcml2YXRlIF9mcmVlRmx5Q29udHJvbGxlcjogc3lzdGVtLmNvbnRyb2xsZXJzLkZyZWVGbHlDb250cm9sbGVyO1xuXG4gIHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjtcblxuICBwcml2YXRlIF9ydW5uaW5nOiBib29sZWFuO1xuICBwcml2YXRlIF9lcnJvckdyYXBoaWNDb250ZXh0OiBib29sZWFuO1xuXG4gIHByaXZhdGUgX2N1cnJGcmFtZU1zZWNUaW1lOiBudW1iZXIgPSBEYXRlLm5vdygpO1xuICBwcml2YXRlIF9mcmFtZVByb2ZpbGVyID0gbmV3IHN5c3RlbS5tZXRyaWNzLkZyYW1lUHJvZmlsZXIoKTtcblxuICBwcml2YXRlIF9jb250aW51b3VzU2VjVGltZSA9IDA7XG5cbiAgcHJpdmF0ZSBfcGVyZkF1dG9TY2FsaW5nRW5hYmxlZCA9IHRydWU7XG4gIHByaXZhdGUgX2ZyYW1lc1VudGlsTmV4dENoZWNrID0ga19tYXhGcmFtZXNVbnRpbE5leHRDaGVjaztcblxuICAvLyBwcml2YXRlIF9zY2VuZSA9IG5ldyBzY2VuZXMuVGVzdFNjZW5lMSgpO1xuICBwcml2YXRlIF9zY2VuZSA9IG5ldyBzY2VuZXMuVGVzdFNjZW5lMigpO1xuXG4gIGNvbnN0cnVjdG9yKGluRGVmOiBFeHBlcmltZW50RGVmKSB7XG4gICAgdGhpcy5fY2FudmFzRWxlbWVudCA9IGluRGVmLmNhbnZhc0VsZW1lbnQ7XG4gICAgdGhpcy5fZGVmID0gaW5EZWY7XG5cbiAgICB0aGlzLl9mcmVlRmx5Q29udHJvbGxlciA9IG5ldyBGcmVlRmx5Q29udHJvbGxlcih7XG4gICAgICBjb29yZGluYXRlczogWydaJywgJ1gnLCAnWSddLFxuICAgICAgcG9zaXRpb246IFstMTAsIDEzLCAxNV0sXG4gICAgICB0aGV0YTogTWF0aC5QSSAqIDAuODUsXG4gICAgICBwaGk6IC1NYXRoLlBJICogMC4xNSxcbiAgICAgIG1vdXNlU2Vuc2liaWxpdHk6IDYsXG4gICAgICBrZXlib2FyZFNlbnNpYmlsaXR5OiBNYXRoLlBJICogMC41NSxcbiAgICAgIHRvdWNoU2Vuc2liaWxpdHk6IDgsXG4gICAgICBtb3ZpbmdTcGVlZDogMTZcbiAgICB9KTtcblxuICAgIC8vXG4gICAgLy9cblxuICAgIHtcbiAgICAgIEdsb2JhbEtleWJvYXJkTWFuYWdlci5hY3RpdmF0ZSgpO1xuICAgICAgR2xvYmFsVG91Y2hNYW5hZ2VyLmFjdGl2YXRlKHRoaXMuX2NhbnZhc0VsZW1lbnQpO1xuXG4gICAgICBHbG9iYWxWaXNpYmlsaXR5TWFuYWdlci5hY3RpdmF0ZSgpO1xuICAgICAgR2xvYmFsVmlzaWJpbGl0eU1hbmFnZXIuYWRkVmlzaWJpbGl0eUNoYW5nZSgoaXNWaXNpYmxlKSA9PiB7XG4gICAgICAgIGlmIChpc1Zpc2libGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgdGhpcy5fZGVmLmxvZ2dlci5sb2coJ2RvY3VtZW50IHZpc2liaWxpdHkgY2hhbmdlZDogaGlkZGVuJyk7XG4gICAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fZGVmLmxvZ2dlci5sb2coJ2RvY3VtZW50IHZpc2liaWxpdHkgY2hhbmdlZDogdmlzaWJsZScpO1xuICAgICAgICAgIHRoaXMuc3RhcnQoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIEdsb2JhbFBvaW50ZXJMb2NrTWFuYWdlci5hbGxvd1BvaW50ZXJMb2NrZWRPbkNsaWNrRXZlbnQoXG4gICAgICAgIHRoaXMuX2NhbnZhc0VsZW1lbnRcbiAgICAgICk7XG4gICAgICBHbG9iYWxQb2ludGVyTG9ja01hbmFnZXIuYWRkT25Mb2NrQ2hhbmdlKCgpID0+IHtcbiAgICAgICAgY29uc3QgaXNMb2NrZWQgPSBHbG9iYWxQb2ludGVyTG9ja01hbmFnZXIuaXNQb2ludGVyTG9ja2VkKFxuICAgICAgICAgIHRoaXMuX2NhbnZhc0VsZW1lbnRcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoaXNMb2NrZWQpIHtcbiAgICAgICAgICB0aGlzLl9kZWYubG9nZ2VyLmxvZygnVGhlIHBvaW50ZXIgbG9jayBzdGF0dXMgaXMgbm93IGxvY2tlZCcpO1xuXG4gICAgICAgICAgR2xvYmFsTW91c2VNYW5hZ2VyLmFjdGl2YXRlKHRoaXMuX2NhbnZhc0VsZW1lbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2RlZi5sb2dnZXIubG9nKCdUaGUgcG9pbnRlciBsb2NrIHN0YXR1cyBpcyBub3cgdW5sb2NrZWQnKTtcblxuICAgICAgICAgIEdsb2JhbE1vdXNlTWFuYWdlci5kZWFjdGl2YXRlKHRoaXMuX2NhbnZhc0VsZW1lbnQpO1xuXG4gICAgICAgICAgR2xvYmFsUG9pbnRlckxvY2tNYW5hZ2VyLmFsbG93UG9pbnRlckxvY2tlZE9uQ2xpY2tFdmVudChcbiAgICAgICAgICAgIHRoaXMuX2NhbnZhc0VsZW1lbnRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgR2xvYmFsUG9pbnRlckxvY2tNYW5hZ2VyLmFkZE9uTG9ja0Vycm9yKChldmVudCkgPT4ge1xuICAgICAgICB0aGlzLl9kZWYubG9nZ2VyLmxvZyhcbiAgICAgICAgICBgVGhlIHBvaW50ZXIgbG9jayBzZW50IGFuIGVycm9yLCBldmVudDogXCIke0pTT04uc3RyaW5naWZ5KGV2ZW50KX1cImBcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLl9yZW5kZXJlciA9IG5ldyBSZW5kZXJlcih7IGNhbnZhc0RvbUVsZW1lbnQ6IHRoaXMuX2NhbnZhc0VsZW1lbnQgfSk7XG4gICAgICB0aGlzLl9yZW5kZXJlci5pbml0aWFsaXplKCk7XG4gICAgfVxuXG4gICAgLy9cbiAgICAvL1xuICAgIC8vXG5cbiAgICB0aGlzLl9ydW5uaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fZXJyb3JHcmFwaGljQ29udGV4dCA9IGZhbHNlO1xuXG4gICAgLy8gdGhpcy5fcmVuZGVyZXIuc2V0T25Db250ZXh0TG9zdCgoKSA9PiB7XG4gICAgLy8gICB0aGlzLl9kZWYubG9nZ2VyLmxvZygnb25fY29udGV4dF9sb3N0Jyk7XG5cbiAgICAvLyAgIHRoaXMuX2Vycm9yR3JhcGhpY0NvbnRleHQgPSB0cnVlO1xuICAgIC8vICAgdGhpcy5zdG9wKCk7XG4gICAgLy8gfSk7XG5cbiAgICAvLyB0aGlzLl9yZW5kZXJlci5zZXRPbkNvbnRleHRSZXN0b3JlZCgoKSA9PiB7XG4gICAgLy8gICB0aGlzLl9kZWYubG9nZ2VyLmxvZygnb25fY29udGV4dF9yZXN0b3JlZCcpO1xuXG4gICAgLy8gICB0aGlzLl9lcnJvckdyYXBoaWNDb250ZXh0ID0gZmFsc2U7XG4gICAgLy8gICB0aGlzLnN0YXJ0KCk7XG4gICAgLy8gfSk7XG5cbiAgICAvL1xuICAgIC8vXG4gICAgLy9cblxuICAgIHRoaXMuX2RlZi5yZXNvbHV0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKGV2ZW50KSA9PiB7XG4gICAgICBjb25zdCBuZXdWYWx1ZSA9IHRoaXMuX2RlZi5yZXNvbHV0aW9uLnZhbHVlIGFzIHVua25vd24gYXMgbnVtYmVyO1xuICAgICAgdGhpcy5fc2V0UmVzb2x1dGlvbihuZXdWYWx1ZSk7XG4gICAgICB0aGlzLl9sb2dSZXNvbHV0aW9uKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9kZWYuYW50aV9hbGlhc2luZ19lbmFibGVkLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgY29uc3QgbmV3VmFsdWUgPSB0aGlzLl9kZWYuYW50aV9hbGlhc2luZ19lbmFibGVkLmNoZWNrZWQgPT09IHRydWU7XG5cbiAgICAgIHRoaXMuX3JlbmRlcmVyLnJheVRyYWNlclJlbmRlcmVyLnNldEFudGlBbGlhc2luZyhuZXdWYWx1ZSk7XG5cbiAgICAgIHRoaXMuX2RlZi5sb2dnZXIubG9nKFxuICAgICAgICBgQW50aSBhbGlhc2luZyBjaGFuZ2U6ICR7bmV3VmFsdWUgPT09IHRydWUgPyAnZW5hYmxlZCcgOiAnZGlzYWJsZWQnfWBcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9zZXRSZXNvbHV0aW9uKHRoaXMuX2RlZi5yZXNvbHV0aW9uLnZhbHVlIGFzIHVua25vd24gYXMgbnVtYmVyKTtcblxuICAgIC8vIHBlcmZvcm1hbmNlIGF1dG8tc2NhbGluZ1xuICAgIHRoaXMuX2RlZi5wZXJmQXV0b1NjYWxpbmcuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiB7XG4gICAgICB0aGlzLl9mcmFtZXNVbnRpbE5leHRDaGVjayA9IGtfbWF4RnJhbWVzVW50aWxOZXh0Q2hlY2s7XG5cbiAgICAgIHRoaXMuX3BlcmZBdXRvU2NhbGluZ0VuYWJsZWQgPSB0aGlzLl9kZWYucGVyZkF1dG9TY2FsaW5nLmNoZWNrZWQgPT09IHRydWU7XG5cbiAgICAgIHRoaXMuX2RlZi5sb2dnZXIubG9nKFxuICAgICAgICBgUGVyZm9ybWFuY2UgYXV0byBzY2FsZXIgY2hhbmdlOiAke1xuICAgICAgICAgIHRoaXMuX3BlcmZBdXRvU2NhbGluZ0VuYWJsZWQgPT09IHRydWUgPyAnZW5hYmxlZCcgOiAnZGlzYWJsZWQnXG4gICAgICAgIH1gXG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgaW5pdCgpIHtcbiAgICBhd2FpdCB0aGlzLl9yZW5kZXJlci5pbml0aWFsaXplKCk7XG4gIH1cblxuICByZXNpemUoaW5XaWR0aDogbnVtYmVyLCBpbkhlaWdodDogbnVtYmVyLCBpbklzRnVsbFNjcmVlbjogYm9vbGVhbikge1xuICAgIGxldCBjdXJyZW50V2lkdGggPSBpbldpZHRoO1xuICAgIGxldCBjdXJyZW50SGVpZ2h0ID0gaW5IZWlnaHQ7XG5cbiAgICBpZiAoaW5Jc0Z1bGxTY3JlZW4pIHtcbiAgICAgIHRoaXMuX2NhbnZhc0VsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgY3VycmVudFdpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICBjdXJyZW50SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9jYW52YXNFbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICB9XG5cbiAgICB0aGlzLl9jYW52YXNFbGVtZW50LnN0eWxlLmxlZnQgPSAnMHB4JztcbiAgICB0aGlzLl9jYW52YXNFbGVtZW50LnN0eWxlLnRvcCA9ICcwcHgnO1xuICAgIHRoaXMuX2NhbnZhc0VsZW1lbnQuc3R5bGUud2lkdGggPSBgJHtjdXJyZW50V2lkdGh9cHhgO1xuICAgIHRoaXMuX2NhbnZhc0VsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gYCR7Y3VycmVudEhlaWdodH1weGA7XG4gICAgdGhpcy5fY2FudmFzRWxlbWVudC53aWR0aCA9IGN1cnJlbnRXaWR0aDtcbiAgICB0aGlzLl9jYW52YXNFbGVtZW50LmhlaWdodCA9IGN1cnJlbnRIZWlnaHQ7XG5cbiAgICB0aGlzLl9yZW5kZXJlci5yZXNpemUoY3VycmVudFdpZHRoLCBjdXJyZW50SGVpZ2h0KTtcbiAgfVxuXG4gIHN0YXJ0KCkge1xuICAgIGlmICh0aGlzLmlzUnVubmluZygpKSByZXR1cm47XG5cbiAgICB0aGlzLl9ydW5uaW5nID0gdHJ1ZTtcblxuICAgIHRoaXMuX3RpY2soKTtcbiAgfVxuXG4gIHN0b3AoKSB7XG4gICAgaWYgKCF0aGlzLmlzUnVubmluZygpKSByZXR1cm47XG4gICAgdGhpcy5fcnVubmluZyA9IGZhbHNlO1xuICAgIC8vIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLl9hbmltYXRpb25GcmFtZUhhbmRsZSk7XG4gICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLl9hbmltYXRpb25GcmFtZUhhbmRsZSk7XG4gIH1cblxuICBpc1J1bm5pbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bm5pbmcgJiYgIXRoaXMuX2Vycm9yR3JhcGhpY0NvbnRleHQ7XG4gIH1cblxuICAvL1xuICAvL1xuICAvL1xuXG4gIHByaXZhdGUgX3RpY2soKSB7XG4gICAgY29uc3QgdGljayA9ICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5fcnVubmluZyB8fCB0aGlzLl9lcnJvckdyYXBoaWNDb250ZXh0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gcGxhbiB0aGUgbmV4dCBmcmFtZVxuXG4gICAgICAvLyB0aGlzLl9hbmltYXRpb25GcmFtZUhhbmRsZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGljayk7XG4gICAgICB0aGlzLl9hbmltYXRpb25GcmFtZUhhbmRsZSA9IHdpbmRvdy5zZXRUaW1lb3V0KHRpY2ssIDEwMDAgLyA2MCk7XG5cbiAgICAgIHRoaXMuX21haW5Mb29wKCk7XG4gICAgfTtcblxuICAgIHRpY2soKTtcbiAgfVxuXG4gIC8vICNyZWdpb24gbWFpbiBsb29wXG4gIHByaXZhdGUgX21haW5Mb29wKCkge1xuICAgIGNvbnN0IGN1cnJlbnRNc2VjVGltZSA9IERhdGUubm93KCk7XG4gICAgY29uc3QgZGVsdGFNc2VjVGltZSA9IGN1cnJlbnRNc2VjVGltZSAtIHRoaXMuX2N1cnJGcmFtZU1zZWNUaW1lO1xuICAgIHRoaXMuX2N1cnJGcmFtZU1zZWNUaW1lID0gY3VycmVudE1zZWNUaW1lO1xuICAgIHRoaXMuX2ZyYW1lUHJvZmlsZXIucHVzaERlbHRhKGRlbHRhTXNlY1RpbWUpO1xuXG4gICAgdGhpcy5faGFuZGxlUGVyZm9ybWFuY2VBdXRvU2NhbGluZyhkZWx0YU1zZWNUaW1lKTtcblxuICAgIGNvbnN0IGVsYXBzZWRTZWNUaW1lID0gZGVsdGFNc2VjVGltZSAvIDEwMDA7XG5cbiAgICB0aGlzLl9jb250aW51b3VzU2VjVGltZSArPSBlbGFwc2VkU2VjVGltZTtcblxuICAgIHRoaXMuX2ZyZWVGbHlDb250cm9sbGVyLnVwZGF0ZShlbGFwc2VkU2VjVGltZSk7XG5cbiAgICBHbG9iYWxNb3VzZU1hbmFnZXIucmVzZXREZWx0YXMoKTtcbiAgICBHbG9iYWxUb3VjaE1hbmFnZXIucmVzZXREZWx0YXMoKTtcblxuICAgIC8vXG4gICAgLy9cblxuICAgIHRoaXMuX2NvbnRpbnVvdXNTZWNUaW1lICs9IGVsYXBzZWRTZWNUaW1lO1xuXG4gICAgdGhpcy5fc2NlbmUucnVuKHRoaXMuX3JlbmRlcmVyLCBlbGFwc2VkU2VjVGltZSk7XG5cbiAgICAvL1xuICAgIC8vXG5cbiAgICB0aGlzLl9yZW5kZXJTY2VuZSgpO1xuICAgIHRoaXMuX3JlbmRlckh1ZCgpO1xuICB9XG4gIC8vICNlbmRyZWdpb24gbWFpbiBsb29wXG5cbiAgLy8gI3JlZ2lvbiBodWRcbiAgcHJpdmF0ZSBfcmVuZGVySHVkKCkge1xuICAgIGNvbnN0IGdsID0gV2ViR0xDb250ZXh0LmdldENvbnRleHQoKTtcbiAgICBnbC52aWV3cG9ydCgwLCAwLCB0aGlzLl9jYW52YXNFbGVtZW50LndpZHRoLCB0aGlzLl9jYW52YXNFbGVtZW50LmhlaWdodCk7XG4gICAgZ2wuY2xlYXIoZ2wuREVQVEhfQlVGRkVSX0JJVCk7XG4gICAgZ2wuZW5hYmxlKGdsLkRFUFRIX1RFU1QpO1xuICAgIGdsLmRlcHRoRnVuYyhnbC5MRVNTKTtcblxuICAgIC8vIC8vIHRoZSBtb2Rlcm4gd2ViIGJyb3dzZXJzIGFyZSBhbHJlYWR5IGFwcGx5aW5nIGRvdWJsZSBidWZmZXJpbmdcbiAgICAvLyAvLyAtPiBzbyB3ZSdyZSBpbiBmYWN0IHRyaXBsZSBidWZmZXJpbmcgaGVyZVxuICAgIC8vIC8vIC0+IHdoaWNoIGlzIGdyZWF0IC0+IG1vcmUgdGltZSBmb3IgdGhlIFdlYkdMIHF1ZXVlIHRvIGZpbmlzaCBvbiB0aW1lXG4gICAgLy8gdGhpcy5fcmVuZGVyZXIubXVsdGlwbGVCdWZmZXJpbmcucmVuZGVySHVkKFxuICAgIC8vICAgdGhpcy5fcmVuZGVyZXIubWFpbkh1ZENhbWVyYS5nZXRDb21wb3NlZE1hdHJpeCgpXG4gICAgLy8gKTtcblxuICAgIHtcbiAgICAgIGNvbnN0IGtleUV2ZW50c1BvczogZ2xtLlJlYWRvbmx5VmVjMiA9IFs3ICsgMjAsIDE2NV07XG4gICAgICBjb25zdCB0b3VjaEV2ZW50c1BvczogZ2xtLlJlYWRvbmx5VmVjMiA9IFs3ICsgMjAsIDI2MF07XG4gICAgICBjb25zdCBib2FyZFBvczogZ2xtLlJlYWRvbmx5VmVjMiA9IFs3LCAzNV07XG5cbiAgICAgIGdyYXBoaWNzLnJlbmRlcmVycy53aWRnZXRzLmFkZEtleVN0cm9rZXNXaWRnZXRzKFxuICAgICAgICBrZXlFdmVudHNQb3MsXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLnN0YWNrUmVuZGVyZXJzLFxuICAgICAgICB0aGlzLl9yZW5kZXJlci50ZXh0UmVuZGVyZXJcbiAgICAgICk7XG4gICAgICBncmFwaGljcy5yZW5kZXJlcnMud2lkZ2V0cy5hZGRBcnJvd1N0cm9rZXNXaWRnZXRzKFxuICAgICAgICB0b3VjaEV2ZW50c1BvcyxcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIuc3RhY2tSZW5kZXJlcnMsXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLnRleHRSZW5kZXJlclxuICAgICAgKTtcbiAgICAgIGdyYXBoaWNzLnJlbmRlcmVycy53aWRnZXRzLmFkZEtleXNUb3VjaGVzV2lkZ2V0cyhcbiAgICAgICAgdGhpcy5fY2FudmFzRWxlbWVudCxcbiAgICAgICAgYm9hcmRQb3MsXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLnN0YWNrUmVuZGVyZXJzLFxuICAgICAgICB0aGlzLl9yZW5kZXJlci50ZXh0UmVuZGVyZXJcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZ3JhcGhpY3MucmVuZGVyZXJzLndpZGdldHMucmVuZGVyRnBzTWV0ZXIoXG4gICAgICBbMTAsIHRoaXMuX2NhbnZhc0VsZW1lbnQuaGVpZ2h0IC0gNjAsIDBdLFxuICAgICAgWzEwMCwgNTBdLFxuICAgICAgdGhpcy5fZnJhbWVQcm9maWxlcixcbiAgICAgIHRoaXMuX3JlbmRlcmVyLnN0YWNrUmVuZGVyZXJzLFxuICAgICAgdGhpcy5fcmVuZGVyZXIudGV4dFJlbmRlcmVyLFxuICAgICAgdHJ1ZVxuICAgICk7XG5cbiAgICB0aGlzLl9yZW5kZXJlci5mbHVzaEh1ZFdpcmVGcmFtZSgpO1xuICAgIHRoaXMuX3JlbmRlcmVyLmZsdXNoSHVkVGV4dCgpO1xuXG4gICAgdGhpcy5fcmVuZGVyZXIucmF5VHJhY2VyUmVuZGVyZXIucmVzZXQoKTtcbiAgfVxuICAvLyAjZW5kcmVnaW9uIGh1ZFxuXG4gIC8vICNyZWdpb24gc2NlbmVcbiAgcHJpdmF0ZSBfcmVuZGVyU2NlbmUoKSB7XG4gICAgLy8gdGhpcy5fcmVuZGVyZXIubXVsdGlwbGVCdWZmZXJpbmcuY2FwdHVyZVNjZW5lKCgpID0+IHtcblxuICAgICAge1xuICAgICAgICBjb25zdCBnbCA9IFdlYkdMQ29udGV4dC5nZXRDb250ZXh0KCk7XG5cbiAgICAgICAgLy8gZ2wuY2xlYXIoZ2wuQ09MT1IgfCBnbC5ERVBUSCk7XG4gICAgICAgIC8vIGdsLmNsZWFyKGdsLkRFUFRIX0JVRkZFUl9CSVQpO1xuICAgICAgICBnbC5jbGVhcihnbC5DT0xPUl9CVUZGRVJfQklUIHwgZ2wuREVQVEhfQlVGRkVSX0JJVCk7XG5cbiAgICAgICAgZ2wuZGlzYWJsZShnbC5ERVBUSF9URVNUKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVuZGVyZXIucmF5VHJhY2VyUmVuZGVyZXIubG9va0F0KFxuICAgICAgICB0aGlzLl9mcmVlRmx5Q29udHJvbGxlci5nZXRQb3NpdGlvbigpLFxuICAgICAgICB0aGlzLl9mcmVlRmx5Q29udHJvbGxlci5nZXRUYXJnZXQoKSxcbiAgICAgICAgdGhpcy5fZnJlZUZseUNvbnRyb2xsZXIuZ2V0VXBBeGlzKClcbiAgICAgICk7XG5cbiAgICAgIHRoaXMuX3JlbmRlcmVyLnJheVRyYWNlclJlbmRlcmVyLnJlbmRlcigpO1xuXG4gICAgICBjb25zdCBzaG93RGVidWcgPSB0aGlzLl9kZWYuZGVidWdfbW9kZV9lbmFibGVkLmNoZWNrZWQgPT09IHRydWU7XG4gICAgICBpZiAoc2hvd0RlYnVnKSB7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLnN0YWNrUmVuZGVyZXJzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLnNhZmVTY2VuZVdpcmVGcmFtZSgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0dXBEZWJ1Z1JlbmRlcmVyKCk7XG5cbiAgICAgICAgICBjb25zdCBheGlzT3JpZ2luOiBnbG0uUmVhZG9ubHlWZWMzID0gWzAsIDAsIDBdO1xuICAgICAgICAgIGNvbnN0IGF4aXNYOiBnbG0uUmVhZG9ubHlWZWMzID0gWzEwMCwgMCwgMF07XG4gICAgICAgICAgY29uc3QgYXhpc1k6IGdsbS5SZWFkb25seVZlYzMgPSBbMCwgMTAwLCAwXTtcbiAgICAgICAgICBjb25zdCBheGlzWjogZ2xtLlJlYWRvbmx5VmVjMyA9IFswLCAwLCAxMDBdO1xuXG4gICAgICAgICAgdGhpcy5fcmVuZGVyZXIuc3RhY2tSZW5kZXJlcnMucHVzaExpbmUoYXhpc09yaWdpbiwgYXhpc1gsIFsxLCAwLCAwXSk7XG4gICAgICAgICAgdGhpcy5fcmVuZGVyZXIuc3RhY2tSZW5kZXJlcnMucHVzaExpbmUoYXhpc09yaWdpbiwgYXhpc1ksIFswLCAxLCAwXSk7XG4gICAgICAgICAgdGhpcy5fcmVuZGVyZXIuc3RhY2tSZW5kZXJlcnMucHVzaExpbmUoYXhpc09yaWdpbiwgYXhpc1osIFswLCAwLCAxXSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIC8vIH0pO1xuICB9XG4gIC8vICNlbmRyZWdpb24gc2NlbmVcblxuICBwcml2YXRlIF9zZXRSZXNvbHV0aW9uKGluVmFsdWU6IG51bWJlcikge1xuICAgIGNvbnN0IHNhZmVWYWx1ZSA9IF9jbGFtcChpblZhbHVlLCAwLCA5KTsgLy8gWzAuLjldXG4gICAgY29uc3QgbmV3VmFsdWUgPSAxMCAtIHNhZmVWYWx1ZTsgLy8gWzEuLjEwXVxuICAgIGNvbnN0IG5ld0NvZWYgPSAxIC8gbmV3VmFsdWU7IC8vIFswLi4xXVxuICAgIHRoaXMuX3JlbmRlcmVyLnJheVRyYWNlclJlbmRlcmVyLnNldFJlc29sdXRpb25Db2VmKG5ld0NvZWYpO1xuICB9XG5cbiAgcHJpdmF0ZSBfbG9nUmVzb2x1dGlvbigpIHtcbiAgICBjb25zdCByYXlUcmFjZXJSZW5kZXJlciA9IHRoaXMuX3JlbmRlcmVyLnJheVRyYWNlclJlbmRlcmVyO1xuXG4gICAgY29uc3QgbmV3Q29lZiA9IHJheVRyYWNlclJlbmRlcmVyLmdldFJlc29sdXRpb25Db2VmKCk7XG4gICAgY29uc3QgbmV3U2l6ZSA9IHJheVRyYWNlclJlbmRlcmVyLmdldEN1cnJlbnRTaXplKCk7XG4gICAgY29uc3QgdG90YWxQaXhlbHMgPSBuZXdTaXplWzBdICogbmV3U2l6ZVsxXTtcblxuICAgIHRoaXMuX2RlZi5sb2dnZXIubG9nKFxuICAgICAgYHJlc29sdXRpb24gY2hhbmdlZCAoMS8ke01hdGguY2VpbCgxIC8gbmV3Q29lZil9KSA9PiAke25ld1NpemVbMF19eCR7XG4gICAgICAgIG5ld1NpemVbMV1cbiAgICAgIH0gKCR7dG90YWxQaXhlbHN9cHgpYFxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIF9oYW5kbGVQZXJmb3JtYW5jZUF1dG9TY2FsaW5nKGluRGVsdGFNc2VjVGltZTogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuX3BlcmZBdXRvU2NhbGluZ0VuYWJsZWQgIT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaW5EZWx0YU1zZWNUaW1lIDw9IDIwKSB7XG4gICAgICB0aGlzLl9mcmFtZXNVbnRpbE5leHRDaGVjayA9IGtfbWF4RnJhbWVzVW50aWxOZXh0Q2hlY2s7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLS10aGlzLl9mcmFtZXNVbnRpbE5leHRDaGVjaztcblxuICAgIGlmICh0aGlzLl9mcmFtZXNVbnRpbE5leHRDaGVjayA+IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9kZWYubG9nZ2VyLmxvZyhcbiAgICAgIGBwZXJmb3JtYW5jZSBhdXRvIHNjYWxpbmc6IHNsb3cgZnJhbWVyYXRlLCBzY2FsaW5nIGRvd24gcmVzb2x1dGlvbmBcbiAgICApO1xuXG4gICAgY29uc3QgY3VyclZhbHVlID0gdGhpcy5fZGVmLnJlc29sdXRpb24udmFsdWUgYXMgdW5rbm93biBhcyBudW1iZXI7XG4gICAgY29uc3QgbmV3VmFsdWUgPSBjdXJyVmFsdWUgLSAxO1xuXG4gICAgaWYgKG5ld1ZhbHVlID49IDAgJiYgbmV3VmFsdWUgPD0gOSkge1xuICAgICAgdGhpcy5fc2V0UmVzb2x1dGlvbihuZXdWYWx1ZSk7XG4gICAgICB0aGlzLl9sb2dSZXNvbHV0aW9uKCk7XG5cbiAgICAgIHRoaXMuX2RlZi5yZXNvbHV0aW9uLnZhbHVlID0gbmV3VmFsdWUgYXMgdW5rbm93biBhcyBzdHJpbmc7XG4gICAgfVxuXG4gICAgdGhpcy5fZnJhbWVzVW50aWxOZXh0Q2hlY2sgPSBrX21heEZyYW1lc1VudGlsTmV4dENoZWNrO1xuICB9XG59XG4iLAogICJpbXBvcnQgeyBzeXN0ZW0gfSBmcm9tICdAbG9jYWwtZnJhbWV3b3JrJztcblxuZXhwb3J0IGNvbnN0IHNldHVwT3V0ZGF0ZWRQYWdlID0gKFxuICBtYXhEdXJhdGlvbjogbnVtYmVyLFxuICBvblRpbWVvdXQ6ICgpID0+IHZvaWRcbikgPT4ge1xuICBpZiAoIXN5c3RlbS5icm93c2VyLkdsb2JhbFZpc2liaWxpdHlNYW5hZ2VyLmlzU3VwcG9ydGVkKCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgdGltZW91dEhhbmRsZTogbnVtYmVyID0gLTE7XG5cbiAgc3lzdGVtLmJyb3dzZXIuR2xvYmFsVmlzaWJpbGl0eU1hbmFnZXIuYWRkVmlzaWJpbGl0eUNoYW5nZSgoaXNWaXNpYmxlKSA9PiB7XG4gICAgaWYgKGlzVmlzaWJsZSkge1xuICAgICAgaWYgKHRpbWVvdXRIYW5kbGUgPj0gMCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dEhhbmRsZSk7XG4gICAgICAgIHRpbWVvdXRIYW5kbGUgPSAtMTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGltZW91dEhhbmRsZSA9IHdpbmRvdy5zZXRUaW1lb3V0KG9uVGltZW91dCwgbWF4RHVyYXRpb24pO1xuICAgIH1cbiAgfSk7XG4gIHN5c3RlbS5icm93c2VyLkdsb2JhbFZpc2liaWxpdHlNYW5hZ2VyLmFjdGl2YXRlKCk7XG59O1xuIiwKICAiaW1wb3J0IHsgc3lzdGVtIH0gZnJvbSAnQGxvY2FsLWZyYW1ld29yayc7XG5cbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4vZXhwZXJpbWVudC91dGlsaXRpZXMvTG9nZ2VyJztcblxuaW1wb3J0IHsgRXhwZXJpbWVudCB9IGZyb20gJy4vZXhwZXJpbWVudC9FeHBlcmltZW50JztcblxuaW1wb3J0ICogYXMgdXRpbGl0aWVzIGZyb20gJy4vdXRpbGl0aWVzJztcblxubGV0IGxvZ2dlcjogTG9nZ2VyIHwgbnVsbCA9IG51bGw7XG5sZXQgbWFpbkRlbW86IEV4cGVyaW1lbnQgfCBudWxsID0gbnVsbDtcblxuLy9cbi8vXG4vL1xuLy9cbi8vXG5cbmNvbnN0IF9xdWVyeURvbUVsZW1lbnQgPSA8VCBleHRlbmRzIEVsZW1lbnQ+KGluTmFtZTogc3RyaW5nKTogVCA9PiB7XG4gIGNvbnN0IG5ld0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yPFQ+KGluTmFtZSk7XG4gIGlmICghbmV3RWxlbWVudCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgaHRtbCBlbGVtZW50IFwiJHtpbk5hbWV9XCIgbm90IGZvdW5kYCk7XG4gIH1cbiAgcmV0dXJuIG5ld0VsZW1lbnQ7XG59O1xuXG4vL1xuLy9cbi8vXG4vL1xuLy9cblxuY29uc3Qgb25QYWdlTG9hZCA9IGFzeW5jICgpID0+IHtcbiAgbG9nZ2VyID0gbmV3IExvZ2dlcignbG9nZ2VyT3V0cHV0Jyk7XG4gIGxvZ2dlci5sb2coJ1tTRVRVUF0gcGFnZSBsb2FkZWQnKTtcblxuICAvL1xuICAvLyBIVE1MIGVsZW1lbnRzIGNoZWNrXG4gIC8vXG5cbiAgY29uc3QgY2FudmFzRWxlbWVudCA9XG4gICAgX3F1ZXJ5RG9tRWxlbWVudDxIVE1MQ2FudmFzRWxlbWVudD4oJyNyZW5kZXJpbmctY2FudmFzJyk7XG4gIGNvbnN0IHBlcmZBdXRvU2NhbGluZyA9IF9xdWVyeURvbUVsZW1lbnQ8SFRNTElucHV0RWxlbWVudD4oXG4gICAgJyNhdXRvLXNjYWxpbmctZW5hYmxlZCdcbiAgKTtcbiAgY29uc3QgcmVzb2x1dGlvbiA9IF9xdWVyeURvbUVsZW1lbnQ8SFRNTElucHV0RWxlbWVudD4oJyNyZXNvbHV0aW9uJyk7XG4gIGNvbnN0IGFudGlfYWxpYXNpbmdfZW5hYmxlZCA9IF9xdWVyeURvbUVsZW1lbnQ8SFRNTElucHV0RWxlbWVudD4oXG4gICAgJyNhbnRpLWFsaWFzaW5nLWVuYWJsZWQnXG4gICk7XG4gIGNvbnN0IGRlYnVnX21vZGVfZW5hYmxlZCA9IF9xdWVyeURvbUVsZW1lbnQ8SFRNTElucHV0RWxlbWVudD4oXG4gICAgJyNkZWJ1Zy1tb2RlLWVuYWJsZWQnXG4gICk7XG4gIGNvbnN0IGVycm9yVGV4dCA9IF9xdWVyeURvbUVsZW1lbnQ8SFRNTFBhcmFncmFwaEVsZW1lbnQ+KCcjZXJyb3ItdGV4dCcpITtcblxuICAvL1xuICAvLyBFcnJvciBIYW5kbGluZ1xuICAvL1xuXG4gIGNvbnN0IF9vblBhZ2VFcnJvciA9IChlcnI6IFdpbmRvd0V2ZW50TWFwWydlcnJvciddKSA9PiB7XG4gICAgaWYgKCFtYWluRGVtbykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKCdvblBhZ2VFcnJvcicsIGVycik7XG5cbiAgICB0cnkge1xuICAgICAgLy8gc3RvcCB0aGUgYXBwXG4gICAgICBtYWluRGVtby5zdG9wKCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7fVxuICAgIG1haW5EZW1vID0gbnVsbDtcblxuICAgIC8vIHN0b3AgdGhlIGJyb3dzZXIgaGVscGVyc1xuICAgIHN5c3RlbS5icm93c2VyLkdsb2JhbEtleWJvYXJkTWFuYWdlci5kZWFjdGl2YXRlKCk7XG4gICAgc3lzdGVtLmJyb3dzZXIuR2xvYmFsTW91c2VNYW5hZ2VyLmRlYWN0aXZhdGUoY2FudmFzRWxlbWVudCk7XG4gICAgc3lzdGVtLmJyb3dzZXIuR2xvYmFsVG91Y2hNYW5hZ2VyLmRlYWN0aXZhdGUoY2FudmFzRWxlbWVudCk7XG4gICAgc3lzdGVtLmJyb3dzZXIuR2xvYmFsRnVsbFNjcmVlbk1hbmFnZXIucmVtb3ZlQWxsQ2FsbGJhY2tzKCk7XG4gICAgc3lzdGVtLmJyb3dzZXIuR2xvYmFsUG9pbnRlckxvY2tNYW5hZ2VyLnJlbW92ZUFsbENhbGxiYWNrcygpO1xuICAgIHN5c3RlbS5icm93c2VyLkdsb2JhbFZpc2liaWxpdHlNYW5hZ2VyLnJlbW92ZUFsbENhbGxiYWNrcygpO1xuICAgIHN5c3RlbS5icm93c2VyLkdsb2JhbFZpc2liaWxpdHlNYW5hZ2VyLmRlYWN0aXZhdGUoKTtcblxuICAgIC8vIHNldHVwIHRoZSBlcnJvciBtZXNzYWdlXG4gICAgZXJyb3JUZXh0LnN0eWxlLndpZHRoID0gJzgwMHB4JztcbiAgICBlcnJvclRleHQuc3R5bGUuaGVpZ2h0ID0gJzYwMHB4JztcbiAgICBlcnJvclRleHQuaW5uZXJIVE1MID0gZXJyLm1lc3NhZ2U7XG5cbiAgICAvLyBzd2FwIHRoZSBjYW52YXMgd2l0aCB0aGUgZXJyb3IgbWVzc2FnZVxuICAgIGNhbnZhc0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICBlcnJvclRleHQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG5cbiAgICAvLyBkaXNhYmxlIHRoZSB1c2VyIGludGVyZmFjZVxuICAgIHBlcmZBdXRvU2NhbGluZy5kaXNhYmxlZCA9IHRydWU7XG4gICAgcmVzb2x1dGlvbi5taW4gPSByZXNvbHV0aW9uLm1heCA9IHJlc29sdXRpb24udmFsdWUgPSAwIGFzIHVua25vd24gYXMgc3RyaW5nO1xuICAgIGFudGlfYWxpYXNpbmdfZW5hYmxlZC5kaXNhYmxlZCA9IHRydWU7XG4gICAgZGVidWdfbW9kZV9lbmFibGVkLmRpc2FibGVkID0gdHJ1ZTtcblxuICAgIGRvY3VtZW50LnRpdGxlICs9ICcgKEVSUiknO1xuICB9O1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBfb25QYWdlRXJyb3IpO1xuXG4gIC8vXG4gIC8vIGJyb3dzZXIgZmVhdHVyZXMgY2hlY2tcbiAgLy9cblxuICBpZiAoIXN5c3RlbS5icm93c2VyLmlzV2ViR0wyU3VwcG9ydGVkKCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21pc3NpbmcgV2ViR0wyIGZlYXR1cmUgKHVuc3VwcG9ydGVkKScpO1xuICB9XG5cbiAgLy9cbiAgLy8gc2V0dXAgYXBwbGljYXRpb25cbiAgLy9cblxuICBtYWluRGVtbyA9IG5ldyBFeHBlcmltZW50KHtcbiAgICBjYW52YXNFbGVtZW50LFxuICAgIGxvZ2dlcixcbiAgICBwZXJmQXV0b1NjYWxpbmcsXG4gICAgcmVzb2x1dGlvbixcbiAgICBhbnRpX2FsaWFzaW5nX2VuYWJsZWQsXG4gICAgZGVidWdfbW9kZV9lbmFibGVkXG4gIH0pO1xuXG4gIGxvZ2dlci5sb2coJ1tTRVRVUF0gRGVtbzogaW5pdGlhbGl6aW5nJyk7XG5cbiAgYXdhaXQgbWFpbkRlbW8uaW5pdCgpO1xuXG4gIGxvZ2dlci5sb2coJ1tTRVRVUF0gRGVtbzogaW5pdGlhbGl6ZWQnKTtcblxuICBtYWluRGVtby5zdGFydCgpO1xuXG4gIGxvZ2dlci5sb2coJ1tTRVRVUF0gRGVtbzogcnVubmluZycpO1xuXG4gIC8vXG4gIC8vXG4gIC8vXG5cbiAgY29uc3QgcGFnZU1heFRpbWVJbnZpc2libGUgPSA2MCAqIDEwMDA7IC8vIDYwc2VjXG4gIHV0aWxpdGllcy5zZXR1cE91dGRhdGVkUGFnZShwYWdlTWF4VGltZUludmlzaWJsZSwgKCkgPT4ge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICc8YnIvPjxici8+PGJyLz5UaGUgcGFnZSB3YXMgaW5hY3RpdmUgZm9yIHRvbyBsb25nPGJyLz48YnIvPnBsZWFzZSByZWxvYWQnXG4gICAgKTtcbiAgfSk7XG59O1xuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIG9uUGFnZUxvYWQsIGZhbHNlKTtcbiIKICBdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFNLG1CQUE2QjtBQUFBLEVBQ2pDO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQ0Y7QUFFQSxJQUFNLGtCQUE0QjtBQUFBLEVBQ2hDO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQ0Y7QUFTQTtBQUFBLE1BQU0sa0JBQWtCO0FBQUEsRUFDZCwr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S0FBSyxFQUFFO0FBQ1gsTUFBSSxLQUFLLEVBQUU7QUFDWCxNQUFJLEtBQUssRUFBRTtBQUNYLE1BQUksS0FBSyxFQUFFO0FBQ1gsTUFBSSxLQUFLLEVBQUU7QUFDWCxNQUFJLEtBQUssRUFBRTtBQUNYLE1BQUksS0FBSyxFQUFFO0FBQ1gsTUFBSSxLQUFLLEVBQUU7QUFDWCxNQUFJLEtBQUssRUFBRTtBQUNYLE1BQUksS0FBSyxFQUFFO0FBQ1gsTUFBSSxNQUFNLEVBQUU7QUFDWixNQUFJLE1BQU0sRUFBRTtBQUNaLE1BQUksTUFBTSxFQUFFO0FBQ1osTUFBSSxNQUFNLEVBQUU7QUFDWixNQUFJLE1BQU0sRUFBRTtBQUNaLE1BQUksTUFBTSxFQUFFO0FBQ1osU0FBTztBQUFBO0FBVUYsU0FBUyxJQUFJLENBQUMsS0FBSyxHQUFHO0FBQzNCLE1BQUksS0FBSyxFQUFFO0FBQ1gsTUFBSSxLQUFLLEVBQUU7QUFDWCxNQUFJLEtBQUssRUFBRTtBQUNYLE1BQUksS0FBSyxFQUFFO0FBQ1gsTUFBSSxLQUFLLEVBQUU7QUFDWCxNQUFJLEtBQUssRUFBRTtBQUNYLE1BQUksS0FBSyxFQUFFO0FBQ1gsTUFBSSxLQUFLLEVBQUU7QUFDWCxNQUFJLEtBQUssRUFBRTtBQUNYLE1BQUksS0FBSyxFQUFFO0FBQ1gsTUFBSSxNQUFNLEVBQUU7QUFDWixNQUFJLE1BQU0sRUFBRTtBQUNaLE1BQUksTUFBTSxFQUFFO0FBQ1osTUFBSSxNQUFNLEVBQUU7QUFDWixNQUFJLE1BQU0sRUFBRTtBQUNaLE1BQUksTUFBTSxFQUFFO0FBQ1osU0FBTztBQUFBO0FBd0JGLFNBQVMsVUFBVSxDQUFDLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUs7QUFDekcsTUFBSSxNQUFNLElBQWEsV0FBVyxFQUFFO0FBQ3BDLE1BQUksS0FBSztBQUNULE1BQUksS0FBSztBQUNULE1BQUksS0FBSztBQUNULE1BQUksS0FBSztBQUNULE1BQUksS0FBSztBQUNULE1BQUksS0FBSztBQUNULE1BQUksS0FBSztBQUNULE1BQUksS0FBSztBQUNULE1BQUksS0FBSztBQUNULE1BQUksS0FBSztBQUNULE1BQUksTUFBTTtBQUNWLE1BQUksTUFBTTtBQUNWLE1BQUksTUFBTTtBQUNWLE1BQUksTUFBTTtBQUNWLE1BQUksTUFBTTtBQUNWLE1BQUksTUFBTTtBQUNWLFNBQU87QUFBQTtBQXlCRixTQUFTLEdBQUcsQ0FBQyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUs7QUFDdkcsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxNQUFNO0FBQ1YsTUFBSSxNQUFNO0FBQ1YsTUFBSSxNQUFNO0FBQ1YsTUFBSSxNQUFNO0FBQ1YsTUFBSSxNQUFNO0FBQ1YsTUFBSSxNQUFNO0FBQ1YsU0FBTztBQUFBO0FBU0YsU0FBUyxRQUFRLENBQUMsS0FBSztBQUM1QixNQUFJLEtBQUs7QUFDVCxNQUFJLEtBQUs7QUFDVCxNQUFJLEtBQUs7QUFDVCxNQUFJLEtBQUs7QUFDVCxNQUFJLEtBQUs7QUFDVCxNQUFJLEtBQUs7QUFDVCxNQUFJLEtBQUs7QUFDVCxNQUFJLEtBQUs7QUFDVCxNQUFJLEtBQUs7QUFDVCxNQUFJLEtBQUs7QUFDVCxNQUFJLE1BQU07QUFDVixNQUFJLE1BQU07QUFDVixNQUFJLE1BQU07QUFDVixNQUFJLE1BQU07QUFDVixNQUFJLE1BQU07QUFDVixNQUFJLE1BQU07QUFDVixTQUFPO0FBQUE7QUFVRixTQUFTLFNBQVMsQ0FBQyxLQUFLLEdBQUc7QUFFaEMsTUFBSSxRQUFRLEdBQUc7QUFDYixRQUFJLE1BQU0sRUFBRSxJQUNSLE1BQU0sRUFBRSxJQUNSLE1BQU0sRUFBRTtBQUNaLFFBQUksTUFBTSxFQUFFLElBQ1IsTUFBTSxFQUFFO0FBQ1osUUFBSSxNQUFNLEVBQUU7QUFDWixRQUFJLEtBQUssRUFBRTtBQUNYLFFBQUksS0FBSyxFQUFFO0FBQ1gsUUFBSSxLQUFLLEVBQUU7QUFDWCxRQUFJLEtBQUs7QUFDVCxRQUFJLEtBQUssRUFBRTtBQUNYLFFBQUksS0FBSyxFQUFFO0FBQ1gsUUFBSSxLQUFLO0FBQ1QsUUFBSSxLQUFLO0FBQ1QsUUFBSSxNQUFNLEVBQUU7QUFDWixRQUFJLE1BQU07QUFDVixRQUFJLE1BQU07QUFDVixRQUFJLE1BQU07QUFBQSxFQUNaLE9BQU87QUFDTCxRQUFJLEtBQUssRUFBRTtBQUNYLFFBQUksS0FBSyxFQUFFO0FBQ1gsUUFBSSxLQUFLLEVBQUU7QUFDWCxRQUFJLEtBQUssRUFBRTtBQUNYLFFBQUksS0FBSyxFQUFFO0FBQ1gsUUFBSSxLQUFLLEVBQUU7QUFDWCxRQUFJLEtBQUssRUFBRTtBQUNYLFFBQUksS0FBSyxFQUFFO0FBQ1gsUUFBSSxLQUFLLEVBQUU7QUFDWCxRQUFJLEtBQUssRUFBRTtBQUNYLFFBQUksTUFBTSxFQUFFO0FBQ1osUUFBSSxNQUFNLEVBQUU7QUFDWixRQUFJLE1BQU0sRUFBRTtBQUNaLFFBQUksTUFBTSxFQUFFO0FBQ1osUUFBSSxNQUFNLEVBQUU7QUFDWixRQUFJLE1BQU0sRUFBRTtBQUFBO0FBR2QsU0FBTztBQUFBO0FBVUYsU0FBUyxNQUFNLENBQUMsS0FBSyxHQUFHO0FBQzdCLE1BQUksTUFBTSxFQUFFLElBQ1IsTUFBTSxFQUFFLElBQ1IsTUFBTSxFQUFFLElBQ1IsTUFBTSxFQUFFO0FBQ1osTUFBSSxNQUFNLEVBQUUsSUFDUixNQUFNLEVBQUUsSUFDUixNQUFNLEVBQUUsSUFDUixNQUFNLEVBQUU7QUFDWixNQUFJLE1BQU0sRUFBRSxJQUNSLE1BQU0sRUFBRSxJQUNSLE1BQU0sRUFBRSxLQUNSLE1BQU0sRUFBRTtBQUNaLE1BQUksTUFBTSxFQUFFLEtBQ1IsTUFBTSxFQUFFLEtBQ1IsTUFBTSxFQUFFLEtBQ1IsTUFBTSxFQUFFO0FBQ1osTUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBQzVCLE1BQUksTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUM1QixNQUFJLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFDNUIsTUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBQzVCLE1BQUksTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUM1QixNQUFJLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFDNUIsTUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBQzVCLE1BQUksTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUM1QixNQUFJLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFDNUIsTUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBQzVCLE1BQUksTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUM1QixNQUFJLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFFNUIsTUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUU1RSxPQUFLLEtBQUs7QUFDUixXQUFPO0FBQUEsRUFDVDtBQUVBLFFBQU0sSUFBTTtBQUNaLE1BQUksTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sT0FBTztBQUMvQyxNQUFJLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE9BQU87QUFDL0MsTUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxPQUFPO0FBQy9DLE1BQUksTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sT0FBTztBQUMvQyxNQUFJLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE9BQU87QUFDL0MsTUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxPQUFPO0FBQy9DLE1BQUksTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sT0FBTztBQUMvQyxNQUFJLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE9BQU87QUFDL0MsTUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxPQUFPO0FBQy9DLE1BQUksTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sT0FBTztBQUMvQyxNQUFJLE9BQU8sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE9BQU87QUFDaEQsTUFBSSxPQUFPLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxPQUFPO0FBQ2hELE1BQUksT0FBTyxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sT0FBTztBQUNoRCxNQUFJLE9BQU8sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE9BQU87QUFDaEQsTUFBSSxPQUFPLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxPQUFPO0FBQ2hELE1BQUksT0FBTyxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sT0FBTztBQUNoRCxTQUFPO0FBQUE7QUFVRixTQUFTLE9BQU8sQ0FBQyxLQUFLLEdBQUc7QUFDOUIsTUFBSSxNQUFNLEVBQUUsSUFDUixNQUFNLEVBQUUsSUFDUixNQUFNLEVBQUUsSUFDUixNQUFNLEVBQUU7QUFDWixNQUFJLE1BQU0sRUFBRSxJQUNSLE1BQU0sRUFBRSxJQUNSLE1BQU0sRUFBRSxJQUNSLE1BQU0sRUFBRTtBQUNaLE1BQUksTUFBTSxFQUFFLElBQ1IsTUFBTSxFQUFFLElBQ1IsTUFBTSxFQUFFLEtBQ1IsTUFBTSxFQUFFO0FBQ1osTUFBSSxNQUFNLEVBQUUsS0FDUixNQUFNLEVBQUUsS0FDUixNQUFNLEVBQUUsS0FDUixNQUFNLEVBQUU7QUFDWixNQUFJLEtBQUssT0FBTyxNQUFNLE1BQU0sTUFBTSxPQUFPLE9BQU8sTUFBTSxNQUFNLE1BQU0sT0FBTyxPQUFPLE1BQU0sTUFBTSxNQUFNO0FBQ2xHLE1BQUksT0FBTyxPQUFPLE1BQU0sTUFBTSxNQUFNLE9BQU8sT0FBTyxNQUFNLE1BQU0sTUFBTSxPQUFPLE9BQU8sTUFBTSxNQUFNLE1BQU07QUFDcEcsTUFBSSxLQUFLLE9BQU8sTUFBTSxNQUFNLE1BQU0sT0FBTyxPQUFPLE1BQU0sTUFBTSxNQUFNLE9BQU8sT0FBTyxNQUFNLE1BQU0sTUFBTTtBQUNsRyxNQUFJLE9BQU8sT0FBTyxNQUFNLE1BQU0sTUFBTSxPQUFPLE9BQU8sTUFBTSxNQUFNLE1BQU0sT0FBTyxPQUFPLE1BQU0sTUFBTSxNQUFNO0FBQ3BHLE1BQUksT0FBTyxPQUFPLE1BQU0sTUFBTSxNQUFNLE9BQU8sT0FBTyxNQUFNLE1BQU0sTUFBTSxPQUFPLE9BQU8sTUFBTSxNQUFNLE1BQU07QUFDcEcsTUFBSSxLQUFLLE9BQU8sTUFBTSxNQUFNLE1BQU0sT0FBTyxPQUFPLE1BQU0sTUFBTSxNQUFNLE9BQU8sT0FBTyxNQUFNLE1BQU0sTUFBTTtBQUNsRyxNQUFJLE9BQU8sT0FBTyxNQUFNLE1BQU0sTUFBTSxPQUFPLE9BQU8sTUFBTSxNQUFNLE1BQU0sT0FBTyxPQUFPLE1BQU0sTUFBTSxNQUFNO0FBQ3BHLE1BQUksS0FBSyxPQUFPLE1BQU0sTUFBTSxNQUFNLE9BQU8sT0FBTyxNQUFNLE1BQU0sTUFBTSxPQUFPLE9BQU8sTUFBTSxNQUFNLE1BQU07QUFDbEcsTUFBSSxLQUFLLE9BQU8sTUFBTSxNQUFNLE1BQU0sT0FBTyxPQUFPLE1BQU0sTUFBTSxNQUFNLE9BQU8sT0FBTyxNQUFNLE1BQU0sTUFBTTtBQUNsRyxNQUFJLE9BQU8sT0FBTyxNQUFNLE1BQU0sTUFBTSxPQUFPLE9BQU8sTUFBTSxNQUFNLE1BQU0sT0FBTyxPQUFPLE1BQU0sTUFBTSxNQUFNO0FBQ3BHLE1BQUksTUFBTSxPQUFPLE1BQU0sTUFBTSxNQUFNLE9BQU8sT0FBTyxNQUFNLE1BQU0sTUFBTSxPQUFPLE9BQU8sTUFBTSxNQUFNLE1BQU07QUFDbkcsTUFBSSxRQUFRLE9BQU8sTUFBTSxNQUFNLE1BQU0sT0FBTyxPQUFPLE1BQU0sTUFBTSxNQUFNLE9BQU8sT0FBTyxNQUFNLE1BQU0sTUFBTTtBQUNyRyxNQUFJLFFBQVEsT0FBTyxNQUFNLE1BQU0sTUFBTSxPQUFPLE9BQU8sTUFBTSxNQUFNLE1BQU0sT0FBTyxPQUFPLE1BQU0sTUFBTSxNQUFNO0FBQ3JHLE1BQUksTUFBTSxPQUFPLE1BQU0sTUFBTSxNQUFNLE9BQU8sT0FBTyxNQUFNLE1BQU0sTUFBTSxPQUFPLE9BQU8sTUFBTSxNQUFNLE1BQU07QUFDbkcsTUFBSSxRQUFRLE9BQU8sTUFBTSxNQUFNLE1BQU0sT0FBTyxPQUFPLE1BQU0sTUFBTSxNQUFNLE9BQU8sT0FBTyxNQUFNLE1BQU0sTUFBTTtBQUNyRyxNQUFJLE1BQU0sT0FBTyxNQUFNLE1BQU0sTUFBTSxPQUFPLE9BQU8sTUFBTSxNQUFNLE1BQU0sT0FBTyxPQUFPLE1BQU0sTUFBTSxNQUFNO0FBQ25HLFNBQU87QUFBQTtBQVNGLFNBQVMsV0FBVyxDQUFDLEdBQUc7QUFDN0IsTUFBSSxNQUFNLEVBQUUsSUFDUixNQUFNLEVBQUUsSUFDUixNQUFNLEVBQUUsSUFDUixNQUFNLEVBQUU7QUFDWixNQUFJLE1BQU0sRUFBRSxJQUNSLE1BQU0sRUFBRSxJQUNSLE1BQU0sRUFBRSxJQUNSLE1BQU0sRUFBRTtBQUNaLE1BQUksTUFBTSxFQUFFLElBQ1IsTUFBTSxFQUFFLElBQ1IsTUFBTSxFQUFFLEtBQ1IsTUFBTSxFQUFFO0FBQ1osTUFBSSxNQUFNLEVBQUUsS0FDUixNQUFNLEVBQUUsS0FDUixNQUFNLEVBQUUsS0FDUixNQUFNLEVBQUU7QUFDWixNQUFJLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFDNUIsTUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBQzVCLE1BQUksTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUM1QixNQUFJLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFDNUIsTUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBQzVCLE1BQUksTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUM1QixNQUFJLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFDNUIsTUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBQzVCLE1BQUksTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUM1QixNQUFJLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFDNUIsTUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBQzVCLE1BQUksTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUU1QixTQUFPLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUFBO0FBV3BFLFNBQVMsUUFBUSxDQUFDLEtBQUssR0FBRyxHQUFHO0FBQ2xDLE1BQUksTUFBTSxFQUFFLElBQ1IsTUFBTSxFQUFFLElBQ1IsTUFBTSxFQUFFLElBQ1IsTUFBTSxFQUFFO0FBQ1osTUFBSSxNQUFNLEVBQUUsSUFDUixNQUFNLEVBQUUsSUFDUixNQUFNLEVBQUUsSUFDUixNQUFNLEVBQUU7QUFDWixNQUFJLE1BQU0sRUFBRSxJQUNSLE1BQU0sRUFBRSxJQUNSLE1BQU0sRUFBRSxLQUNSLE1BQU0sRUFBRTtBQUNaLE1BQUksTUFBTSxFQUFFLEtBQ1IsTUFBTSxFQUFFLEtBQ1IsTUFBTSxFQUFFLEtBQ1IsTUFBTSxFQUFFO0FBRVosTUFBSSxLQUFLLEVBQUUsSUFDUCxLQUFLLEVBQUUsSUFDUCxLQUFLLEVBQUUsSUFDUCxLQUFLLEVBQUU7QUFDWCxNQUFJLEtBQUssS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSztBQUMvQyxNQUFJLEtBQUssS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSztBQUMvQyxNQUFJLEtBQUssS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSztBQUMvQyxNQUFJLEtBQUssS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSztBQUMvQyxPQUFLLEVBQUU7QUFDUCxPQUFLLEVBQUU7QUFDUCxPQUFLLEVBQUU7QUFDUCxPQUFLLEVBQUU7QUFDUCxNQUFJLEtBQUssS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSztBQUMvQyxNQUFJLEtBQUssS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSztBQUMvQyxNQUFJLEtBQUssS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSztBQUMvQyxNQUFJLEtBQUssS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSztBQUMvQyxPQUFLLEVBQUU7QUFDUCxPQUFLLEVBQUU7QUFDUCxPQUFLLEVBQUU7QUFDUCxPQUFLLEVBQUU7QUFDUCxNQUFJLEtBQUssS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSztBQUMvQyxNQUFJLEtBQUssS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSztBQUMvQyxNQUFJLE1BQU0sS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSztBQUNoRCxNQUFJLE1BQU0sS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSztBQUNoRCxPQUFLLEVBQUU7QUFDUCxPQUFLLEVBQUU7QUFDUCxPQUFLLEVBQUU7QUFDUCxPQUFLLEVBQUU7QUFDUCxNQUFJLE1BQU0sS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSztBQUNoRCxNQUFJLE1BQU0sS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSztBQUNoRCxNQUFJLE1BQU0sS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSztBQUNoRCxNQUFJLE1BQU0sS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSztBQUNoRCxTQUFPO0FBQUE7QUFXRixTQUFTLFNBQVMsQ0FBQyxLQUFLLEdBQUcsR0FBRztBQUNuQyxNQUFJLElBQUksRUFBRSxJQUNOLElBQUksRUFBRSxJQUNOLElBQUksRUFBRTtBQUNWLE1BQUksS0FBSyxLQUFLLEtBQUs7QUFDbkIsTUFBSSxLQUFLLEtBQUssS0FBSztBQUNuQixNQUFJLEtBQUssS0FBSyxLQUFLO0FBRW5CLE1BQUksTUFBTSxLQUFLO0FBQ2IsUUFBSSxNQUFNLEVBQUUsS0FBSyxJQUFJLEVBQUUsS0FBSyxJQUFJLEVBQUUsS0FBSyxJQUFJLEVBQUU7QUFDN0MsUUFBSSxNQUFNLEVBQUUsS0FBSyxJQUFJLEVBQUUsS0FBSyxJQUFJLEVBQUUsS0FBSyxJQUFJLEVBQUU7QUFDN0MsUUFBSSxNQUFNLEVBQUUsS0FB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QUFNLEVBQUU7QUFDUixRQUFNLEVBQUU7QUFFUixRQUFNLElBQUksSUFBSSxJQUFJO0FBQ2xCLFFBQU0sSUFBSSxJQUFJLElBQUksSUFBSTtBQUN0QixRQUFNLElBQUksSUFBSSxJQUFJLElBQUk7QUFDdEIsUUFBTSxJQUFJLElBQUksSUFBSSxJQUFJO0FBQ3RCLFFBQU0sSUFBSSxJQUFJLElBQUk7QUFDbEIsUUFBTSxJQUFJLElBQUksSUFBSSxJQUFJO0FBQ3RCLFFBQU0sSUFBSSxJQUFJLElBQUksSUFBSTtBQUN0QixRQUFNLElBQUksSUFBSSxJQUFJLElBQUk7QUFDdEIsUUFBTSxJQUFJLElBQUksSUFBSTtBQUVsQixNQUFJLEtBQUssTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBQ3ZDLE1BQUksS0FBSyxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFDdkMsTUFBSSxLQUFLLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUN2QyxNQUFJLEtBQUssTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBQ3ZDLE1BQUksS0FBSyxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFDdkMsTUFBSSxLQUFLLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUN2QyxNQUFJLEtBQUssTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBQ3ZDLE1BQUksS0FBSyxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFDdkMsTUFBSSxLQUFLLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUN2QyxNQUFJLEtBQUssTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNO0FBQ3ZDLE1BQUksTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU07QUFDeEMsTUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTTtBQUV4QyxNQUFJLE1BQU0sS0FBSztBQUViLFFBQUksTUFBTSxFQUFFO0FBQ1osUUFBSSxNQUFNLEVBQUU7QUFDWixRQUFJLE1BQU0sRUFBRTtBQUNaLFFBQUksTUFBTSxFQUFFO0FBQUEsRUFDZDtBQUVBLFNBQU87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SSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxNQUFNO0FBQ1YsTUFBSSxNQUFNO0FBQ1YsTUFBSSxNQUFNO0FBQ1YsTUFBSSxNQUFNO0FBQ1YsTUFBSSxNQUFNO0FBQ1YsTUFBSSxNQUFNO0FBQ1YsTUFBSSxNQUFNO0FBQ1YsU0FBTztBQUFBO0FBY0YsU0FBUyxhQUFhLENBQUMsS0FBSyxLQUFLO0FBQ3RDLE1BQUksSUFBSSxLQUFLLElBQUksR0FBRztBQUNwQixNQUFJLElBQUksS0FBSyxJQUFJLEdBQUc7QUFFcEIsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxNQUFNO0FBQ1YsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxNQUFNO0FBQ1YsTUFBSSxNQUFNO0FBQ1YsTUFBSSxNQUFNO0FBQ1YsTUFBSSxNQUFNO0FBQ1YsTUFBSSxNQUFNO0FBQ1YsTUFBSSxNQUFNO0FBQ1YsU0FBTztBQUFBO0FBY0YsU0FBUyxhQUFhLENBQUMsS0FBSyxLQUFLO0FBQ3RDLE1BQUksSUFBSSxLQUFLLElBQUksR0FBRztBQUNwQixNQUFJLElBQUksS0FBSyxJQUFJLEdBQUc7QUFFcEIsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxNQUFNO0FBQ1YsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsTUFBSSxNQUFNO0FBQ1YsTUFBSSxNQUFNO0FBQ1YsTUFBSSxNQUFNO0FBQ1YsTUFBSSxNQUFNO0FBQ1YsTUFBSSxNQUFNO0FBQ1YsTUFBSSxNQUFNO0FB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TztBQUFBO0FBWUYsU0FBUyxvQkFBb0IsQ0FBQyxLQUFLLEdBQUcsR0FBRyxRQUFPO0FBQ3JELE1BQUksS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLO0FBQ3ZCLE1BQUksS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLO0FBQ3ZCLE1BQUksS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLO0FBQ3ZCLE1BQUksS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLO0FBQ3ZCLE1BQUksS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLO0FBQ3ZCLE1BQUksS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLO0FBQ3ZCLE1BQUksS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLO0FBQ3ZCLE1BQUksS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLO0FBQ3ZCLE1BQUksS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLO0FBQ3ZCLE1BQUksS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLO0FBQ3ZCLE1BQUksTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNO0FBQzFCLE1BQUksTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNO0FBQzFCLE1BQUksTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNO0FBQzFCLE1BQUksTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNO0FBQzFCLE1BQUksTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNO0FBQzFCLE1BQUksTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNO0FBQzFCLFNBQU87QUFBQTtBQVVGLFNBQVMsV0FBVyxDQUFDLEdBQUcsR0FBRztBQUNoQyxTQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFO0FBQUE7QUFVdlIsU0FBUyxNQUFNLENBQUMsR0FBRyxHQUFHO0FBQzNCLE1BQUksS0FBSyxFQUFFLElBQ1AsS0FBSyxFQUFFLElBQ1AsS0FBSyxFQUFFLElBQ1AsS0FBSyxFQUFFO0FBQ1gsTUFBSSxLQUFLLEVBQUUsSUFDUCxLQUFLLEVBQUUsSUFDUCxLQUFLLEVBQUUsSUFDUCxLQUFLLEVBQUU7QUFDWCxNQUFJLEtBQUssRUFBRSxJQUNQLEtBQUssRUFBRSxJQUNQLE1BQU0sRUFBRSxLQUNSLE1BQU0sRUFBRTtBQUNaLE1BQUksTUFBTSxFQUFFLEtBQ1IsTUFBTSxFQUFFLEtBQ1IsTUFBTSxFQUFFLEtBQ1IsTUFBTSxFQUFFO0FBQ1osTUFBSSxLQUFLLEVBQUUsSUFDUCxLQUFLLEVBQUUsSUFDUCxLQUFLLEVBQUUsSUFDUCxLQUFLLEVBQUU7QUFDWCxNQUFJLEtBQUssRUFBRSxJQUNQLEtBQUssRUFBRSxJQUNQLEtBQUssRUFBRSxJQUNQLEtBQUssRUFBRTtBQUNYLE1BQUksS0FBSyxFQUFFLElBQ1AsS0FBSyxFQUFFLElBQ1AsTUFBTSxFQUFFLEtBQ1IsTUFBTSxFQUFFO0FBQ1osTUFBSSxNQUFNLEVBQUUsS0FDUixNQUFNLEVBQUUsS0FDUixNQUFNLEVBQUUsS0FDUixNQUFNLEVBQUU7QUFDWixTQUFPLEtBQUssSUFBSSxLQUFLLEVBQUUsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxLQUFLLEVBQUUsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxLQUFLLEVBQUUsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxLQUFLLEVBQUUsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxLQUFLLEVBQUUsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxLQUFLLEVBQUUsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxLQUFLLEVBQUUsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxLQUFLLEVBQUUsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxLQUFLLEVBQUUsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxLQUFLLEVBQUUsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxNQUFNLEdBQUcsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxHQUFHLEdBQUcsS0FBSyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEtBQUssSUFBSSxNQUFNLEdBQUcsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxHQUFHLEdBQUcsS0FBSyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEtBQUssSUFBSSxNQUFNLEdBQUcsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxH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QVMsSUFBRyxDQUFDLEtBQUssR0FBRyxHQUFHO0FBQzdCLE1BQUksS0FBSyxFQUFFLEtBQUssRUFBRTtBQUNsQixNQUFJLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDbEIsTUFBSSxLQUFLLEVBQUUsS0FBSyxFQUFFO0FBQ2xCLE1BQUksS0FBSyxFQUFFLEtBQUssRUFBRTtBQUNsQixTQUFPO0FBQUE7QUFXRixTQUFTLFNBQVEsQ0FBQyxLQUFLLEdBQUcsR0FBRztBQUNsQyxNQUFJLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDbEIsTUFBSSxLQUFLLEVBQUUsS0FBSyxFQUFFO0FBQ2xCLE1BQUksS0FBSyxFQUFFLEtBQUssRUFBRTtBQUNsQixNQUFJLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDbEIsU0FBTztBQUFBO0FBV0YsU0FBUyxTQUFRLENBQUMsS0FBSyxHQUFHLEdBQUc7QUFDbEMsTUFBSSxLQUFLLEVBQUUsS0FBSyxFQUFFO0FBQ2xCLE1BQUksS0FBSyxFQUFFLEtBQUssRUFBRTtBQUNsQixNQUFJLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDbEIsTUFBSSxLQUFLLEVBQUUsS0FBSyxFQUFFO0FBQ2xCLFNBQU87QUFBQTtBQVdGLFNBQVMsT0FBTSxDQUFDLEtBQUssR0FBRyxHQUFHO0FBQ2hDLE1BQUksS0FBSyxFQUFFLEtBQUssRUFBRTtBQUNsQixNQUFJLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDbEIsTUFBSSxLQUFLLEVBQUUsS0FBSyxFQUFFO0FBQ2xCLE1BQUksS0FBSyxFQUFFLEtBQUssRUFBRTtBQUNsQixTQUFPO0FBQUE7QUFVRixTQUFTLEtBQUksQ0FBQyxLQUFLLEdBQUc7QUFDM0IsTUFBSSxLQUFLLEtBQUssS0FBSyxFQUFFLEVBQUU7QUFDdkIsTUFBSSxLQUFLLEtBQUssS0FBSyxFQUFFLEVBQUU7QUFDdkIsTUFBSSxLQUFLLEtBQUssS0FBSyxFQUFFLEVBQUU7QUFDdkIsTUFBSSxLQUFLLEtBQUssS0FBSyxFQUFFLEVBQUU7QUFDdkIsU0FBTztBQUFBO0FBVUYsU0FBUyxNQUFLLENBQUMsS0FBSyxHQUFHO0FBQzVCLE1BQUksS0FBSyxLQUFLLE1BQU0sRUFBRSxFQUFFO0FBQ3hCLE1BQUksS0FBSyxLQUFLLE1BQU0sRUFBRSxFQUFFO0FBQ3hCLE1BQUksS0FBSyxLQUFLLE1BQU0sRUFBRSxFQUFFO0FBQ3hCLE1BQUksS0FBSyxLQUFLLE1BQU0sRUFBRSxFQUFFO0FBQ3hCLFNBQU87QUFBQTtBQVdGLFNBQVMsSUFBRyxDQUFDLEtBQUssR0FBRyxHQUFHO0FBQzdCLE1BQUksS0FBSyxLQUFLLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRTtBQUM1QixNQUFJLEtBQUssS0FBSyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUU7QUFDNUIsTUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO0FBQzVCLE1BQUksS0FBSyxLQUFLLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRTtBQUM1QixTQUFPO0FBQUE7QUFXRixTQUFTLElBQUcsQ0FBQyxLQUFLLEdBQUcsR0FBRztBQUM3QixNQUFJLEtBQUssS0FBSyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUU7QUFDNUIsTUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO0FBQzVCLE1BQUksS0FBSyxLQUFLLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRTtBQUM1QixNQUFJLEtBQUssS0FBSyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUU7QUFDNUIsU0FBTztBQUFBO0FBVUYsU0FBUyxNQUFLLENBQUMsS0FBSyxHQUFHO0FBQzVCLE1BQUksS0FBSyxLQUFLLE1BQU0sRUFBRSxFQUFFO0FBQ3hCLE1BQUksS0FBSyxLQUFLLE1BQU0sRUFBRSxFQUFFO0FBQ3hCLE1BQUksS0FBSyxLQUFLLE1BQU0sRUFBRSxFQUFFO0FBQ3hCLE1BQUksS0FBSyxLQUFLLE1BQU0sRUFBRSxFQUFFO0FBQ3hCLFNBQU87QUFBQTtBQVdGLFNBQVMsTUFBSyxDQUFDLEtBQUssR0FBRyxHQUFHO0FBQy9CLE1BQUksS0FBSyxFQUFFLEtBQUs7QUFDaEIsTUFBSSxLQUFLLEVBQUUsS0FBSztBQUNoQixNQUFJLEtBQUssRUFBRSxLQUFLO0FBQ2hCLE1BQUksS0FBSyxFQUFFLEtBQUs7QUFDaEIsU0FBTztBQUFBO0FBWUYsU0FBUyxZQUFXLENBQUMsS0FBSyxHQUFHLEdBQUcsUUFBTztBQUM1QyxNQUFJLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSztBQUN2QixNQUFJLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSztBQUN2QixNQUFJLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSztBQUN2QixNQUFJLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSztBQUN2QixTQUFPO0FBQUE7QUFVRixTQUFTLFNBQVEsQ0FBQyxHQUFHLEdBQUc7QUFDN0IsTUFBSSxJQUFJLEVBQUUsS0FBSyxFQUFFO0FBQ2pCLE1BQUksSUFBSSxFQUFFLEtBQUssRUFBRTtBQUNqQixNQUFJLElBQUksRUFBRSxLQUFLLEVBQUU7QUFDakIsTUFBSSxJQUFJLEVBQUUsS0FBSyxFQUFFO0FBQ2pCLFNBQU8sS0FBSyxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFBQTtBQVV2QixTQUFTLGdCQUFlLENBQUMsR0FBRyxHQUFHO0FBQ3BDLE1BQUksSUFBSSxFQUFFLEtBQUssRUFBRTtBQUNqQixNQUFJLElBQUksRUFBRSxLQUFLLEVBQUU7QUFDakIsTUFBSSxJQUFJLEVBQUUsS0FBSyxFQUFFO0FBQ2pCLE1BQUksSUFBSSxFQUFFLEtBQUssRUFBRTtBQUNqQixTQUFPLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUk7QUFBQTtBQVM5QixTQUFTLE9BQU0sQ0FBQyxHQUFHO0FBQ3hCLE1BQUksSUFBSSxFQUFFO0FBQ1YsTUFBSSxJQUFJLEVBQUU7QUFDVixNQUFJLElBQUksRUFBRTtBQUNWLE1BQUksSUFBSSxFQUFFO0FBQ1YsU0FBTyxLQUFLLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUFBO0FBU3ZCLFNBQVMsY0FBYSxDQUFDLEdBQUc7QUFDL0IsTUFBSSxJQUFJLEVBQUU7QUFDVixNQUFJLElBQUksRUFBRTtBQUNWLE1BQUksSUFBSSxFQUFFO0FBQ1YsTUFBSSxJQUFJLEVBQUU7QUFDVixTQUFPLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUk7QUFBQTtBQVU5QixTQUFTLE9BQU0sQ0FBQyxLQUFLLEdBQUc7QUFDN0IsTUFBSSxNQUFNLEVBQUU7QUFDWixNQUFJLE1BQU0sRUFBRTtBQUNaLE1BQUksTUFBTSxFQUFFO0FBQ1osTUFBSSxNQUFNLEVBQUU7QUFDWixTQUFPO0FBQUE7QUFVRixTQUFTLFFBQU8sQ0FBQyxLQUFLLEdBQUc7QUFDOUIsTUFBSSxLQUFLLElBQU0sRUFBRTtBQUNqQixNQUFJLEtBQUssSUFBTSxFQUFFO0FBQ2pCLE1BQUksS0FBSyxJQUFNLEVBQUU7QUFDakIsTUFBSSxLQUFLLElBQU0sRUFBRTtBQUNqQixTQUFPO0FBQUE7QUFVRixTQUFTLFVBQVMsQ0FBQyxLQUFLLEdBQUc7QUFDaEMsTUFBSSxJQUFJLEVBQUU7QUFDVixNQUFJLElBQUksRUFBRTtBQUNWLE1BQUksSUFBSSxFQUFFO0FBQ1YsTUFBSSxJQUFJLEVBQUU7QUFDVixNQUFJLE9BQU0sSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSTtBQUV0QyxNQUFJLE9BQU0sR0FBRztBQUNYLFdBQU0sSUFBSSxLQUFLLEtBQUssSUFBRztBQUFBLEVBQ3pCO0FBRUEsTUFBSSxLQUFLLElBQUk7QUFDYixNQUFJLEtBQUssSUFBSTtBQUNiLE1BQUksS0FBSyxJQUFJO0FBQ2IsTUFBSSxLQUFLLElBQUk7QUFDYixTQUFPO0FBQUE7QUFVRixTQUFTLElBQUcsQ0FBQyxHQUFHLEdBQUc7QUFDeEIsU0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtBQUFBO0FBWXJELFNBQVMsTUFBSyxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUc7QUFDbEMsTUFBSSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFDM0IsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQzNCLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUMzQixJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFDM0IsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQzNCLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtBQUMvQixNQUFJLElBQUksRUFBRTtBQUNWLE1BQUksSUFBSSxFQUFFO0FBQ1YsTUFBSSxJQUFJLEVBQUU7QUFDVixNQUFJLElBQUksRUFBRTtBQUNWLE1BQUksS0FBSyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUk7QUFDN0IsTUFBSSxPQUFPLElBQUksS0FBSyxJQUFJLElBQUksSUFBSTtBQUNoQyxNQUFJLEtBQUssSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJO0FBQzdCLE1BQUksT0FBTyxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUk7QUFDaEMsU0FBTztBQUFBO0FBWUYsU0FBUyxLQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRztBQUNqQyxNQUFJLEtBQUssRUFBRTtBQUNYLE1BQUksS0FBSyxFQUFFO0FBQ1gsTUFBSSxLQUFLLEVBQUU7QUFDWCxNQUFJLEtBQUssRUFBRTtBQUNYLE1BQUksS0FBSyxLQUFLLEtBQUssRUFBRSxLQUFLO0FBQzFCLE1BQUksS0FBSyxLQUFLLEtBQUssRUFBRSxLQUFLO0FBQzFCLE1BQUksS0FBSyxLQUFLLEtBQUssRUFBRSxLQUFLO0FBQzFCLE1BQUksS0FBSyxLQUFLLEtBQUssRUFBRSxLQUFLO0FBQzFCLFNBQU87QUFBQTtBQVVGLFNBQVMsT0FBTSxDQUFDLEtBQUssUUFBTztBQUNqQyxXQUFRLFVBQVM7QUFJakIsTUFBSSxJQUFJLElBQUksSUFBSTtBQUNoQixNQUFJLElBQUk7QUFFUixLQUFHO0FBQ0QsU0FBYyxPQUFPLElBQUksSUFBSTtBQUM3QixTQUFjLE9BQU8sSUFBSSxJQUFJO0FBQzdCLFNBQUssS0FBSyxLQUFLLEtBQUs7QUFBQSxFQUN0QixTQUFTLE1BQU07QUFFZixLQUFHO0FBQ0QsU0FBYyxPQUFPLElBQUksSUFBSTtBQUM3QixTQUFjLE9BQU8sSUFBSSxJQUFJO0FBQzdCLFNBQUssS0FBSyxLQUFLLEtBQUs7QUFBQSxFQUN0QixTQUFTLE1BQU07QUFFZixNQUFJLElBQUksS0FBSyxNQUFNLElBQUksTUFBTSxFQUFFO0FBQy9CLE1BQUksS0FBSyxTQUFRO0FBQ2pCLE1BQUksS0FBSyxTQUFRO0FBQ2pCLE1BQUksS0FBSyxTQUFRLEtBQUs7QUFDdEIsTUFBSSxLQUFLLFNBQVEsS0FBSztBQUN0QixTQUFPO0FBQUE7QUFXRixTQUFTLGNBQWEsQ0FBQyxLQUFLLEdBQUcsR0FBRztBQUN2QyxNQUFJLElBQUksRUFBRSxJQUNOLElBQUksRUFBRSxJQUNOLElBQUksRUFBRSxJQUNOLElBQUksRUFBRTtBQUNWLE1BQUksS0FBSyxFQUFFLEtBQUssSUFBSSxFQUFFLEtBQUssSUFBSSxFQUFFLEtBQUssSUFBSSxFQUFFLE1BQU07QUFDbEQsTUFBSSxLQUFLLEVBQUUsS0FBSyxJQUFJLEVBQUUsS0FBSyxJQUFJLEVBQUUsS0FBSyxJQUFJLEVBQUUsTUFBTTtBQUNsRCxNQUFJLEtBQUssRUFBRSxLQUFLLElBQUksRUFBRSxLQUFLLElBQUksRUFBRSxNQUFNLElBQUksRUFBRSxNQUFNO0FBQ25ELE1BQUksS0FBSyxFQUFFLEtBQUssSUFBSSxFQUFFLEtBQUssSUFBSSxFQUFFLE1BQU0sSUFBSSxFQUFFLE1BQU07QUFDbkQsU0FBTztBQUFBO0FBV0YsU0FBUyxjQUFhLENBQUMsS0FBSyxHQUFHLEdBQUc7QUFDdkMsTUFBSSxJQUFJLEVBQUUsSUFDTixJQUFJLEVBQUUsSUFDTixJQUFJLEVBQUU7QUFDVixNQUFJLEtBQUssRUFBRSxJQUNQLEtBQUssRUFBRSxJQUNQLEtBQUssRUFBRSxJQUNQLEtBQUssRUFBRTtBQUVYLE1BQUksS0FBSyxLQUFLLElBQUksS0FBSyxJQUFJLEtBQUs7QUFDaEMsTUFBSSxLQUFLLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSztBQUNoQyxNQUFJLEtBQUssS0FBSyxJQUFJLEtBQUssSUFBSSxLQUFLO0FBQ2hDLE1BQUksTUFBTSxLQUFLLElBQUksS0FBSyxJQUFJLEtBQUs7QUFFakMsTUFBSSxLQUFLLEtBQUssS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU07QUFDL0MsTUFBSSxLQUFLLEtBQUssS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU07QUFDL0MsTUFBSSxLQUFLLEtBQUssS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU07QUFDL0MsTUFBSSxLQUFLLEVBQUU7QUFDWCxTQUFPO0FBQUE7QUFTRixTQUFTLEtBQUksQ0FBQyxLQUFLO0FBQ3hCLE1BQUksS0FBSztBQUNULE1BQUksS0FBSztBQUNULE1BQUksS0FBSztBQUNULE1BQUksS0FBSztBQUNULFNBQU87QUFBQTtBQVNGLFNBQVMsSUFBRyxDQUFDLEdBQUc7QUFDckIsU0FBTyxVQUFVLEVBQUUsS0FBSyxPQUFPLEVBQUUsS0FBSyxPQUFPLEVBQUUsS0FBSyxPQUFPLEVBQUUsS0FBSztBQUFBO0FBVTdELFNBQVMsWUFBVyxDQUFDLEdBQUcsR0FBRztBQUNoQyxTQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFO0FBQUE7QUFVaEUsU0FBUyxPQUFNLENBQUMsR0FBRyxHQUFHO0FBQzNCLE1BQUksS0FBSyxFQUFFLElBQ1AsS0FBSyxFQUFFLElBQ1AsS0FBSyxFQUFFLElBQ1AsS0FBSyxFQUFFO0FBQ1gsTUFBSSxLQUFLLEVBQUUsSUFDUCxLQUFLLEVBQUUsSUFDUCxLQUFLLEVBQUUsSUFDUCxLQUFLLEVBQUU7QUFDWCxTQUFPLEtBQUssSUFBSSxLQUFLLEVBQUUsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxLQUFLLEVBQUUsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxLQUFLLEVBQUUsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxLQUFLLEVBQUUsS0FBYyxVQUFVLEtBQUssSUFBSSxHQUFLLEtBQUssSUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQztBQUFBO0FBT2pWLElBQUksT0FBTTtBQU1WLElBQUksT0FBTTtBQU1WLElBQUksT0FBTTtBQU1WLElBQUksUUFBTztBQU1YLElBQUksV0FBVTtBQU1kLElBQUksT0FBTTtBQU1WLElBQUksVUFBUztBQWNiLElBQUksbUJBQW1CLEdBQUc7QUFDL0IsTUFBSSxNQUFNLFFBQU87QUFDakIsaUJBQWdCLENBQUMsR0FBRyxRQUFRLFFBQVEsT0FBTyxJQUFJLEtBQUs7QUFDbEQsUUFBSSxHQUFHO0FBRVAsU0FBSyxRQUFRO0FBQ1gsZUFBUztBQUFBLElBQ1g7QUFFQSxTQUFLLFFBQVE7QUFDWCxlQUFTO0FBQUEsSUFDWDtBQUVBLFFBQUksT0FBTztBQUNULFVBQUksS0FBSyxJQUFJLFFBQVEsU0FBUyxRQUFRLEVBQUUsTUFBTTtBQUFBLElBQ2hELE9BQU87QUFDTCxVQUFJLEVBQUU7QUFBQTtBQUdSLFNBQUssSUFBSSxPQUFRLElBQUksR0FBRyxLQUFLLFFBQVE7QUFDbkMsVUFBSSxLQUFLLEVBQUU7QUFDWCxVQUFJLEtBQUssRUFBRSxJQUFJO0FBQ2YsVUFBSSxLQUFLLEVBQUUsSUFBSTtBQUNmLFVBQUksS0FBSyxFQUFFLElBQUk7QUFDZixTQUFHLEtBQUssS0FBSyxHQUFHO0FBQ2hCLFFBQUUsS0FBSyxJQUFJO0FBQ1gsUUFBRSxJQUFJLEtBQUssSUFBSTtBQUNmLFFBQUUsSUFBSSxLQUFLLElBQUk7QUFDZixRQUFFLElBQUksS0FBSyxJQUFJO0FBQUEsSUFDakI7QUFFQSxXQUFPO0FBQUE7QUFBQSxFQUVUOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMxb0JLLFNBQVMsT0FBTSxHQUFHO0FBQ3ZCLE1BQUksTUFBTSxJQUFhLFdBQVcsQ0FBQztBQUVuQyxNQUFhLGNBQWMsY0FBYztBQUN2QyxRQUFJLEtBQUs7QUFDVCxRQUFJLEtBQUs7QUFBQSxFQUNYO0FBRUEsU0FBTztBQUFBO0FBU0YsU0FBUyxNQUFLLENBQUMsR0FBRztBQUN2QixNQUFJLE1BQU0sSUFBYSxXQUFXLENBQUM7QUFDbkMsTUFBSSxLQUFLLEVBQUU7QUFDWCxNQUFJLEtBQUssRUFBRTtBQUNYLFNBQU87QUFBQTtBQVVGLFNBQVMsV0FBVSxDQUFDLEdBQUcsR0FBRztBQUMvQixNQUFJLE1BQU0sSUFBYSxXQUFXLENBQUM7QUFDbkMsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsU0FBTztBQUFBO0FBVUYsU0FBUyxLQUFJLENBQUMsS0FBSyxHQUFHO0FBQzNCLE1BQUksS0FBSyxFQUFFO0FBQ1gsTUFBSSxLQUFLLEVBQUU7QUFDWCxTQUFPO0FBQUE7QUFXRixTQUFTLElBQUcsQ0FBQyxLQUFLLEdBQUcsR0FBRztBQUM3QixNQUFJLEtBQUs7QUFDVCxNQUFJLEtBQUs7QUFDVCxTQUFPO0FBQUE7QUFXRixTQUFTLElBQUcsQ0FBQyxLQUFLLEdBQUcsR0FBRztBQUM3QixNQUFJLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDbEIsTUFBSSxLQUFLLEVBQUUsS0FBSyxFQUFFO0FBQ2xCLFNBQU87QUFBQTtBQVdGLFNBQVMsU0FBUSxDQUFDLEtBQUssR0FBRyxHQUFHO0FBQ2xDLE1BQUksS0FBSyxFQUFFLEtBQUssRUFBRTtBQUNsQixNQUFJLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDbEIsU0FBTztBQUFBO0FBV0YsU0FBUyxTQUFRLENBQUMsS0FBSyxHQUFHLEdBQUc7QUFDbEMsTUFBSSxLQUFLLEVBQUUsS0FBSyxFQUFFO0FBQ2xCLE1BQUksS0FBSyxFQUFFLEtBQUssRUFBRTtBQUNsQixTQUFPO0FBQUE7QUFXRixTQUFTLE9BQU0sQ0FBQyxLQUFLLEdBQUcsR0FBRztBQUNoQyxNQUFJLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDbEIsTUFBSSxLQUFLLEVBQUUsS0FBSyxFQUFFO0FBQ2xCLFNBQU87QUFBQTtBQVVGLFNBQVMsS0FBSSxDQUFDLEtBQUssR0FBRztBQUMzQixNQUFJLEtBQUssS0FBSyxLQUFLLEVBQUUsRUFBRTtBQUN2QixNQUFJLEtBQUssS0FBSyxLQUFLLEVBQUUsRUFBRTtBQUN2QixTQUFPO0FBQUE7QUFVRixTQUFTLE1BQUssQ0FBQyxLQUFLLEdBQUc7QUFDNUIsTUFBSSxLQUFLLEtBQUssTUFBTSxFQUFFLEVBQUU7QUFDeEIsTUFBSSxLQUFLLEtBQUssTUFBTSxFQUFFLEVBQUU7QUFDeEIsU0FBTztBQUFBO0FBV0YsU0FBUyxJQUFHLENBQUMsS0FBSyxHQUFHLEdBQUc7QUFDN0IsTUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO0FBQzVCLE1BQUksS0FBSyxLQUFLLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRTtBQUM1QixTQUFPO0FBQUE7QUFXRixTQUFTLElBQUcsQ0FBQyxLQUFLLEdBQUcsR0FBRztBQUM3QixNQUFJLEtBQUssS0FBSyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUU7QUFDNUIsTUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO0FBQzVCLFNBQU87QUFBQTtBQVVGLFNBQVMsTUFBSyxDQUFDLEtBQUssR0FBRztBQUM1QixNQUFJLEtBQUssS0FBSyxNQUFNLEVBQUUsRUFBRTtBQUN4QixNQUFJLEtBQUssS0FBSyxNQUFNLEVBQUUsRUFBRTtBQUN4QixTQUFPO0FBQUE7QUFXRixTQUFTLE1BQUssQ0FBQyxLQUFLLEdBQUcsR0FBRztBQUMvQixNQUFJLEtBQUssRUFBRSxLQUFLO0FBQ2hCLE1BQUksS0FBSyxFQUFFLEtBQUs7QUFDaEIsU0FBTztBQUFBO0FBWUYsU0FBUyxZQUFXLENBQUMsS0FBSyxHQUFHLEdBQUcsUUFBTztBQUM1QyxNQUFJLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSztBQUN2QixNQUFJLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSztBQUN2QixTQUFPO0FBQUE7QUFVRixTQUFTLFNBQVEsQ0FBQyxHQUFHLEdBQUc7QUFDN0IsTUFBSSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQ2IsSUFBSSxFQUFFLEtBQUssRUFBRTtBQUNqQixTQUFPLEtBQUssTUFBTSxHQUFHLENBQUM7QUFBQTtBQVVqQixTQUFTLGdCQUFlLENBQUMsR0FBRyxHQUFHO0FBQ3BDLE1BQUksSUFBSSxFQUFFLEtBQUssRUFBRSxJQUNiLElBQUksRUFBRSxLQUFLLEVBQUU7QUFDakIsU0FBTyxJQUFJLElBQUksSUFBSTtBQUFBO0FBU2QsU0FBUyxPQUFNLENBQUMsR0FBRztBQUN4QixNQUFJLElBQUksRUFBRSxJQUNOLElBQUksRUFBRTtBQUNWLFNBQU8sS0FBSyxNQUFNLEdBQUcsQ0FBQztBQUFBO0FBU2pCLFNBQVMsY0FBYSxDQUFDLEdBQUc7QUFDL0IsTUFBSSxJQUFJLEVBQUUsSUFDTixJQUFJLEVBQUU7QUFDVixTQUFPLElBQUksSUFBSSxJQUFJO0FBQUE7QUFVZCxTQUFTLE9BQU0sQ0FBQyxLQUFLLEdBQUc7QUFDN0IsTUFBSSxNQUFNLEVBQUU7QUFDWixNQUFJLE1BQU0sRUFBRTtBQUNaLFNBQU87QUFBQTtBQVVGLFNBQVMsUUFBTyxDQUFDLEtBQUssR0FBRztBQUM5QixNQUFJLEtBQUssSUFBTSxFQUFFO0FBQ2pCLE1BQUksS0FBSyxJQUFNLEVBQUU7QUFDakIsU0FBTztBQUFBO0FBVUYsU0FBUyxVQUFTLENBQUMsS0FBSyxHQUFHO0FBQ2hDLE1BQUksSUFBSSxFQUFFLElBQ04sSUFBSSxFQUFFO0FBQ1YsTUFBSSxPQUFNLElBQUksSUFBSSxJQUFJO0FBRXRCLE1BQUksT0FBTSxHQUFHO0FBRVgsV0FBTSxJQUFJLEtBQUssS0FBSyxJQUFHO0FBQUEsRUFDekI7QUFFQSxNQUFJLEtBQUssRUFBRSxLQUFLO0FBQ2hCLE1BQUksS0FBSyxFQUFFLEtBQUs7QUFDaEIsU0FBTztBQUFBO0FBVUYsU0FBUyxJQUFHLENBQUMsR0FBRyxHQUFHO0FBQ3hCLFNBQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtBQUFBO0FBWXpCLFNBQVMsTUFBSyxDQUFDLEtBQUssR0FBRyxHQUFHO0FBQy9CLE1BQUksSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFO0FBQy9CLE1BQUksS0FBSyxJQUFJLEtBQUs7QUFDbEIsTUFBSSxLQUFLO0FBQ1QsU0FBTztBQUFBO0FBWUYsU0FBUyxLQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRztBQUNqQyxNQUFJLEtBQUssRUFBRSxJQUNQLEtBQUssRUFBRTtBQUNYLE1BQUksS0FBSyxLQUFLLEtBQUssRUFBRSxLQUFLO0FBQzFCLE1BQUksS0FBSyxLQUFLLEtBQUssRUFBRSxLQUFLO0FBQzFCLFNBQU87QUFBQTtBQVVGLFNBQVMsT0FBTSxDQUFDLEtBQUssUUFBTztBQUNqQyxXQUFRLFVBQVM7QUFDakIsTUFBSSxJQUFhLE9BQU8sSUFBSSxJQUFNLEtBQUs7QUFDdkMsTUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDLElBQUk7QUFDdkIsTUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDLElBQUk7QUFDdkIsU0FBTztBQUFBO0FBV0YsU0FBUyxhQUFhLENBQUMsS0FBSyxHQUFHLEdBQUc7QUFDdkMsTUFBSSxJQUFJLEVBQUUsSUFDTixJQUFJLEVBQUU7QUFDVixNQUFJLEtBQUssRUFBRSxLQUFLLElBQUksRUFBRSxLQUFLO0FBQzNCLE1BQUksS0FBSyxFQUFFLEtBQUssSUFBSSxFQUFFLEtBQUs7QUFDM0IsU0FBTztBQUFBO0FBV0YsU0FBUyxjQUFjLENBQUMsS0FBSyxHQUFHLEdBQUc7QUFDeEMsTUFBSSxJQUFJLEVBQUUsSUFDTixJQUFJLEVBQUU7QUFDVixNQUFJLEtBQUssRUFBRSxLQUFLLElBQUksRUFBRSxLQUFLLElBQUksRUFBRTtBQUNqQyxNQUFJLEtBQUssRUFBRSxLQUFLLElBQUksRUFBRSxLQUFLLElBQUksRUFBRTtBQUNqQyxTQUFPO0FBQUE7QUFZRixTQUFTLGNBQWEsQ0FBQyxLQUFLLEdBQUcsR0FBRztBQUN2QyxNQUFJLElBQUksRUFBRSxJQUNOLElBQUksRUFBRTtBQUNWLE1BQUksS0FBSyxFQUFFLEtBQUssSUFBSSxFQUFFLEtBQUssSUFBSSxFQUFFO0FBQ2pDLE1BQUksS0FBSyxFQUFFLEtBQUssSUFBSSxFQUFFLEtBQUssSUFBSSxFQUFFO0FBQ2pDLFNBQU87QUFBQTtBQWFGLFNBQVMsY0FBYSxDQUFDLEtBQUssR0FBRyxHQUFHO0FBQ3ZDLE1BQUksSUFBSSxFQUFFO0FBQ1YsTUFBSSxJQUFJLEVBQUU7QUFDVixNQUFJLEtBQUssRUFBRSxLQUFLLElBQUksRUFBRSxLQUFLLElBQUksRUFBRTtBQUNqQyxNQUFJLEtBQUssRUFBRSxLQUFLLElBQUksRUFBRSxLQUFLLElBQUksRUFBRTtBQUNqQyxTQUFPO0FBQUE7QUFXRixTQUFTLE9BQU0sQ0FBQyxLQUFLLEdBQUcsR0FBRyxLQUFLO0FBRXJDLE1BQUksS0FBSyxFQUFFLEtBQUssRUFBRSxJQUNkLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFDZCxPQUFPLEtBQUssSUFBSSxHQUFHLEdBQ25CLE9BQU8sS0FBSyxJQUFJLEdBQUc7QUFFdkIsTUFBSSxLQUFLLEtBQUssT0FBTyxLQUFLLE9BQU8sRUFBRTtBQUNuQyxNQUFJLEtBQUssS0FBSyxPQUFPLEtBQUssT0FBTyxFQUFFO0FBQ25DLFNBQU87QUFBQTtBQVNGLFNBQVMsTUFBSyxDQUFDLEdBQUcsR0FBRztBQUMxQixNQUFJLEtBQUssRUFBRSxJQUNQLEtBQUssRUFBRSxJQUNQLEtBQUssRUFBRSxJQUNQLEtBQUssRUFBRSxJQUVYLE1BQU0sS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEVBQUUsSUFBSSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssRUFBRSxHQUVoRSxTQUFTLFFBQVEsS0FBSyxLQUFLLEtBQUssTUFBTTtBQUV0QyxTQUFPLEtBQUssS0FBSyxLQUFLLElBQUksS0FBSyxJQUFJLFNBQVEsQ0FBRSxHQUFHLENBQUMsQ0FBQztBQUFBO0FBUzdDLFNBQVMsS0FBSSxDQUFDLEtBQUs7QUFDeEIsTUFBSSxLQUFLO0FBQ1QsTUFBSSxLQUFLO0FBQ1QsU0FBTztBQUFBO0FBU0YsU0FBUyxJQUFHLENBQUMsR0FBRztBQUNyQixTQUFPLFVBQVUsRUFBRSxLQUFLLE9BQU8sRUFBRSxLQUFLO0FBQUE7QUFVakMsU0FBUyxZQUFXLENBQUMsR0FBRyxHQUFHO0FBQ2hDLFNBQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRTtBQUFBO0FBVTlCLFNBQVMsT0FBTSxDQUFDLEdBQUcsR0FBRztBQUMzQixNQUFJLEtBQUssRUFBRSxJQUNQLEtBQUssRUFBRTtBQUNYLE1BQUksS0FBSyxFQUFFLElBQ1AsS0FBSyxFQUFFO0FBQ1gsU0FBTyxLQUFLLElBQUksS0FBSyxFQUFFLEtBQWMsVUFBVSxLQUFLLElBQUksR0FBSyxLQUFLLElBQUksRUFBRSxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUMsS0FBSyxLQUFLLElBQUksS0FBSyxFQUFFLEtBQWMsVUFBVSxLQUFLLElBQUksR0FBSyxLQUFLLElBQUksRUFBRSxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUM7QUFBQTtBQU92SyxJQUFJLE9BQU07QUFNVixJQUFJLE9BQU07QUFNVixJQUFJLE9BQU07QUFNVixJQUFJLE9BQU07QUFNVixJQUFJLFFBQU87QUFNWCxJQUFJLFdBQVU7QUFNZCxJQUFJLFVBQVM7QUFjYixJQUFJLG1CQUFtQixHQUFHO0FBQy9CLE1BQUksTUFBTSxRQUFPO0FBQ2pCLGlCQUFnQixDQUFDLEdBQUcsUUFBUSxRQUFRLE9BQU8sSUFBSSxLQUFLO0FBQ2xELFFBQUksR0FBRztBQUVQLFNBQUssUUFBUTtBQUNYLGVBQVM7QUFBQSxJQUNYO0FBRUEsU0FBSyxRQUFRO0FBQ1gsZUFBUztBQUFBLElBQ1g7QUFFQSxRQUFJLE9BQU87QUFDVCxVQUFJLEtBQUssSUFBSSxRQUFRLFNBQVMsUUFBUSxFQUFFLE1BQU07QUFBQSxJQUNoRCxPQUFPO0FBQ0wsVUFBSSxFQUFFO0FBQUE7QUFHUixTQUFLLElBQUksT0FBUSxJQUFJLEdBQUcsS0FBSyxRQUFRO0FBQ25DLFVBQUksS0FBSyxFQUFFO0FBQ1gsVUFBSSxLQUFLLEVBQUUsSUFBSTtBQUNmLFNBQUcsS0FBSyxLQUFLLEdBQUc7QUFDaEIsUUFBRSxLQUFLLElBQUk7QUFDWCxRQUFFLElBQUksS0FBSyxJQUFJO0FBQUEsSUFDakI7QUFFQSxXQUFPO0FBQUE7QUFBQSxFQUVUOzs7QUM3bUJLLElBQU0sVUFBVSxDQUFDLFFBQWlCLE1BQU0sS0FBSyxLQUFNO0FBQ25ELElBQU0sVUFBVSxDQUFDLFFBQWlCLE1BQU0sS0FBSyxLQUFNO0FBRW5ELElBQU0sV0FBVyxDQUFDLFlBQWdEO0FBQ3ZFLFFBQU0sUUFBUSxLQUFLLE1BQU0sUUFBUSxJQUFJLFFBQVEsRUFBRTtBQUMvQyxRQUFNLFlBQWdCLGFBQUssT0FBTyxDQUFDLFFBQVEsSUFBSSxRQUFRLEVBQUUsQ0FBQztBQUMxRCxRQUFNLE1BQU0sS0FBSyxNQUFNLFFBQVEsSUFBSSxTQUFTO0FBQzVDLFNBQU8sQ0FBQyxPQUFPLEdBQUc7QUFBQTs7O0FDQ3BCLElBQU0sWUFBWTtBQUFBLEVBQ2hCLEdBQUc7QUFBQSxFQUNILEdBQUc7QUFBQSxFQUNILEdBQUc7QUFDTDtBQWVPO0FBQUEsTUFBTSxrQkFBa0I7QUFBQSxFQUNyQixlQUF3QjtBQUFBLEVBQ3hCLFNBQWlCO0FBQUEsRUFDakIsT0FBZTtBQUFBLEVBRWY7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUVBLGtCQUEyQjtBQUFBLEVBQzNCLGtCQUEwQjtBQUFBLEVBQzFCLG9CQUE2QjtBQUFBLEVBRTdCO0FBQUEsRUFFQSxZQUFnQixhQUFLLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFBQSxFQUN2QyxVQUFjLGFBQUssV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUFBLEVBQ3JDLGVBQW1CLGFBQUssV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUFBLEVBQzFDLFlBQWdCLGFBQUssV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUFBLEVBQ3ZDLFVBQWMsYUFBSyxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQUEsRUFFckMsb0JBQXdCLGFBQUssV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUFBLEVBQy9DLGlCQUFxQixhQUFLLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFBQSxFQUM1QyxlQUFtQixhQUFLLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFBQSxFQUVsRCxXQUFXLENBQUMsS0FBNEI7QUFDdEMsU0FBSyxvQkFBb0IsSUFBSTtBQUM3QixTQUFLLHVCQUF1QixJQUFJO0FBQ2hDLFNBQUssb0JBQW9CLElBQUk7QUFDN0IsU0FBSyxlQUFlLElBQUk7QUFDeEIsSUFBSSxhQUFLLEtBQUssS0FBSyxXQUFXLElBQUksUUFBUTtBQUUxQyxTQUFLLGVBQWU7QUFBQSxNQUNsQixJQUFJLGNBQWMsVUFBVSxJQUFJLFlBQVksTUFBTSxVQUFVO0FBQUEsTUFDNUQsSUFBSSxjQUFjLFVBQVUsSUFBSSxZQUFZLE1BQU0sVUFBVTtBQUFBLE1BQzVELElBQUksY0FBYyxVQUFVLElBQUksWUFBWSxNQUFNLFVBQVU7QUFBQSxJQUM5RDtBQUVBLFNBQUssU0FBUyxJQUFJO0FBQ2xCLFNBQUssT0FBTyxJQUFJO0FBQUE7QUFBQSxFQUdsQixXQUFXLEdBQUc7QUFDWixXQUFPLEtBQUs7QUFBQTtBQUFBLEVBR2QsUUFBUSxHQUFHO0FBQ1QsU0FBSyxlQUFlO0FBRXBCLDBCQUFzQixlQUFlLEdBQUc7QUFDeEMsMEJBQXNCLGVBQWUsR0FBRztBQUN4QywwQkFBc0IsZUFBZSxHQUFHO0FBQ3hDLDBCQUFzQixlQUFlLEdBQUc7QUFDeEMsMEJBQXNCLGVBQWUsR0FBRztBQUN4QywwQkFBc0IsZUFBZSxHQUFHO0FBRXhDLDBCQUFzQixlQUFlLE9BQU87QUFDNUMsMEJBQXNCLGVBQWUsR0FBRztBQUN4QywwQkFBc0IsZUFBZSxPQUFPO0FBRTVDLDBCQUFzQixlQUFlLFNBQVM7QUFDOUMsMEJBQXNCLGVBQWUsV0FBVztBQUNoRCwwQkFBc0IsZUFBZSxXQUFXO0FBQ2hELDBCQUFzQixlQUFlLFlBQVk7QUFBQTtBQUFBLEVBR25ELFVBQVUsR0FBRztBQUNYLFNBQUssZUFBZTtBQUVwQiwwQkFBc0IsY0FBYyxHQUFHO0FBQ3ZDLDBCQUFzQixjQUFjLEdBQUc7QUFDdkMsMEJBQXNCLGNBQWMsR0FBRztBQUN2QywwQkFBc0IsY0FBYyxHQUFHO0FBQ3ZDLDBCQUFzQixjQUFjLEdBQUc7QUFDdkMsMEJBQXNCLGNBQWMsR0FBRztBQUV2QywwQkFBc0IsY0FBYyxPQUFPO0FBQzNDLDBCQUFzQixjQUFjLEdBQUc7QUFDdkMsMEJBQXNCLGNBQWMsT0FBTztBQUUzQywwQkFBc0IsY0FBYyxTQUFTO0FBQzdDLDBCQUFzQixjQUFjLFdBQVc7QUFDL0MsMEJBQXNCLGNBQWMsV0FBVztBQUMvQywwQkFBc0IsY0FBYyxZQUFZO0FBQUE7QUFBQSxFQUdsRCxnQkFBZ0IsR0FBRztBQUNqQixXQUNFLHNCQUFzQixVQUFVLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxHQUFHLEtBQzVELHNCQUFzQixVQUFVLFNBQVMsS0FBSyxPQUFPLEtBQ3JELHNCQUFzQixVQUNwQixXQUNBLGFBQ0EsYUFDQSxZQUNGO0FBQUE7QUFBQSxFQUlKLE1BQU0sQ0FBQyxhQUFxQixjQUF1QixPQUFPO0FBQ3hELFFBQUksY0FBYztBQUNsQixRQUFJLGVBQWU7QUFDbkIsUUFBSSxhQUFhO0FBQ2pCLFFBQUksY0FBYztBQUNsQixRQUFJLFlBQVk7QUFDaEIsUUFBSSxXQUFXO0FBQ2YsUUFBSSxXQUFXO0FBQ2YsUUFBSSxhQUFhO0FBQ2pCLFFBQUksYUFBYTtBQU1qQjtBQUNFLFlBQU0sU0FBUyxtQkFBbUIsT0FBTyxJQUFJLEtBQUs7QUFDbEQsWUFBTSxTQUFTLG1CQUFtQixPQUFPLElBQUksS0FBSztBQUVsRCxvQkFBYyxRQUFRLE1BQU0sSUFBSTtBQUNoQyxvQkFBYyxRQUFRLE1BQU0sSUFBSTtBQUFBLElBQ2xDO0FBVUEsVUFBTSxZQUFZLG1CQUFtQixhQUFhLEVBQUUsU0FBUztBQUU3RCxRQUFJLFdBQVc7QUFDYixXQUFLLEtBQUssaUJBQWlCO0FBQ3pCLGNBQU0sV0FBVyxLQUFLLElBQUk7QUFDMUIsY0FBTSxXQUFXLFdBQVcsS0FBSyxtQkFBbUI7QUFDcEQsWUFBSSxVQUFVLE1BQU07QUFDbEIsZUFBSyxvQkFBb0I7QUFBQSxRQUMzQixPQUFPO0FBQ0wsZUFBSyxrQkFBa0I7QUFBQTtBQUFBLE1BRTNCO0FBRUEsWUFBTSxhQUFhLG1CQUFtQixhQUFhLEVBQUU7QUFFckQsWUFBTSxTQUFTLFdBQVcsU0FBUyxLQUFLO0FBQ3hDLFlBQU0sU0FBUyxXQUFXLFNBQVMsS0FBSztBQUV4QyxvQkFBYyxRQUFRLE1BQU0sSUFBSTtBQUNoQyxvQkFBYyxRQUFRLE1BQU0sSUFBSTtBQUFBLElBQ2xDLE9BQU87QUFDTCxXQUFLLG9CQUFvQjtBQUFBO0FBRzNCLFNBQUssa0JBQWtCO0FBRXZCLFFBQUksS0FBSyxtQkFBbUI7QUFDMUIsb0JBQWM7QUFBQSxJQUNoQjtBQVdBLFFBQUksc0JBQXNCLFVBQVUsS0FBSyxHQUFHLEdBQUc7QUFDN0Msb0JBQWM7QUFBQSxJQUNoQjtBQUdBLFFBQUksc0JBQXNCLFVBQVUsR0FBRyxHQUFHO0FBQ3hDLHFCQUFlO0FBQUEsSUFDakI7QUFHQSxRQUFJLHNCQUFzQixVQUFVLEtBQUssR0FBRyxHQUFHO0FBQzdDLG1CQUFhO0FBQUEsSUFDZjtBQUdBLFFBQUksc0JBQXNCLFVBQVUsR0FBRyxHQUFHO0FBQ3hDLG9CQUFjO0FBQUEsSUFDaEI7QUFHQSxRQUFJLHNCQUFzQixVQUFVLE9BQU8sR0FBRztBQUM1QyxrQkFBWTtBQUFBLElBQ2Q7QUFFQSxTQUFLLGFBQWE7QUFFaEIsVUFBSSxzQkFBc0IsVUFBVSxHQUFHLEdBQUc7QUFDeEMsbUJBQVc7QUFBQSxNQUNiO0FBR0EsVUFBSSxzQkFBc0IsVUFBVSxPQUFPLEdBQUc7QUFDNUMsbUJBQVc7QUFBQSxNQUNiO0FBQUEsSUFDRjtBQUVBLFVBQU0scUJBQ0osS0FBSyxnQkFBZ0IsWUFBWSxJQUFJLEtBQUs7QUFLNUMsVUFBTSxzQkFBc0IsS0FBSyx1QkFBdUI7QUFFeEQsUUFBSSxzQkFBc0IsVUFBVSxTQUFTLEdBQUc7QUFDOUMsb0JBQWM7QUFBQSxJQUNoQixXQUFXLHNCQUFzQixVQUFVLFdBQVcsR0FBRztBQUN2RCxvQkFBYztBQUFBLElBQ2hCO0FBRUEsUUFBSSxzQkFBc0IsVUFBVSxXQUFXLEdBQUc7QUFDaEQsb0JBQWM7QUFBQSxJQUNoQixXQUFXLHNCQUFzQixVQUFVLFlBQVksR0FBRztBQUN4RCxvQkFBYztBQUFBLElBQ2hCO0FBVUEsU0FBSyxVQUFVO0FBQ2YsU0FBSyxRQUFRO0FBRWIsVUFBTSxNQUFNLEtBQUssS0FBSztBQUN0QixVQUFNLGdCQUFnQixNQUFNO0FBRTVCLFNBQUssT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJLEtBQUssT0FBTyxhQUFhLElBQUksYUFBYTtBQUV4RSxVQUFNLFdBQVcsS0FBSyxJQUFJLEtBQUssTUFBTTtBQUNyQyxVQUFNLFdBQVcsS0FBSyxJQUFJLEtBQUssTUFBTTtBQUVyQyxXQUFPLE9BQU8sT0FBTyxTQUFTLEtBQUs7QUFFbkMsVUFBTSxXQUFXLEtBQUssSUFBSSxLQUFLLE9BQU8sR0FBRztBQUN6QyxTQUFLLFFBQVEsU0FBUyxXQUFXO0FBQ2pDLFNBQUssUUFBUSxTQUFTLFdBQVc7QUFDakMsU0FBSyxRQUFRLFNBQVMsS0FBSyxJQUFJLEtBQUssT0FBTyxHQUFHO0FBRTlDLFVBQU0sZ0JBQWdCLEtBQUssSUFBSSxLQUFLLElBQUk7QUFDeEMsU0FBSyxhQUFhLFNBQVMsZ0JBQWdCO0FBQzNDLFNBQUssYUFBYSxTQUFTLGdCQUFnQjtBQUMzQyxTQUFLLGFBQWEsU0FBUyxLQUFLLElBQUksS0FBSyxJQUFJO0FBRTdDLElBQUksYUFBSyxNQUFNLEtBQUssV0FBVyxLQUFLLFNBQVMsS0FBSyxZQUFZO0FBRTlELFFBQUksYUFBYTtBQUNmLFdBQUssa0JBQWtCLFNBQVM7QUFDaEMsV0FBSyxrQkFBa0IsU0FBUztBQUNoQyxXQUFLLGtCQUFrQixTQUFTO0FBRWhDLFdBQUssZUFBZSxVQUFVO0FBQzlCLFdBQUssZUFBZSxTQUFTO0FBQzdCLFdBQUssZUFBZSxTQUFTO0FBRTdCLFdBQUssYUFBYSxTQUFTO0FBQzNCLFdBQUssYUFBYSxTQUFTO0FBQzNCLFdBQUssYUFBYSxTQUFTO0FBQUEsSUFDN0IsT0FBTztBQUNMLE1BQUksYUFBSyxLQUFLLEtBQUssbUJBQW1CLEtBQUssWUFBWTtBQUN2RCxNQUFJLGFBQUssS0FBSyxLQUFLLGdCQUFnQixLQUFLLFNBQVM7QUFDakQsTUFBSSxhQUFLLEtBQUssS0FBSyxjQUFjLEtBQUssT0FBTztBQUFBO0FBTy9DLFVBQU0sZ0JBQW9CLGFBQUssV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUNqRCxJQUFJLGFBQUssTUFBTSxlQUFlLEtBQUssbUJBQW1CLGtCQUFrQjtBQUN4RSxVQUFNLGFBQWlCLGFBQUssV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUM5QyxJQUFJLGFBQUssTUFBTSxZQUFZLEtBQUssZ0JBQWdCLGtCQUFrQjtBQUNsRSxVQUFNLFdBQWUsYUFBSyxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQzVDLElBQUksYUFBSyxNQUFNLFVBQVUsS0FBSyxjQUFjLGtCQUFrQjtBQU05RCxRQUFJLGFBQWE7QUFDZixNQUFJLGFBQUssSUFBSSxLQUFLLFdBQVcsS0FBSyxXQUFXLGFBQWE7QUFBQSxJQUM1RCxXQUFXLGNBQWM7QUFDdkIsTUFBSSxhQUFLLElBQUksS0FBSyxXQUFXLEtBQUssV0FBVyxhQUFhO0FBQUEsSUFDNUQ7QUFFQSxRQUFJLFlBQVk7QUFDZCxNQUFJLGFBQUssSUFBSSxLQUFLLFdBQVcsS0FBSyxXQUFXLFVBQVU7QUFBQSxJQUN6RCxXQUFXLGFBQWE7QUFDdEIsTUFBSSxhQUFLLElBQUksS0FBSyxXQUFXLEtBQUssV0FBVyxVQUFVO0FBQUEsSUFDekQ7QUFFQSxRQUFJLFVBQVU7QUFDWixNQUFJLGFBQUssSUFBSSxLQUFLLFdBQVcsS0FBSyxXQUFXLFFBQVE7QUFBQSxJQUN2RCxXQUFXLFVBQVU7QUFDbkIsTUFBSSxhQUFLLElBQUksS0FBSyxXQUFXLEtBQUssV0FBVyxRQUFRO0FBQUEsSUFDdkQ7QUFFQSxJQUFJLGFBQUssSUFBSSxLQUFLLFNBQVMsS0FBSyxXQUFXLEtBQUssWUFBWTtBQUFBO0FBQUEsRUFPOUQsV0FBVyxHQUFxQjtBQUM5QixXQUFPLEtBQUs7QUFBQTtBQUFBLEVBR2QsV0FBVyxDQUFDLE9BQXlCO0FBQ25DLElBQUksYUFBSyxLQUFLLEtBQUssV0FBVyxLQUFLO0FBQ25DLElBQUksYUFBSyxJQUFJLEtBQUssU0FBUyxLQUFLLFdBQVcsS0FBSyxZQUFZO0FBQUE7QUFBQSxFQUc5RCxTQUFTLEdBQXFCO0FBQzVCLFdBQU8sS0FBSztBQUFBO0FBQUEsRUFHZCxTQUFTLEdBQXFCO0FBQzVCLFdBQU8sS0FBSztBQUFBO0FBQUEsRUFHZCxRQUFRLEdBQVc7QUFDakIsV0FBTyxLQUFLO0FBQUE7QUFBQSxFQUdkLE1BQU0sR0FBVztBQUNmLFdBQU8sS0FBSztBQUFBO0FBQUEsRUFHZCxtQkFBbUIsR0FBWTtBQUM3QixXQUFPLEtBQUs7QUFBQTtBQUVoQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3RYTyxJQUFNLFFBQVEsQ0FBQyxTQUFpQixRQUFnQixXQUNyRCxLQUFLLElBQUksS0FBSyxJQUFJLFNBQVMsTUFBTSxHQUFHLE1BQU07Ozs7Ozs7Ozs7Ozs7OztBQ0NyQyxJQUFNLG1CQUFtQixDQUM5QixHQUNBLEdBQ0EsR0FDQSxNQUNXO0FBQ1gsUUFBTSxJQUFRLGFBQUssV0FBVyxHQUFHLENBQUM7QUFDbEMsUUFBTSxJQUFRLGFBQUssV0FBVyxHQUFHLENBQUM7QUFDbEMsSUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFO0FBQ2hCLElBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtBQUNoQixJQUFFLEtBQUssRUFBRSxLQUFLLEVBQUU7QUFDaEIsSUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFO0FBQ2hCLFFBQU0sUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFO0FBQ3JDLE1BQUksU0FBUyxHQUFHO0FBQ2QsWUFBTztBQUFBLEVBQ1Q7QUFDQSxRQUFNLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTTtBQUNyRSxNQUFJLElBQUksS0FBSyxLQUFLLEdBQUc7QUFDbkIsV0FBTztBQUFBLEVBQ1Q7QUFDQSxRQUFNLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTTtBQUN0RSxNQUFJLElBQUksS0FBSyxLQUFLLEdBQUc7QUFDbkIsV0FBTztBQUFBLEVBQ1Q7QUFDQSxTQUFPO0FBQUE7QUFHRixJQUFNLHNCQUFzQixDQUNqQyxLQUNBLE1BQ1k7QUFDWixRQUFNLElBQVEsYUFBSyxXQUFXLEdBQUcsQ0FBQztBQUNsQyxJQUFFLEtBQUssTUFBUSxLQUFLLE9BQU8sSUFBSTtBQUMvQixJQUFFLEtBQUssTUFBUSxLQUFLLE9BQU8sSUFBSTtBQUMvQixNQUFJLGtCQUFrQjtBQUN0QixXQUFTLEtBQUssRUFBRyxLQUFLLElBQUksVUFBVSxJQUFJO0FBQ3RDLFFBQUksTUFBTSxLQUFLLEtBQUssSUFBSTtBQUV4QixVQUFNLFNBQVMsaUJBQWlCLElBQUksS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDO0FBQ3RELFFBQUksV0FBVSxHQUFJO0FBQ2hCLGFBQU8sb0JBQW9CLEtBQUssQ0FBQztBQUFBLElBQ25DO0FBQ0EsdUJBQW1CO0FBQUEsRUFDckI7QUFDQSxNQUFJLGtCQUFrQixLQUFLLEdBQUc7QUFFNUIsV0FBTztBQUFBLEVBQ1Q7QUFDQSxTQUFPO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2xERixJQUFNLFlBQVksQ0FBQyxNQUFjO0FBQ3RDLE1BQUksSUFBSSxHQUFHO0FBQ1QsV0FBTyxJQUFJLEtBQUssTUFBTSxDQUFDO0FBQUEsRUFDekI7QUFDQSxTQUFPO0FBQUE7QUFHRixJQUFNLGNBQWMsQ0FBQyxNQUFzQjtBQUNoRCxPQUFLO0FBQ0wsTUFBSSxJQUFJO0FBQUssV0FBTztBQUNwQixPQUFLO0FBQ0wsU0FBTyxJQUFNO0FBQUE7QUFHUixJQUFNLGFBQWEsQ0FBQyxNQUFzQjtBQUMvQyxTQUFPLEtBQUssSUFBSSxZQUFZLENBQUM7QUFBQTtBQUd4QixJQUFNLGNBQWMsQ0FBQyxNQUFzQjtBQUNoRCxTQUFPLElBQU0sS0FBSyxJQUFJLGFBQWEsSUFBSSxFQUFJO0FBQUE7QUFHdEMsSUFBTSxnQkFBZ0IsQ0FBQyxNQUFzQjtBQUNsRCxTQUFPLE9BQU8sSUFBTSxLQUFLLElBQUksYUFBYSxJQUFJLElBQUk7QUFBQTtBQUc3QyxJQUFNLGFBQWEsQ0FBQyxNQUFzQjtBQUMvQyxTQUFPLElBQUk7QUFBQTtBQUdOLElBQU0sY0FBYyxDQUFDLE1BQXNCO0FBQ2hELFNBQU8sS0FBSyxJQUFNO0FBQUE7QUFHYixJQUFNLGdCQUFnQixDQUFDLE1BQXNCO0FBQ2xELFNBQU8sSUFBSSxNQUFNLElBQU0sSUFBSSxJQUFJLEtBQUssSUFBTSxJQUFNLEtBQUs7QUFBQTtBQUdoRCxJQUFNLGNBQWMsQ0FBQyxNQUFzQjtBQUNoRCxTQUFPLElBQUksSUFBSTtBQUFBO0FBR1YsSUFBTSxlQUFlLENBQUMsTUFBc0I7QUFDakQsUUFBTSxLQUFLLElBQUk7QUFDZixTQUFPLElBQU0sS0FBSyxLQUFLO0FBQUE7QUFHbEIsSUFBTSxpQkFBaUIsQ0FBQyxNQUFzQjtBQUNuRCxRQUFNLEtBQUssSUFBSTtBQUNmLFFBQU0sS0FBSyxLQUFLO0FBQ2hCLFNBQU8sSUFBSSxNQUFNLElBQU0sSUFBSSxJQUFJLElBQUksSUFBTSxNQUFNLElBQU0sT0FBTyxJQUFNO0FBQUE7QUFHN0QsSUFBTSxjQUFjLENBQUMsTUFBc0I7QUFDaEQsT0FBSztBQUNMLFNBQU8sSUFBSTtBQUFBO0FBR04sSUFBTSxlQUFlLENBQUMsTUFBc0I7QUFDakQsUUFBTSxLQUFLLElBQUk7QUFDZixNQUFJLEtBQUs7QUFDVCxTQUFPLElBQU0sSUFBSTtBQUFBO0FBR1osSUFBTSxpQkFBaUIsQ0FBQyxNQUFzQjtBQUNuRCxNQUFJLElBQUksS0FBSztBQUNYLFNBQUs7QUFDTCxXQUFPLElBQU0sSUFBSTtBQUFBLEVBQ25CO0FBQ0EsUUFBTSxLQUFLLElBQUk7QUFDZixNQUFJLEtBQUs7QUFDVCxTQUFPLElBQU0sSUFBTSxJQUFJO0FBQUE7QUFHbEIsSUFBTSxjQUFjLENBQUMsTUFBc0I7QUFDaEQsUUFBTSxLQUFLLElBQUk7QUFDZixTQUFPLElBQUksS0FBSztBQUFBO0FBR1gsSUFBTSxlQUFlLENBQUMsTUFBc0I7QUFDakQsUUFBTSxLQUFLLElBQUk7QUFDZixRQUFNLEtBQUssS0FBSztBQUNoQixTQUFPLElBQU0sS0FBSyxLQUFLO0FBQUE7QUFHbEIsSUFBTSxpQkFBaUIsQ0FBQyxNQUFzQjtBQUNuRCxNQUFJO0FBQ0osTUFBSSxJQUFJLEtBQUs7QUFDWCxTQUFLLElBQUk7QUFDVCxXQUFPLEtBQU8sSUFBSSxLQUFLO0FBQUEsRUFDekI7QUFFQSxRQUFNLEtBQUssSUFBSTtBQUNmLE9BQUssS0FBSztBQUNWLFNBQU8sSUFBTSxLQUFPLEtBQUssS0FBSztBQUFBO0FBR3pCLElBQU0sYUFBYSxDQUFDLE1BQXNCO0FBQy9DLFVBQVEsS0FBSyxJQUFJLEdBQUssSUFBTSxDQUFDLElBQUksS0FBSztBQUFBO0FBR2pDLElBQU0sY0FBYyxDQUFDLE1BQXNCO0FBQ2hELFNBQU8sSUFBTSxLQUFLLElBQUksSUFBSyxJQUFPLENBQUM7QUFBQTtBQUc5QixJQUFNLGdCQUFnQixDQUFDLE1BQXNCO0FBQ2xELE1BQUksSUFBSTtBQUFLLFlBQVEsS0FBSyxJQUFJLEdBQUssS0FBTyxDQUFDLElBQUksS0FBSztBQUNwRCxTQUFPLElBQU0sTUFBTSxLQUFLLElBQUksSUFBSyxNQUFTLElBQUksSUFBSTtBQUFBO0FBRzdDLElBQU0sYUFBYSxDQUFDLE1BQXNCO0FBQy9DLFNBQU8sSUFBTSxLQUFLLEtBQUssSUFBTSxDQUFDO0FBQUE7QUFHekIsSUFBTSxjQUFjLENBQUMsTUFBc0I7QUFDaEQsU0FBTyxLQUFLLEtBQUssQ0FBQztBQUFBO0FBR2IsSUFBTSxnQkFBZ0IsQ0FBQyxNQUFzQjtBQUNsRCxNQUFJLElBQUk7QUFBSyxZQUFRLElBQU0sS0FBSyxLQUFLLElBQU0sSUFBTSxDQUFDLEtBQUs7QUFDdkQsVUFBUSxJQUFNLEtBQUssS0FBSyxJQUFNLElBQUksQ0FBRyxLQUFLO0FBQUE7QUFHckMsSUFBTSxhQUFhLENBQUMsTUFBc0I7QUFDL0MsU0FBTyxJQUFJLEtBQUssVUFBVSxJQUFJO0FBQUE7QUFHekIsSUFBTSxjQUFjLENBQUMsTUFBc0I7QUFDaEQsUUFBTSxLQUFLLElBQUk7QUFDZixTQUFPLElBQU0sS0FBSyxNQUFNLFVBQVUsS0FBSztBQUFBO0FBR2xDLElBQU0sZ0JBQWdCLENBQUMsTUFBc0I7QUFDbEQsTUFBSSxJQUFJO0FBQUssV0FBTyxJQUFJLEtBQUssSUFBTSxJQUFJLE9BQU87QUFDOUMsUUFBTSxLQUFLLElBQUk7QUFDZixTQUFPLElBQU0sS0FBSyxLQUFLLEtBQU8sSUFBTSxLQUFLO0FBQUE7QUFHcEMsSUFBTSxnQkFBZ0IsQ0FBQyxNQUFzQjtBQUNsRCxRQUFNLEtBQUssSUFBSTtBQUNmLFNBQU8sS0FBSyxLQUFLLEtBQUssSUFBSSxJQUFJLEtBQUssS0FBSyxHQUFHO0FBQUE7QUFHdEMsSUFBTSxpQkFBaUIsQ0FBQyxNQUFzQjtBQUNuRCxRQUFNLE1BQU0sSUFBSSxNQUFRLElBQUk7QUFDNUIsU0FBTyxJQUFNLEtBQUssS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLEtBQUssR0FBRztBQUFBO0FBRzVDLElBQU0sbUJBQW1CLENBQUMsTUFBc0I7QUFDckQsTUFBSTtBQUNKLE1BQUksSUFBSSxNQUFNO0FBQ1osU0FBSyxJQUFJO0FBQ1QsV0FBTyxJQUFNLEtBQUssS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLEtBQUssQ0FBRztBQUFBLEVBQ25EO0FBQ0EsTUFBSSxJQUFJO0FBQU0sV0FBTyxNQUFNLE9BQU8sS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLENBQUc7QUFFNUQsUUFBTSxJQUFJLE1BQVEsSUFBSTtBQUN0QixTQUFPLElBQU0sSUFBTSxLQUFLLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLENBQUc7QUFBQTtBQUdsRCxJQUFNLGVBQWUsQ0FBQyxNQUFzQjtBQUNqRCxTQUFPLEtBQUssSUFBSSxHQUFLLEtBQU8sSUFBSSxFQUFJLElBQUksS0FBSyxJQUFJLEtBQUssSUFBSSxJQUFJLEtBQUssS0FBSyxHQUFHLENBQUM7QUFBQTtBQUd2RSxJQUFNLGdCQUFnQixDQUFDLE1BQXNCO0FBQ2xELFNBQU8sSUFBTSxLQUFLLElBQUksSUFBSyxJQUFPLENBQUMsSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLEdBQUcsQ0FBQztBQUFBO0FBR3RFLElBQU0sa0JBQWtCLENBQUMsTUFBc0I7QUFDcEQsTUFBSSxJQUFJO0FBQ04sV0FDRSxJQUNBLEtBQUssSUFBSSxHQUFLLEtBQU8sSUFBSSxFQUFJLElBQzdCLEtBQUssSUFBSSxLQUFLLElBQUksSUFBSSxLQUFLLEtBQUssQ0FBRyxDQUFDO0FBRXhDLFNBQ0UsSUFBTSxJQUFNLEtBQUssSUFBSSxJQUFLLElBQU8sQ0FBQyxJQUFJLEtBQUssSUFBSSxLQUFLLElBQUksSUFBSSxLQUFLLEtBQUssQ0FBRyxDQUFDO0FBQUE7O0FDaEx2RSxJQUFNLFFBQU8sQ0FBQyxPQUFlLFFBQWdCLFdBQ2xELFVBQVUsU0FBUyxVQUFVOzs7Ozs7Ozs7Ozs7Ozs7QUNDeEIsSUFBTSxrQkFBa0IsQ0FDN0IsS0FDQSxLQUNBLGNBQWMsR0FDZCxhQUFhLFFBQ0E7QUFDYixRQUFNLE9BQVEsS0FBSyxPQUFPLEtBQUssS0FBTTtBQUNyQyxRQUFNLFNBQVUsS0FBSyxPQUFPLEtBQUssS0FBTTtBQUN2QyxRQUFNLElBQUksY0FBYyxJQUFJO0FBQzVCLFNBQU87QUFBQSxJQUNMLElBQUksS0FBSyxJQUFJLEdBQUcsSUFBSSxLQUFLLElBQUksS0FBSztBQUFBLElBQ2xDLElBQUksS0FBSyxJQUFJLEdBQUc7QUFBQSxJQUNoQixJQUFJLEtBQUssSUFBSSxHQUFHLElBQUksS0FBSyxJQUFJLEtBQUs7QUFBQSxFQUNwQztBQUFBO0FBR0ssSUFBTSxrQkFBa0IsQ0FDN0IsR0FDQSxHQUNBLEdBQ0EsYUFBYSxRQUtWO0FBQ0gsUUFBTSxJQUFJLEtBQUssS0FBSyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQztBQUN6QyxRQUFNLE1BQU0sS0FBSyxLQUFLLElBQUksQ0FBQztBQUMzQixRQUFNLFFBQVEsS0FBSyxNQUFNLEdBQUcsQ0FBQztBQUU3QixTQUFPO0FBQUEsSUFDTCxLQUFLLEtBQU0sTUFBTSxNQUFPLEtBQUs7QUFBQSxJQUM3QixLQUFLLEtBQU0sUUFBUSxNQUFPLEtBQUssTUFBTSxTQUFTLEtBQUssS0FBSyxJQUFJLE1BQU07QUFBQSxJQUNsRSxVQUFVLElBQUksYUFBYTtBQUFBLEVBQzdCO0FBQUE7Ozs7Ozs7Ozs7QUNoQ0ssSUFBTSxxQkFBcUIsQ0FDaEMsS0FDQSxLQUNBLFFBQ0EsV0FDb0I7QUFFcEIsUUFBTSxJQUFRLGFBQUssSUFBUSxhQUFLLE9BQU8sR0FBRyxLQUFLLE1BQU07QUFFckQsUUFBTSxJQUFRLGFBQUssSUFBSSxHQUFHLEdBQUc7QUFFN0IsUUFBTSxJQUFRLGFBQUssSUFBSSxHQUFHLENBQUMsSUFBSSxTQUFTO0FBR3hDLE1BQUksSUFBSSxLQUFLLElBQUksR0FBRztBQUNsQixXQUFPO0FBQUEsRUFDVDtBQUNBLFFBQU0sUUFBUSxJQUFJLElBQUk7QUFHdEIsTUFBSSxRQUFRLEdBQUc7QUFDYixXQUFPO0FBQUEsRUFDVDtBQUdBLE1BQUksS0FBSyxJQUFJLEtBQUssS0FBSyxLQUFLO0FBRzVCLE1BQUksSUFBSSxHQUFHO0FBQ1QsUUFBSTtBQUFBLEVBQ047QUFFQSxTQUFXLGFBQUssV0FDZCxJQUFJLEtBQUssSUFBSSxJQUFJLElBQ2pCLElBQUksS0FBSyxJQUFJLElBQUksSUFDakIsSUFBSSxLQUFLLElBQUksSUFBSSxFQUNuQjtBQUFBOzs7Ozs7Ozs7Ozs7QUNqQ0ssTUFBTSxjQUF3QztBQUFBLEVBQzNDLGVBQXlCLENBQUM7QUFBQSxFQUMxQixnQkFBd0I7QUFBQSxFQUN4QixZQUFvQjtBQUFBLEVBQ3BCLFlBQW9CO0FBQUEsRUFFNUIsU0FBUyxDQUFDLFNBQWlCO0FBQ3pCLFFBQUksS0FBSyxhQUFhLFVBQVUsS0FBSztBQUNuQyxXQUFLLGFBQWEsTUFBTTtBQUFBLElBQzFCO0FBRUEsU0FBSyxhQUFhLEtBQUssT0FBTztBQU05QixTQUFLLFlBQVk7QUFDakIsU0FBSyxhQUFZO0FBQ2pCLFNBQUssZ0JBQWdCO0FBRXJCLGVBQVcsYUFBYSxLQUFLLGNBQWM7QUFDekMsV0FBSyxZQUFZLEtBQUssSUFBSSxLQUFLLFdBQVcsU0FBUztBQUNuRCxXQUFLLFlBQVksS0FBSyxJQUFJLEtBQUssV0FBVyxTQUFTO0FBQ25ELFdBQUssaUJBQWlCO0FBQUEsSUFDeEI7QUFDQSxTQUFLLGlCQUFpQixLQUFLLGFBQWE7QUFBQTtBQUFBLE1BR3RDLFdBQVcsR0FBMEI7QUFDdkMsV0FBTyxLQUFLO0FBQUE7QUFBQSxNQUVWLFlBQVksR0FBVztBQUN6QixXQUFPLEtBQUs7QUFBQTtBQUFBLE1BRVYsUUFBUSxHQUFXO0FBQ3JCLFdBQU8sS0FBSztBQUFBO0FBQUEsTUFFVixRQUFRLEdBQVc7QUFDckIsV0FBTyxLQUFLO0FBQUE7QUFFaEI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNoRE8sSUFBTSxnQkFBZ0IsT0FDM0IsS0FDQSxlQUNzQjtBQUN0QixRQUFNLFdBQVcsTUFBTSxNQUFNLEdBQUc7QUFFaEMsUUFBTSxTQUFTLFNBQVMsS0FBTSxVQUFVO0FBRXhDLE1BQUksZ0JBQWdCO0FBQ3BCLFFBQU0sU0FBUyxJQUFJLGVBQWU7QUFBQSxJQUNoQyxLQUFLLENBQUMsWUFBWTtBQUNoQixhQUFPLEtBQUs7QUFDWixlQUFTLElBQUksR0FBUTtBQUNuQixlQUFPLE9BQU8sS0FBSyxFQUFFLEtBQUssR0FBRyxNQUFNLFlBQVk7QUFFN0MsY0FBSSxNQUFNO0FBQ1IsdUJBQVcsTUFBTTtBQUNqQjtBQUFBLFVBQ0Y7QUFFQSxjQUFJLFlBQVk7QUFDZCw2QkFBaUIsTUFBTTtBQUN2Qix1QkFBVyxhQUFhO0FBQUEsVUFDMUI7QUFHQSxxQkFBVyxRQUFRLEtBQUs7QUFDeEIsaUJBQU8sS0FBSztBQUFBLFNBQ2I7QUFBQTtBQUFBO0FBQUEsRUFHUCxDQUFDO0FBQ0QsUUFBTTtBQUNOLFNBQU8sSUFBSSxTQUFTLE1BQU07QUFBQTs7Ozs7Ozs7Ozs7Ozs7O0FDakNyQixJQUFNLFFBQVEsT0FBTyxVQUFpQztBQUMzRCxRQUFNLElBQUksUUFBYyxDQUFDLFlBQVksV0FBVyxTQUFTLEtBQUssQ0FBQztBQUFBO0FBRzFELElBQU0sbUJBQW1CLENBQzlCLFVBSUc7QUFDSCxNQUFJLGlCQUF3QjtBQUM1QixNQUFJLGtCQUE0QztBQUVoRCxRQUFNLFVBQVUsSUFBSSxRQUFjLENBQUMsWUFBWTtBQUM3QyxzQkFBa0I7QUFDbEIsb0JBQWdCLE9BQU8sV0FBVyxTQUFTLEtBQUs7QUFBQSxHQUNqRDtBQUVELFNBQU87QUFBQSxJQUNMO0FBQUEsSUFDQSxRQUFRLE1BQU07QUFDWixVQUFJLGlCQUFpQixHQUFHO0FBQ3RCLGVBQU8sYUFBYSxhQUFhO0FBQUEsTUFDbkM7QUFDQSxVQUFJLGlCQUFpQjtBQUNuQix3QkFBZ0I7QUFBQSxNQUNsQjtBQUFBO0FBQUEsRUFFSjtBQUFBOzs7Ozs7Ozs7Ozs7QUM1QkYsSUFBTSxXQUFXLGFBQWE7QUFFdkI7QUFBQSxNQUFNLGlCQUFpQjtBQUFBLEVBQ3BCLFFBQWdCLElBQUk7QUFBQSxFQUU1QixNQUFNLEdBQVc7QUFDZixRQUFJLEtBQUssU0FBUyxHQUFHO0FBQ25CLFdBQUssUUFBUSxZQUFZO0FBQUEsSUFDM0I7QUFFQSxVQUFNLEtBQU0sS0FBSyxRQUFRLFNBQVU7QUFDbkMsVUFBTSxLQUFLLEtBQUssUUFBUSxTQUFTO0FBQ2pDLFFBQUksSUFBSyxRQUFRLEtBQUssT0FBTyxLQUFNO0FBRW5DLFFBQUksSUFBSSxHQUFHO0FBQ1QsV0FBSyxhQUFhO0FBQUEsSUFDcEI7QUFFQSxTQUFLLFFBQVE7QUFFYixXQUFRLEtBQUssV0FBVyxNQUFPO0FBQUE7QUFBQSxFQUdqQyxPQUFPLENBQUMsUUFBc0I7QUFDNUIsU0FBSyxRQUFRLFNBQVM7QUFBQTtBQUUxQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDdEJBLElBQUs7QUFBTCxVQUFLLGlCQUFMO0FBQ0UsbURBQWMsS0FBZDtBQUNBLGtEQUFhLEtBQWI7QUFBQSxHQUZHO0FBb0NFO0FBQUEsTUFBTSxPQUEwQjtBQUFBLEVBQzdCLGtCQUFrQixlQUFlO0FBQUEsRUFDakM7QUFBQSxFQUNBO0FBQUEsRUFFQSxlQUFtQixhQUFLLFdBQVcsR0FBRyxDQUFDO0FBQUEsRUFDdkMsZ0JBQW9CLGFBQUssV0FBVyxHQUFHLENBQUM7QUFBQSxFQUV4QyxvQkFBd0IsYUFBSyxPQUFPO0FBQUEsRUFDcEMsY0FBa0IsYUFBSyxPQUFPO0FBQUEsRUFDOUIsa0JBQXNCLGFBQUssT0FBTztBQUFBLEVBRWxDLE9BQVcsYUFBSyxXQUFXLEdBQUcsR0FBRyxDQUFDO0FBQUEsRUFDbEMsVUFBYyxhQUFLLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFBQSxFQUNyQyxVQUFjLGFBQUssV0FBVyxHQUFHLEdBQUcsQ0FBQztBQUFBLEVBSTdDLGdCQUFnQixDQUFDLFFBQThCO0FBQzdDLFNBQUssa0JBQWtCLGVBQWU7QUFFdEMsUUFBSSxjQUFjLE9BQU87QUFDekIsUUFBSSxnQkFBZ0IsV0FBVztBQUM3QixvQkFBYyxLQUFLLGNBQWMsS0FBSyxLQUFLLGNBQWM7QUFBQSxJQUMzRDtBQUVBLFNBQUssbUJBQW1CO0FBQUEsTUFDdEIsTUFBTSxPQUFPO0FBQUEsTUFDYjtBQUFBLE1BQ0EsTUFBTSxPQUFPO0FBQUEsTUFDYixLQUFLLE9BQU87QUFBQSxJQUNkO0FBQUE7QUFBQSxFQUdGLGVBQWUsQ0FBQyxRQUF5QjtBQUN2QyxTQUFLLGtCQUFrQixlQUFlO0FBQ3RDLFNBQUssa0JBQWtCLEtBQUssT0FBTztBQUFBO0FBQUEsRUFLckMsY0FBYyxDQUFDLE9BQWUsUUFBZ0I7QUFDNUMsU0FBSyxhQUFhLEtBQUs7QUFDdkIsU0FBSyxhQUFhLEtBQUs7QUFBQTtBQUFBLEVBR3pCLGNBQWMsR0FBcUI7QUFDakMsV0FBTyxLQUFLO0FBQUE7QUFBQSxFQUtkLGVBQWUsQ0FBQyxPQUFlLFFBQWdCO0FBQzdDLFNBQUssY0FBYyxLQUFLO0FBQ3hCLFNBQUssY0FBYyxLQUFLO0FBRXhCLFFBQ0UsS0FBSyxvQkFBb0IsZUFBZSxlQUN4QyxLQUFLLGtCQUNMO0FBQ0EsV0FBSyxpQkFBaUIsY0FDcEIsS0FBSyxjQUFjLEtBQUssS0FBSyxjQUFjO0FBQUEsSUFDL0M7QUFBQTtBQUFBLEVBR0YsZUFBZSxHQUFxQjtBQUNsQyxXQUFPLEtBQUs7QUFBQTtBQUFBLEVBS2QsTUFBTSxDQUNKLE9BQ0EsVUFDQSxVQUNBO0FBQ0EsU0FBSyxPQUFPLEtBQUs7QUFDakIsU0FBSyxVQUFVLFFBQVE7QUFDdkIsU0FBSyxVQUFVLFFBQVE7QUFBQTtBQUFBLEVBS3pCLE1BQU0sQ0FBQyxPQUF5QjtBQUM5QixJQUFJLGFBQUssS0FBSyxLQUFLLE1BQU0sS0FBSztBQUFBO0FBQUEsRUFFaEMsU0FBUyxDQUFDLFVBQTRCO0FBQ3BDLElBQUksYUFBSyxLQUFLLEtBQUssU0FBUyxRQUFRO0FBQUE7QUFBQSxFQUV0QyxTQUFTLENBQUMsVUFBNEI7QUFDcEMsSUFBSSxhQUFLLEtBQUssS0FBSyxTQUFTLFFBQVE7QUFBQTtBQUFBLEVBR3RDLE1BQU0sR0FBcUI7QUFDekIsV0FBTyxLQUFLO0FBQUE7QUFBQSxFQUVkLFNBQVMsR0FBcUI7QUFDNUIsV0FBTyxLQUFLO0FBQUE7QUFBQSxFQUVkLFNBQVMsR0FBcUI7QUFDNUIsV0FBTyxLQUFLO0FBQUE7QUFBQSxFQUtkLGVBQWUsR0FBRztBQUNoQixRQUFJLEtBQUssb0JBQW9CLGVBQWUsYUFBYTtBQUN2RCxjQUFRLE1BQU0sYUFBYSxNQUFNLFFBQVEsS0FBSztBQUM5QyxNQUFJLGFBQUssWUFDUCxLQUFLLG1CQUNMLFFBQVEsSUFBSSxHQUNaLGFBQ0EsTUFDQSxHQUNGO0FBQUEsSUFDRixXQUFXLEtBQUssb0JBQW9CLGVBQWUsWUFBWTtBQUM3RCxjQUFRLE1BQU0sT0FBTyxLQUFLLFFBQVEsTUFBTSxRQUFRLEtBQUs7QUFDckQsTUFBSSxhQUFLLE1BQ1AsS0FBSyxtQkFDTCxNQUNBLE9BQ0EsS0FDQSxRQUNBLE1BQ0EsR0FDRjtBQUFBLElBQ0Y7QUFFQSxJQUFJLGFBQUssT0FBTyxLQUFLLGFBQWEsS0FBSyxNQUFNLEtBQUssU0FBUyxLQUFLLE9BQU87QUFFdkUsU0FBSyxzQkFBc0I7QUFBQTtBQUFBLEVBRzdCLHFCQUFxQixHQUFHO0FBQ3RCLElBQUksYUFBSyxTQUNQLEtBQUssaUJBQ0wsS0FBSyxtQkFDTCxLQUFLLFdBQ1A7QUFBQTtBQUFBLEVBR0YsbUJBQW1CLENBQUMsUUFBMEI7QUFDNUMsSUFBSSxhQUFLLEtBQUssS0FBSyxtQkFBbUIsTUFBTTtBQUFBO0FBQUEsRUFFOUMsYUFBYSxDQUFDLFFBQTBCO0FBQ3RDLElBQUksYUFBSyxLQUFLLEtBQUssYUFBYSxNQUFNO0FBQUE7QUFBQSxFQUV4QyxpQkFBaUIsQ0FBQyxRQUEwQjtBQUMxQyxJQUFJLGFBQUssS0FBSyxLQUFLLGlCQUFpQixNQUFNO0FBQUE7QUFBQSxFQUc1QyxtQkFBbUIsR0FBcUI7QUFDdEMsV0FBTyxLQUFLO0FBQUE7QUFBQSxFQUVkLGFBQWEsR0FBcUI7QUFDaEMsV0FBTyxLQUFLO0FBQUE7QUFBQSxFQUVkLGlCQUFpQixHQUFxQjtBQUNwQyxXQUFPLEtBQUs7QUFBQTtBQUFBLEVBS2Qsa0JBQWtCLEdBQTJDO0FBQzNELFFBQUksS0FBSyxvQkFBb0IsZUFBZSxhQUFhO0FBQ3ZELFlBQU0sSUFBSSxNQUFNLDhCQUE4QjtBQUFBLElBQ2hEO0FBQ0EsV0FBTyxLQUFLO0FBQUE7QUFBQSxFQUVkLGlCQUFpQixHQUEwQztBQUN6RCxRQUFJLEtBQUssb0JBQW9CLGVBQWUsWUFBWTtBQUN0RCxZQUFNLElBQUksTUFBTSw4QkFBOEI7QUFBQSxJQUNoRDtBQUNBLFdBQU8sS0FBSztBQUFBO0FBRWhCOztBQ3JOQSxJQUFLO0FBQUwsVUFBSyxjQUFMO0FBQ0UsdUNBQVEsS0FBUjtBQUNBLHNDQUFPLEtBQVA7QUFDQSx3Q0FBUyxLQUFUO0FBQ0EscUNBQU0sS0FBTjtBQUNBLHNDQUFPLEtBQVA7QUFDQSx1Q0FBUSxLQUFSO0FBQUEsR0FORztBQWlCRTtBQUFBLE1BQU0sZUFBMEM7QUFBQSxFQUM3QyxXQUFXLElBQUksYUFBYSxFQUFFO0FBQUEsRUFFOUIsU0FBUyxDQUNmLE1BQ0EsTUFDQSxPQUNBLE1BQ0E7QUFDQSxVQUFNLFFBQVEsT0FBTztBQUVyQixTQUFLLFNBQVMsUUFBUSxLQUFLLEtBQUssS0FBSyxNQUFNLEtBQUs7QUFDaEQsU0FBSyxTQUFTLFFBQVEsS0FBSyxLQUFLLEtBQUssTUFBTSxLQUFLO0FBQ2hELFNBQUssU0FBUyxRQUFRLEtBQUssS0FBSyxLQUFLLE1BQU0sS0FBSztBQUNoRCxTQUFLLFNBQVMsUUFBUSxLQUFLLEtBQUssS0FBSyxNQUFNLEtBQUs7QUFFaEQsVUFBTSxZQUFZLEtBQUssS0FDckIsS0FBSyxTQUFTLFFBQVEsS0FBSyxLQUFLLFNBQVMsUUFBUSxLQUMvQyxLQUFLLFNBQVMsUUFBUSxLQUFLLEtBQUssU0FBUyxRQUFRLEtBQ2pELEtBQUssU0FBUyxRQUFRLEtBQUssS0FBSyxTQUFTLFFBQVEsRUFDckQ7QUFFQSxRQUFJLGNBQWM7QUFBRztBQUVyQixTQUFLLFNBQVMsUUFBUSxNQUFNO0FBQzVCLFNBQUssU0FBUyxRQUFRLE1BQU07QUFDNUIsU0FBSyxTQUFTLFFBQVEsTUFBTTtBQUM1QixTQUFLLFNBQVMsUUFBUSxNQUFNO0FBQUE7QUFBQSxFQUc5QixnQkFBZ0IsQ0FBQyxNQUF3QixNQUF3QjtBQUMvRCxVQUFNLE9BQVcsYUFBSyxTQUFhLGFBQUssT0FBTyxHQUFHLE1BQU0sSUFBSTtBQUk1RCxVQUFNLE9BQVcsYUFBSyxXQUFXLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLEtBQUssR0FBRztBQUNwRSxVQUFNLE9BQVcsYUFBSyxXQUFXLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLEtBQUssR0FBRztBQUNwRSxVQUFNLE9BQVcsYUFBSyxXQUFXLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxLQUFLLEtBQUssR0FBRztBQUNyRSxVQUFNLE9BQVcsYUFBSyxXQUFXLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxLQUFLLEtBQUssR0FBRztBQUVyRSxTQUFLLFVBQVUsWUFBWSxPQUFPLE1BQU0sT0FBTSxDQUFFO0FBQ2hELFNBQUssVUFBVSxZQUFZLE1BQU0sTUFBTSxNQUFNLENBQUU7QUFDL0MsU0FBSyxVQUFVLFlBQVksUUFBUSxNQUFNLE1BQU0sQ0FBRTtBQUNqRCxTQUFLLFVBQVUsWUFBWSxLQUFLLE1BQU0sT0FBTSxDQUFFO0FBQzlDLFNBQUssVUFBVSxZQUFZLE1BQU0sTUFBTSxPQUFNLENBQUU7QUFDL0MsU0FBSyxVQUFVLFlBQVksT0FBTyxNQUFNLE1BQU0sQ0FBRTtBQUFBO0FBQUEsRUFHbEQsZUFBZSxDQUFDLEdBQVcsR0FBVyxHQUFXLFFBQWdCO0FBQy9ELGFBQVMsS0FBSyxFQUFHLEtBQUssS0FBSyxJQUFJO0FBQzdCLFlBQU0sUUFBUSxLQUFLO0FBQ25CLFVBQ0UsS0FBSyxTQUFTLFFBQVEsS0FBSyxJQUN6QixLQUFLLFNBQVMsUUFBUSxLQUFLLElBQzNCLEtBQUssU0FBUyxRQUFRLEtBQUssSUFDM0IsS0FBSyxTQUFTLFFBQVEsT0FDdkIsUUFDRDtBQUNBLGVBQU87QUFBQSxNQUNUO0FBQUEsSUFDRjtBQUVBLFdBQU87QUFBQTtBQUFBLEVBR1QsY0FBYyxDQUFDLEdBQVcsR0FBVyxHQUFXO0FBRTlDLFdBQU8sS0FBSyxnQkFBZ0IsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUFBO0FBQUEsRUFHeEMsaUJBQWlCLENBQUMsUUFBMEIsUUFBZ0I7QUFDMUQsV0FBTyxLQUFLLGNBQWMsT0FBTyxJQUFJLE9BQU8sSUFBSSxPQUFPLElBQUksTUFBTTtBQUFBO0FBQUEsRUFHbkUsYUFBYSxDQUFDLEtBQWEsS0FBYSxLQUFhLFFBQWdCO0FBQ25FLFVBQU0sUUFBUSxTQUFTO0FBQ3ZCLFVBQU0sT0FBTyxNQUFNO0FBQ25CLFVBQU0sT0FBTyxNQUFNO0FBQ25CLFVBQU0sT0FBTyxNQUFNO0FBQ25CLFVBQU0sT0FBTyxNQUFNO0FBQ25CLFVBQU0sT0FBTyxNQUFNO0FBQ25CLFVBQU0sT0FBTyxNQUFNO0FBRW5CLGFBQVMsS0FBSyxFQUFHLEtBQUssS0FBSyxJQUFJO0FBQzdCLFlBQU0sUUFBUSxLQUFLO0FBQ25CLFlBQU0sUUFBUSxLQUFLLFNBQVMsUUFBUTtBQUNwQyxZQUFNLFFBQVEsS0FBSyxTQUFTLFFBQVE7QUFDcEMsWUFBTSxRQUFRLEtBQUssU0FBUyxRQUFRO0FBQ3BDLFlBQU0sUUFBUSxLQUFLLFNBQVMsUUFBUTtBQUVwQyxVQUNFLFFBQVEsT0FBTyxRQUFRLE9BQU8sUUFBUSxPQUFPLFFBQVEsS0FDckQsUUFBUSxPQUFPLFFBQVEsT0FBTyxRQUFRLE9BQU8sUUFBUSxLQUNyRCxRQUFRLE9BQU8sUUFBUSxPQUFPLFFBQVEsT0FBTyxRQUFRLEtBQ3JELFFBQVEsT0FBTyxRQUFRLE9BQU8sUUFBUSxPQUFPLFFBQVEsS0FDckQsUUFBUSxPQUFPLFFBQVEsT0FBTyxRQUFRLE9BQU8sUUFBUSxLQUNyRCxRQUFRLE9BQU8sUUFBUSxPQUFPLFFBQVEsT0FBTyxRQUFRLEtBQ3JELFFBQVEsT0FBTyxRQUFRLE9BQU8sUUFBUSxPQUFPLFFBQVEsS0FDckQsUUFBUSxPQUFPLFFBQVEsT0FBTyxRQUFRLE9BQU8sUUFBUSxHQUNyRDtBQUNBO0FBQUEsTUFDRjtBQUVBLGFBQU87QUFBQSxJQUNUO0FBRUEsV0FBTztBQUFBO0FBRVg7O0FDM0hPLElBQU0sMkJBQTJCLENBQ3RDLFVBQ0EsV0FDQSxZQUNBLGFBQ2U7QUFDZixRQUFNLGlCQUFxQixhQUFLLE9BQU87QUFFdkMsRUFBSSxhQUFLLFNBQVMsZ0JBQWdCLFlBQVksU0FBUztBQUV2RCxTQUFPLGdDQUFnQyxVQUFVLGdCQUFnQixRQUFRO0FBQUE7QUFHcEUsSUFBTSxrQ0FBa0MsQ0FDN0MsYUFDQSxnQkFDQSxhQUNlO0FBQ2YsUUFBTSxZQUFnQixhQUFLLE9BQU87QUFFbEMsUUFBTSxpQkFBcUIsYUFBSyxPQUFPO0FBRXZDLFFBQU0sVUFBc0IsQ0FBQztBQUU3QixjQUFZLFFBQVEsQ0FBQyxhQUFhO0FBQ2hDLGNBQVUsS0FBSyxTQUFTO0FBQ3hCLGNBQVUsS0FBSyxTQUFTO0FBQ3hCLGNBQVUsS0FBSyxTQUFTO0FBQ3hCLGNBQVUsS0FBSztBQUVmLElBQUksYUFBSyxjQUFjLGdCQUFnQixXQUFXLGNBQWM7QUFHaEUsUUFBSSxlQUFlLE9BQU8sR0FBRztBQUUzQixhQUFPO0FBQUEsSUFDVDtBQUVBLG1CQUFlLEtBQUssSUFBSSxlQUFlO0FBRXZDLG1CQUFlLE1BQU0sZUFBZTtBQUNwQyxtQkFBZSxNQUFNLGVBQWU7QUFDcEMsbUJBQWUsTUFBTSxlQUFlO0FBSXBDLElBQUMsZUFBZSxNQUNiLGVBQWUsS0FBSyxNQUFNLE9BQU8sU0FBUyxLQUFLLFNBQVMsSUFDeEQsZUFBZSxNQUNiLGVBQWUsS0FBSyxNQUFNLE9BQU8sU0FBUyxLQUFLLFNBQVM7QUFFN0QsWUFBUSxLQUFTLGFBQUssS0FBUyxhQUFLLE9BQU8sR0FBRyxjQUEwQixDQUFDO0FBQUEsR0FDMUU7QUFFRCxTQUFPO0FBQUE7O0FDdERGLElBQU0sMkJBQTJCLENBQ3RDLGNBQ0EsV0FDQSxZQUNBLGFBQ2U7QUFDZixRQUFNLGlCQUF1QyxhQUFLLFNBQzVDLGFBQUssT0FBTyxHQUNoQixZQUNBLFNBQ0Y7QUFDQSxTQUFPLHFDQUNMLGNBQ0EsZ0JBQ0EsUUFDRjtBQUFBO0FBR0ssSUFBTSx1Q0FBdUMsQ0FDbEQsY0FDQSxnQkFDQSxhQUNlO0FBQ2YsUUFBTSx5QkFBK0MsYUFBSyxPQUNwRCxhQUFLLE9BQU8sR0FDaEIsY0FDRjtBQUVBLFNBQU8sd0NBQ0wsY0FDQSx3QkFDQSxRQUNGO0FBQUE7QUFHSyxJQUFNLDBDQUEwQyxDQUNyRCxjQUNBLHdCQUNBLGFBQ2U7QUFDZixRQUFNLFVBQXNCLENBQUM7QUFFN0IsUUFBTSxpQkFBcUIsYUFBSyxPQUFPO0FBRXZDLGVBQWEsUUFBUSxDQUFDLGNBQWM7QUFDbEMsbUJBQWUsTUFDWCxVQUFVLEtBQUssU0FBUyxNQUFNLFNBQVMsS0FBTSxJQUFNO0FBQ3ZELG1CQUFlLE1BQ1gsVUFBVSxLQUFLLFNBQVMsTUFBTSxTQUFTLEtBQU0sSUFBTTtBQUN2RCxtQkFBZSxLQUFLLElBQU0sVUFBVSxLQUFLO0FBQ3pDLG1CQUFlLEtBQUs7QUFFcEIsSUFBSSxhQUFLLGNBQ1AsZ0JBQ0EsZ0JBQ0Esc0JBQ0Y7QUFHQSxRQUFJLGVBQWUsT0FBTyxHQUFHO0FBRTNCO0FBQUEsSUFDRjtBQUVBLG1CQUFlLEtBQUssSUFBSSxlQUFlO0FBRXZDLG1CQUFlLE1BQU0sZUFBZTtBQUNwQyxtQkFBZSxNQUFNLGVBQWU7QUFDcEMsbUJBQWUsTUFBTSxlQUFlO0FBRXBDLFlBQVEsS0FBUyxhQUFLLEtBQVMsYUFBSyxPQUFPLEdBQUcsY0FBMEIsQ0FBQztBQUFBLEdBQzFFO0FBRUQsU0FBTztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzdFRixNQUFNLGFBQWE7QUFBQSxTQUNULE1BQXFDO0FBQUEsU0FDckMsd0JBQW1EO0FBQUEsU0FFM0QsVUFBVSxDQUFDLFFBQTJCO0FBQzNDLFVBQU0sMEJBQWtEO0FBQUEsTUFFdEQsT0FBTztBQUFBLE1BR1AsV0FBVztBQUFBLE1BSVgsT0FBTztBQUFBLE1BSVAsOEJBQThCO0FBQUEsTUFXOUIsaUJBQWlCO0FBQUEsTUFJakIsb0JBQW9CO0FBQUEsTUFJcEIsdUJBQXVCO0FBQUEsTUFJdkIsU0FBUztBQUFBLElBQ1g7QUFFQSxpQkFBYSxNQUFNLE9BQU8sV0FBVyxVQUFVLHVCQUF1QjtBQUV0RSxTQUFLLGFBQWE7QUFBSyxZQUFNLElBQUksTUFBTSxnQ0FBZ0M7QUFFdkUsaUJBQWEsd0JBQ1gsYUFBYSxJQUFJLGFBQWEsb0JBQW9CO0FBRXBELGlCQUFhLElBQUksYUFBYSx3QkFBd0I7QUFDdEQsaUJBQWEsSUFBSSxhQUFhLGlCQUFpQjtBQUFBO0FBQUEsU0FPMUMsVUFBVSxHQUFHO0FBQ2xCLFNBQUssYUFBYSxLQUFLO0FBQ3JCLFlBQU0sSUFBSSxNQUFNLCtCQUErQjtBQUFBLElBQ2pEO0FBQ0EsV0FBTyxhQUFhO0FBQUE7QUFBQSxTQU9mLHVCQUF1QixHQUFHO0FBQy9CLFdBQU8sYUFBYTtBQUFBO0FBQUEsU0FHZiw2QkFBNkIsR0FBRztBQUNyQyxTQUFLLGFBQWEsdUJBQXVCO0FBQ3ZDLFlBQU0sSUFBSSxNQUFNLHNDQUFzQztBQUFBLElBQ3hEO0FBRUEsV0FBTyxhQUFhO0FBQUE7QUFFeEI7OztBQy9FTyxJQUFLO0FBQUwsVUFBSyxjQUFMO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUEsR0FOVTtBQVNMLElBQU0saUJBQWlCLENBQUMsV0FBZ0M7QUFDN0QsUUFBTSxLQUFLLGFBQWEsV0FBVztBQUNuQyxVQUFRO0FBQUEsU0FDRCxZQUFZO0FBQ2YsYUFBTyxHQUFHO0FBQUEsU0FDUCxZQUFZO0FBQ2YsYUFBTyxHQUFHO0FBQUEsU0FDUCxZQUFZO0FBQ2YsYUFBTyxHQUFHO0FBQUEsU0FDUCxZQUFZO0FBQ2YsYUFBTyxHQUFHO0FBQUEsU0FDUCxZQUFZO0FBQ2YsYUFBTyxHQUFHO0FBQUEsU0FDUCxZQUFZO0FBQ2YsYUFBTyxHQUFHO0FBQUE7QUFBQTtBQW1CVDtBQUFBLE1BQU0sUUFBa0Q7QUFBQSxFQUNyRCxTQUFpQjtBQUFBLEVBQ2pCLFVBQWtCO0FBQUEsRUFDbEIsaUJBQXlCO0FBQUEsRUFDekIsV0FBZ0M7QUFBQSxFQUV4QyxVQUFVLENBQUMsT0FBZSxRQUFzQjtBQUM5QyxRQUFJLFFBQVE7QUFBRyxZQUFNLElBQUksTUFBTSxrQ0FBa0MsT0FBTztBQUN4RSxRQUFJLFNBQVM7QUFDWCxZQUFNLElBQUksTUFBTSxtQ0FBbUMsUUFBUTtBQUM3RCxVQUFNLEtBQUssYUFBYSxXQUFXO0FBQ25DLFNBQUssV0FBVyxHQUFHLGNBQWM7QUFDakMsU0FBSyxTQUFTO0FBQ2QsU0FBSyxVQUFVO0FBQ2YsU0FBSyxpQkFBaUIsS0FBSyxTQUFTLEtBQUssVUFBVTtBQUFBO0FBQUEsRUFHckQsT0FBTyxHQUFHO0FBQ1IsVUFBTSxLQUFLLGFBQWEsV0FBVztBQUNuQyxPQUFHLGNBQWMsS0FBSyxRQUFRO0FBQUE7QUFBQSxFQUdoQyxPQUFPLEdBQVM7QUFDZCxTQUFLLEtBQUs7QUFBVSxZQUFNLElBQUksTUFBTSwyQkFBMkI7QUFDL0QsVUFBTSxLQUFLLGFBQWEsV0FBVztBQUNuQyxPQUFHLFlBQVksR0FBRyxrQkFBa0IsS0FBSyxRQUFRO0FBQUE7QUFBQSxFQUduRCxJQUFJLENBQUMsWUFBa0Q7QUFDckQsU0FBSyxRQUFRO0FBRWIsZUFBVyxJQUFJO0FBRWYsWUFBUSxPQUFPO0FBQUE7QUFBQSxTQUdWLE1BQU0sR0FBUztBQUNwQixVQUFNLEtBQUssYUFBYSxXQUFXO0FBRW5DLE9BQUcsWUFBWSxHQUFHLGtCQUFrQixJQUFJO0FBQUE7QUFBQSxFQUcxQyxjQUFjLENBQUMsUUFBcUIsVUFBNEI7QUFDOUQsU0FBSyxLQUFLO0FBQVUsWUFBTSxJQUFJLE1BQU0sMkJBQTJCO0FBQy9ELFFBQUksU0FBUyxTQUFTLEtBQUs7QUFDekIsWUFBTSxJQUFJLE1BQ1Isc0RBQXNELFNBQVMsUUFDakU7QUFFRixVQUFNLEtBQUssYUFBYSxXQUFXO0FBRW5DLFVBQU0sUUFBUTtBQUNkLFVBQU0saUJBQWlCLEdBQUc7QUFDMUIsVUFBTSxTQUFTO0FBQ2YsVUFBTSxZQUFZLEdBQUc7QUFDckIsVUFBTSxVQUFVLEdBQUc7QUFFbkIsT0FBRyxXQUNELGVBQWUsTUFBTSxHQUNyQixPQUNBLGdCQUNBLEtBQUssUUFDTCxLQUFLLFNBQ0wsUUFDQSxXQUNBLFNBQ0EsUUFDRjtBQUFBO0FBQUEsRUFHRixRQUFRLEdBQVM7QUFDZixVQUFNLEtBQUssYUFBYSxXQUFXO0FBRW5DLFVBQU0sUUFBUTtBQUNkLFVBQU0saUJBQWlCLEdBQUc7QUFDMUIsVUFBTSxTQUFTO0FBQ2YsVUFBTSxZQUFZLEdBQUc7QUFDckIsVUFBTSxVQUFVLEdBQUc7QUFFbkIsVUFBTSxTQUFTLElBQUksV0FBVyxLQUFLLFNBQVMsS0FBSyxVQUFVLENBQUM7QUFFNUQ7QUFBQSxNQUNFLFlBQVk7QUFBQSxNQUNaLFlBQVk7QUFBQSxNQUNaLFlBQVk7QUFBQSxNQUNaLFlBQVk7QUFBQSxNQUNaLFlBQVk7QUFBQSxNQUNaLFlBQVk7QUFBQSxJQUNkLEVBQUUsUUFBUSxDQUFDLFNBQVM7QUFDbEIsU0FBRyxXQUNELGVBQWUsSUFBSSxHQUNuQixPQUNBLGdCQUNBLEtBQUssUUFDTCxLQUFLLFNBQ0wsUUFDQSxXQUNBLFNBQ0EsTUFDRjtBQUFBLEtBQ0Q7QUFBQTtBQUFBLEVBR0gsUUFBUSxHQUFHO0FBQ1QsVUFBTSxLQUFLLGFBQWEsV0FBVztBQUVuQyxPQUFHLGVBQWUsR0FBRyxnQkFBZ0I7QUFDckMsT0FBRyxjQUNELEdBQUcsa0JBQ0gsR0FBRyxvQkFDSCxHQUFHLG9CQUNMO0FBQUE7QUFBQSxFQUdGLFFBQVEsR0FBVztBQUNqQixTQUFLLEtBQUs7QUFBVSxZQUFNLElBQUksTUFBTSwyQkFBMkI7QUFFL0QsV0FBTyxLQUFLO0FBQUE7QUFBQSxFQUdkLFNBQVMsR0FBVztBQUNsQixTQUFLLEtBQUs7QUFBVSxZQUFNLElBQUksTUFBTSwyQkFBMkI7QUFFL0QsV0FBTyxLQUFLO0FBQUE7QUFBQSxFQUdkLFlBQVksR0FBRztBQUNiLFNBQUssS0FBSztBQUFVLFlBQU0sSUFBSSxNQUFNLHlCQUF5QjtBQUc3RCxXQUFPLEtBQUs7QUFBQTtBQUVoQjs7QUNsS08sTUFBTSxZQUF5QztBQUFBLEVBQzVDLFdBQWdDO0FBQUEsRUFFaEM7QUFBQSxFQUdSLFVBQVUsQ0FBQyxNQUF5QjtBQUNsQyxRQUFJLEtBQUssVUFBVTtBQUNqQixZQUFNLElBQUksTUFBTSxrQ0FBa0M7QUFBQSxJQUNwRDtBQUVBLFVBQU0sS0FBSyxhQUFhLFdBQVc7QUFFbkMsU0FBSyxXQUFXLEdBQUcsY0FBYztBQUNqQyxTQUFLLEtBQUssVUFBVTtBQUNsQixZQUFNLElBQUksTUFBTSxtQ0FBbUM7QUFBQSxJQUNyRDtBQUVBLE9BQUcsWUFBWSxHQUFHLFlBQVksS0FBSyxRQUFRO0FBRzNDLE9BQUcsY0FBYyxHQUFHLFlBQVksR0FBRyxnQkFBZ0IsR0FBRyxhQUFhO0FBQ25FLE9BQUcsY0FBYyxHQUFHLFlBQVksR0FBRyxnQkFBZ0IsR0FBRyxhQUFhO0FBQ25FLE9BQUcsY0FBYyxHQUFHLFlBQVksR0FBRyxvQkFBb0IsR0FBRyxPQUFPO0FBQ2pFLE9BQUcsY0FBYyxHQUFHLFlBQVksR0FBRyxvQkFBb0IsR0FBRyxPQUFPO0FBR2pFLFNBQUssU0FBUyxJQUFJO0FBQUE7QUFBQSxFQUdwQixPQUFPLEdBQUc7QUFDUixVQUFNLEtBQUssYUFBYSxXQUFXO0FBQ25DLE9BQUcsY0FBYyxLQUFLLFFBQVE7QUFBQTtBQUFBLEVBSWhDLFFBQVEsQ0FBQyxNQUF5QjtBQUNoQyxTQUFLLEtBQUssVUFBVTtBQUNsQixZQUFNLElBQUksTUFBTSw4QkFBOEI7QUFBQSxJQUNoRDtBQUNBLFVBQU0sV0FBVyxNQUFNLFFBQVEsSUFBSSxJQUFJLEtBQUssU0FBUztBQUNyRCxRQUFJLFlBQVksR0FBRztBQUNqQixZQUFNLElBQUksTUFBTSxpQ0FBaUM7QUFBQSxJQUNuRDtBQUNBLFFBQUksV0FBVyxNQUFNO0FBQ25CLFlBQU0sSUFBSSxNQUFNLDRDQUE0QyxXQUFXO0FBQUEsSUFDekU7QUFFQSxVQUFNLEtBQUssYUFBYSxXQUFXO0FBRW5DLE9BQUcsWUFBWSxHQUFHLFlBQVksS0FBSyxRQUFRO0FBRzNDLFFBQUksTUFBTSxRQUFRLElBQUksR0FBRztBQUV2QixXQUFLLFVBQVUsSUFBSSxhQUFhLElBQUk7QUFBQSxJQUN0QyxPQUFPO0FBRUwsV0FBSyxVQUFVLElBQUksYUFBYSxJQUFJO0FBQUE7QUFhdEMsVUFBTSxRQUFRO0FBQ2QsVUFBTSxpQkFBaUIsR0FBRztBQUMxQixVQUFNLFFBQVE7QUFDZCxVQUFNLFNBQVM7QUFDZixVQUFNLFNBQVM7QUFDZixVQUFNLFNBQVMsR0FBRztBQUNsQixVQUFNLE9BQU8sR0FBRztBQUNoQixPQUFHLFdBQ0QsR0FBRyxZQUNILE9BQ0EsZ0JBQ0EsT0FDQSxRQUNBLFFBQ0EsUUFDQSxNQUNBLEtBQUssT0FDUDtBQUFBO0FBQUEsRUFHRixNQUFNLENBQUMsT0FBZSxNQUFnQjtBQUNwQyxTQUFLLEtBQUssVUFBVTtBQUNsQixZQUFNLElBQUksTUFBTSw4QkFBOEI7QUFBQSxJQUNoRDtBQUNBLFNBQUssS0FBSyxTQUFTO0FBQ2pCLFlBQU0sSUFBSSxNQUFNLGtEQUFrRDtBQUFBLElBQ3BFO0FBQ0EsUUFBSSxRQUFRLEtBQUssU0FBUyxLQUFLLFFBQVEsUUFBUTtBQUM3QyxZQUFNLElBQUksTUFDUixrREFBa0Qsa0JBQWtCLEtBQUssZ0JBQWdCLEtBQUssUUFBUSxTQUN4RztBQUFBLElBQ0Y7QUFFQSxVQUFNLEtBQUssYUFBYSxXQUFXO0FBRW5DLE9BQUcsWUFBWSxHQUFHLFlBQVksS0FBSyxRQUFRO0FBSTNDLGFBQVMsS0FBSyxFQUFHLEtBQUssS0FBSyxVQUFVLElBQUk7QUFDdkMsV0FBSyxRQUFRLE1BQU0sS0FBSztBQUFBLElBQzFCO0FBRUEsVUFBTSxRQUFRO0FBRWQsVUFBTSxRQUFRLEtBQUs7QUFDbkIsVUFBTSxTQUFTO0FBRWYsVUFBTSxTQUFTLEdBQUc7QUFDbEIsVUFBTSxPQUFPLEdBQUc7QUFFaEIsVUFBTSxVQUFVO0FBQ2hCLFVBQU0sVUFBVTtBQUNoQixVQUFNLFlBQVk7QUFFbEIsT0FBRyxjQUNELEdBQUcsWUFDSCxPQUNBLFNBQ0EsU0FDQSxPQUNBLFFBQ0EsUUFDQSxNQUNBLEtBQUssU0FDTCxTQUNGO0FBQUE7QUFBQSxFQUdGLE9BQU8sR0FBRztBQUNSLFNBQUssS0FBSyxVQUFVO0FBQ2xCLFlBQU0sSUFBSSxNQUFNLDhCQUE4QjtBQUFBLElBQ2hEO0FBRUEsVUFBTSxLQUFLLGFBQWEsV0FBVztBQUVuQyxPQUFHLFlBQVksR0FBRyxZQUFZLEtBQUssUUFBUTtBQUFBO0FBQUEsRUFHN0MsT0FBTyxDQUFDLFlBQXNEO0FBQzVELFNBQUssUUFBUTtBQUNiLGVBQVcsSUFBSTtBQUFBO0FBQUEsRUFHakIsSUFBSSxDQUFDLFlBQXNEO0FBQ3pELFNBQUssUUFBUSxVQUFVO0FBQ3ZCLGdCQUFZLE9BQU87QUFBQTtBQUFBLFNBR2QsTUFBTSxHQUFTO0FBQ3BCLFVBQU0sS0FBSyxhQUFhLFdBQVc7QUFFbkMsT0FBRyxZQUFZLEdBQUcsWUFBWSxJQUFJO0FBQUE7QUFFdEM7O0FDcktPLE1BQU0sZ0JBQWlEO0FBQUEsRUFDcEQsV0FBZ0M7QUFBQSxFQUVoQztBQUFBLEVBR1IsVUFBVSxDQUFDLE9BQTJDLENBQUMsR0FBRztBQUN4RCxRQUFJLEtBQUssVUFBVTtBQUNqQixZQUFNLElBQUksTUFBTSxrQ0FBa0M7QUFBQSxJQUNwRDtBQUVBLFVBQU0sS0FBSyxhQUFhLFdBQVc7QUFFbkMsU0FBSyxXQUFXLEdBQUcsY0FBYztBQUNqQyxTQUFLLEtBQUssVUFBVTtBQUNsQixZQUFNLElBQUksTUFBTSxtQ0FBbUM7QUFBQSxJQUNyRDtBQUVBLE9BQUcsWUFBWSxHQUFHLFlBQVksS0FBSyxRQUFRO0FBRzNDLE9BQUcsY0FBYyxHQUFHLFlBQVksR0FBRyxnQkFBZ0IsR0FBRyxhQUFhO0FBQ25FLE9BQUcsY0FBYyxHQUFHLFlBQVksR0FBRyxnQkFBZ0IsR0FBRyxhQUFhO0FBQ25FLE9BQUcsY0FBYyxHQUFHLFlBQVksR0FBRyxvQkFBb0IsR0FBRyxPQUFPO0FBQ2pFLE9BQUcsY0FBYyxHQUFHLFlBQVksR0FBRyxvQkFBb0IsR0FBRyxPQUFPO0FBR2pFLFNBQUssU0FBUyxJQUFJO0FBQUE7QUFBQSxFQUdwQixPQUFPLEdBQUc7QUFDUixVQUFNLEtBQUssYUFBYSxXQUFXO0FBQ25DLE9BQUcsY0FBYyxLQUFLLFFBQVE7QUFBQTtBQUFBLEVBSWhDLFFBQVEsQ0FBQyxNQUEwQztBQUNqRCxTQUFLLEtBQUssVUFBVTtBQUNsQixZQUFNLElBQUksTUFBTSw4QkFBOEI7QUFBQSxJQUNoRDtBQUNBLFFBQUksS0FBSyxVQUFVLEdBQUc7QUFDcEIsWUFBTSxJQUFJLE1BQU0saUNBQWlDO0FBQUEsSUFDbkQ7QUFFQSxVQUFNLEtBQUssYUFBYSxXQUFXO0FBRW5DLE9BQUcsWUFBWSxHQUFHLFlBQVksS0FBSyxRQUFRO0FBRTNDLFNBQUssVUFBVSxJQUFJLFdBQVcsS0FBSyxLQUFLLENBQUM7QUFZekMsVUFBTSxRQUFRO0FBQ2QsVUFBTSxpQkFBaUIsR0FBRztBQUMxQixVQUFNLFFBQVEsS0FBSztBQUNuQixVQUFNLFNBQVM7QUFDZixVQUFNLFNBQVM7QUFDZixVQUFNLFNBQVMsR0FBRztBQUNsQixVQUFNLE9BQU8sR0FBRztBQUNoQixPQUFHLFdBQ0QsR0FBRyxZQUNILE9BQ0EsZ0JBQ0EsT0FDQSxRQUNBLFFBQ0EsUUFDQSxNQUNBLEtBQUssT0FDUDtBQUFBO0FBQUEsRUFHRixNQUFNLENBQUMsT0FBZSxNQUEwQztBQUM5RCxTQUFLLEtBQUssVUFBVTtBQUNsQixZQUFNLElBQUksTUFBTSw4QkFBOEI7QUFBQSxJQUNoRDtBQUNBLFNBQUssS0FBSyxTQUFTO0FBQ2pCLFlBQU0sSUFBSSxNQUFNLGtEQUFrRDtBQUFBLElBQ3BFO0FBQ0EsUUFBSSxRQUFRLEtBQUssU0FBUyxLQUFLLFFBQVEsUUFBUTtBQUM3QyxZQUFNLElBQUksTUFDUixrREFBa0Qsa0JBQWtCLEtBQUssZ0JBQWdCLEtBQUssUUFBUSxTQUN4RztBQUFBLElBQ0Y7QUFFQSxVQUFNLEtBQUssYUFBYSxXQUFXO0FBRW5DLE9BQUcsWUFBWSxHQUFHLFlBQVksS0FBSyxRQUFRO0FBSTNDLGFBQVMsS0FBSyxFQUFHLEtBQUssS0FBSyxVQUFVLElBQUk7QUFDdkMsV0FBSyxRQUFRLEtBQUssSUFBSSxLQUFLLEtBQUssSUFBSTtBQUNwQyxXQUFLLFFBQVEsS0FBSyxJQUFJLEtBQUssS0FBSyxJQUFJO0FBQ3BDLFdBQUssUUFBUSxLQUFLLElBQUksS0FBSyxLQUFLLElBQUk7QUFDcEMsV0FBSyxRQUFRLEtBQUssSUFBSSxLQUFLLEtBQUssSUFBSTtBQUFBLElBQ3RDO0FBRUEsVUFBTSxRQUFRO0FBQ2QsVUFBTSxRQUFRLEtBQUs7QUFDbkIsVUFBTSxTQUFTO0FBQ2YsVUFBTSxTQUFTLEdBQUc7QUFDbEIsVUFBTSxPQUFPLEdBQUc7QUFFaEIsVUFBTSxVQUFVO0FBQ2hCLFVBQU0sVUFBVTtBQUNoQixVQUFNLFlBQVk7QUFFbEIsT0FBRyxjQUNELEdBQUcsWUFDSCxPQUNBLFNBQ0EsU0FDQSxPQUNBLFFBQ0EsUUFDQSxNQUNBLEtBQUssU0FDTCxTQUNGO0FBQUE7QUFBQSxFQUdGLE9BQU8sR0FBRztBQUNSLFNBQUssS0FBSyxVQUFVO0FBQ2xCLFlBQU0sSUFBSSxNQUFNLDhCQUE4QjtBQUFBLElBQ2hEO0FBRUEsVUFBTSxLQUFLLGFBQWEsV0FBVztBQUVuQyxPQUFHLFlBQVksR0FBRyxZQUFZLEtBQUssUUFBUTtBQUFBO0FBQUEsRUFHN0MsT0FBTyxDQUFDLFlBQTBEO0FBQ2hFLFNBQUssUUFBUTtBQUNiLGVBQVcsSUFBSTtBQUFBO0FBQUEsRUFHakIsSUFBSSxDQUFDLFlBQTBEO0FBQzdELFNBQUssUUFBUSxVQUFVO0FBQ3ZCLG9CQUFnQixPQUFPO0FBQUE7QUFBQSxTQUdsQixNQUFNLEdBQVM7QUFDcEIsVUFBTSxLQUFLLGFBQWEsV0FBVztBQUVuQyxPQUFHLFlBQVksR0FBRyxZQUFZLElBQUk7QUFBQTtBQUV0Qzs7QUN2S08sSUFBTSxhQUFhLE1BQU07QUFDOUIsUUFBTSxLQUFLLGFBQWEsV0FBVztBQUNuQyxRQUFNLFVBQVUsR0FBRyxTQUFTO0FBRTVCLFVBQVE7QUFBQSxTQUdELEdBQUc7QUFDTixZQUFNLElBQUksTUFDUiwyS0FDRjtBQUFBLFNBQ0csR0FBRztBQUNOLFlBQU0sSUFBSSxNQUNSLGlKQUNGO0FBQUEsU0FDRyxHQUFHO0FBQ04sWUFBTSxJQUFJLE1BQ1IsOEtBQ0Y7QUFBQSxTQUNHLEdBQUc7QUFDTixZQUFNLElBQUksTUFDUixxS0FDRjtBQUFBLFNBQ0csR0FBRztBQUNOLFlBQU0sSUFBSSxNQUNSLG9MQUNGO0FBQUEsU0FDRyxHQUFHO0FBQ04sWUFBTSxJQUFJLE1BQ1IseUxBQ0Y7QUFBQTtBQUFBOztBQzlCQyxNQUFNLFVBQVU7QUFBQSxFQUNiO0FBQUEsRUFFUixXQUFXLEdBQUc7QUFBQTtBQUFBLEVBRWQsT0FBTyxHQUFTO0FBQ2QsU0FBSyxLQUFLLE9BQU87QUFFZjtBQUFBLElBQ0Y7QUFDQSxVQUFNLEtBQUssYUFBYSxXQUFXO0FBQ25DLE9BQUcsV0FBVyxLQUFLLEtBQUs7QUFDeEIsU0FBSyxRQUFRO0FBQUE7QUFBQSxFQUdmLFNBQVMsR0FBWTtBQUNuQixXQUFPLEtBQUssVUFBVTtBQUFBO0FBQUEsRUFHeEIsS0FBSyxHQUFTO0FBQ1osUUFBSSxLQUFLLE9BQU87QUFFZCxXQUFLLFFBQVE7QUFBQSxJQUNmO0FBQ0EsVUFBTSxLQUFLLGFBQWEsV0FBVztBQUNuQyxVQUFNLFVBQVUsR0FBRyxVQUFVLEdBQUcsNEJBQTRCLENBQUM7QUFDN0QsUUFBSSxZQUFZLE1BQU07QUFDcEIsWUFBTSxJQUFJLE1BQU0sZ0NBQWdDO0FBQUEsSUFDbEQ7QUFDQSxTQUFLLFFBQVE7QUFDYixPQUFHLE1BQU07QUFDVCxPQUFHLE9BQU87QUFBQTtBQUFBLEVBR1osVUFBVSxHQUFZO0FBQ3BCLFNBQUssS0FBSyxPQUFPO0FBQ2YsWUFBTSxJQUFJLE1BQU0sbUJBQW1CO0FBQUEsSUFDckM7QUFFQSxVQUFNLEtBQUssYUFBYSxXQUFXO0FBQ25DLFVBQU0sV0FBVyxHQUFHLGlCQUFpQixLQUFLLE9BQU8sR0FBRyxXQUFXO0FBQy9ELFdBQU8sYUFBYSxHQUFHO0FBQUE7QUFBQSxFQUd6QixJQUFJLENBQUMsZ0JBQThDO0FBQ2pELFNBQUssS0FBSyxPQUFPO0FBQ2YsWUFBTSxJQUFJLE1BQU0sbUJBQW1CO0FBQUEsSUFDckM7QUFDQSxVQUFNLEtBQUssYUFBYSxXQUFXO0FBRW5DLFVBQU0sV0FBVztBQUNqQixVQUFNLFNBQVMsR0FBRyxlQUFlLEtBQUssT0FBTyxVQUFVLGNBQWM7QUFFckUsWUFBUTtBQUFBLFdBQ0QsR0FBRztBQUVOLGVBQU87QUFBQSxXQUNKLEdBQUc7QUFFTixnQkFBUSxLQUFLLHFDQUFxQztBQUVsRCxhQUFLLFFBQVE7QUFDYixlQUFPO0FBQUEsV0FDSixHQUFHO0FBQUEsV0FDSCxHQUFHO0FBQUE7QUFFTixhQUFLLFFBQVE7QUFDYixlQUFPO0FBQUE7QUFBQTtBQUdmOztBQ2hETyxNQUFNLFlBQThEO0FBQUEsRUFDakU7QUFBQSxFQUVSLFdBQVcsR0FBRztBQUNaLFVBQU0sS0FBSyxhQUFhLFdBQVc7QUFFbkMsVUFBTSxTQUFTLEdBQUcsa0JBQWtCO0FBQ3BDLFFBQUksV0FBVztBQUFNLFlBQU0sSUFBSSxNQUFNLDBCQUEwQjtBQUMvRCxTQUFLLGVBQWU7QUFBQTtBQUFBLEVBR3RCLE9BQU8sR0FBRztBQUNSLFVBQU0sS0FBSyxhQUFhLFdBQVc7QUFDbkMsT0FBRyxrQkFBa0IsS0FBSyxZQUFZO0FBQUE7QUFBQSxFQUd4QyxPQUFPLEdBQUc7QUFDUixVQUFNLEtBQUssYUFBYSxXQUFXO0FBQ25DLE9BQUcsZ0JBQWdCLEdBQUcsYUFBYSxLQUFLLFlBQVk7QUFBQTtBQUFBLEVBR3RELElBQUksQ0FBQyxZQUFzRDtBQUN6RCxTQUFLLFFBQVE7QUFFYixlQUFXLElBQUk7QUFFZixnQkFBWSxPQUFPO0FBQUE7QUFBQSxTQUdkLE1BQU0sR0FBRztBQUNkLFVBQU0sS0FBSyxhQUFhLFdBQVc7QUFFbkMsT0FBRyxnQkFBZ0IsR0FBRyxhQUFhLElBQUk7QUFBQTtBQUFBLEVBR3pDLGFBQWEsQ0FBQyxTQUF3QjtBQUNwQyxVQUFNLEtBQUssYUFBYSxXQUFXO0FBTW5DLFVBQU0sY0FBYztBQUVwQixPQUFHLHFCQUNELEdBQUcsYUFDSCxHQUFHLG1CQUNILEdBQUcsWUFDSCxRQUFRLGFBQWEsR0FDckIsV0FDRjtBQUFBO0FBQUEsRUFHRixrQkFBa0IsQ0FBQyxTQUF3QjtBQUN6QyxVQUFNLEtBQUssYUFBYSxXQUFXO0FBTW5DLFVBQU0sY0FBYztBQUVwQixPQUFHLHFCQUNELEdBQUcsYUFDSCxHQUFHLGtCQUNILEdBQUcsWUFDSCxRQUFRLGFBQWEsR0FDckIsV0FDRjtBQUFBO0FBQUEsRUFHRixrQkFBa0IsQ0FBQyxTQUFtQztBQUNwRCxVQUFNLEtBQUssYUFBYSxXQUFXO0FBRW5DLE9BQUcsd0JBQ0QsR0FBRyxhQUNILEdBQUcsa0JBQ0gsR0FBRyxjQUNILFFBQVEsYUFBYSxDQUN2QjtBQUFBO0FBQUEsRUFHRixhQUFhLENBQUMsU0FBd0IsTUFBbUI7QUFDdkQsVUFBTSxLQUFLLGFBQWEsV0FBVztBQU1uQyxVQUFNLGNBQWM7QUFFcEIsT0FBRyxxQkFDRCxHQUFHLGFBQ0gsR0FBRyxtQkFDSCxlQUFlLElBQUksR0FDbkIsUUFBUSxhQUFhLEdBQ3JCLFdBQ0Y7QUFBQTtBQUFBLEVBR0YsU0FBUyxDQUNQLEdBQ0EsR0FDQSxPQUNBLFFBQ0EsUUFDTTtBQUNOLFVBQU0sS0FBSyxhQUFhLFdBQVc7QUFDbkMsT0FBRyxXQUFXLEdBQUcsR0FBRyxPQUFPLFFBQVEsR0FBRyxNQUFNLEdBQUcsZUFBZSxNQUFNO0FBQUE7QUFFeEU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ25JTyxJQUFNLGdCQUFnQjtBQUV0QixJQUFLO0FBQUwsVUFBSyxnQkFBTDtBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBLEdBTlU7QUFTWixJQUFNLGtCQUFrQixDQUFDLFdBQTBCO0FBQ2pELFVBQVE7QUFBQSxTQUNELGNBQWM7QUFDakIsYUFBTztBQUFBLFNBQ0osY0FBYztBQUNqQixhQUFPO0FBQUEsU0FDSixjQUFjO0FBQ2pCLGFBQU87QUFBQSxTQUNKLGNBQWM7QUFDakIsYUFBTztBQUFBLFNBQ0osY0FBYztBQUNqQixhQUFPO0FBQUEsU0FDSixjQUFjO0FBQ2pCLGFBQU87QUFBQTtBQUFBO0FBSU4sSUFBSztBQUFMLFVBQUssZ0JBQUw7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQSxHQU5VO0FBMkJaLElBQU0scUJBQXFCLENBQ3pCLGFBQzJCO0FBQzNCLE1BQUksb0JBQW9CLGNBQWM7QUFDcEMsV0FBTztBQUFBLEVBQ1Q7QUFDQSxTQUFPLElBQUksYUFBYSxRQUFRO0FBQUE7QUFTbEMsSUFBTSxrQkFBa0IsQ0FBQyxXQUErQztBQUN0RSxRQUFNLEtBQUssYUFBYSxXQUFXO0FBRW5DLE1BQUksV0FBVyxXQUFXO0FBQ3hCLFdBQU8sR0FBRztBQUFBLEVBQ1o7QUFDQSxNQUFJLFdBQVcsYUFBYTtBQUMxQixXQUFPLEdBQUc7QUFBQSxFQUNaO0FBQ0EsU0FBTyxHQUFHO0FBQUE7QUFHTDtBQUFBLE1BQU0sU0FBUztBQUFBLEVBQ1o7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBLGtCQUEwQjtBQUFBLEVBQzFCLGtCQUEwQjtBQUFBLEVBQzFCLGlCQUF5QjtBQUFBLEVBQ3pCLGVBQXdCO0FBQUEsRUFFaEMsV0FBVyxDQUFDLFFBQXdCLEtBQXlCO0FBQzNELFVBQU0sS0FBSyxhQUFhLFdBQVc7QUFFbkMsUUFBSSxJQUFJLEtBQUssV0FBVyxHQUFHO0FBQ3pCLFlBQU0sSUFBSSxNQUFNLHNCQUFzQjtBQUFBLElBQ3hDO0FBRUEsZUFBVyxPQUFPLElBQUksTUFBTTtBQUMxQixVQUFJLElBQUksTUFBTSxXQUFXLEdBQUc7QUFDMUIsY0FBTSxJQUFJLE1BQU0sZ0NBQWdDO0FBQUEsTUFDbEQ7QUFFQSxpQkFBVyxRQUFRLElBQUksT0FBTztBQUM1QixhQUFLLE9BQU8sYUFBYSxLQUFLLElBQUksR0FBRztBQUNuQyxnQkFBTSxJQUFJLE1BQU0sOEJBQThCLEtBQUssT0FBTztBQUFBLFFBQzVEO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFFQSxTQUFLLE9BQU87QUFFWixZQUFRLElBQUk7QUFBQSxXQUNMLGNBQWM7QUFDakIsYUFBSyxpQkFBaUIsR0FBRztBQUN6QjtBQUFBLFdBQ0csY0FBYztBQUNqQixhQUFLLGlCQUFpQixHQUFHO0FBQ3pCO0FBQUEsV0FDRyxjQUFjO0FBQ2pCLGFBQUssaUJBQWlCLEdBQUc7QUFDekI7QUFBQSxXQUNHLGNBQWM7QUFDakIsYUFBSyxpQkFBaUIsR0FBRztBQUN6QjtBQUFBLFdBQ0csY0FBYztBQUNqQixhQUFLLGlCQUFpQixHQUFHO0FBQ3pCO0FBQUEsV0FDRyxjQUFjO0FBQ2pCLGFBQUssaUJBQWlCLEdBQUc7QUFDekI7QUFBQTtBQUVBLGNBQU0sSUFBSSxNQUFNLDBCQUEwQjtBQUFBO0FBRzlDLFVBQU0sU0FBUyxHQUFHLGtCQUFrQjtBQUNwQyxTQUFLLFFBQVE7QUFDWCxZQUFNLElBQUksTUFBTSwwQkFBMEI7QUFBQSxJQUM1QztBQUVBLFNBQUssT0FBTztBQUNaLE9BQUcsZ0JBQWdCLEtBQUssSUFBSTtBQUk1QixTQUFLLFFBQVEsQ0FBQztBQUNkLGVBQVcsVUFBVSxLQUFLLEtBQUssTUFBTTtBQUNuQyxZQUFNLFNBQVMsR0FBRyxhQUFhO0FBQy9CLFdBQUssUUFBUTtBQUNYLGNBQU0sSUFBSSxNQUFNLDBCQUEwQjtBQUFBLE1BQzVDO0FBRUEsV0FBSyxNQUFNLEtBQUs7QUFBQSxRQUNkLFFBQVE7QUFBQSxRQUNSLFNBQVM7QUFBQSxRQUNULE1BQU0sT0FBTyxRQUFRO0FBQUEsTUFDdkIsQ0FBQztBQUVELFNBQUcsV0FBVyxHQUFHLGNBQWMsTUFBTTtBQUVyQyxVQUFJLFNBQVMsT0FBTyxVQUFVO0FBQzlCLFdBQUssUUFBUTtBQUVYLG1CQUFXLFFBQVEsT0FBTyxPQUFPO0FBQy9CLGtCQUFRLEtBQUs7QUFBQSxpQkFDTixjQUFjO0FBQ2pCLHdCQUFVO0FBQ1Y7QUFBQSxpQkFDRyxjQUFjO0FBQ2pCLHdCQUFVO0FBQ1Y7QUFBQSxpQkFDRyxjQUFjO0FBQ2pCLHdCQUFVO0FBQ1Y7QUFBQSxpQkFDRyxjQUFjO0FBQ2pCLHdCQUFVO0FBQ1Y7QUFBQSxpQkFDRyxjQUFjO0FBQ2pCLHdCQUFVO0FBQ1Y7QUFBQSxpQkFDRyxjQUFjO0FBQ2pCLHdCQUFVO0FBQ1Y7QUFBQTtBQUFBLFFBRU47QUFDQSxrQkFBVTtBQUFBLE1BQ1o7QUFFQSxpQkFBVyxRQUFRLE9BQU8sT0FBTztBQUMvQixZQUFJLFVBQVU7QUFDZCxZQUFJLFlBQVk7QUFDaEIsZ0JBQVEsS0FBSztBQUFBLGVBQ04sY0FBYztBQUNqQixzQkFBVTtBQUNWLHdCQUFZO0FBQ1o7QUFBQSxlQUNHLGNBQWM7QUFDakIsc0JBQVU7QUFDVix3QkFBWTtBQUNaO0FBQUEsZUFDRyxjQUFjO0FBQ2pCLHNCQUFVO0FBQ1Ysd0JBQVk7QUFDWjtBQUFBLGVBQ0csY0FBYztBQUNqQixzQkFBVTtBQUNWLHdCQUFZO0FBQ1o7QUFBQSxlQUNHLGNBQWM7QUFDakIsc0JBQVU7QUFDVix3QkFBWTtBQUNaO0FBQUEsZUFDRyxjQUFjO0FBQ2pCLHNCQUFVO0FBQ1Ysd0JBQVk7QUFDWjtBQUFBO0FBR0osY0FBTSxlQUFlLE9BQU8sYUFBYSxLQUFLLElBQUk7QUFJbEQsaUJBQVMsS0FBSyxFQUFHLEtBQUssYUFBYSxJQUFJO0FBQ3JDLGdCQUFNLFNBQVMsZUFBZTtBQUM5QixnQkFBTSxZQUFZLEtBQUssUUFBUSxLQUFLLFdBQVc7QUFFL0MsYUFBRyx3QkFBd0IsTUFBTTtBQUNqQyxhQUFHLG9CQUNELFFBQ0EsU0FDQSxHQUFHLE9BQ0gsT0FDQSxRQUNBLFFBQ0Y7QUFFQSxjQUFJLE9BQU8sY0FBYyxNQUFNO0FBQzdCLGVBQUcsb0JBQW9CLFFBQVEsQ0FBQztBQUNoQyxpQkFBSyxlQUFlO0FBQUEsVUFDdEI7QUFBQSxRQUNGO0FBQUEsTUFDRjtBQUFBLElBQ0Y7QUFJQSxPQUFHLGdCQUFnQixJQUFJO0FBQUE7QUFBQSxFQUd6QixPQUFPLEdBQUc7QUFDUixVQUFNLEtBQUssYUFBYSxXQUFXO0FBRW5DLGVBQVcsT0FBTyxLQUFLLE9BQU87QUFDNUIsU0FBRyxhQUFhLElBQUksTUFBTTtBQUFBLElBQzVCO0FBQ0EsU0FBSyxNQUFNLFNBQVM7QUFFcEIsT0FBRyxrQkFBa0IsS0FBSyxJQUFJO0FBQUE7QUFBQSxFQUdoQyxhQUFhLENBQUMsU0FBaUIsUUFBZ0I7QUFDN0MsUUFBSSxVQUFVLEtBQUssV0FBVyxLQUFLLE1BQU0sUUFBUTtBQUMvQyxZQUFNLElBQUksTUFBTSwwQ0FBMEMsVUFBVTtBQUFBLElBQ3RFO0FBRUEsUUFBSSxVQUFVLEdBQUc7QUFDZixZQUFNLElBQUksTUFBTSwyQkFBMkIsU0FBUztBQUFBLElBQ3REO0FBRUEsVUFBTSxVQUFVLEtBQUssTUFBTTtBQUUzQixRQUFJLFNBQVMsUUFBUSxTQUFTO0FBQzVCO0FBQUEsSUFDRjtBQUVBLFlBQVEsVUFBVTtBQUVsQixVQUFNLEtBQUssYUFBYSxXQUFXO0FBRW5DLE9BQUcsV0FBVyxHQUFHLGNBQWMsUUFBUSxNQUFNO0FBQzdDLE9BQUcsV0FBVyxHQUFHLGNBQWMsUUFBUSxnQkFBZ0IsUUFBUSxJQUFJLENBQUM7QUFDcEUsT0FBRyxXQUFXLEdBQUcsY0FBYyxJQUFJO0FBQUE7QUFBQSxFQUdyQyxrQkFBa0IsQ0FBQyxPQUFlLFFBQWdCO0FBQ2hELFNBQUssY0FBYyxPQUFPLFNBQVMsQ0FBQztBQUFBO0FBQUEsRUFHdEMsY0FBYyxDQUNaLFNBQ0EsWUFDQSxRQUNBO0FBQ0EsUUFBSSxVQUFVLEtBQUssV0FBVyxLQUFLLE1BQU0sUUFBUTtBQUMvQyxZQUFNLElBQUksTUFDUiwwQ0FBMEMsd0JBQXdCLEtBQUssTUFBTSxTQUMvRTtBQUFBLElBQ0Y7QUFFQSxRQUFJLFVBQVUsR0FBRztBQUNmLFlBQU0sSUFBSSxNQUFNLDRCQUE0QixTQUFTO0FBQUEsSUFDdkQ7QUFFQSxVQUFNLFVBQVUsS0FBSyxNQUFNO0FBRTNCLFFBQUksVUFBVSxHQUFHO0FBQ2YsWUFBTSxJQUFJLE1BQU0sMkJBQTJCLFNBQVM7QUFBQSxJQUN0RDtBQUVBLFlBQVEsVUFBVTtBQUVsQixVQUFNLFNBQVMsbUJBQW1CLFVBQVU7QUFFNUMsVUFBTSxLQUFLLGFBQWEsV0FBVztBQUVuQyxPQUFHLFdBQVcsR0FBRyxjQUFjLFFBQVEsTUFBTTtBQUM3QyxPQUFHLFdBQ0QsR0FBRyxjQUNILFFBQ0EsZ0JBQWdCLFFBQVEsSUFBSSxHQUM1QixHQUNBLE1BQ0Y7QUFDQSxPQUFHLFdBQVcsR0FBRyxjQUFjLElBQUk7QUFBQTtBQUFBLEVBR3JDLFlBQVksQ0FDVixTQUNBLFlBQ0EsUUFDQSxlQUNBO0FBQ0EsUUFBSSxVQUFVLEtBQUssV0FBVyxLQUFLLE1BQU0sUUFBUTtBQUMvQyxZQUFNLElBQUksTUFDUiwwQ0FBMEMsd0JBQXdCLEtBQUssTUFBTSxTQUMvRTtBQUFBLElBQ0Y7QUFFQSxRQUFJLFVBQVUsR0FBRztBQUNmLFlBQU0sSUFBSSxNQUFNLDRCQUE0QixTQUFTO0FBQUEsSUFDdkQ7QUFFQSxVQUFNLFVBQVUsS0FBSyxNQUFNO0FBRTNCLFFBQUksa0JBQWtCLFdBQVc7QUFDL0IsVUFBSSxnQkFBZ0IsR0FBRztBQUNyQixjQUFNLElBQUksTUFBTSwrQkFBK0IsZ0JBQWdCO0FBQUEsTUFDakU7QUFDQSxZQUFNLFdBQVcsZ0JBQWdCO0FBQ2pDLFVBQUksV0FBVyxRQUFRLFNBQVM7QUFDOUIsY0FBTSxJQUFJLE1BQ1IsMkNBQTJDLHVCQUF1QixRQUFRLFVBQzVFO0FBQUEsTUFDRjtBQUFBLElBQ0YsV0FBVyxTQUFTLFFBQVEsU0FBUztBQUNuQyxZQUFNLElBQUksTUFDUiwwQ0FBMEMscUJBQXFCLFFBQVEsVUFDekU7QUFBQSxJQUNGO0FBRUEsVUFBTSxTQUFTLG1CQUFtQixVQUFVO0FBRTVDLFVBQU0sS0FBSyxhQUFhLFdBQVc7QUFFbkMsT0FBRyxXQUFXLEdBQUcsY0FBYyxRQUFRLE1BQU07QUFDN0MsT0FBRyxjQUFjLEdBQUcsY0FBYyxpQkFBaUIsR0FBRyxRQUFRLEdBQUcsTUFBTTtBQUN2RSxPQUFHLFdBQVcsR0FBRyxjQUFjLElBQUk7QUFBQTtBQUFBLEVBR3JDLE1BQU0sR0FBRztBQUNQLFFBQUksS0FBSyxtQkFBbUIsR0FBRztBQUM3QjtBQUFBLElBQ0Y7QUFFQSxRQUFJLEtBQUssZ0JBQWdCLEtBQUssa0JBQWtCLEdBQUc7QUFDakQ7QUFBQSxJQUNGO0FBRUEsVUFBTSxLQUFLLGFBQWEsV0FBVztBQUVuQyxPQUFHLGdCQUFnQixLQUFLLElBQUk7QUFFNUIsUUFBSSxLQUFLLGlCQUFpQixNQUFNO0FBQzlCLFNBQUcsb0JBQ0QsS0FBSyxnQkFDTCxLQUFLLGlCQUNMLEtBQUssaUJBQ0wsS0FBSyxjQUNQO0FBQUEsSUFDRixPQUFPO0FBQ0wsU0FBRyxXQUNELEtBQUssZ0JBQ0wsS0FBSyxpQkFDTCxLQUFLLGVBQ1A7QUFBQTtBQUdGLE9BQUcsZ0JBQWdCLElBQUk7QUFBQTtBQUFBLEVBR3pCLGlCQUFpQixDQUFDLE9BQWU7QUFDL0IsU0FBSyxrQkFBa0I7QUFBQTtBQUFBLEVBR3pCLGlCQUFpQixDQUFDLE9BQWU7QUFDL0IsU0FBSyxrQkFBa0I7QUFBQTtBQUFBLEVBR3pCLGlCQUFpQixDQUFDLE9BQWU7QUFDL0IsU0FBSyxpQkFBaUI7QUFBQTtBQUUxQjtBQUVPO0FBQUEsTUFBTSxnQkFBZ0I7QUFBQSxFQUNuQixPQUEyQjtBQUFBLElBQ2pDLE1BQU0sQ0FBQztBQUFBLElBQ1AsZUFBZSxjQUFjO0FBQUEsRUFDL0I7QUFBQSxFQUVBLEtBQUssR0FBUztBQUNaLFNBQUssT0FBTztBQUFBLE1BQ1YsTUFBTSxDQUFDO0FBQUEsTUFDUCxlQUFlLGNBQWM7QUFBQSxJQUMvQjtBQUNBLFdBQU87QUFBQTtBQUFBLEVBR1QsTUFBTSxHQUF1QjtBQUMzQixXQUFPLEtBQUs7QUFBQTtBQUFBLEVBR2QsZ0JBQWdCLENBQ2QsYUFPTTtBQUNOLFNBQUssS0FBSyxnQkFBZ0IsY0FBYztBQUN4QyxXQUFPO0FBQUE7QUFBQSxFQUVULE1BQU0sR0FBUztBQUNiLFNBQUssS0FBSyxLQUFLLEtBQUs7QUFBQSxNQUNsQixPQUFPLENBQUM7QUFBQSxNQUVSLFdBQVc7QUFBQSxJQUViLENBQUM7QUFDRCxXQUFPO0FBQUE7QUFBQSxFQUVULGlCQUFpQixHQUFTO0FBQ3hCLFNBQUssWUFBWSxFQUFFLFlBQVk7QUFDL0IsV0FBTztBQUFBO0FBQUEsRUFFVCxlQUFlLEdBQVM7QUFDdEIsU0FBSyxZQUFZLEVBQUUsT0FBTztBQUMxQixXQUFPO0FBQUE7QUFBQSxFQUVULGlCQUFpQixHQUFTO0FBQ3hCLFNBQUssWUFBWSxFQUFFLE9BQU87QUFDMUIsV0FBTztBQUFBO0FBQUEsRUFFVCxTQUFTLENBQUMsVUFBd0I7QUFDaEMsU0FBSyxZQUFZLEVBQUUsU0FBUztBQUM1QixXQUFPO0FBQUE7QUFBQSxFQUVULGVBQWUsQ0FDYixRQUNBLFFBQ007QUFDTixVQUFNLFVBQVUsS0FBSyxZQUFZO0FBQ2pDLFVBQU0sV0FDSixRQUFRLE1BQU0sU0FBUyxJQUFJLFFBQVEsTUFBTSxRQUFRLE1BQU0sU0FBUyxLQUFLO0FBQ3ZFLFlBQVEsTUFBTSxLQUFLO0FBQUEsTUFDakIsTUFBTTtBQUFBLE1BQ04sTUFBTSxjQUFjO0FBQUEsTUFDcEIsT0FBTyxXQUFXLFNBQVMsUUFBUSxnQkFBZ0IsU0FBUyxJQUFJLElBQUk7QUFBQSxJQUN0RSxDQUFDO0FBQ0QsV0FBTztBQUFBO0FBQUEsRUFHRCxXQUFXLEdBQWtCO0FBQ25DLFFBQUksS0FBSyxLQUFLLEtBQUssV0FBVyxHQUFHO0FBQy9CLFlBQU0sSUFBSSxNQUFNLGNBQWM7QUFBQSxJQUNoQztBQUNBLFdBQU8sS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssU0FBUztBQUFBO0FBRWxEOztBQzNkTyxNQUFNLGFBQWlFO0FBQUEsRUFDcEU7QUFBQSxFQUVSLFdBQVcsR0FBRztBQUNaLFVBQU0sS0FBSyxhQUFhLFdBQVc7QUFFbkMsVUFBTSxTQUFTLEdBQUcsbUJBQW1CO0FBQ3JDLFFBQUksV0FBVyxNQUFNO0FBQ25CLFlBQU0sSUFBSSxNQUFNLDJCQUEyQjtBQUFBLElBQzdDO0FBQ0EsU0FBSyxVQUFVO0FBQUE7QUFBQSxFQUdqQixPQUFPLEdBQUc7QUFDUixVQUFNLEtBQUssYUFBYSxXQUFXO0FBQ25DLE9BQUcsbUJBQW1CLEtBQUssT0FBTztBQUFBO0FBQUEsRUFHcEMsT0FBTyxHQUFHO0FBQ1IsVUFBTSxLQUFLLGFBQWEsV0FBVztBQUNuQyxPQUFHLGlCQUFpQixHQUFHLGNBQWMsS0FBSyxPQUFPO0FBQUE7QUFBQSxFQUduRCxPQUFPLENBQUMsWUFBdUQ7QUFDN0QsU0FBSyxRQUFRO0FBQ2IsZUFBVyxJQUFJO0FBQUE7QUFBQSxFQUdqQixJQUFJLENBQUMsWUFBdUQ7QUFDMUQsU0FBSyxRQUFRLFVBQVU7QUFDdkIsaUJBQWEsT0FBTztBQUFBO0FBQUEsU0FHZixNQUFNLEdBQUc7QUFDZCxVQUFNLEtBQUssYUFBYSxXQUFXO0FBRW5DLE9BQUcsaUJBQWlCLEdBQUcsY0FBYyxJQUFJO0FBQUE7QUFBQSxFQUczQyxPQUFPLENBQ0wsTUFDQSxPQUNBLFFBQ007QUFDTixVQUFNLEtBQUssYUFBYSxXQUFXO0FBRW5DLFFBQUksaUJBQXlCLEdBQUc7QUFDaEMsWUFBUTtBQUFBLFdBQ0QsV0FBVztBQUNkLHlCQUFpQixHQUFHO0FBQ3BCO0FBQUEsTUFDRjtBQUFBLFdBQ0ssV0FBVztBQUNkLHlCQUFpQixHQUFHO0FBQ3BCO0FBQUEsTUFDRjtBQUFBO0FBR0YsT0FBRyxvQkFBb0IsR0FBRyxjQUFjLGdCQUFnQixPQUFPLE1BQU07QUFBQTtBQUFBLEVBR3ZFLFlBQVksR0FBc0I7QUFDaEMsV0FBTyxLQUFLO0FBQUE7QUFFaEI7O0FDM0JPLE1BQU0sY0FBYztBQUFBLFNBQ1YsV0FBaUM7QUFBQSxFQUV4QztBQUFBLEVBRUE7QUFBQSxFQUVBLGNBQWMsSUFBSTtBQUFBLEVBQ2xCLFlBQVksSUFBSTtBQUFBLEVBRXhCLFdBQVcsQ0FBQyxRQUFnQixLQUF5QjtBQUNuRCxTQUFLLFFBQVE7QUFFYixVQUFNLEtBQUssYUFBYSxXQUFXO0FBRW5DLFVBQU0sZUFBZSxLQUFLLFdBQVcsSUFBSSxXQUFXLEdBQUcsYUFBYTtBQUNwRSxVQUFNLGlCQUFpQixLQUFLLFdBQVcsSUFBSSxhQUFhLEdBQUcsZUFBZTtBQUkxRSxVQUFNLFVBQVUsR0FBRyxjQUFjO0FBQ2pDLFNBQUssU0FBUztBQUNaLFlBQU0sSUFBSSxNQUFNLG1DQUFtQztBQUFBLElBQ3JEO0FBRUEsT0FBRyxhQUFhLFNBQVMsWUFBWTtBQUNyQyxPQUFHLGFBQWEsU0FBUyxjQUFjO0FBQ3ZDLE9BQUcsWUFBWSxPQUFPO0FBQ3RCLE9BQUcsYUFBYSxZQUFZO0FBQzVCLE9BQUcsYUFBYSxjQUFjO0FBRTlCLFNBQUssR0FBRyxvQkFBb0IsU0FBUyxHQUFHLFdBQVcsR0FBRztBQUVwRCxZQUFNLFlBQVksR0FBRyxrQkFBa0IsT0FBTztBQUU5QyxZQUFNLElBQUksTUFDUixrREFBa0QsU0FDcEQ7QUFBQSxJQUNGO0FBRUEsU0FBSyxXQUFXO0FBS2hCLFNBQUssS0FBSyxNQUFNO0FBQ2QsV0FBSyxlQUFlLElBQUksVUFBVTtBQUNsQyxXQUFLLGFBQWEsSUFBSSxRQUFRO0FBQUEsS0FDL0I7QUFBQTtBQUFBLEVBSUgsT0FBTyxHQUFHO0FBQ1IsVUFBTSxLQUFLLGFBQWEsV0FBVztBQUNuQyxPQUFHLGNBQWMsS0FBSyxRQUFRO0FBQUE7QUFBQSxFQVNoQyxJQUFJLENBQUMsWUFBMkM7QUFDOUMsUUFBSSxjQUFjLGFBQWEsTUFBTTtBQUNuQyxZQUFNLElBQUksTUFDUixpQ0FBaUMsY0FBYyxTQUFTLG1CQUFtQixLQUFLLFFBQ2xGO0FBQUEsSUFDRjtBQUVBLGtCQUFjLFdBQVc7QUFFekIsVUFBTSxLQUFLLGFBQWEsV0FBVztBQUNuQyxPQUFHLFdBQVcsS0FBSyxRQUFRO0FBRTNCLGVBQVcsSUFBSTtBQUVmLGtCQUFjLE9BQU87QUFBQTtBQUFBLFNBR2hCLE1BQU0sR0FBRztBQUNkLFVBQU0sS0FBSyxhQUFhLFdBQVc7QUFFbkMsT0FBRyxXQUFXLElBQUk7QUFDbEIsa0JBQWMsV0FBVztBQUFBO0FBQUEsRUFHM0IsT0FBTyxHQUFZO0FBQ2pCLFdBQU8sY0FBYyxhQUFhO0FBQUE7QUFBQSxFQUdwQyxZQUFZLENBQUMsTUFBYztBQUN6QixXQUFPLEtBQUssWUFBWSxJQUFJLElBQUk7QUFBQTtBQUFBLEVBR2xDLFlBQVksQ0FBQyxNQUFjO0FBQ3pCLFVBQU0sWUFBWSxLQUFLLFlBQVksSUFBSSxJQUFJO0FBQzNDLFFBQUksY0FBYyxXQUFXO0FBQzNCLFlBQU0sSUFBSSxNQUFNLHdCQUF3QixNQUFNO0FBQUEsSUFDaEQ7QUFFQSxXQUFPO0FBQUE7QUFBQSxFQUdULFVBQVUsQ0FBQyxNQUFjO0FBQ3ZCLFVBQU0sVUFBVSxLQUFLLFVBQVUsSUFBSSxJQUFJO0FBQ3ZDLFFBQUksWUFBWSxXQUFXO0FBQ3pCLFlBQU0sSUFBSSxNQUFNLHNCQUFzQixNQUFNO0FBQUEsSUFDOUM7QUFFQSxXQUFPO0FBQUE7QUFBQSxFQUdULGlCQUFpQixDQUNmLFFBQ0EsV0FNQSxTQUNBO0FBQ0EsVUFBTSxLQUFLLGFBQWEsV0FBVztBQUVuQyxPQUFHLGNBQWMsR0FBRyxXQUFXLE9BQU87QUFDdEMsT0FBRyxVQUFVLEtBQUssV0FBVyxNQUFNLEdBQUcsT0FBTztBQUM3QyxjQUFVLFFBQVE7QUFBQTtBQUFBLEVBR3BCLGtCQUFrQixDQUFDLFFBQWdCLFNBQWlCO0FBQ2xELFVBQU0sS0FBSyxhQUFhLFdBQVc7QUFDbkMsT0FBRyxVQUFVLEtBQUssV0FBVyxNQUFNLEdBQUcsT0FBTztBQUFBO0FBQUEsRUFHL0Msa0JBQWtCLENBQUMsUUFBZ0IsVUFBa0IsVUFBa0I7QUFDckUsVUFBTSxLQUFLLGFBQWEsV0FBVztBQUNuQyxPQUFHLFVBQVUsS0FBSyxXQUFXLE1BQU0sR0FBRyxVQUFVLFFBQVE7QUFBQTtBQUFBLEVBRzFELGtCQUFrQixDQUNoQixRQUNBLFVBQ0EsVUFDQSxVQUNBO0FBQ0EsVUFBTSxLQUFLLGFBQWEsV0FBVztBQUNuQyxPQUFHLFVBQVUsS0FBSyxXQUFXLE1BQU0sR0FBRyxVQUFVLFVBQVUsUUFBUTtBQUFBO0FBQUEsRUFHcEUsZ0JBQWdCLENBQUMsUUFBZ0IsU0FBaUI7QUFDaEQsVUFBTSxLQUFLLGFBQWEsV0FBVztBQUNuQyxPQUFHLFVBQVUsS0FBSyxXQUFXLE1BQU0sR0FBRyxPQUFPO0FBQUE7QUFBQSxFQUcvQyxnQkFBZ0IsQ0FBQyxRQUFnQixVQUFrQixVQUFrQjtBQUNuRSxVQUFNLEtBQUssYUFBYSxXQUFXO0FBQ25DLE9BQUcsVUFBVSxLQUFLLFdBQVcsTUFBTSxHQUFHLFVBQVUsUUFBUTtBQUFBO0FBQUEsRUFHMUQsZ0JBQWdCLENBQ2QsUUFDQSxVQUNBLFVBQ0EsVUFDQTtBQUNBLFVBQU0sS0FBSyxhQUFhLFdBQVc7QUFDbkMsT0FBRyxVQUFVLEtBQUssV0FBVyxNQUFNLEdBQUcsVUFBVSxVQUFVLFFBQVE7QUFBQTtBQUFBLEVBR3BFLGlCQUFpQixDQUFDLFFBQWdCLFVBQWtDO0FBQ2xFLFVBQU0sS0FBSyxhQUFhLFdBQVc7QUFDbkMsT0FBRyxpQkFBaUIsS0FBSyxXQUFXLE1BQU0sR0FBRyxPQUFPLFFBQW9CO0FBQUE7QUFBQSxFQUcxRSxpQkFBaUIsQ0FBQyxRQUFnQixVQUE0QjtBQUM1RCxVQUFNLEtBQUssYUFBYSxXQUFXO0FBQ25DLE9BQUcsaUJBQWlCLEtBQUssV0FBVyxNQUFNLEdBQUcsT0FBTyxRQUFvQjtBQUFBO0FBQUEsRUFHbEUsY0FBYyxDQUFDLFlBQXNCO0FBQzNDLFVBQU0sS0FBSyxhQUFhLFdBQVc7QUFFbkMsYUFBUyxLQUFLLEVBQUcsS0FBSyxXQUFXLFVBQVUsSUFBSTtBQUM3QyxZQUFNLFFBQVEsR0FBRyxrQkFBa0IsS0FBSyxVQUFVLFdBQVcsR0FBRztBQUVoRSxVQUFJLFFBQVEsR0FBRztBQUNiLGNBQU0sSUFBSSxNQUFNLDBCQUEwQixXQUFXLEtBQUs7QUFBQSxNQUM1RDtBQUVBLFdBQUssWUFBWSxJQUFJLFdBQVcsS0FBSyxLQUFLO0FBQUEsSUFDNUM7QUFBQTtBQUFBLEVBR00sWUFBWSxDQUFDLFVBQW9CO0FBQ3ZDLFVBQU0sS0FBSyxhQUFhLFdBQVc7QUFFbkMsYUFBUyxLQUFLLEVBQUcsS0FBSyxTQUFTLFVBQVUsSUFBSTtBQUMzQyxZQUFNLFFBQVEsR0FBRyxtQkFBbUIsS0FBSyxVQUFVLFNBQVMsR0FBRztBQUUvRCxVQUFJLFVBQVUsTUFBTTtBQUNsQixjQUFNLElBQUksTUFBTSx3QkFBd0IsU0FBUyxLQUFLO0FBQUEsTUFDeEQ7QUFFQSxXQUFLLFVBQVUsSUFBSSxTQUFTLEtBQUssS0FBSztBQUFBLElBQ3hDO0FBQUE7QUFBQSxFQUtNLFVBQVUsQ0FBQyxLQUFhLE1BQWM7QUFDNUMsVUFBTSxLQUFLLGFBQWEsV0FBVztBQUVuQyxVQUFNLFNBQVMsR0FBRyxhQUFhLElBQUk7QUFDbkMsU0FBSyxRQUFRO0FBQ1gsWUFBTSxJQUFJLE1BQU0sMkJBQTJCO0FBQUEsSUFDN0M7QUFFQSxPQUFHLGFBQWEsUUFBUSxHQUFHO0FBQzNCLE9BQUcsY0FBYyxNQUFNO0FBRXZCLFNBQUssR0FBRyxtQkFBbUIsUUFBUSxHQUFHLGNBQWMsR0FBRztBQUNyRCxVQUFJLFlBQVksR0FBRyxpQkFBaUIsTUFBTTtBQUMxQyxXQUFLO0FBQVcsb0JBQVk7QUFFNUIsWUFBTSxJQUFJLE1BQU0sU0FBUztBQUFBLElBQzNCO0FBRUEsV0FBTztBQUFBO0FBRVg7O0FDalJPLElBQUs7QUFBTCxVQUFLLGdCQUFMO0FBQ0wsK0NBQVksS0FBWjtBQUNBLDRDQUFTLEtBQVQ7QUFDQSw0Q0FBUyxLQUFUO0FBQUEsR0FIVTtBQU1MLElBQUs7QUFBTCxVQUFLLGdCQUFMO0FBQ0wsOENBQVcsS0FBWDtBQUNBLDRDQUFTLEtBQVQ7QUFBQSxHQUZVO0FBdUNMO0FBQUEsTUFBTSxRQUFrRDtBQUFBLEVBQ3JELFNBQWlCO0FBQUEsRUFDakIsVUFBa0I7QUFBQSxFQUNsQixXQUFnQztBQUFBLEVBRXhDLFVBQVUsR0FBUztBQUNqQixRQUFJLEtBQUs7QUFBVSxZQUFNLElBQUksTUFBTSw4QkFBOEI7QUFFakUsVUFBTSxLQUFLLGFBQWEsV0FBVztBQUNuQyxTQUFLLFdBQVcsR0FBRyxjQUFjO0FBQUE7QUFBQSxFQUduQyxPQUFPLEdBQVM7QUFDZCxTQUFLLEtBQUs7QUFBVSxZQUFNLElBQUksTUFBTSwwQkFBMEI7QUFDOUQsVUFBTSxLQUFLLGFBQWEsV0FBVztBQUNuQyxPQUFHLFlBQVksR0FBRyxZQUFZLEtBQUssUUFBUTtBQUFBO0FBQUEsRUFHN0MsT0FBTyxDQUFDLFlBQWtEO0FBQ3hELFNBQUssUUFBUTtBQUNiLGVBQVcsSUFBSTtBQUFBO0FBQUEsRUFHakIsSUFBSSxDQUFDLFlBQWtEO0FBQ3JELFNBQUssUUFBUSxVQUFVO0FBQ3ZCLFlBQVEsT0FBTztBQUFBO0FBQUEsU0FHVixNQUFNLEdBQVM7QUFDcEIsVUFBTSxLQUFLLGFBQWEsV0FBVztBQUVuQyxPQUFHLFlBQVksR0FBRyxZQUFZLElBQUk7QUFBQTtBQUFBLEVBR3BDLGFBQWEsQ0FDWCxTQUNBLE9BQXNCLGNBQWMsV0FDcEMsU0FBd0IsY0FBYyxVQUNoQztBQUNOLFNBQUssVUFBVSxRQUFRLE9BQU8sUUFBUSxRQUFRLFNBQVMsTUFBTSxNQUFNO0FBQUE7QUFBQSxFQUdyRSxjQUFjLENBQ1osU0FDQSxVQUNBLFVBQ0EsT0FBc0IsY0FBYyxXQUNwQyxTQUF3QixjQUFjLFVBQ2hDO0FBQ04sU0FBSyxVQUFVLFNBQVMsVUFBVSxVQUFVLE1BQU0sTUFBTTtBQUFBO0FBQUEsRUFHMUQsUUFBUSxDQUNOLFNBQ0EsVUFDQSxPQUFzQixjQUFjLFdBQ3BDLFNBQXdCLGNBQWMsVUFDaEM7QUFDTixTQUFLLFVBQVUsU0FBUyxVQUFVLE1BQU0sTUFBTSxNQUFNO0FBQUE7QUFBQSxFQUd0RCxhQUFhLENBQ1gsU0FDQSxVQUNBLE9BQXNCLGNBQWMsV0FDcEMsU0FBd0IsY0FBYyxVQUNoQztBQUNOLFNBQUssVUFBVSxTQUFTLFVBQVUsTUFBTSxNQUFNLFFBQVEsSUFBSTtBQUFBO0FBQUEsRUFHNUQsTUFBTSxDQUNKLFNBQ0EsVUFDQSxPQUFzQixjQUFjLFdBQ3BDLFNBQXdCLGNBQWMsVUFDaEM7QUFDTixTQUFLLFVBQVUsU0FBUyxVQUFVLE1BQU0sTUFBTSxNQUFNO0FBQUE7QUFBQSxFQUc5QyxTQUFTLENBQ2YsU0FDQSxVQUNBLFdBQWlELE1BQ2pELE9BQXNCLGNBQWMsV0FDcEMsU0FBd0IsY0FBYyxVQUN0QyxpQkFBMEIsT0FDcEI7QUFDTixTQUFLLEtBQUssVUFBVTtBQUNsQixZQUFNLElBQUksTUFBTSwwQkFBMEI7QUFBQSxJQUM1QztBQUNBLFFBQUksV0FBVyxHQUFHO0FBQ2hCLFlBQU0sSUFBSSxNQUFNLGlDQUFpQztBQUFBLElBQ25EO0FBQ0EsUUFBSSxZQUFZLEdBQUc7QUFDakIsWUFBTSxJQUFJLE1BQU0sa0NBQWtDO0FBQUEsSUFDcEQ7QUFFQSxVQUFNLEtBQUssYUFBYSxXQUFXO0FBRW5DLFNBQUssU0FBUztBQUNkLFNBQUssVUFBVTtBQUVmLFVBQU0sUUFBUTtBQUNkLFVBQU0saUJBQWlCLGlCQUFpQixHQUFHLHFCQUFxQixHQUFHO0FBQ25FLFVBQU0sU0FBUztBQUNmLFVBQU0sWUFBWSxpQkFBaUIsR0FBRyxrQkFBa0IsR0FBRztBQUMzRCxVQUFNLFVBQVUsaUJBQWlCLEdBQUcsUUFBUSxHQUFHO0FBRS9DLFFBQUksb0JBQW9CLGtCQUFrQjtBQUN4QyxTQUFHLFdBQ0QsR0FBRyxZQUNILE9BQ0EsZ0JBQ0EsV0FDQSxTQUNBLFFBQ0Y7QUFBQSxJQUNGLE9BQU87QUFDTCxTQUFHLFdBQ0QsR0FBRyxZQUNILE9BQ0EsZ0JBQ0EsU0FDQSxVQUNBLFFBQ0EsV0FDQSxTQUNBLFFBQ0Y7QUFBQTtBQUdGLFFBQUksV0FBVyxjQUFjLFVBQVU7QUFFckMsU0FBRyxjQUFjLEdBQUcsWUFBWSxHQUFHLGdCQUFnQixHQUFHLGFBQWE7QUFDbkUsU0FBRyxjQUFjLEdBQUcsWUFBWSxHQUFHLGdCQUFnQixHQUFHLGFBQWE7QUFBQSxJQUNyRSxXQUFXLFdBQVcsY0FBYyxRQUFRO0FBQzFDLFNBQUcsY0FBYyxHQUFHLFlBQVksR0FBRyxnQkFBZ0IsR0FBRyxNQUFNO0FBQzVELFNBQUcsY0FBYyxHQUFHLFlBQVksR0FBRyxnQkFBZ0IsR0FBRyxNQUFNO0FBQUEsSUFDOUQ7QUFFQSxRQUFJLFNBQVMsY0FBYyxXQUFXO0FBQ3BDLFNBQUcsY0FBYyxHQUFHLFlBQVksR0FBRyxvQkFBb0IsR0FBRyxPQUFPO0FBQ2pFLFNBQUcsY0FBYyxHQUFHLFlBQVksR0FBRyxvQkFBb0IsR0FBRyxPQUFPO0FBQUEsSUFDbkUsV0FBVyxTQUFTLGNBQWMsUUFBUTtBQUN4QyxTQUFHLGNBQWMsR0FBRyxZQUFZLEdBQUcsb0JBQW9CLEdBQUcsTUFBTTtBQUNoRSxTQUFHLGNBQWMsR0FBRyxZQUFZLEdBQUcsb0JBQW9CLEdBQUcsTUFBTTtBQUFBLElBQ2xFLFdBQVcsU0FBUyxjQUFjLFFBQVE7QUFDeEMsU0FBRyxlQUFlLEdBQUcsVUFBVTtBQUMvQixTQUFHLGNBQWMsR0FBRyxZQUFZLEdBQUcsb0JBQW9CLEdBQUcsT0FBTztBQUNqRSxTQUFHLGNBQ0QsR0FBRyxZQUNILEdBQUcsb0JBQ0gsR0FBRyxvQkFDTDtBQUFBLElBQ0Y7QUFBQTtBQUFBLEVBR0YsUUFBUSxHQUFXO0FBQ2pCLFNBQUssS0FBSztBQUFVLFlBQU0sSUFBSSxNQUFNLHlCQUF5QjtBQUU3RCxXQUFPLEtBQUs7QUFBQTtBQUFBLEVBR2QsU0FBUyxHQUFXO0FBQ2xCLFNBQUssS0FBSztBQUFVLFlBQU0sSUFBSSxNQUFNLHlCQUF5QjtBQUU3RCxXQUFPLEtBQUs7QUFBQTtBQUFBLEVBR2QsWUFBWSxHQUFHO0FBQ2IsU0FBSyxLQUFLO0FBQVUsWUFBTSxJQUFJLE1BQU0seUJBQXlCO0FBRzdELFdBQU8sS0FBSztBQUFBO0FBRWhCOztBQ3ZNTyxNQUFNLGFBQWlFO0FBQUEsRUFDcEUsU0FBaUI7QUFBQSxFQUNqQixVQUFrQjtBQUFBLEVBQ2xCLFdBQWdDO0FBQUEsRUFFeEMsVUFBVSxHQUFTO0FBQ2pCLFFBQUksS0FBSztBQUFVLFlBQU0sSUFBSSxNQUFNLDhCQUE4QjtBQUVqRSxVQUFNLEtBQUssYUFBYSxXQUFXO0FBQ25DLFNBQUssV0FBVyxHQUFHLGNBQWM7QUFBQTtBQUFBLEVBR25DLE9BQU8sR0FBRztBQUNSLFVBQU0sS0FBSyxhQUFhLFdBQVc7QUFDbkMsT0FBRyxjQUFjLEtBQUssUUFBUTtBQUFBO0FBQUEsRUFHaEMsT0FBTyxHQUFTO0FBQ2QsU0FBSyxLQUFLO0FBQVUsWUFBTSxJQUFJLE1BQU0sMEJBQTBCO0FBQzlELFVBQU0sS0FBSyxhQUFhLFdBQVc7QUFDbkMsT0FBRyxZQUFZLEdBQUcsa0JBQWtCLEtBQUssUUFBUTtBQUFBO0FBQUEsRUFHbkQsT0FBTyxDQUFDLFlBQXVEO0FBQzdELFNBQUssUUFBUTtBQUNiLGVBQVcsSUFBSTtBQUFBO0FBQUEsRUFHakIsSUFBSSxDQUFDLFlBQXVEO0FBQzFELFNBQUssUUFBUSxVQUFVO0FBQ3ZCLGlCQUFhLE9BQU87QUFBQTtBQUFBLFNBR2YsTUFBTSxHQUFTO0FBQ3BCLFVBQU0sS0FBSyxhQUFhLFdBQVc7QUFFbkMsT0FBRyxZQUFZLEdBQUcsa0JBQWtCLElBQUk7QUFBQTtBQUFBLEVBRzFDLGFBQWEsQ0FDWCxTQUNBLFVBQ0EsZUFDQSxTQUNBLE9BQXNCLGNBQWMsV0FDcEMsU0FBd0IsY0FBYyxVQUNoQztBQUNOLFNBQUssVUFBVSxTQUFTLFVBQVUsZUFBZSxTQUFTLE1BQU0sTUFBTTtBQUFBO0FBQUEsRUFHeEUsY0FBYyxDQUNaLFNBQ0EsVUFDQSxlQUNBLFVBQ0EsT0FBc0IsY0FBYyxXQUNwQyxTQUF3QixjQUFjLFVBQ2hDO0FBQ04sU0FBSyxVQUFVLFNBQVMsVUFBVSxlQUFlLFVBQVUsTUFBTSxNQUFNO0FBQUE7QUFBQSxFQUdqRSxTQUFTLENBQ2YsU0FDQSxVQUNBLGVBQ0EsV0FBaUQsTUFDakQsT0FBc0IsY0FBYyxXQUNwQyxTQUF3QixjQUFjLFVBQ2hDO0FBQ04sU0FBSyxLQUFLLFVBQVU7QUFDbEIsWUFBTSxJQUFJLE1BQU0sMEJBQTBCO0FBQUEsSUFDNUM7QUFDQSxRQUFJLFdBQVcsR0FBRztBQUNoQixZQUFNLElBQUksTUFBTSxpQ0FBaUM7QUFBQSxJQUNuRDtBQUNBLFFBQUksWUFBWSxHQUFHO0FBQ2pCLFlBQU0sSUFBSSxNQUFNLGtDQUFrQztBQUFBLElBQ3BEO0FBRUEsVUFBTSxLQUFLLGFBQWEsV0FBVztBQUVuQyxTQUFLLFNBQVM7QUFDZCxTQUFLLFVBQVU7QUFFZixVQUFNLFFBQVE7QUFDZCxVQUFNLGlCQUFpQixHQUFHO0FBQzFCLFVBQU0sU0FBUztBQUNmLFVBQU0sWUFBWSxHQUFHO0FBQ3JCLFVBQU0sVUFBVSxHQUFHO0FBRW5CLFFBQUksb0JBQW9CLGtCQUFrQjtBQUN4QyxTQUFHLFdBQ0QsR0FBRyxrQkFDSCxPQUNBLGdCQUNBLFNBQ0EsVUFDQSxlQUNBLFFBQ0EsV0FDQSxTQUNBLFFBQ0Y7QUFBQSxJQUNGLE9BQU87QUFDTCxTQUFHLFdBQ0QsR0FBRyxrQkFDSCxPQUNBLGdCQUNBLFNBQ0EsVUFDQSxlQUNBLFFBQ0EsV0FDQSxTQUNBLFFBQ0Y7QUFBQTtBQUdGLFFBQUksV0FBVyxjQUFjLFVBQVU7QUFFckMsU0FBRyxjQUNELEdBQUcsa0JBQ0gsR0FBRyxnQkFDSCxHQUFHLGFBQ0w7QUFDQSxTQUFHLGNBQ0QsR0FBRyxrQkFDSCxHQUFHLGdCQUNILEdBQUcsYUFDTDtBQUFBLElBQ0YsV0FBVyxXQUFXLGNBQWMsUUFBUTtBQUMxQyxTQUFHLGNBQWMsR0FBRyxrQkFBa0IsR0FBRyxnQkFBZ0IsR0FBRyxNQUFNO0FBQ2xFLFNBQUcsY0FBYyxHQUFHLGtCQUFrQixHQUFHLGdCQUFnQixHQUFHLE1BQU07QUFBQSxJQUNwRTtBQUVBLFFBQUksU0FBUyxjQUFjLFdBQVc7QUFDcEMsU0FBRyxjQUFjLEdBQUcsa0JBQWtCLEdBQUcsb0JBQW9CLEdBQUcsT0FBTztBQUN2RSxTQUFHLGNBQWMsR0FBRyxrQkFBa0IsR0FBRyxvQkFBb0IsR0FBRyxPQUFPO0FBQUEsSUFDekUsV0FBVyxTQUFTLGNBQWMsUUFBUTtBQUN4QyxTQUFHLGNBQWMsR0FBRyxrQkFBa0IsR0FBRyxvQkFBb0IsR0FBRyxNQUFNO0FBQ3RFLFNBQUcsY0FBYyxHQUFHLGtCQUFrQixHQUFHLG9CQUFvQixHQUFHLE1BQU07QUFBQSxJQUN4RSxXQUFXLFNBQVMsY0FBYyxRQUFRO0FBQ3hDLFNBQUcsZUFBZSxHQUFHLGdCQUFnQjtBQUNyQyxTQUFHLGNBQWMsR0FBRyxrQkFBa0IsR0FBRyxvQkFBb0IsR0FBRyxPQUFPO0FBQ3ZFLFNBQUcsY0FDRCxHQUFHLGtCQUNILEdBQUcsb0JBQ0gsR0FBRyxvQkFDTDtBQUFBLElBQ0Y7QUFBQTtBQUFBLEVBR0YsUUFBUSxHQUFXO0FBQ2pCLFNBQUssS0FBSztBQUFVLFlBQU0sSUFBSSxNQUFNLHlCQUF5QjtBQUU3RCxXQUFPLEtBQUs7QUFBQTtBQUFBLEVBR2QsU0FBUyxHQUFXO0FBQ2xCLFNBQUssS0FBSztBQUFVLFlBQU0sSUFBSSxNQUFNLHlCQUF5QjtBQUU3RCxXQUFPLEtBQUs7QUFBQTtBQUFBLEVBR2QsWUFBWSxHQUFHO0FBQ2IsU0FBSyxLQUFLO0FBQVUsWUFBTSxJQUFJLE1BQU0seUJBQXlCO0FBRzdELFdBQU8sS0FBSztBQUFBO0FBRWhCOztBQzNNQSxJQUFlO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFxQ2IsS0FBSzs7O0FDckNQLElBQWU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFzRGIsS0FBSzs7O0FDNUNQLElBQU0sZUFBZTtBQWtCZDtBQUFBLE1BQU0saUJBQThDO0FBQUEsRUFDakQ7QUFBQSxFQUNBO0FBQUEsRUFFQSxVQUFVLElBQUksYUFBYSxZQUFZO0FBQUEsRUFDdkMsZUFBdUI7QUFBQSxFQUUvQixXQUFXLEdBQUc7QUFDWixTQUFLLFVBQVUsSUFBVyxjQUFjLG9CQUFvQjtBQUFBLE1BQzFELFdBQVc7QUFBQSxNQUNYLGFBQWE7QUFBQSxNQUNiLFlBQVk7QUFBQSxRQUNWO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxNQUNGO0FBQUEsTUFDQSxVQUFVLENBQUMsb0JBQW9CLFlBQVk7QUFBQSxJQUM3QyxDQUFDO0FBRUQsVUFBTSxhQUFhLElBQVcsd0JBQWdCO0FBQzlDLGVBQ0csTUFBTSxFQUNOLGlCQUFpQixXQUFXLEVBQzVCLE9BQU8sRUFDUCxnQkFBZ0IscUJBQXFCLE9BQU8sRUFDNUMsZ0JBQWdCLG1CQUFtQixPQUFPLEVBRTFDLE9BQU8sRUFDUCxrQkFBa0IsRUFDbEIsa0JBQWtCLEVBQ2xCLGdCQUFnQixtQkFBbUIsT0FBTyxFQUMxQyxnQkFBZ0Isd0JBQXdCLE9BQU8sRUFDL0MsZ0JBQWdCLGtCQUFrQixPQUFPLEVBQ3pDLGdCQUFnQixrQkFBa0IsT0FBTztBQUU1QyxTQUFLLFlBQVksSUFBVyx3QkFBZ0IsU0FDMUMsS0FBSyxTQUNMLFdBQVcsT0FBTyxDQUNwQjtBQUNBLFNBQUssVUFBVSxtQkFBbUIsR0FBRyxZQUFZO0FBQUE7QUFBQSxFQUduRCxtQkFBbUIsQ0FBQyxVQUFxQjtBQUN2QyxVQUFNLE1BQU0sSUFBSSxhQUFhO0FBQUEsTUFDM0IsR0FBRyxTQUFTLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLEtBQUssR0FBRyxJQUFJLE1BQU0sQ0FBQyxFQUFFLEtBQUs7QUFBQSxJQUM3RCxDQUFDO0FBRUQsU0FBSyxVQUFVLGVBQWUsR0FBRyxLQUFLLElBQUksTUFBTTtBQUNoRCxTQUFLLFVBQVUsa0JBQWtCLElBQUksU0FBUyxDQUFDO0FBQUE7QUFBQSxFQUdqRCxJQUFJLENBQ0YsVUFDQSxRQUNBLFNBQ0EsU0FDQTtBQUNBLFFBQUksS0FBSyxlQUFlLE1BQU0sS0FBSyxRQUFRLFFBQVE7QUFDakQsVUFBSSxLQUFLLFFBQVEsUUFBUSxHQUFHO0FBQzFCLGFBQUssT0FBTztBQUFBLE1BQ2QsT0FBTztBQUNMO0FBQUE7QUFBQSxJQUVKO0FBRUEsU0FBSyxRQUFRLEtBQUssa0JBQWtCLFNBQVM7QUFDN0MsU0FBSyxRQUFRLEtBQUssa0JBQWtCLFNBQVM7QUFDN0MsU0FBSyxRQUFRLEtBQUssa0JBQWtCLFNBQVM7QUFDN0MsU0FBSyxRQUFRLEtBQUssa0JBQWtCLE9BQU87QUFDM0MsU0FBSyxRQUFRLEtBQUssa0JBQWtCLE9BQU87QUFDM0MsU0FBSyxRQUFRLEtBQUssa0JBQWtCLE9BQU87QUFDM0MsU0FBSyxRQUFRLEtBQUssa0JBQWtCLE9BQU87QUFDM0MsU0FBSyxRQUFRLEtBQUssa0JBQWtCLFFBQVE7QUFDNUMsU0FBSyxRQUFRLEtBQUssa0JBQWtCLFFBQVE7QUFDNUMsU0FBSyxRQUFRLEtBQUssa0JBQWtCLFFBQVE7QUFDNUMsU0FBSyxRQUFRLEtBQUssa0JBQWtCLFFBQVE7QUFDNUMsU0FBSyxRQUFRLEtBQUssa0JBQWtCLFFBQVE7QUFDNUMsU0FBSyxRQUFRLEtBQUssa0JBQWtCLFFBQVE7QUFBQTtBQUFBLEVBSTlDLEtBQUssQ0FBQyxVQUFtQjtBQUN2QixTQUFLLEtBQUssVUFBVSxHQUFHO0FBQ3JCO0FBQUEsSUFDRjtBQUVBLFNBQUssUUFBUSxLQUFLLENBQUMsVUFBVTtBQUMzQixZQUFNLGtCQUFrQixvQkFBb0IsU0FBUyxrQkFBa0IsQ0FBQztBQUN4RSxZQUFNLFNBQVMsU0FBUyxPQUFPO0FBQy9CLFlBQU0saUJBQWlCLGNBQWMsT0FBTyxJQUFJLE9BQU8sSUFBSSxPQUFPLEVBQUU7QUFFcEUsV0FBSyxPQUFPO0FBQUEsS0FDYjtBQUFBO0FBQUEsRUFHSCxVQUFVLENBQUMsVUFBbUIsWUFBd0I7QUFDcEQsU0FBSyxRQUFRLEtBQUssQ0FBQyxVQUFVO0FBQzNCLFlBQU0sa0JBQWtCLG9CQUFvQixTQUFTLGtCQUFrQixDQUFDO0FBQ3hFLFlBQU0sU0FBUyxTQUFTLE9BQU87QUFDL0IsWUFBTSxpQkFBaUIsY0FBYyxPQUFPLElBQUksT0FBTyxJQUFJLE9BQU8sRUFBRTtBQUVwRSxpQkFBVztBQUVYLFdBQUssT0FBTztBQUFBLEtBQ2I7QUFBQTtBQUFBLEVBR0ssTUFBTSxHQUFHO0FBQ2YsU0FBSyxVQUFVLGFBQWEsR0FBRyxLQUFLLFNBQVMsS0FBSyxjQUFjLENBQUM7QUFDakUsU0FBSyxVQUFVLGtCQUFrQixLQUFLLGVBQWUsRUFBRTtBQUV2RCxTQUFLLFVBQVUsT0FBTztBQUV0QixTQUFLLE1BQU07QUFBQTtBQUFBLEVBR2IsU0FBUyxHQUFHO0FBQ1YsV0FBTyxLQUFLLGVBQWU7QUFBQTtBQUFBLEVBRzdCLEtBQUssR0FBUztBQUNaLFNBQUssZUFBZTtBQUFBO0FBRXhCOztBQzFKQSxJQUFlO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBOEJiLEtBQUs7OztBQzlCUCxJQUFlO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFhYixLQUFLOzs7QUNIUCxJQUFNLGdCQUFlO0FBa0JkO0FBQUEsTUFBTSxxQkFBc0Q7QUFBQSxFQUN6RDtBQUFBLEVBQ0E7QUFBQSxFQUVBLFVBQVUsSUFBSSxhQUFhLGFBQVk7QUFBQSxFQUN2QyxlQUF1QjtBQUFBLEVBRS9CLFdBQVcsR0FBRztBQUNaLFNBQUssVUFBVSxJQUFXLGNBQWMsd0JBQXdCO0FBQUEsTUFDOUQsV0FBVztBQUFBLE1BQ1gsYUFBYTtBQUFBLE1BQ2IsWUFBWTtBQUFBLFFBQ1Y7QUFBQSxRQUVBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsTUFDRjtBQUFBLE1BQ0EsVUFBVTtBQUFBLFFBQ1I7QUFBQSxNQUVGO0FBQUEsSUFDRixDQUFDO0FBRUQsVUFBTSxhQUFhLElBQVcsd0JBQWdCO0FBQzlDLGVBQ0csTUFBTSxFQUNOLGlCQUFpQixXQUFXLEVBQzVCLE9BQU8sRUFDUCxnQkFBZ0IscUJBQXFCLE9BQU8sRUFHNUMsT0FBTyxFQUNQLGtCQUFrQixFQUNsQixrQkFBa0IsRUFDbEIsZ0JBQWdCLG1CQUFtQixPQUFPLEVBQzFDLGdCQUFnQix3QkFBd0IsT0FBTyxFQUMvQyxnQkFBZ0Isa0JBQWtCLE9BQU8sRUFDekMsZ0JBQWdCLGtCQUFrQixPQUFPO0FBRTVDLFNBQUssWUFBWSxJQUFXLHdCQUFnQixTQUMxQyxLQUFLLFNBQ0wsV0FBVyxPQUFPLENBQ3BCO0FBQ0EsU0FBSyxVQUFVLG1CQUFtQixHQUFHLGFBQVk7QUFBQTtBQUFBLEVBR25ELG1CQUFtQixDQUFDLFVBQXlCO0FBQzNDLFVBQU0sTUFBTSxJQUFJLGFBQWE7QUFBQSxNQUUzQixHQUFHLFNBQVMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUUsS0FBSztBQUFBLElBQzlDLENBQUM7QUFFRCxTQUFLLFVBQVUsZUFBZSxHQUFHLEtBQUssSUFBSSxNQUFNO0FBQ2hELFNBQUssVUFBVSxrQkFBa0IsSUFBSSxTQUFTLENBQUM7QUFBQTtBQUFBLEVBR2pELElBQUksQ0FDRixVQUNBLFFBQ0EsU0FDQSxTQUNBO0FBQ0EsUUFBSSxLQUFLLGVBQWUsTUFBTSxLQUFLLFFBQVEsUUFBUTtBQUNqRCxVQUFJLEtBQUssUUFBUSxRQUFRLEdBQUc7QUFDMUIsYUFBSyxPQUFPO0FBQUEsTUFDZCxPQUFPO0FBQ0w7QUFBQTtBQUFBLElBRUo7QUFFQSxTQUFLLFFBQVEsS0FBSyxrQkFBa0IsU0FBUztBQUM3QyxTQUFLLFFBQVEsS0FBSyxrQkFBa0IsU0FBUztBQUM3QyxTQUFLLFFBQVEsS0FBSyxrQkFBa0IsU0FBUztBQUM3QyxTQUFLLFFBQVEsS0FBSyxrQkFBa0IsT0FBTztBQUMzQyxTQUFLLFFBQVEsS0FBSyxrQkFBa0IsT0FBTztBQUMzQyxTQUFLLFFBQVEsS0FBSyxrQkFBa0IsT0FBTztBQUMzQyxTQUFLLFFBQVEsS0FBSyxrQkFBa0IsT0FBTztBQUMzQyxTQUFLLFFBQVEsS0FBSyxrQkFBa0IsUUFBUTtBQUM1QyxTQUFLLFFBQVEsS0FBSyxrQkFBa0IsUUFBUTtBQUM1QyxTQUFLLFFBQVEsS0FBSyxrQkFBa0IsUUFBUTtBQUM1QyxTQUFLLFFBQVEsS0FBSyxrQkFBa0IsUUFBUTtBQUM1QyxTQUFLLFFBQVEsS0FBSyxrQkFBa0IsUUFBUTtBQUM1QyxTQUFLLFFBQVEsS0FBSyxrQkFBa0IsUUFBUTtBQUFBO0FBQUEsRUFJOUMsS0FBSyxDQUFDLFVBQW1CO0FBQ3ZCLFNBQUssS0FBSyxVQUFVLEdBQUc7QUFDckI7QUFBQSxJQUNGO0FBRUEsU0FBSyxRQUFRLEtBQUssQ0FBQyxVQUFVO0FBQzNCLFlBQU0sa0JBQWtCLG9CQUFvQixTQUFTLGtCQUFrQixDQUFDO0FBSXhFLFdBQUssT0FBTztBQUFBLEtBQ2I7QUFBQTtBQUFBLEVBR0gsVUFBVSxDQUFDLFVBQW1CLFlBQXdCO0FBQ3BELFNBQUssUUFBUSxLQUFLLENBQUMsVUFBVTtBQUMzQixZQUFNLGtCQUFrQixvQkFBb0IsU0FBUyxrQkFBa0IsQ0FBQztBQUl4RSxpQkFBVztBQUVYLFdBQUssT0FBTztBQUFBLEtBQ2I7QUFBQTtBQUFBLEVBR0ssTUFBTSxHQUFHO0FBQ2YsU0FBSyxVQUFVLGFBQWEsR0FBRyxLQUFLLFNBQVMsS0FBSyxjQUFjLENBQUM7QUFDakUsU0FBSyxVQUFVLGtCQUFrQixLQUFLLGVBQWUsRUFBRTtBQUV2RCxTQUFLLFVBQVUsT0FBTztBQUV0QixTQUFLLE1BQU07QUFBQTtBQUFBLEVBR2IsU0FBUyxHQUFHO0FBQ1YsV0FBTyxLQUFLLGVBQWU7QUFBQTtBQUFBLEVBRzdCLEtBQUssR0FBUztBQUNaLFNBQUssZUFBZTtBQUFBO0FBRXhCOztBQzVKTyxNQUFNLGNBQWM7QUFBQSxFQUNqQixTQUFpQjtBQUFBLEVBQ2pCLFVBQWtCO0FBQUEsRUFFbEIsZUFBMkMsSUFBVztBQUFBLEVBQ3RELGdCQUNOLElBQVc7QUFBQSxFQUNMLGlCQUEyQyxDQUFDO0FBQUEsRUFDNUMsZ0JBQXdCO0FBQUEsRUFFaEMsV0FBVyxDQUFDLE9BQWUsUUFBZ0I7QUFDekMsU0FBSyxlQUFlLEtBQUssSUFBVyxPQUFTO0FBQzdDLFNBQUssZUFBZSxLQUFLLElBQVcsT0FBUztBQUM3QyxTQUFLLGVBQWUsUUFBUSxDQUFDLFlBQVksUUFBUSxXQUFXLENBQUM7QUFFN0QsU0FBSyxPQUFPLE9BQU8sTUFBTTtBQUFBO0FBQUEsRUFHM0IsTUFBTSxDQUFDLE9BQWUsUUFBZ0I7QUFDcEMsU0FBSyxTQUFTO0FBQ2QsU0FBSyxVQUFVO0FBRWYsU0FBSyxjQUFjLEtBQUssQ0FBQyxnQkFBZ0I7QUFDdkMsa0JBQVksUUFBUSxZQUFZLEtBQUssUUFBUSxLQUFLLE9BQU87QUFBQSxLQUMxRDtBQUVELFNBQUssZUFBZSxRQUFRLENBQUMsWUFBWTtBQUN2QyxjQUFRLEtBQUssQ0FBQyxpQkFBaUI7QUFDN0IscUJBQWEsU0FBUyxLQUFLLFFBQVEsS0FBSyxPQUFPO0FBQUEsT0FDaEQ7QUFBQSxLQUNGO0FBRUQsU0FBSyxhQUFhLEtBQUssQ0FBQyxxQkFBcUI7QUFDM0MsV0FBSyxjQUFjLEtBQUssQ0FBQyxnQkFBZ0I7QUFDdkMseUJBQWlCLG1CQUFtQixXQUFXO0FBQUEsT0FDaEQ7QUFBQSxLQUNGO0FBQUE7QUFBQSxFQUdILFlBQVksQ0FBQyxnQkFBa0M7QUFDN0MsU0FBSyxhQUFhLEtBQUssQ0FBQyxxQkFBcUI7QUFDM0MsV0FBSyxlQUFlLEtBQUssZUFBZSxLQUFLLENBQUMsaUJBQWlCO0FBQzdELHlCQUFpQixjQUFjLFlBQVk7QUFBQSxPQUM1QztBQUVELFlBQU0sS0FBWSxhQUFhLFdBQVc7QUFDMUMsU0FBRyxTQUFTLEdBQUcsR0FBRyxLQUFLLFFBQVEsS0FBSyxPQUFPO0FBQzNDLFNBQUcsV0FBVyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBRXhCLHFCQUFlO0FBQUEsS0FDaEI7QUFFRCxTQUFLLGlCQUFpQixLQUFLLGdCQUFnQixLQUFLLEtBQUssZUFBZTtBQUFBO0FBQUEsTUFHbEUsWUFBWSxHQUEyQjtBQUN6QyxXQUFPLEtBQUssZUFBZSxLQUFLO0FBQUE7QUFFcEM7OztBQzVEQSxJQUFlO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBa0JiLEtBQUs7OztBQ2xCUCxJQUFlO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBZWIsS0FBSzs7O0FDTkEsTUFBTSxpQkFBaUI7QUFBQSxFQUNwQixTQUFpQjtBQUFBLEVBQ2pCLFVBQWtCO0FBQUEsRUFFbEI7QUFBQSxFQUNBO0FBQUEsRUFFUixXQUFXLENBQUMsT0FBZSxRQUFnQjtBQUN6QyxTQUFLLFVBQVUsSUFBVyxjQUFjLG9CQUFvQjtBQUFBLE1BQzFELFdBQVc7QUFBQSxNQUNYLGFBQWE7QUFBQSxNQUNiLFlBQVksQ0FBQyxxQkFBcUIsbUJBQW1CO0FBQUEsTUFDckQsVUFBVSxDQUFDLG9CQUFvQixXQUFXO0FBQUEsSUFDNUMsQ0FBQztBQUVELFVBQU0sYUFBYSxJQUFXLHdCQUFnQjtBQUM5QyxlQUNHLE1BQU0sRUFDTixpQkFBaUIsZUFBZSxFQUNoQyxPQUFPLEVBQ1AsZ0JBQWdCLHFCQUFxQixPQUFPLEVBQzVDLGdCQUFnQixxQkFBcUIsT0FBTztBQUUvQyxTQUFLLFlBQVksSUFBVyx3QkFBZ0IsU0FDMUMsS0FBSyxTQUNMLFdBQVcsT0FBTyxDQUNwQjtBQUVBLFNBQUssT0FBTyxPQUFPLE1BQU07QUFBQTtBQUFBLEVBRzNCLE1BQU0sQ0FBQyxPQUFlLFFBQWdCO0FBQ3BDLFNBQUssU0FBUztBQUNkLFNBQUssVUFBVTtBQUVmLFVBQU0sY0FBa0U7QUFBQSxNQUN0RSxFQUFFLEtBQUssQ0FBQyxLQUFLLFNBQVMsR0FBRyxLQUFLLFVBQVUsSUFBRyxDQUFFLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQUEsTUFDNUQsRUFBRSxLQUFLLENBQUMsS0FBSyxTQUFTLEdBQUcsS0FBSyxVQUFVLElBQUcsQ0FBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUFBLE1BQzVELEVBQUUsS0FBSyxDQUFDLEtBQUssU0FBUyxHQUFHLEtBQUssVUFBVSxJQUFHLENBQUUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFBQSxNQUM1RCxFQUFFLEtBQUssQ0FBQyxLQUFLLFNBQVMsR0FBRyxLQUFLLFVBQVUsSUFBRyxDQUFFLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQUEsSUFDOUQ7QUFFQSxVQUFNLFVBQVUsWUFDYixJQUFJLENBQUMsV0FBVztBQUNmLGFBQU87QUFBQSxRQUNMLE9BQU8sSUFBSTtBQUFBLFFBQ1gsT0FBTyxJQUFJO0FBQUEsUUFDWCxPQUFPLElBQUk7QUFBQSxRQUNYLE9BQU8sSUFBSTtBQUFBLFFBQ1gsT0FBTyxJQUFJO0FBQUEsTUFDYjtBQUFBLEtBQ0QsRUFDQSxLQUFLO0FBRVIsU0FBSyxVQUFVLGVBQWUsR0FBRyxTQUFTLFFBQVEsTUFBTTtBQUN4RCxTQUFLLFVBQVUsa0JBQWtCLFFBQVEsU0FBUyxDQUFDO0FBQUE7QUFBQSxFQUdyRCxLQUFLLENBQUMsZ0JBQWtDLFNBQWlDO0FBQ3ZFLFNBQUssUUFBUSxLQUFLLENBQUMsZ0JBQWdCO0FBQ2pDLGtCQUFZLGtCQUFrQixvQkFBb0IsY0FBYztBQUNoRSxrQkFBWSxrQkFBa0IsYUFBYSxTQUFTLENBQUM7QUFFckQsV0FBSyxVQUFVLE9BQU87QUFBQSxLQUN2QjtBQUFBO0FBRUw7OztBQ3RFTyxNQUFNLHNCQUFzQjtBQUFBLEVBQ3pCO0FBQUEsRUFDQTtBQUFBLEVBRVIsV0FBVyxDQUFDLE9BQWUsUUFBZ0I7QUFDekMsU0FBSyxpQkFBaUIsSUFBSSxjQUFjLE9BQU8sTUFBTTtBQUNyRCxTQUFLLG9CQUFvQixJQUFJLGlCQUFpQixPQUFPLE1BQU07QUFBQTtBQUFBLEVBRzdELE1BQU0sQ0FBQyxPQUFlLFFBQWdCO0FBQ3BDLFNBQUssZUFBZSxPQUFPLE9BQU8sTUFBTTtBQUN4QyxTQUFLLGtCQUFrQixPQUFPLE9BQU8sTUFBTTtBQUFBO0FBQUEsRUFHN0MsWUFBWSxDQUFDLGdCQUFrQztBQUM3QyxTQUFLLGVBQWUsYUFBYSxjQUFjO0FBQUE7QUFBQSxFQUdqRCxTQUFTLENBQUMsY0FBc0M7QUFDOUMsU0FBSyxrQkFBa0IsTUFDckIsY0FDQSxLQUFLLGVBQWUsWUFDdEI7QUFBQTtBQUVKOztBQzdCQSxJQUFlO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBa0JiLEtBQUs7OztBQ2xCUCxJQUFlO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFhYixLQUFLOzs7QUNUUCxJQUFNLGdCQUFlO0FBRWQ7QUFBQSxNQUFNLHdCQUF3QjtBQUFBLEVBQzNCO0FBQUEsRUFDQTtBQUFBLEVBRUEsVUFBVSxJQUFJLGFBQWEsYUFBWTtBQUFBLEVBQ3ZDLGVBQXVCO0FBQUEsRUFFL0IsV0FBVyxDQUNULFVBQ0EsZUFDQTtBQUNBLFNBQUssVUFBVTtBQUNmLFVBQU0sY0FBeUQ7QUFBQSxTQUMxRDtBQUFBLE1BQ0gsZUFBc0Isd0JBQWdCLGNBQWM7QUFBQSxJQUN0RDtBQUVBLFNBQUssWUFBWSxJQUFXLHdCQUFnQixTQUFTLFVBQVUsV0FBVztBQUFBO0FBQUEsRUFHNUUsUUFBUSxDQUNOLFVBQ0EsVUFDQSxTQUNBO0FBQ0EsUUFBSSxLQUFLLGVBQWUsTUFBUyxLQUFLLFFBQVEsUUFBUTtBQUNwRCxVQUFJLEtBQUssUUFBUSxRQUFRLEdBQUc7QUFDMUIsYUFBSyxNQUFNO0FBQUEsTUFDYixPQUFPO0FBQ0w7QUFBQTtBQUFBLElBRUo7QUFFQSxVQUFNLGFBQWEsUUFBUSxNQUFNO0FBRWpDLFNBQUssUUFBUSxLQUFLLGVBQWUsS0FBSyxTQUFTO0FBQy9DLFNBQUssUUFBUSxLQUFLLGVBQWUsS0FBSyxTQUFTO0FBQy9DLFNBQUssUUFBUSxLQUFLLGVBQWUsS0FBSyxTQUFTO0FBQy9DLFNBQUssUUFBUSxLQUFLLGVBQWUsS0FBSyxRQUFRO0FBQzlDLFNBQUssUUFBUSxLQUFLLGVBQWUsS0FBSyxRQUFRO0FBQzlDLFNBQUssUUFBUSxLQUFLLGVBQWUsS0FBSyxRQUFRO0FBQzlDLFNBQUssUUFBUSxLQUFLLGVBQWUsS0FBSztBQUN0QyxTQUFLLGdCQUFnQjtBQUVyQixTQUFLLFFBQVEsS0FBSyxlQUFlLEtBQUssU0FBUztBQUMvQyxTQUFLLFFBQVEsS0FBSyxlQUFlLEtBQUssU0FBUztBQUMvQyxTQUFLLFFBQVEsS0FBSyxlQUFlLEtBQUssU0FBUztBQUMvQyxTQUFLLFFBQVEsS0FBSyxlQUFlLEtBQUssUUFBUTtBQUM5QyxTQUFLLFFBQVEsS0FBSyxlQUFlLEtBQUssUUFBUTtBQUM5QyxTQUFLLFFBQVEsS0FBSyxlQUFlLEtBQUssUUFBUTtBQUM5QyxTQUFLLFFBQVEsS0FBSyxlQUFlLEtBQUs7QUFDdEMsU0FBSyxnQkFBZ0I7QUFBQTtBQUFBLEVBR3ZCLFNBQVMsR0FBRztBQUNWLFdBQU8sS0FBSyxlQUFlO0FBQUE7QUFBQSxFQUc3QixLQUFLLEdBQUc7QUFDTixTQUFLLEtBQUssVUFBVTtBQUFHO0FBRXZCLFNBQUssVUFBVSxlQUFlLEdBQUcsS0FBSyxTQUFTLEtBQUssWUFBWTtBQUNoRSxTQUFLLFVBQVUsa0JBQWtCLEtBQUssZUFBZSxDQUFDO0FBRXRELFNBQUssVUFBVSxPQUFPO0FBRXRCLFNBQUssTUFBTTtBQUFBO0FBQUEsRUFHYixLQUFLLEdBQVM7QUFFWixTQUFLLGVBQWU7QUFBQTtBQUV4Qjs7O0FDM0VBLElBQU0sZ0JBQWU7QUFFZDtBQUFBLE1BQU0sdUJBQXVCO0FBQUEsRUFDMUI7QUFBQSxFQUNBO0FBQUEsRUFFQSxVQUFVLElBQUksYUFBYSxhQUFZO0FBQUEsRUFDdkMsZUFBdUI7QUFBQSxFQUUvQixXQUFXLENBQ1QsVUFDQSxlQUNBO0FBQ0EsU0FBSyxVQUFVO0FBQ2YsVUFBTSxjQUF5RDtBQUFBLFNBQzFEO0FBQUEsTUFDSCxlQUFzQix3QkFBZ0IsY0FBYztBQUFBLElBQ3REO0FBRUEsU0FBSyxZQUFZLElBQVcsd0JBQWdCLFNBQVMsVUFBVSxXQUFXO0FBQUE7QUFBQSxFQUc1RSxZQUFZLENBQ1YsVUFDQSxVQUNBLFVBQ0EsU0FDQTtBQUNBLFFBQUksS0FBSyxlQUFlLE1BQVMsS0FBSyxRQUFRLFFBQVE7QUFDcEQsVUFBSSxLQUFLLFFBQVEsUUFBUSxHQUFHO0FBQzFCLGFBQUssTUFBTTtBQUFBLE1BQ2IsT0FBTztBQUNMO0FBQUE7QUFBQSxJQUVKO0FBRUEsVUFBTSxhQUFhLFFBQVEsTUFBTTtBQUdqQyxTQUFLLFFBQVEsS0FBSyxlQUFlLEtBQUssU0FBUztBQUMvQyxTQUFLLFFBQVEsS0FBSyxlQUFlLEtBQUssU0FBUztBQUMvQyxTQUFLLFFBQVEsS0FBSyxlQUFlLEtBQUssU0FBUztBQUMvQyxTQUFLLFFBQVEsS0FBSyxlQUFlLEtBQUssUUFBUTtBQUM5QyxTQUFLLFFBQVEsS0FBSyxlQUFlLEtBQUssUUFBUTtBQUM5QyxTQUFLLFFBQVEsS0FBSyxlQUFlLEtBQUssUUFBUTtBQUM5QyxTQUFLLFFBQVEsS0FBSyxlQUFlLEtBQUs7QUFDdEMsU0FBSyxnQkFBZ0I7QUFHckIsU0FBSyxRQUFRLEtBQUssZUFBZSxLQUFLLFNBQVM7QUFDL0MsU0FBSyxRQUFRLEtBQUssZUFBZSxLQUFLLFNBQVM7QUFDL0MsU0FBSyxRQUFRLEtBQUssZUFBZSxLQUFLLFNBQVM7QUFDL0MsU0FBSyxRQUFRLEtBQUssZUFBZSxLQUFLLFFBQVE7QUFDOUMsU0FBSyxRQUFRLEtBQUssZUFBZSxLQUFLLFFBQVE7QUFDOUMsU0FBSyxRQUFRLEtBQUssZUFBZSxLQUFLLFFBQVE7QUFDOUMsU0FBSyxRQUFRLEtBQUssZUFBZSxLQUFLO0FBQ3RDLFNBQUssZ0JBQWdCO0FBR3JCLFNBQUssUUFBUSxLQUFLLGVBQWUsS0FBSyxTQUFTO0FBQy9DLFNBQUssUUFBUSxLQUFLLGVBQWUsS0FBSyxTQUFTO0FBQy9DLFNBQUssUUFBUSxLQUFLLGVBQWUsS0FBSyxTQUFTO0FBQy9DLFNBQUssUUFBUSxLQUFLLGVBQWUsS0FBSyxRQUFRO0FBQzlDLFNBQUssUUFBUSxLQUFLLGVBQWUsS0FBSyxRQUFRO0FBQzlDLFNBQUssUUFBUSxLQUFLLGVBQWUsS0FBSyxRQUFRO0FBQzlDLFNBQUssUUFBUSxLQUFLLGVBQWUsS0FBSztBQUN0QyxTQUFLLGdCQUFnQjtBQUFBO0FBQUEsRUFHdkIsUUFBUSxDQUNOLFVBQ0EsVUFDQSxXQUNBLFNBQ0E7QUFDQSxRQUFJLEtBQUssZUFBZSxNQUFTLEtBQUssUUFBUSxRQUFRO0FBQ3BEO0FBQUEsSUFDRjtBQUVBLFVBQU0sUUFBUSxTQUFTLEtBQUssU0FBUztBQUNyQyxVQUFNLFFBQVEsU0FBUyxLQUFLLFNBQVM7QUFDckMsVUFBTSxTQUFRLEtBQUssTUFBTSxPQUFPLEtBQUssSUFBSSxLQUFLLEtBQUs7QUFFbkQsVUFBTSxRQUFRLEtBQUssSUFBSSxNQUFLLElBQUksWUFBWTtBQUM1QyxVQUFNLFFBQVEsS0FBSyxJQUFJLE1BQUssSUFBSSxZQUFZO0FBRTVDLFNBQUssYUFDSCxDQUFDLFNBQVMsS0FBSyxPQUFPLFNBQVMsS0FBSyxPQUFPLFNBQVMsRUFBRSxHQUN0RCxDQUFDLFNBQVMsS0FBSyxPQUFPLFNBQVMsS0FBSyxPQUFPLFNBQVMsRUFBRSxHQUN0RCxDQUFDLFNBQVMsS0FBSyxPQUFPLFNBQVMsS0FBSyxPQUFPLFNBQVMsRUFBRSxHQUN0RCxPQUNGO0FBQ0EsU0FBSyxhQUNILENBQUMsU0FBUyxLQUFLLE9BQU8sU0FBUyxLQUFLLE9BQU8sU0FBUyxFQUFFLEdBQ3RELENBQUMsU0FBUyxLQUFLLE9BQU8sU0FBUyxLQUFLLE9BQU8sU0FBUyxFQUFFLEdBQ3RELENBQUMsU0FBUyxLQUFLLE9BQU8sU0FBUyxLQUFLLE9BQU8sU0FBUyxFQUFFLEdBQ3RELE9BQ0Y7QUFBQTtBQUFBLEVBR0YsZUFBZSxDQUNiLFFBQ0EsUUFDQSxTQUNBLFdBQ0EsT0FDQTtBQUNBLFNBQUssU0FDSDtBQUFBLE1BQ0UsT0FBTyxLQUFLLFVBQVMsS0FBSyxJQUFJLE1BQUs7QUFBQSxNQUNuQyxPQUFPLEtBQUssVUFBUyxLQUFLLElBQUksTUFBSztBQUFBLE1BQ25DLE9BQU87QUFBQSxJQUNULEdBQ0E7QUFBQSxNQUNFLE9BQU8sS0FBSyxVQUFTLEtBQUssSUFBSSxNQUFLO0FBQUEsTUFDbkMsT0FBTyxLQUFLLFVBQVMsS0FBSyxJQUFJLE1BQUs7QUFBQSxNQUNuQyxPQUFPO0FBQUEsSUFDVCxHQUNBLFdBQ0EsS0FDRjtBQUFBO0FBQUEsRUFHRix3QkFBd0IsQ0FDdEIsVUFDQSxRQUNBLFNBQ0E7QUFDQSxRQUFJLEtBQUssZUFBZSxNQUFTLEtBQUssUUFBUSxRQUFRO0FBQ3BEO0FBQUEsSUFDRjtBQUVBLFVBQU0sV0FBNkI7QUFBQSxNQUNqQyxTQUFTLEtBQUssT0FBTztBQUFBLE1BQ3JCLFNBQVMsS0FBSyxPQUFPO0FBQUEsSUFDdkI7QUFFQSxTQUFLLGFBQ0gsQ0FBQyxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsRUFBRSxHQUN0QyxDQUFDLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxFQUFFLEdBQ3RDLENBQUMsU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLEVBQUUsR0FDdEMsT0FDRjtBQUVBLFNBQUssYUFDSCxDQUFDLFNBQVMsSUFBSSxTQUFTLElBQUksU0FBUyxFQUFFLEdBQ3RDLENBQUMsU0FBUyxJQUFJLFNBQVMsSUFBSSxTQUFTLEVBQUUsR0FDdEMsQ0FBQyxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsRUFBRSxHQUN0QyxPQUNGO0FBQUE7QUFBQSxFQUdGLHFCQUFxQixDQUNuQixVQUNBLFFBQ0EsU0FDQTtBQUNBLFVBQU0sU0FBMkI7QUFBQSxNQUMvQixTQUFTLEtBQUssT0FBTyxLQUFLO0FBQUEsTUFDMUIsU0FBUyxLQUFLLE9BQU8sS0FBSztBQUFBLE1BQzFCLFNBQVM7QUFBQSxJQUNYO0FBRUEsU0FBSyx5QkFBeUIsUUFBUSxRQUFRLE9BQU87QUFBQTtBQUFBLEVBR3ZELFNBQVMsR0FBRztBQUNWLFdBQU8sS0FBSyxlQUFlO0FBQUE7QUFBQSxFQUc3QixLQUFLLEdBQUc7QUFDTixTQUFLLEtBQUssVUFBVSxHQUFHO0FBQ3JCO0FBQUEsSUFDRjtBQUVBLFNBQUssVUFBVSxlQUFlLEdBQUcsS0FBSyxTQUFTLEtBQUssWUFBWTtBQUNoRSxTQUFLLFVBQVUsa0JBQWtCLEtBQUssZUFBZSxDQUFDO0FBRXRELFNBQUssVUFBVSxPQUFPO0FBRXRCLFNBQUssTUFBTTtBQUFBO0FBQUEsRUFHYixLQUFLLEdBQVM7QUFFWixTQUFLLGVBQWU7QUFBQTtBQUV4Qjs7O0FDekhPLE1BQU0sZUFBMEM7QUFBQSxFQUM3QztBQUFBLEVBRUE7QUFBQSxFQUNBO0FBQUEsRUFFUixXQUFXLEdBQUc7QUFDWixTQUFLLFVBQVUsSUFBVyxjQUFjLGtCQUFrQjtBQUFBLE1BQ3hELFdBQVc7QUFBQSxNQUNYLGFBQWE7QUFBQSxNQUNiLFlBQVksQ0FBQyxxQkFBcUIsZ0JBQWdCO0FBQUEsTUFDbEQsVUFBVSxDQUFDLGtCQUFrQjtBQUFBLElBQy9CLENBQUM7QUFFRCxVQUFNLGFBQWEsSUFBVyx3QkFBZ0I7QUFDOUMsZUFDRyxNQUFNLEVBQ04saUJBQWlCLE9BQU8sRUFDeEIsT0FBTyxFQUNQLGdCQUFnQixFQUNoQixnQkFBZ0IscUJBQXFCLE9BQU8sRUFDNUMsZ0JBQWdCLGtCQUFrQixPQUFPO0FBRTVDLFNBQUssMkJBQTJCLElBQUksd0JBQ2xDLEtBQUssU0FDTCxXQUFXLE9BQU8sQ0FDcEI7QUFDQSxTQUFLLDBCQUEwQixJQUFJLHVCQUNqQyxLQUFLLFNBQ0wsV0FBVyxPQUFPLENBQ3BCO0FBQUE7QUFBQSxFQUdGLFFBQVEsQ0FDTixVQUNBLFVBQ0EsU0FDQTtBQUNBLFNBQUsseUJBQXlCLFNBQVMsVUFBVSxVQUFVLE9BQU87QUFBQTtBQUFBLEVBR3BFLFNBQVMsQ0FDUCxVQUNBLFFBQ0EsU0FDQTtBQUNBLFVBQU0sZ0JBQW9DO0FBQUEsTUFDeEMsQ0FBQyxTQUFTLEtBQUssUUFBUSxTQUFTLElBQUksU0FBUyxFQUFFO0FBQUEsTUFDL0MsQ0FBQyxTQUFTLEtBQUssUUFBUSxTQUFTLElBQUksU0FBUyxFQUFFO0FBQUEsTUFDL0MsQ0FBQyxTQUFTLElBQUksU0FBUyxLQUFLLFFBQVEsU0FBUyxFQUFFO0FBQUEsTUFDL0MsQ0FBQyxTQUFTLElBQUksU0FBUyxLQUFLLFFBQVEsU0FBUyxFQUFFO0FBQUEsTUFDL0MsQ0FBQyxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsS0FBSyxNQUFNO0FBQUEsTUFDL0MsQ0FBQyxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsS0FBSyxNQUFNO0FBQUEsSUFDakQ7QUFDQSxVQUFNLGVBQXlCLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFFaEQsYUFBUyxLQUFLLEVBQUcsS0FBSyxhQUFhLFFBQVEsTUFBTSxHQUFHO0FBQ2xELFlBQU0sVUFBVSxjQUFjLEtBQUs7QUFDbkMsWUFBTSxVQUFVLGNBQWMsS0FBSztBQUNuQyxXQUFLLHlCQUF5QixTQUFTLFNBQVMsU0FBUyxPQUFPO0FBQUEsSUFDbEU7QUFBQTtBQUFBLEVBR0YsYUFBYSxDQUNYLFVBQ0EsVUFDQSxXQUNBLFNBQ0E7QUFDQSxTQUFLLHdCQUF3QixTQUMzQixVQUNBLFVBQ0EsV0FDQSxPQUNGO0FBQUE7QUFBQSxFQUdGLGVBQWUsQ0FDYixRQUNBLFFBQ0EsU0FDQSxXQUNBLE9BQ0E7QUFDQSxTQUFLLHdCQUF3QixnQkFDM0IsUUFDQSxRQUNBLFNBQ0EsV0FDQSxLQUNGO0FBQUE7QUFBQSxFQUdGLHdCQUF3QixDQUN0QixVQUNBLFFBQ0EsU0FDQTtBQUNBLFNBQUssd0JBQXdCLHlCQUMzQixVQUNBLFFBQ0EsT0FDRjtBQUFBO0FBQUEsRUFHRixxQkFBcUIsQ0FDbkIsVUFDQSxRQUNBLFNBQ0E7QUFDQSxTQUFLLHdCQUF3QixzQkFDM0IsVUFDQSxRQUNBLE9BQ0Y7QUFBQTtBQUFBLEVBR0YsWUFBWSxDQUNWLFFBQ0EsUUFDQSxRQUNBLFNBQ0E7QUFDQSxTQUFLLHdCQUF3QixhQUFhLFFBQVEsUUFBUSxRQUFRLE9BQU87QUFBQTtBQUFBLEVBRzNFLFFBQVEsQ0FDTixPQUNBLFFBQ0EsU0FDQTtBQUNBLFNBQUssYUFDSCxDQUFDLE1BQU0sS0FBSyxPQUFPLEtBQUssR0FBRyxNQUFNLEtBQUssT0FBTyxLQUFLLEdBQUcsTUFBTSxFQUFFLEdBQzdELENBQUMsTUFBTSxLQUFLLE9BQU8sS0FBSyxHQUFHLE1BQU0sS0FBSyxPQUFPLEtBQUssR0FBRyxNQUFNLEVBQUUsR0FDN0QsQ0FBQyxNQUFNLEtBQUssT0FBTyxLQUFLLEdBQUcsTUFBTSxLQUFLLE9BQU8sS0FBSyxHQUFHLE1BQU0sRUFBRSxHQUM3RCxPQUNGO0FBQ0EsU0FBSyxhQUNILENBQUMsTUFBTSxLQUFLLE9BQU8sS0FBSyxHQUFHLE1BQU0sS0FBSyxPQUFPLEtBQUssR0FBRyxNQUFNLEVBQUUsR0FDN0QsQ0FBQyxNQUFNLEtBQUssT0FBTyxLQUFLLEdBQUcsTUFBTSxLQUFLLE9BQU8sS0FBSyxHQUFHLE1BQU0sRUFBRSxHQUM3RCxDQUFDLE1BQU0sS0FBSyxPQUFPLEtBQUssR0FBRyxNQUFNLEtBQUssT0FBTyxLQUFLLEdBQUcsTUFBTSxFQUFFLEdBQzdELE9BQ0Y7QUFBQTtBQUFBLEVBR0YsS0FBSyxDQUFDLGtCQUFvQztBQUN4QyxTQUNHLEtBQUsseUJBQXlCLFVBQVUsTUFDeEMsS0FBSyx3QkFBd0IsVUFBVSxHQUN4QztBQUNBO0FBQUEsSUFDRjtBQUVBLFNBQUssUUFBUSxLQUFLLENBQUMsVUFBVTtBQUMzQixZQUFNLGtCQUFrQixvQkFBb0IsZ0JBQWdCO0FBRTVELFdBQUsseUJBQXlCLE1BQU07QUFDcEMsV0FBSyx3QkFBd0IsTUFBTTtBQUFBLEtBQ3BDO0FBQUE7QUFBQSxFQUdILFVBQVUsQ0FBQyxrQkFBb0MsWUFBd0I7QUFDckUsU0FBSyxRQUFRLEtBQUssQ0FBQyxVQUFVO0FBQzNCLFlBQU0sa0JBQWtCLG9CQUFvQixnQkFBZ0I7QUFFNUQsaUJBQVc7QUFFWCxXQUFLLHlCQUF5QixNQUFNO0FBQ3BDLFdBQUssd0JBQXdCLE1BQU07QUFBQSxLQUNwQztBQUFBO0FBQUEsRUFHSCxLQUFLLEdBQVM7QUFDWixTQUFLLHlCQUF5QixNQUFNO0FBQ3BDLFNBQUssd0JBQXdCLE1BQU07QUFBQTtBQUV2Qzs7QUN0UEEsSUFBZTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUEwQmIsS0FBSzs7O0FDMUJQLElBQWU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUF3QmIsS0FBSzs7O0FDeEJBLElBQU0sa0JBQ1g7OztBQ1lGLElBQU0sYUFBK0IsQ0FBQyxJQUFJLENBQUM7QUFDM0MsSUFBTSxhQUErQixDQUFDLElBQUksV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFO0FBRTFFLElBQU0sZ0JBQWU7QUFtQmQ7QUFBQSxNQUFNLGFBQXNDO0FBQUEsRUFDekM7QUFBQSxFQUNBO0FBQUEsRUFDQSxXQUFtQyxJQUFXO0FBQUEsRUFDOUM7QUFBQSxFQUVBLFVBQVUsSUFBSSxhQUFhLGFBQVk7QUFBQSxFQUN2QyxlQUF1QjtBQUFBLEVBRXZCLGFBQXFCO0FBQUEsRUFDckIsYUFBdUIsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUFBLEVBRS9CLHVCQUE0QztBQUFBLEVBQzVDLHFCQUF3QztBQUFBLEVBRWhELFdBQVcsR0FBRztBQUNaLFNBQUssVUFBVSxJQUFXLGNBQWMsZ0JBQWdCO0FBQUEsTUFDdEQsV0FBVztBQUFBLE1BQ1gsYUFBYTtBQUFBLE1BQ2IsWUFBWTtBQUFBLFFBQ1Y7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLE1BQ0Y7QUFBQSxNQUNBLFVBQVUsQ0FBQyxvQkFBb0IsV0FBVztBQUFBLElBQzVDLENBQUM7QUFFRCxVQUFNLGFBQWEsSUFBVyx3QkFBZ0I7QUFDOUMsZUFDRyxNQUFNLEVBQ04saUJBQWlCLFdBQVcsRUFDNUIsT0FBTyxFQUNQLGdCQUFnQixxQkFBcUIsT0FBTyxFQUM1QyxnQkFBZ0IscUJBQXFCLE9BQU8sRUFDNUMsVUFBVSxFQUFLLEVBQ2YsT0FBTyxFQUNQLGdCQUFnQixFQUNoQixrQkFBa0IsRUFDbEIsZ0JBQWdCLHFCQUFxQixPQUFPLEVBQzVDLGdCQUFnQixxQkFBcUIsT0FBTyxFQUM1QyxnQkFBZ0Isa0JBQWtCLE9BQU8sRUFDekMsZ0JBQWdCLGtCQUFrQixPQUFPLEVBQ3pDLFVBQVUsRUFBSztBQUVsQixTQUFLLFlBQVksSUFBVyx3QkFBZ0IsU0FDMUMsS0FBSyxTQUNMLFdBQVcsT0FBTyxDQUNwQjtBQUlBLFVBQU0sV0FBNkM7QUFBQSxNQUNqRDtBQUFBLFFBQ0UsVUFBVSxDQUFDLE1BQU0sR0FBSTtBQUFBLFFBQ3JCLFVBQVUsQ0FBQyxXQUFXLEtBQUssR0FBRyxXQUFXLEtBQUssQ0FBQztBQUFBLE1BQ2pEO0FBQUEsTUFDQTtBQUFBLFFBQ0UsVUFBVSxFQUFDLE1BQU0sR0FBSTtBQUFBLFFBQ3JCLFVBQVUsQ0FBQyxXQUFXLEtBQUssR0FBRyxXQUFXLEtBQUssQ0FBQztBQUFBLE1BQ2pEO0FBQUEsTUFDQTtBQUFBLFFBQ0UsVUFBVSxDQUFDLEtBQU0sR0FBSTtBQUFBLFFBQ3JCLFVBQVUsQ0FBQyxXQUFXLEtBQUssR0FBRyxXQUFXLEtBQUssQ0FBQztBQUFBLE1BQ2pEO0FBQUEsTUFDQTtBQUFBLFFBQ0UsVUFBVSxFQUFDLEtBQU0sR0FBSTtBQUFBLFFBQ3JCLFVBQVUsQ0FBQyxXQUFXLEtBQUssR0FBRyxXQUFXLEtBQUssQ0FBQztBQUFBLE1BQ2pEO0FBQUEsSUFDRjtBQUVBLFVBQU0sVUFBVSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBRWpDLFVBQU0saUJBQTJCLENBQUM7QUFDbEMsZUFBVyxTQUFTLFNBQVM7QUFDM0IsWUFBTSxTQUFTLFNBQVM7QUFDeEIscUJBQWUsS0FDYixPQUFPLFNBQVMsSUFDaEIsT0FBTyxTQUFTLElBQ2hCLE9BQU8sU0FBUyxJQUNoQixPQUFPLFNBQVMsRUFDbEI7QUFBQSxJQUNGO0FBRUEsU0FBSyxVQUFVLGVBQWUsR0FBRyxnQkFBZ0IsZUFBZSxNQUFNO0FBQ3RFLFNBQUssVUFBVSxrQkFBa0IsZUFBZSxTQUFTLENBQUM7QUFFMUQsU0FBSyxlQUFlLElBQUksSUFBOEI7QUFBQSxNQUNwRCxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDNUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzVDLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM1QyxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDNUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzVDLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM1QyxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDNUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzVDLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM1QyxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDNUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzdDLENBQUMsS0FBSyxDQUFDLEtBQUssV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM3QyxDQUFDLEtBQUssQ0FBQyxLQUFLLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDN0MsQ0FBQyxLQUFLLENBQUMsS0FBSyxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzdDLENBQUMsS0FBSyxDQUFDLEtBQUssV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM3QyxDQUFDLEtBQUssQ0FBQyxLQUFLLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFFN0MsQ0FBQyxLQUFLLENBQUMsSUFBSSxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzVDLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM1QyxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDNUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzVDLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM1QyxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDNUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzVDLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM1QyxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDNUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzVDLENBQUMsS0FBSyxDQUFDLEtBQUssV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM3QyxDQUFDLEtBQUssQ0FBQyxLQUFLLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDN0MsQ0FBQyxLQUFLLENBQUMsS0FBSyxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzdDLENBQUMsS0FBSyxDQUFDLEtBQUssV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM3QyxDQUFDLEtBQUssQ0FBQyxLQUFLLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDN0MsQ0FBQyxLQUFLLENBQUMsS0FBSyxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BRTdDLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM1QyxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDNUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzVDLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM1QyxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDNUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzVDLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM1QyxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDNUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzVDLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM1QyxDQUFDLEtBQUssQ0FBQyxLQUFLLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDN0MsQ0FBQyxLQUFLLENBQUMsS0FBSyxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzdDLENBQUMsS0FBSyxDQUFDLEtBQUssV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM3QyxDQUFDLEtBQUssQ0FBQyxLQUFLLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDN0MsQ0FBQyxLQUFLLENBQUMsS0FBSyxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzdDLENBQUMsS0FBSyxDQUFDLEtBQUssV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUU3QyxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDNUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzVDLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM1QyxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDNUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzVDLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM1QyxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDNUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzVDLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM1QyxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDNUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzdDLENBQUMsS0FBSyxDQUFDLEtBQUssV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM3QyxDQUFDLE1BQU0sQ0FBQyxLQUFLLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDOUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzdDLENBQUMsS0FBSyxDQUFDLEtBQUssV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM3QyxDQUFDLEtBQUssQ0FBQyxLQUFLLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFFN0MsQ0FBQyxLQUFLLENBQUMsSUFBSSxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzVDLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM1QyxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDNUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzVDLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM1QyxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDNUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzVDLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM1QyxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDNUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzVDLENBQUMsS0FBSyxDQUFDLEtBQUssV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM3QyxDQUFDLEtBQUssQ0FBQyxLQUFLLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDN0MsQ0FBQyxLQUFLLENBQUMsS0FBSyxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzdDLENBQUMsS0FBSyxDQUFDLEtBQUssV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM3QyxDQUFDLEtBQUssQ0FBQyxLQUFLLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDN0MsQ0FBQyxLQUFLLENBQUMsS0FBSyxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BRTdDLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM1QyxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDNUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzVDLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM1QyxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDNUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzVDLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM1QyxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDNUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzVDLENBQUMsS0FBSyxDQUFDLElBQUksV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM1QyxDQUFDLEtBQUssQ0FBQyxLQUFLLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDN0MsQ0FBQyxLQUFLLENBQUMsS0FBSyxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLE1BQzdDLENBQUMsS0FBSyxDQUFDLEtBQUssV0FBVyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7QUFBQSxNQUM3QyxDQUFDLEtBQUssQ0FBQyxLQUFLLFdBQVcsSUFBSSxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQUEsTUFDN0MsQ0FBQyxLQUFLLENBQUMsS0FBSyxXQUFXLElBQUksSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUFBLElBQy9DLENBQUM7QUFFRCxVQUFNLFFBQVE7QUFDZCxVQUFNLFNBQVM7QUFDZixVQUFNLGNBQWMsSUFBSSxXQUFXLFFBQVEsU0FBUyxDQUFDO0FB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QUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQW9zQmIsS0FBSzs7O0FDcHNCUCxJQUFlO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFnQmIsS0FBSzs7O0FDaEJQLElBQWU7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtB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b0MsbUJBQW1CO0FBQ3pELFFBQU0sa0JBQWtCLGlCQUN0Qix1QkFDRjtBQUNBLFFBQU0sYUFBYSxpQkFBbUMsYUFBYTtBQUNuRSxRQUFNLHdCQUF3QixpQkFDNUIsd0JBQ0Y7QUFDQSxRQUFNLHFCQUFxQixpQkFDekIscUJBQ0Y7QUFDQSxRQUFNLFlBQVksaUJBQXVDLGFBQWE7QUFNdEUsUUFBTSxlQUFlLENBQUMsUUFBaUM7QUFDckQsU0FBSyxVQUFVO0FBQ2I7QUFBQSxJQUNGO0FBRUEsWUFBUSxJQUFJLGVBQWUsR0FBRztBQUU5QixRQUFJO0FBRUYsZUFBUyxLQUFLO0FBQUEsYUFDUCxNQUFQO0FBQUE7QUFDRixlQUFXO0FBR1gsbUJBQU8sUUFBUSxzQkFBc0IsV0FBVztBQUNoRCxtQkFBTyxRQUFRLG1CQUFtQixXQUFXLGFBQWE7QUFDMUQsbUJBQU8sUUFBUSxtQkFBbUIsV0FBVyxhQUFhO0FBQzFELG1CQUFPLFFBQVEsd0JBQXdCLG1CQUFtQjtBQUMxRCxtQkFBTyxRQUFRLHlCQUF5QixtQkFBbUI7QUFDM0QsbUJBQU8sUUFBUSx3QkFBd0IsbUJBQW1CO0FBQzFELG1CQUFPLFFBQVEsd0JBQXdCLFdBQVc7QUFHbEQsY0FBVSxNQUFNLFFBQVE7QUFDeEIsY0FBVSxNQUFNLFNBQVM7QUFDekIsY0FBVSxZQUFZLElBQUk7QUFHMUIsa0JBQWMsTUFBTSxVQUFVO0FBQzlCLGNBQVUsTUFBTSxVQUFVO0FBRzFCLG9CQUFnQixXQUFXO0FBQzNCLGVBQVcsTUFBTSxXQUFXLE1BQU0sV0FBVyxRQUFRO0FBQ3JELDBCQUFzQixXQUFXO0FBQ2pDLHVCQUFtQixXQUFXO0FBRTlCLGFBQVMsU0FBUztBQUFBO0FBRXBCLFNBQU8saUJBQWlCLFNBQVMsWUFBWTtBQU03QyxPQUFLLGVBQU8sUUFBUSxrQkFBa0IsR0FBRztBQUN2QyxVQUFNLElBQUksTUFBTSxzQ0FBc0M7QUFBQSxFQUN4RDtBQU1BLGFBQVcsSUFBSSxXQUFXO0FBQUEsSUFDeEI7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLEVBQ0YsQ0FBQztBQUVELFNBQU8sSUFBSSw0QkFBNEI7QUFFdkMsUUFBTSxTQUFTLEtBQUs7QUFFcEIsU0FBTyxJQUFJLDJCQUEyQjtBQUV0QyxXQUFTLE1BQU07QUFFZixTQUFPLElBQUksdUJBQXVCO0FBTWxDLFFBQU0sdUJBQXVCO0FBQzdCLEVBQVUsa0JBQWtCLHNCQUFzQixNQUFNO0FBQ3RELFVBQU0sSUFBSSxNQUNSLDBFQUNGO0FBQUEsR0FDRDtBQUFBO0FBR0gsT0FBTyxpQkFBaUIsUUFBUSxZQUFZLEtBQUs7IiwKICAiZGVidWdJZCI6ICI4NUQ3OTZGRkU1MzgzREQyNjQ3NTZlMjE2NDc1NmUyMSIsCiAgIm5hbWVzIjogW10KfQ==
